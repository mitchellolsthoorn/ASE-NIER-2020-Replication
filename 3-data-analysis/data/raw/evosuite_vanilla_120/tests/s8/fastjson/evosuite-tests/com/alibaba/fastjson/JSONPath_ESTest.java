/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 18:17:08 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.chrono.MinguoDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      boolean boolean0 = JSONPath.eqNotNull(byte0, (-1580386065683472715L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("g lfkxh[z|?{", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(5, (-1813), 5);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, "N-VWbxZd%\"\"jnPoV-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -362
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(80, (byte)0, 404);
      Integer integer0 = new Integer(80);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, integer0, "fastjson");
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/6");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(3, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Q\"Z+h([6y,@a]<q");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'Q'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("deserialzeArrayMapping");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'd, but 'g'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{r(J.");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$k)9Ddi\"UwTY[x");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9wt4\fz=NC7!j%");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(9L, object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0*~SJ=xC");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")G)*K BA!We45UP");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("dZ");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$k)9Ddi\"UwTY[x");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("DOq~$emO", 498516599617196836L, 1537772293818342228L, false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntBetweenSegement0);
      assertSame(jSONPath_IntBetweenSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$k)9Ddi\"UwTY[x");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $k)9Ddi\"UwTY[x
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8Vz");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^c4>3");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("alibaba");
      jSONPath0.init();
      assertEquals("alibaba", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("jBD5Db@b", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, (Object) null, parserConfig0);
      assertEquals(9, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LE");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('%');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("T");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('G');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'G, but 'T'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":4u50pnvgJ");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(116);
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath_Operator0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte)0, 2, 2);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, byte0, "(N*P3|?7W");
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LI^KE");
      jSONPath0.init();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")7Cx7}");
      jSONPath_JSONPathParser0.next();
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(1570L);
      assertEquals(1577.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Double> class0 = Double.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Set<?> set0 = JSONPath.keySet((Object) throwableDeserializer0, "enum");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(5, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("(=xmW~L8", serializeConfig0, parserConfig0);
      String string0 = jSONPath0.toJSONString();
      assertEquals("\"(=xmW~L8\"", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      int int0 = JSONPath.size((Object) sQLWarning0, "/stackTrace/10");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      JSONPath jSONPath0 = JSONPath.compile("-");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1392510721);
      boolean boolean0 = jSONPath0.setPropertyValue(jSONPath_ArrayAccessSegment0, "-", 1392510721, jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      Integer integer0 = new Integer((-123008));
      boolean boolean0 = jSONPath0.set((Object) integer0, (Object) "LIKE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = JSONPath.read("+", "between");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      int int0 = JSONPath.size((Object) map0, "fastjson.parser.safeMode");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) "unsuppoted set operation", "/");
      assertFalse(set0.contains("unsuppoted set operation"));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      Set<?> set0 = jSONPath0.keySet((Object) "[");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      Object object0 = jSONPath0.getPropertyValue((Object) null, "[", (-8L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      Class<Long> class0 = Long.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^c4>3");
      Object object0 = jSONPath0.getArrayItem((Object) null, 0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("T/4{1dv`;7wda5x^@", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = (JSONPath)jSONPath0.getArrayItem(jSONPath0, 0);
      assertEquals("T/4{1dv`;7wda5x^@", jSONPath1.getPath());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[6];
      Object object0 = JSONPath.extract("]C\"rmZRlT>QC1W0;*T", "getConstructors", parserConfig0, (-2038), featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(6607618197526598121L);
      longArray0[1] = long0;
      JSONPath jSONPath0 = new JSONPath("9lT]yQ|");
      int int0 = jSONPath0.evalSize(longArray0[1]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(";Ljava/lang/reflect/Type;)Ljava/lang/Object;");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      int int0 = jSONPath0.evalSize(sQLIntegrityConstraintViolationException0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath jSONPath0 = new JSONPath("GP8|fB");
      int int0 = jSONPath0.evalSize(jSONPath_Operator0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("B(15Kfs[+4", false);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_PropertySegment0);
      assertFalse(set0.contains("fastjson.parser.deny"));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("UseObjectArray");
      Set<?> set0 = jSONPath0.evalKeySet("UseObjectArray");
      assertFalse(set0.contains("UseObjectArray"));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JSONPath.eval(object0, "fastjson.parser.autoTypeSupport");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[", "co!+^NWE", hashMap0, sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("rlike", intArray0, sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)jSONPath0.eval((Object) batchUpdateException0);
      assertEquals(0, batchUpdateException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/stackTrace/9", "ZDi");
      boolean boolean0 = JSONPath.containsValue((Object) sQLSyntaxErrorException0, "LE", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = JSONPath.compare("jsonpath can not be null", "d7Wa[(");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = JSONPath.compare("*5mBgu`T|r\"yj", "D_JUSTge\"bp:fY781");
      assertEquals((-26), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Class<MockCalendar> class0 = MockCalendar.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) javaBeanSerializer0, "NOT_RLIKE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("scan null error");
      // Undeclared exception!
      jSONPath0.setPropertyValue(jSONPath0, "EnBk8xO+", 8963398325558730460L, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", serializeConfig0, parserConfig0);
      Byte byte0 = new Byte((byte)2);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue("GP8|fB", "r", 2085L, byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("13)qZ4[", serializeConfig0, (ParserConfig) null);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_MultiIndexSegment0, "R./uP`z=v'vaTnm", (-853L), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("java.util.Collections$UnmodifiableMap", true);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 0, jSONPath_PropertySegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_WildCardSegment0, "RLIKE", (Object) jSONPath_SizeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      JSONPath.set((Object) bigInteger0, "com.alibaba.fastjson.JSONPath$PropertySegment", (Object) byte0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double double0 = new Double((-0.23806003672804982));
      // Undeclared exception!
      try { 
        JSONPath.set((Object) double0, "3", (Object) "GT");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("D_JUSTge\"bp:fY781", "D_JUSTge\"bp:fY781", 46);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLTimeoutException0, "java.beans.Transient", (Object) jSONPath_SizeSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      Double double0 = new Double(4864.429134784455);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "jBETJH>4CzcpkO", (Object) double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.Duration");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_IN");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) jSONPath_WildCardSegment0, false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("null");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) "unsupported set operation.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("=om.ali^aba.fastjson.JSONPath$PropertySegment");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "=om.ali^aba.fastjson.JSONPath$PropertySegment", (Object) "=om.ali^aba.fastjson.JSONPath$PropertySegment");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-12));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$Y";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(byte0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("GP8|fB");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_WildCardSegment0, "(vi", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      // Undeclared exception!
      jSONPath0.removePropertyValue(jSONPath0, "5^tpEY*&O", true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Z kPtcg>mcD^?5^o~!");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "Z kPtcg>mcD^?5^o~!", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.serializer_buffer_threshold");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem((JSONPath) null, (Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("f-!>|[ ");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "EOF");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("alibaba", "`I~OFTN]`p");
      JSONPath.remove((Object) sQLDataException0, "[short");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "D!/d^^V(@+H_gFlxhS", "['");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "5^tpEY*&O", "/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "lo]t?2a", "lo]t?2a");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[_ZVz>");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) propertyNamingStrategy0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("/cause/stackTrace/1", "/");
      JSONPath jSONPath0 = JSONPath.compile("/");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Z`r.aY gL^kHSz7mN1P", sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("Zyq8?<vbG|!K Aq+6", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2Zyq8?<vbG|!K Aq+6
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[<");
      Set<?> set0 = jSONPath0.keySet((Object) "[<");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/6");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Y&U)Qqb");
      MinguoDate minguoDate0 = MockMinguoDate.now();
      jSONPath0.keySet((Object) minguoDate0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Rzlf [");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("scan null error");
      jSONPath0.isRef();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[_ZVz>");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[<");
      jSONPath0.init();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("j");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("lcTmAsFk/JI[%[", serializeConfig0, parserConfig0);
      Class<JSONValidator.Type>[] classArray0 = (Class<JSONValidator.Type>[]) Array.newInstance(Class.class, 8);
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = classArray0[1];
      classArray0[3] = classArray0[2];
      classArray0[4] = classArray0[0];
      classArray0[5] = classArray0[3];
      classArray0[6] = class0;
      classArray0[7] = classArray0[3];
      serializeConfig0.configEnumAsJavaBean(classArray0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(parserConfig0, "fastjson.parser.safeMode", 272L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.parser.ParserConfig
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("B(15Kfs[+4", (SerializeConfig) null, parserConfig0);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-{rV)+p");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("rlike");
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+\"|LWJ/X(@x5n", (SerializeConfig) null, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("+\"|LWJ/X(@x5n", (-1375));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.deny.internal", "sA.$y$nG6`3", parserConfig0, (-1), (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSONPath.extract(".000000", "LT", parserConfig0, (-1), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // .
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("(I)", "[<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2(I)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "AM9-%0x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":4u50pnvgJ");
      Class<Byte> class0 = Byte.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.ASMSerializer_259_Byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Bs0U_PA,", (SerializeConfig) null, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize("Bs0U_PA,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("LIKE");
      sQLWarning0.setNextException(sQLTimeoutException0);
      SerializeConfig serializeConfig0 = new SerializeConfig(5, false);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9", serializeConfig0, ParserConfig.global);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // evalKeySet error : /stackTrace/9
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) class0, "LE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[4];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Object object0 = JSONPath.eval((Object) jSONPath_MultiIndexSegment0, "[_ZVz>");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("NOT_IN");
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("NOT_IN");
      Byte byte0 = new Byte((byte)15);
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_NullSegement0, byte0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath1.eval(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")G)*K BA!We45UP");
      JSONPath jSONPath0 = new JSONPath(")G)*K BA!We45UP");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath_JSONPathParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. )G)*K BA!We45UP
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_WildCardSegment0, "/stackTrace/6", (-369), (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "`r[-`dKXF[uV7EIA", 4389238039309364973L, javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      Class<Short> class0 = Short.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(javaBeanSerializer0, "Q{[2\"x*G.u|g", (-748L), "Q{[2\"x*G.u|g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.serializer.ASMSerializer_258_Short
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONPath jSONPath0 = new JSONPath("rlike", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("LIKE");
      sQLWarning0.setNextException(sQLTimeoutException0);
      int[] intArray0 = new int[6];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba,fastjson.JSONPath$PropertySegmxnt", intArray0, sQLWarning0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLRecoverableException0, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /stackTrace/9
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Class<Short> class0 = Short.class;
      String[] stringArray0 = new String[1];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) javaBeanSerializer0, "Kp.9|j~`V7`}c|[;", (Object) mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double double0 = new Double(220.074339152);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) "null", "null", (Object) double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9D Uh");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) jSONPath_WildCardSegment0, (Object) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 9D Uh
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLException sQLException0 = new SQLException("D_JUSTge\"bp:fY781", "T*XTX0qtB");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.time.Duration", "T*XTX0qtB", sQLException0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLTransactionRollbackException0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("+AHeKa|h#RU", "DS");
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLInvalidAuthorizationSpecException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Float float0 = new Float((-2426.6406F));
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("RuuHTdc[Z$.1TM%5`h");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLDataException0, "RuuHTdc[Z$.1TM%5`h", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(";F$BBf0*");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("W<ME", "W<ME", 1091);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLTransientConnectionException0, ";F$BBf0*", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%88~Vdz>4y");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("unsuppoted set operation", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^c4>3");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem((JSONPath) null, "^c4>3", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("lTPtw>8g:,vN");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("OBP8>M4\"F9`o*54WGB");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, "lTPtw>8g:,vN", 652, sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("jBD5Db@b", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, parserConfig0, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[%}IS%V&=H");
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46, 46);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%iRs*5u(.U5Pt");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("b[bc", hashMap0);
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = jSONPath0.set((Object) sQLClientInfoException0, (Object) uUID0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Bs0U_PA,", "Bs0U_PA,", 1488);
      SQLWarning sQLWarning0 = new SQLWarning("/cause/stackTrace/10", sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLWarning0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) ParserConfig.global, (Object) sQLFeatureNotSupportedException0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Bs0U_PA,");
      Byte byte0 = new Byte((byte)9);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      boolean boolean0 = jSONPath0.set((Object) byte0, (Object) sQLIntegrityConstraintViolationException0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) jSONPath_JSONPathParser0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("T");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.Duration");
      SQLException sQLException0 = new SQLException("D_JUSTge\"bp:fY781", "T*XTX0qtB");
      boolean boolean0 = jSONPath0.remove((Object) sQLException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("scan null error");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("size");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "size", (Object[]) jSONPath_SegmentArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[", hashMap0);
      jSONPath0.arrayAdd((Object) sQLClientInfoException0, (Object[]) null);
      assertEquals("java.sql.SQLClientInfoException: [", sQLClientInfoException0.toString());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      Double double0 = new Double(462L);
      SQLDataException sQLDataException0 = new SQLDataException();
      boolean boolean0 = jSONPath0.containsValue((Object) double0, (Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      boolean boolean0 = jSONPath0.containsValue((Object) bigDecimal0, (Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Bs0U_PA,", "Bs0U_PA,", 1488);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.autoTypeAccept", sQLTransientConnectionException0);
      boolean boolean0 = jSONPath0.contains((Object) sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      Short short0 = new Short((short)92);
      boolean boolean0 = jSONPath0.contains((Object) short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_IN");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("oI{V%C(ZEJ(A-<1");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      jSONPath0.contains((Object) sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/3");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("e=l", parserConfig0, (-36787060));
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 57);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")G)*K3BA!We45UP", parserConfig0, 498);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2)G)*K3BA!We45UP
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("<b4~+w}_j");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<b4~+w}_j");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("scan null error");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/10", false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2203, (-1), (-1));
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1534);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("5^tpEY*&O", "com.alibaba.fastjson.JSONPath$PropertySegment", (-1703), hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, byte0, sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSONPath.extract("hasPropertyFilters", "n\"M_:yA[dD@B", parserConfig0, 2133, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2hasPropertyFilters
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "n";
      stringArray0[1] = "Bs0U_PA,";
      stringArray0[2] = "/cause/stackTrace/8";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("Bs0U_PA,", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fastjson.parser.deny";
      stringArray0[1] = "fastjson.parser.deny.internal";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("N#;;GJ2fQI", stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject("fastjson.parser.safeMode", (String[]) null);
      assertEquals("fastjson.parser.safeMode", object0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "UseObjectArray";
      stringArray0[1] = "UseObjectArray";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray((Object) null, stringArray0);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_IN");
      String[] stringArray0 = new String[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = JSONPath.reserveToArray(bigDecimal0, stringArray0);
      Set<?> set0 = jSONPath0.evalKeySet(object0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".000000");
      MockDate mockDate0 = new MockDate();
      int int0 = jSONPath0.size((Object) mockDate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(102, 50900, 120);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("8W>Lg;&eArlFw/v", clientInfoStatus0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "lemur", hashMap0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      int int0 = jSONPath0.size((Object) sQLIntegrityConstraintViolationException0);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$FilterSegment", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue("N-VWbxZd%\"\"jnPoV-", "fastjson.parser.deny", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/10", false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2203, (-1), (-1));
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_MultiIndexSegment0, jSONPath_MultiIndexSegment0);
      Long long0 = new Long((-1580386065683472715L));
      jSONPath_PropertySegment0.setValue(jSONPath0, arrayList0, long0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/3");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/cause/stackTrace/3";
      stringArray0[1] = "/cause/stackTrace/3";
      stringArray0[2] = "/cause/stackTrace/3";
      stringArray0[3] = "/cause/stackTrace/3";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      int[] intArray0 = new int[7];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "/cause/stackTrace/3", jSONPath_MultiIndexSegment0);
      jSONPath0.deepSet(arrayList0, "/cause/stackTrace/3", 386461436234701831L, "/cause/stackTrace/3");
      assertEquals(4, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("zT", serializeConfig0, parserConfig0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("zT", "fastjson.parser.autoTypeSupport");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLFeatureNotSupportedException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("a0|a`{xxL<b.KiwTE$");
      jSONPath0.deepSet(sQLClientInfoException0, "!}IFWSSV=YLrYH:B7*", (-748L), sQLNonTransientConnectionException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      serializeConfig0.clearSerializers();
      Map<String, Object> map0 = JSONPath.paths((Object) sQLFeatureNotSupportedException0, serializeConfig0);
      JSONPath jSONPath0 = new JSONPath("*;(ecT*Q17zC:");
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepScan(map0, "*;(ecT*Q17zC:", vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(80, map0.size());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) sQLFeatureNotSupportedException0, serializeConfig0);
      JSONPath jSONPath0 = new JSONPath("*;(ecT*Q17zC:");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(map0, "*;(ecT*Q17zC:", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path *;(ecT*Q17zC:, segement *;(ecT*Q17zC:
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-379), 4, (-2430));
      boolean boolean0 = JSONPath.containsValue((Object) mockGregorianCalendar0, "com.alibaba.fastjson.JSONPath$NotNullSegement", (Object) "LIKE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      Object object0 = jSONPath0.eval((Object) jSONPath_Operator0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Float float0 = new Float((double) (-809L));
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Double double0 = new Double((-1.0));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Double double0 = new Double(0.0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(double0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Integer integer0 = Integer.valueOf((-1551));
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Long long0 = new Long((-4270347329889690746L));
      Byte byte0 = new Byte((byte) (-8));
      boolean boolean0 = JSONPath.eqNotNull(long0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-8));
      boolean boolean0 = JSONPath.eqNotNull(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Double double0 = new Double(0.0);
      boolean boolean0 = JSONPath.eqNotNull(67, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, (-1580386065683472715L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Integer integer0 = new Integer((-1880747734));
      Double double0 = new Double((-248.0));
      boolean boolean0 = JSONPath.eq(double0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) "syntax error, expect ", "@", (Object) "@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-8));
      boolean boolean0 = JSONPath.eq(byte0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("D{=i k;", "D{=i k;");
      boolean boolean0 = JSONPath.eq((Object) null, sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_IN");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Object object0 = JSONPath.reserveToArray(classLoader0, (String[]) null);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, object0, object0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("gr{LcC32Tll6~d");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(jSONPath0, linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("scan null error");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.deny", "RjP,/", ":1mpqn|puBRo1 g\n", 99);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElementArray0[0];
      stackTraceElementArray0[3] = stackTraceElementArray0[0];
      stackTraceElementArray0[4] = stackTraceElementArray0[0];
      stackTraceElementArray0[5] = stackTraceElement0;
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      int int0 = JSONPath.size((Object) sQLWarning0, "/stackTrace/10");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "g lfkxh[z|?{";
      stringArray0[1] = "g lfkxh[z|?{";
      stringArray0[2] = "g lfkxh[z|?{";
      stringArray0[3] = "g lfkxh[z|?{";
      stringArray0[4] = "g lfkxh[z|?{";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("g lfkxh[z|?{", "g lfkxh[z|?{", "g lfkxh[z|?{", stringArray0, false);
      Double double0 = new Double(1.0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("N-VWbxZd%\"\"jnPoV-", double0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_ValueSegment0, false);
      JSONPath jSONPath0 = new JSONPath("g lfkxh[z|?{");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("deserialzeArrayMapping", "g lfkxh[z|?{", 46);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, jSONPath0, sQLNonTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, bigInteger0, bigInteger0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Long long0 = new Long(1573L);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("LE", long0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, false);
      JSONPath jSONPath0 = new JSONPath(", fieldName ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[C", "deserialzeArrayMapping", 46);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "LE", sQLNonTransientConnectionException0, ", fieldName ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("g lfkxh[z|?{", "g lfkxh[z|?{");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("g lfkxh[z|?{", "g lfkxh[z|?{", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("g lfkxh[z|?{", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Bs0U_PA,", "Bs0U_PA,", 1488);
      SQLWarning sQLWarning0 = new SQLWarning("/cause/stackTrace/10", sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLWarning0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("%%", (byte)9, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLClientInfoException0, sQLFeatureNotSupportedException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("-");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("#nternal", false);
      boolean boolean0 = jSONPath_FilterSegment0.remove((JSONPath) null, jSONPath_PropertySegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("34W/uMomI", 614L, 614L, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      JSONPath jSONPath0 = JSONPath.compile("-{rV)+p");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("rF(R]0", false);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_PropertySegment0, "rF(R]0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")G)*K BA!We45UP");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("_M[[m}");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_SizeSegment0, "[");
      assertEquals("[", object0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("t");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("t", (-1151L), (-1151L), true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "fastjson", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("HgX7P4c+}r@pXh+4");
      Pattern pattern0 = Pattern.compile("fastjson.parser.safeMode");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("E", pattern0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, parserConfig0, "fastjson.parser.deny", "E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.JSONPath$PropertySegment", "com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$PropertySegment", "com.alibaba.fastjson.JSONPath$PropertySegment", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$PropertySegment", intArray0, sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "E;_GtG", batchUpdateException0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("x]5B^XT|p;S3IX?", "x]5B^XT|p;S3IX?");
      JSONPath jSONPath0 = new JSONPath("R)]x/**-K*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("x]5B^XT|p;S3IX?", "null", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, "null", sQLTimeoutException0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("error", "", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("5^tpEY*&O", true);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_PropertySegment0, "5^tpEY*&O");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.Duration");
      SQLException sQLException0 = new SQLException("T*XTX0qtB", "T*XTX0qtB");
      Spliterator<Throwable> spliterator0 = sQLException0.spliterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.time.Duration", "T*XTX0qtB", sQLException0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("RSWSk%\"x(oLUyL Zm|G", "T*XTX0qtB", true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("RSWSk%\"x(oLUyL Zm|G", "T*XTX0qtB", sQLTransactionRollbackException0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, "java.time.Duration", spliterator0, sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "syntax error: ";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("syntax error: ", "syntax error: ", "unsupported array put operation. ", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("syntax error: ");
      SQLException sQLException0 = new SQLException("com.alibaba.fastjson.serializer.AnnotationSerializer", "syntax error: ", (-203));
      DataTruncation dataTruncation0 = new DataTruncation((-203), true, true, 14, 101, sQLException0);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, dataTruncation0, sQLException0, "unsupported array put operation. ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeSupport", (String) null, (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("uc>");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(61);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("uc>", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, "uc>", "uc>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("GP8|fB", (-1.0), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, parserConfig0, "com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", "GP8|fB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("t");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("t", 1983L, jSONPath_Operator0);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath_Operator0, "t", "t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Double double0 = new Double((-2822.341928419964));
      JSONPath jSONPath0 = JSONPath.compile("o,>");
      String[] stringArray0 = new String[9];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("9ve:Ki o:uvCh9p2DU", stringArray0, false);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, double0, "LI^KE", "LI^KE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath jSONPath0 = JSONPath.compile("L");
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("com.alibaba.fastjson.JSONPath$StringOpSegement", stringArray0, true);
      MockDate mockDate0 = new MockDate(849, 849, 85, 4, 85, 1885);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath0, "N-VWbxZd%\"\"jnPoV-", mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(I)C";
      stringArray0[1] = "(I)C";
      stringArray0[2] = "getSeeAlso";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("(I)C", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("(I)C");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("getSeeAlso");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath0, sQLRecoverableException0, "(I)C");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("]^<o/SHl9x", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      Integer integer0 = new Integer(2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, integer0, longArray0[0], sQLTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Object object0 = new Object();
      Long long0 = new Long(4647432019745535567L);
      Long[] longArray0 = new Long[6];
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("Mnnl)fcuQwl6", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("AM&*zfY(f$1_>a)dCKD");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, object0, jSONPath_SizeSegment0, jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Long long0 = new Long((-4270347329889690746L));
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("AM&*zfY(f$1_>a)dCKD", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("NOT_RLIKE");
      SQLDataException sQLDataException0 = new SQLDataException("`1!Anw}:AGNCa n,", "AM&*zfY(f$1_>a)dCKD");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, sQLDataException0, long0, jSONPath_WildCardSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("qK/Cbj+q", (-1067L), (-1067L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("qK/Cbj+q", serializeConfig0, parserConfig0);
      Integer integer0 = new Integer((-4179));
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, (Object) null, integer0, jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^c4>3");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("([C)F", 2776L, 8389032537095247355L, true);
      int[] intArray0 = new int[4];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "^c4>3", (Object) null);
      DataTruncation dataTruncation0 = new DataTruncation((-1882), false, true, 61, (-1882));
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONArray0, dataTruncation0, jSONArray0);
      assertEquals(4, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("t");
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("t", longArray0, true);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, "jsonpath can not be null", "/stackTrace/10", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("m*!");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("m*!", "", false);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, (Object) null, (Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".000000");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment(".000000", jSONPath0, true);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, javaBeanDeserializer0, ".000000", javaBeanDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("X/8G");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny.internal");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      SQLWarning sQLWarning0 = new SQLWarning("not support type : ");
      Object object0 = JSONPath.reserveToArray(ParserConfig.global.propertyNamingStrategy, ParserConfig.global.DENYS);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath_FilterSegment0, sQLWarning0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("clazz");
      JSONPath jSONPath0 = JSONPath.compile("clazz");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, "clazz", jSONPath0, "clazz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[%}IS%V&=H");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(5213, 1556, 1556);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "[%}IS%V&=H", "LIKE");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = JSONPath.compile("/h*K5BT<dzZN");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1082520869), (-1082520869), 1473);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "/h*K5BT<dzZN", serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("com.alibaba.fastjson.serializer.MapSerializer", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2com.alibaba.fastjson.serializer.MapSerializer
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_IN");
      UUID uUID0 = MockUUID.randomUUID();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(" zl1F?qsr*NK{@sE", true);
      jSONPath_PropertySegment0.setValue(jSONPath0, (Object) null, uUID0);
      assertEquals("NOT_IN", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[_ZVz>", "/cause/stackTrace/9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[_ZVz>
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("T/4{1dv`;7wda5x^@", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      Integer integer0 = new Integer(0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1894), (-1894), 0);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, integer0, jSONPath_RangeSegment0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SQLWarning sQLWarning0 = new SQLWarning(stringArray0[2], "N-VWbxZd%\"\"jnPoV-");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(stringArray0[3], "", sQLWarning0);
      Float float0 = new Float(72.8514F);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, sQLTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransientConnectionException cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Double double0 = new Double(112);
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, "dd-MM-yyyy");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Long long0 = new Long(6073645722991901167L);
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, "$k)9Ddi\"UwTY[x");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Float float0 = new Float((double) (-809L));
      int int0 = JSONPath.compare(float0, float0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("alibaba");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLTransientConnectionException0, bigDecimal0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransientConnectionException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/10", false);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, "5^tpEY*&O", jSONPath_PropertySegment0);
      Object object1 = jSONPath_MinSegment0.eval(jSONPath0, jSONPath_MultiIndexSegment0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/10", false);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, sQLWarning0, jSONPath_PropertySegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("rlike");
      SQLWarning sQLWarning0 = new SQLWarning("rlike", "rlike");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, sQLWarning0, "rlike");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"@P~.z");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("\"@P~.z");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8Vz");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("6.Xo8I!edqjqBn,@Tb");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6.Xo8I!edqjqBn\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/7");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("stackTrace", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("uc>");
      Integer integer0 = new Integer(47);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) integer0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path uc>
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LIKE");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("setter not found, class ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("error : ", "[jAl!K`AR9Mb0");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2error : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("kt=N]");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nk))I7w:yX|k");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nk))I7w:yX|k
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'s*,s*'");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("s*,s*'", object0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")7Cx7}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1570L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{ 7Et~");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-8L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-MUCDm@l I1_J]");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+`0**tGxWy]GOy");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":1mpqn|puBRo1 g\n");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1mpqn|puBRo1 g
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%iRs*5u(.U5Pt");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?E!n@7v9Wk>");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but 'E'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l");
      Object object0 = jSONPath0.eval((Object) "l");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2949), 60, 60, 60, 60, 61);
      Map<String, Object> map0 = JSONPath.paths((Object) mockGregorianCalendar0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("b]@!q5!zaU=ksuzG=", "b]@!q5!zaU=ksuzG=");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[%}IS%V&=H", "[%}IS%V&=H", hashMap0, sQLFeatureNotSupportedException0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0, serializeConfig0);
      //  // Unstable assertion: assertEquals(181, map0.size());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("5X(Qa(;<w.", "5X(Qa(;<w.");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      sQLTransactionRollbackException0.setNextException(sQLWarning0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransactionRollbackException0, serializeConfig0);
      //  // Unstable assertion: assertEquals(179, map0.size());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray((Object) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("'");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = jSONPath0.set((Object) "'", (Object) sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Long long0 = new Long(3547627781654598972L);
      boolean boolean0 = JSONPath.set((Object) long0, "/stackTrace/10/className", (Object) jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "com.alibaba.fastjson.JSONPath$PropertySegment", (Object) "com.alibaba.fastjson.JSONPath$PropertySegment");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) "^c4>3", "Cz.t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) "JoVB", "com.alibaba.fastjson.JSONPath$PropertySegment");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONPath jSONPath0 = new JSONPath("NE");
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      // Undeclared exception!
      try { 
        jSONPath1.arrayAdd((Object) jSONPath0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$DoubleOpSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("gr{LcC32Tll6~d");
      Object[] objectArray0 = new Object[8];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals("gr{LcC32Tll6~d", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9D Uh");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) "9D Uh", objectArray0);
      assertEquals("9D Uh", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "Bs0U_PA,", 112);
      JSONPath.arrayAdd((Object) sQLTimeoutException0, "/stackTrace/8", (Object[]) null);
      assertNull(sQLTimeoutException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(", fiSlVName : ");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("m*!");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLInvalidAuthorizationSpecException0, (Object) jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.Duration");
      boolean boolean0 = jSONPath0.containsValue((Object) "NO_IN", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LE");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("LE");
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath_Segment0, "LE", (Object) jSONPath_Segment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ITREp&hjes(+O4", "", 767);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/stackTrace/11", "java/lang/String", (-379), sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      boolean boolean0 = JSONPath.contains((Object) sQLTimeoutException0, "/stackTrace/7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Object object0 = JSONPath.extract("", "/stackTrace/1");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("t");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".000000");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ArrayList arrayList0 = (ArrayList)JSONPath.eval((Object) "%", "*");
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("b;m?]{08{ S8&]#y");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      DataTruncation dataTruncation0 = new DataTruncation((-1767), false, true, 0, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, dataTruncation0);
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, dataTruncation0, batchUpdateException0);
      assertNotNull(hashSet0);
      assertEquals(5, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("tzy!9'{", "enum", false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      JSONPath jSONPath0 = new JSONPath("scanFieldStringArray");
      SQLDataException sQLDataException0 = new SQLDataException("enum");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "u{x*JPS]-^kwS#IdH]K", sQLDataException0, "enum");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("M)`}%`bqD", "com.alibaba.fastjson.JSONPath$WildCardSegment");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("41{`");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000");
      Long long0 = new Long(2360990526898877176L);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath0, (Object) long0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("6");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1575));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("5^tpEY*&O", "password");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("S<_3fn", serializeConfig0, parserConfig0);
      String string0 = jSONPath0.getPath();
      assertEquals("S<_3fn", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(Ljava/lang/Class;");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("RuuHTdc[Z$.1TM%5`h");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLDataException0, ".000000", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) null, "]#w5-XkFR(23,2w@Z ", (Object) "]#w5-XkFR(23,2w@Z ");
      assertFalse(boolean0);
  }
}
