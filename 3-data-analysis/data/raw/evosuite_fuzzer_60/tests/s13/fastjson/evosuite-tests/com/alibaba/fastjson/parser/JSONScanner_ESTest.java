/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 10:33:57 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import java.lang.reflect.Field;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}", 553);
      jSONScanner0.setToken(78);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("p;T0sGSxw$JLB~$,cP", 13);
      jSONScanner0.token = 69;
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(1080L, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(". S<WAG>c?{)");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(51068);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!T3@'zr", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8_&o_}Ju$*");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      assertEquals('8', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.safeMode");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, 3678080, parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDate('I');
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("92", 55);
      long long0 = jSONScanner0.scanLong(')');
      assertEquals(92L, long0);
      assertEquals('9', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanLong('i');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".000000");
      jSONScanner0.next();
      double double0 = jSONScanner0.scanDouble('z');
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = '3';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      int int0 = jSONScanner0.scanInt('');
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\", line \",\"\"co\":\"a string\",\"z\":\"a string\",\"illegal str, \":{},\"xx\":false}");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray1);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"color\":\"\",\"size\":\"\",\"x\":-99,\"number\":\"(Ljava/lang/reflect/Type;)Ljava/util/Collection;\",\"\":99,\"fruit\":\"Apple\"}");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q/*Ab?Ide|]i~Xh");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 7);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 7, line 1, column 8\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 34);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('\u001A', '\u001A', '\u001A', 'j', 'b');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.safeMode");
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q/*Ab?Ide|]~Xh");
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"BJ");
      jSONScanner0.nextIdent();
      jSONScanner0.putChar('\u0086');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      jSONScanner0.putChar('t');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":true,\"illegal json.\":[],\"a\":[],\"list is null.\":null,\", line \":99}");
      jSONScanner0.nextIdent();
      jSONScanner0.skipString();
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 6, 3077);
      assertEquals('\u0000', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~!1mbu8$b-k", 55);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1~!1mbu8$b-k
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~!1mbu8$b-k");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1~!1mbu8$b-k
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mEV`{0`pE");
      char[] charArray0 = new char[0];
      jSONScanner0.copyTo(0, 0, charArray0);
      assertEquals('m', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8`_&o_}Ju$*");
      char[] charArray0 = new char[5];
      jSONScanner0.arrayCopy(0, charArray0, 0, 0);
      assertEquals('8', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":true,\"y\":[],\"a\":[],\"list is null.\":null,\", line \":99}", 55);
      String string0 = jSONScanner0.subString(0, 6);
      assertEquals("{\"\":tr", string0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.subString(0, 0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("W,.+g7TC");
      jSONScanner0.scanIdent();
      jSONScanner0.stringVal();
      assertEquals(',', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BeanToArray");
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals('B', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", (-450));
      char[] charArray0 = new char[4];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      jSONScanner0.nextIdent();
      assertEquals(4, jSONScanner0.token());
      
      String string0 = jSONScanner0.numberString();
      assertEquals("\"a strin", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\", line \",\"\"co\":\"a string\",\"z\":\"a string\",\"illegal str, \":{},\"xx\":false}");
      jSONScanner0.nextIdent();
      jSONScanner0.next();
      jSONScanner0.skipObject();
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals(20, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport", 986);
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.indexOf(',', 56);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8_&o_}Ju$*", 90);
      char char0 = jSONScanner0.charAt(0);
      assertEquals('8', char0);
      assertEquals('8', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mg");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals('m', char0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull{\"parseInt error : \":99,\"x\":-99,\"com.alibaba.fastjson.JSON\":{},\"\":false,\"xx\":\"a string\",\"ull{\"color\":\"\",\"size\":\"\",\"x\":-99,\"number\":\"(Ljava/lang/reflect/Type;)Ljava/util/Collection;\",\"\":99,\"fruit\":\"Apple\"}\":99}");
      jSONScanner0.nextIdent();
      jSONScanner0.bytesValue();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n'#6`d", 57);
      ParserConfig parserConfig0 = new ParserConfig(true);
      jSONScanner0.addSymbol(167, 6, 57, parserConfig0.symbolTable);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 34);
      jSONScanner0.next();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-1590));
      Class<Field> class0 = Field.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, hashMap0);
      jSONScanner0.scanInt('\u001A');
      jSONScanner0.scanInt('\\');
      jSONScanner0.skipObject(false);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-153), 0, (-1590), defaultJSONParser0.symbolTable);
       //  fail("Expecting exception: StringIndexOutOfBoundsException");
       // Unstable assertion
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\", line \",\"\"co\":\"a string\",\"z\":\"a string\",\"illegal str, \":{},\"xx\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(2214, (-732));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~1mbu8$bk", 115);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('4', '@', '@', '@', '@');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 34);
      jSONScanner0.next();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
       //  fail("Expecting exception: StringIndexOutOfBoundsException");
       // Unstable assertion
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull{\"parseInt error : \":99,\"x\":-99,\"com.alibaba.fastjson.JSON\":{},\"\":false,\"xx\":\"a string\",\"ull{\"color\":\"\",\"size\":\"\",\"x\":-99,\"number\":\"(Ljava/lang/reflect/Type;)Ljava/util/Collection;\",\"\":99,\"fruit\":\"Apple\"}\":99}", 90);
      jSONScanner0.bp = (-708);
      // Undeclared exception!
      try { 
        jSONScanner0.scanISO8601DateIfMatch(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      char[] charArray0 = new char[12];
      jSONScanner0.bp = (-994);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~!1mbu8$b-k", 1000);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
       //  fail("Expecting exception: StringIndexOutOfBoundsException");
       // Unstable assertion
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q/*Ab?Ide|]i~Xh");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, (-214748364), defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[6];
      jSONScanner0.bp = (-2);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q/*Ab?Ide|]i~Xh");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":{heMlo\",\"y\":7,\"z\":true,\"a\":[-99],\"b\":{R}");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull{\"parseInt error : \":99,\"x\":-99,\"com.alibaba.fastjson.JSON\":{},\"\":false,\"xx\":\"a string\",\"ull{\"color\":\"\",\"size\":\"\",\"x\":-99,\"number\":\"(Ljava/lang/reflect/Type;)Ljava/util/Collection;\",\"\":99,\"fruit\":\"Apple\"}\":99}");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", (-1));
      jSONScanner0.bp = (-1);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull{\"color\":\"\",\"size\":false,\"x\":-99,\"number\":\"(Ljava/lang/reflect/Type;)Ljava/util/Collection;\",\"\":99,\"isInitialized\":\"Apple\"}");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeAccept");
      jSONScanner0.bp = (-262);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("initStringFieldAsEmpty");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-Irk\"4L)g`o:f7sGd[6");
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mEV`{0`pE");
      jSONScanner0.close();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mEV`{0`pE");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(3, 3, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("HW*W;j<`Y|lhV$s4w=", 47, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 55);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"b\":{}}", (-2778));
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(0, (char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport", 986);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(9, charArray0, 665, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rQs5~xpWYk*HR?n<");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(1261, 0, 0, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONScanner jSONScanner0 = new JSONScanner("4{H+o-gI#aOL.yDq", 1517);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(4899, (-1), (-4309), parserConfig0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 116, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 798);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 34);
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', char0);
      
      jSONScanner0.skipArray(false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Ld@OLW\"*]4pF*G", 553);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1Ld@OLW\"*]4pF*G
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\", line \",\"\"co\":\"a string\",\"z\":\"a string\",\"illegal str, \":{},\"xx\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"\":\", line \",\"\"co\":\"a string\",\"z\":\"a string\",\"illegal str, \":{},\"xx\":false}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-Irk\"4L)g`o:f7sGd[6");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1-Irk\"4L)g`o:f7sGd[6
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8_&o_}Ju$*");
      jSONScanner0.skipObject(true);
      assertEquals(6, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull{\"parseInt error : \":false,\"x\":-99,\"number\":{},\"\":false}\":[],\"z\":true,\"index must > 0, but \":\"hello\",\"y\":[],\"x\":null}", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"ull{\"parseInt error : \":false,\"x\":-99,\"number\":{},\"\":false}\":[],\"z\":true,\"index must > 0, but \":\"hello\",\"y\":[],\"x\":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(". S<WAG>c?{)", 73);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.info();
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-3381), (-2581));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = JSONScanner.charArrayCompare("{\"\":\"hello\",\"illega str\":\"a string\",\"z\":true,\"a\":[-99],\"b\":{},\"xx\":99}", 25, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", 7, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("&bNmf6{nV.L((La(d=2", 90, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8_&o_}Ju$*", 90);
      char char0 = jSONScanner0.charAt(90);
      assertEquals('8', jSONScanner0.getCurrent());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(". S<WAG>c?{)");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-485));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mEV`{0`pE");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals('m', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"a string\"", 3);
      ParserConfig parserConfig0 = ParserConfig.global;
      jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.safeMode");
      jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mEV`{0`pE");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":false,\"illega str\":false,\"unclosed str\":true,\"ull{\"color\":\"\",\"size\":\"\",\"x\":-99,\"number\":null,\"\":99,\"\":\"Apple\"}\":[true,\"a string\"],\"java.util.concurrent.atomic.LongAdder\":[],\"(Ljava/lang/Class;\":{}}", 68);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{3T4", 55);
      jSONScanner0.next();
      jSONScanner0.scanInt('T');
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-5079L), true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\", line \",\"\"co\":\"a string\",\"z\":\"a string\",\"illegal str, \":{},\"xx\":false}");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-2729L), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 16, line 1, column 17{\"\":\", line \",\"\"co\":\"a string\",\"z\":\"a string\",\"illegal str, \":{},\"xx\":false}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 34);
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((long) 34, true);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q/*Ab?Ide|]i~Xh");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.nextIdent();
      jSONScanner0.seekArrayToItem(26);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mEV`{0`pE");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-911));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -911
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rQs5~xpWYk*HR?n<");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"co");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str, ", (-1523));
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 34);
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', char0);
      
      jSONScanner0.skipArray();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":99,\"illega str\":false,\"unclosed str\":false,\"]\":[-99,\"a string\"],\"java.util.concurrent.atomic.LongAdder\":[false],\"(Ljava/lang/Class;\":{},\"unclosed str, \":{}}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"\":99,\"illega str\":false,\"unclosed str\":false,\"]\":[-99,\"a string\"],\"java.util.concurrent.atomic.LongAdder\":[false],\"(Ljava/lang/Class;\":{},\"unclosed str, \":{}}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"illegal str, \":\"a string\",\"z\":true,\"ull{\"color\":\"\",\"size\":false,\"x\":-99,\"number\":\"(Ljava/lang/reflect/Type;)Ljava/util/Collection;\",\"\":99,\"isInitialized\":\"Apple\"}\":[],\"b\":{},\"xx\":99,\"x\":{}}", 55);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      jSONScanner0.bp = 7;
      jSONScanner0.skipObject(false);
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "Zma!C._\\u\\&[";
      JSONScanner jSONScanner0 = new JSONScanner(string0, 82);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1Zma!C._\\u\\&[
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("xaxbp>Sw#fA|8</'6t");
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("s6K;-4", 160);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BeanToArray");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("BeanToArray", parserConfig0, 0);
      char[] charArray0 = jSONScanner0.sub_chars(0, 0);
      jSONScanner0.scanFieldStringArray(charArray0, (-3148), defaultJSONParser0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(". S<WAG>c?{)", 2668);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      char[] charArray0 = new char[9];
      jSONScanner0.scanFieldStringArray(charArray0, (-1920), defaultJSONParser0.symbolTable);
      assertEquals(25, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":{iVwo", 34);
      SymbolTable symbolTable0 = new SymbolTable(16);
      jSONScanner0.scanFieldStringArray((char[]) null, 2889, symbolTable0);
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q/*Ab?Ide|]i~Xh");
      jSONScanner0.skipArray(false);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 12, line 1, column 13Q/*Ab?Ide|]i~Xh
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{3T4", 55);
      jSONScanner0.next();
      jSONScanner0.scanInt('T');
      jSONScanner0.scanDate('I');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7}~$`");
      jSONScanner0.scanDate('i');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.bp = 7;
      jSONScanner0.scanDate('<');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-Irk\"4L)g`o:f7sGd[6");
      jSONScanner0.scanDate('|');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"co");
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('w');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.scanDate('a');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{3T4", 55);
      jSONScanner0.next();
      long long0 = jSONScanner0.scanLong('T');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      jSONScanner0.bp = 7;
      long long0 = jSONScanner0.scanLong('@');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      long long0 = jSONScanner0.scanLong('@');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"R6xQ}D<VH$IVU>j4");
      jSONScanner0.scanLong('@');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8_&o_}Ju$*");
      double double0 = jSONScanner0.scanDouble('_');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(8.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nD");
      jSONScanner0.scanDouble('d');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.nextIdent();
      double double0 = jSONScanner0.scanDouble('D');
      assertEquals(4, jSONScanner0.token());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      double double0 = jSONScanner0.scanDouble('\u0018');
      assertEquals((-99.0), double0, 0.01);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"co");
      jSONScanner0.scanDouble('<');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      jSONScanner0.bp = 7;
      int int0 = jSONScanner0.scanInt('a');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      int int0 = jSONScanner0.scanInt('Y');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\", line \",\"y\":\"a string\",\"z\":[],\"illegal str, \":[],\"illegal str, \":{},\"xx\":false}", 55);
      assertEquals('{', jSONScanner0.getCurrent());
      
      jSONScanner0.next();
      jSONScanner0.scanInt('\"');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(". S<WAG>c?{)");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.scanInt(']');
      assertEquals(25, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport", 986);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".000000");
      jSONScanner0.next();
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5m^F{~\"d>");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner("H6xy!%");
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a s");
      jSONScanner0.scanIdent();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q/*Ab?Ide|]i~Xh");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{3T4", 55);
      jSONScanner0.next();
      jSONScanner0.scanInt('T');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('4', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8_&o_}Ju$*");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q/*Ab?Ide|]i~Xh");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull{\"parseInt error : \":false,\"x\":-99,\"number\":{},\"\":false}\":[],\"z\":true,\"index must > 0, but \":\"hello\",\"y\":[],\"x\":null}", 0);
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8_&o_}Ju$*");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8_&o_}Ju$*");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner(". S<WjG>c?{r");
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"co");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8_&o_}Ju$*");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("U&S0+W<@VK1;SHr0x");
      char[] charArray0 = new char[4];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-Irk\"4L)g`o:f7sGd[6");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      jSONScanner0.nextIdent();
      jSONScanner0.bp = 7;
      jSONScanner0.nextIdent();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '9', '9', 'P', '$', (-1590), (-2755));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('3', '3', '3', '$', 'f', '2', (-3275), 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', '2', 'h', 'h', '3', 'Q', (-3637), (-4150));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('4', 'm', ']', 'e', '', 'm', 14, 112);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('4', '$', '4', '$', '5', '', 468, 112);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('4', '4', '$', '+', '4', '+', '+', '4');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mEV`{0`pE");
      Locale locale0 = Locale.US;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      jSONScanner0.calendar = calendar0;
      jSONScanner0.setTimeZone('i', 'i', 'i');
      assertEquals('m', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', 'i', ',');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4{H+o-gI#aOL.yDq", 1506);
      jSONScanner0.next();
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4{H+o-gI#aOL.yDq", 1508);
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('4', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("A7|jTE8?KGB9R$_z");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".parser.s");
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(25, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q/*Ab?Ide|]i~Xh");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Q/*Ab?Ide|]i~Xh", jSONScanner0, parserConfig0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BJ");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8_&o_}Ju$*");
      jSONScanner0.nextIdent();
      jSONScanner0.decimalValue();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~FB@Zr8b!UL0t");
      jSONScanner0.next();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BJ");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",jTu?x(-*/Io%KVY9", 1482);
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(1482, 2527);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":99,\"number\":\"1\"}");
      jSONScanner0.bytesValue();
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("g\"", 125);
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BeanToArray", 1169);
      jSONScanner0.next();
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("99");
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("\"co", (-1346), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      jSONScanner0.scanDate('9');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]", (-10));
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(123, 123, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\", line \",\"\"co\":\"a string\",\"z\":\"a string\",\"illegal str, \":{},\"xx\":false}", 960);
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 108, 112);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\", line \",\"\"co\":\"a string\",\"z\":\"a string\",\"illegal str, \":{},\"xx\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('t', 'U', 't', 'U', 'U', 'C');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mEV`{0`pE", 986);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(986, charArray0, 986, 986);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull{\"color\":\"\",\"size\":false,\"x\":-99,\"number\":\"(Ljava/lang/reflect/Type;)Ljava/util/Collection;\",\"\":99,\"isInitialized\":\"Apple\"}");
      int int0 = jSONScanner0.indexOf('a', 0);
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('9', jSONScanner0.getCurrent());
  }
}
