/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 10:23:26 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.ByteArrayInputStream;
import java.io.PipedInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Authenticator;
import java.security.CryptoPrimitive;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.JTable;
import javax.swing.SortOrder;
import javax.tools.DocumentationTool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(2209, 0L);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray1.similar(jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1033, 301);
      assertEquals(1034, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(53, (Collection<?>) null);
      int int0 = jSONArray0.optInt(53, 14);
      assertEquals(54, jSONArray0.length());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnulljava.io.StringWriter@0000000006");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(317);
      jSONArray0.put(317, (Object) integer0);
      try { 
        jSONArray0.getBigDecimal(317);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[317] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2599, 33.4F);
      jSONArray0.toString();
      assertEquals(2600, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      Object object0 = jSONArray0.query(jSONPointer0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(2209, 0L);
      String string0 = jSONArray0.optString(2209);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<MultipleGradientPaint.ColorSpaceType> linkedList0 = new LinkedList<MultipleGradientPaint.ColorSpaceType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("pWYz(YNhE3UY+Z");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONPointer jSONPointer0 = new JSONPointer("");
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.optQuery("/.t?#?gw1i\"FUwjK");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      Number number0 = jSONArray0.optNumber(4, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONArray0.optNumber(2820, (Number) bigInteger0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<MultipleGradientPaint.ColorSpaceType> linkedList0 = new LinkedList<MultipleGradientPaint.ColorSpaceType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      Number number0 = jSONArray0.optNumber((-1), (Number) bigDecimal0);
      assertEquals((short) (-1), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONArray jSONArray1 = jSONArray0.put(4, (Object) bigInteger0);
      Number number0 = jSONArray1.optNumber(4);
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      long long0 = jSONArray0.optLong(10, (-857L));
      assertEquals((-857L), long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(58, (long) 53);
      long long0 = jSONArray0.optLong(58);
      assertEquals(53L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(53, 0L);
      int int0 = jSONArray0.optInt(53, 53);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(547, (-109L));
      int int0 = jSONArray1.optInt(547, 23);
      assertEquals((-109), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(317);
      jSONArray0.put(317, (Object) integer0);
      int int0 = jSONArray0.optInt(317);
      assertEquals(317, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(510, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(2242, (-1631.8F));
      assertEquals((-1631.8F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(53, 0L);
      float float0 = jSONArray1.optFloat(53);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((float) 93);
      float float0 = jSONArray0.optFloat(0);
      assertEquals(93.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble((-1), (double) 1947.1956F);
      assertEquals(1947.195556640625, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      boolean boolean0 = jSONArray0.optBoolean((-2935), false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      boolean boolean0 = jSONArray1.optBoolean(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(93, bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-9);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger((-3579), bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigDecimal bigDecimal0 = jSONArray0.optBigDecimal(160, (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigDecimal bigDecimal0 = new BigDecimal((-1458L));
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(8192, bigDecimal0);
      assertEquals((short) (-1458), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(8448, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<SortOrder> linkedList0 = new LinkedList<SortOrder>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = new BigDecimal(4824);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(1191, bigDecimal0);
      assertEquals((short)4824, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<MultipleGradientPaint.ColorSpaceType> linkedList0 = new LinkedList<MultipleGradientPaint.ColorSpaceType>();
      jSONArray0.put(0, (Collection<?>) linkedList0);
      int int0 = jSONArray0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-1.0F));
      String string0 = jSONArray1.join("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.put(469.517F);
      boolean boolean0 = jSONArray0.isNull(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(53, (long) 53);
      long long0 = jSONArray1.getLong(53);
      assertEquals(53L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 0, (-424));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2802, 1352L);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONArray0.write((Writer) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<BigDecimal, JSONArray> hashMap0 = new HashMap<BigDecimal, JSONArray>();
      jSONArray0.put(2820, (Map<?, ?>) hashMap0);
      // Undeclared exception!
      jSONArray0.toList();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("f@Lj`!b 4GS ]X_*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2100), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2100] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalExclusionType, Float> hashMap0 = new HashMap<Dialog.ModalExclusionType, Float>();
      try { 
        jSONArray0.put((-64), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-64] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONArray0.put((-1985), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1985] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1), 2320L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-419), (-419));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-419] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2340), (-1400.55596910061));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2340] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONTokener jSONTokener0 = new JSONTokener(pipedInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-83), 4);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put(469.517F);
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(53, 0L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-hkZA5");
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0, 0, 0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      jSONArray0.put(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.json.JSONArray");
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0, 57, (-2249));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.put(469.517F);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dIym4");
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0, 0, 10);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0<y(p*&}");
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0, (-2249), 44);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) jSONArray0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.put(3334, false);
      jSONArray0.put(3334, (Object) jSONArray0);
      assertEquals(3335, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-3445), (Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3445] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.optString(531, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(317);
      jSONArray0.put(317, (Object) integer0);
      Number number0 = jSONArray0.optNumber(317, (Number) integer0);
      assertEquals(317, number0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      Number number0 = jSONArray0.optNumber(3137, (Number) bigInteger0);
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      long long0 = jSONArray0.optLong(0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      long long0 = jSONArray0.optLong(55, (long) 55);
      assertEquals(55L, long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      Class<Month> class0 = Month.class;
      Month month0 = Month.SEPTEMBER;
      Month month1 = jSONArray0.optEnum(class0, (-4927), month0);
      assertEquals(Month.SEPTEMBER, month1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.put(469.517F);
      Class<Month> class0 = Month.class;
      Month month0 = Month.AUGUST;
      Month month1 = jSONArray0.optEnum(class0, 0, month0);
      assertEquals(Month.AUGUST, month1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = jSONArray0.optInt(93, 93);
      assertEquals(93, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(547, (long) 547);
      float float0 = jSONArray0.optFloat(547, (float) 547);
      assertEquals(547.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      float float0 = jSONArray1.optFloat(0, 790.21204F);
      assertEquals(790.21204F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble((-1250), (double) (-1250));
      assertEquals((-1250.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      jSONArray0.put(0, (Map<?, ?>) hashMap0);
      jSONArray0.opt(0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt(317);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      Object object0 = jSONArray0.opt((-852));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getString(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Authenticator.RequestorType, TrayIcon.MessageType> hashMap0 = new HashMap<Authenticator.RequestorType, TrayIcon.MessageType>();
      JSONArray jSONArray1 = jSONArray0.put(62, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getBoolean(48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[48] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.put(291, 2173L);
      Object object0 = jSONArray0.get(0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      Double double0 = new Double(0.0);
      JSONArray jSONArray1 = jSONArray0.put((Object) double0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JTable.PrintMode> class0 = JTable.PrintMode.class;
      jSONArray0.optEnum(class0, 3511);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<GraphicsDevice.WindowTranslucency, Double> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, Double>();
      jSONArray0.put(28, (Map<?, ?>) hashMap0);
      jSONArray0.toList();
      assertEquals(29, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(53, (-3745L));
      String string0 = jSONArray0.toString(53);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(116, false);
      jSONArray1.toString((-2367));
      assertEquals(117, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (-2281.01672308));
      jSONArray1.toString();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      assertTrue(jSONArray1.isEmpty());
      
      jSONArray1.toJSONObject(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-1255.0F));
      boolean boolean0 = jSONArray1.similar(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      JSONArray jSONArray2 = new JSONArray();
      boolean boolean0 = jSONArray1.similar(jSONArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.similar((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(53, (Collection<?>) null);
      jSONArray0.remove(14);
      assertEquals(53, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove((-79));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      String string0 = jSONArray1.optString(0, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      Number number0 = jSONArray0.optNumber(0, (Number) bigInteger0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(142, (long) 547);
      long long0 = jSONArray0.optLong(142, (long) 142);
      assertEquals(547L, long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      long long0 = jSONArray1.optLong(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(2830);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(53, (Collection<?>) linkedList0);
      jSONArray0.optJSONArray(53);
      assertEquals(54, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(2322);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((float) 93);
      BigDecimal bigDecimal0 = jSONArray1.optBigDecimal(0, (BigDecimal) null);
      assertNotNull(bigDecimal0);
      assertEquals((byte)93, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(53, 22L);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(53, bigDecimal0);
      assertEquals((short)22, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(317);
      jSONArray0.put(317, (Object) integer0);
      BigInteger bigInteger0 = jSONArray0.optBigInteger(317, (BigInteger) null);
      assertEquals((short)317, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(53, 22L);
      BigInteger bigInteger0 = jSONArray1.optBigInteger(53, (BigInteger) null);
      assertNotNull(bigInteger0);
      assertEquals((byte)22, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      BigInteger bigInteger0 = jSONArray0.optBigInteger(0, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      Class<DayOfWeek> class0 = DayOfWeek.class;
      try { 
        jSONArray1.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not an enum of type java.io.StringWriter@0000000005.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      int int0 = jSONArray0.optInt(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      double double0 = jSONArray1.optDouble(0, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put(3102, true);
      // Undeclared exception!
      jSONArray1.join((String) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("is");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      try { 
        jSONArray1.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(547, (-109L));
      long long0 = jSONArray1.getLong(547);
      assertEquals((-109L), long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      try { 
        jSONArray1.getLong(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray1.getJSONArray(0);
      assertNotSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((float) 93);
      int int0 = jSONArray1.getInt(0);
      assertEquals(93, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      try { 
        jSONArray1.getInt(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((-461.034185491568));
      JSONArray jSONArray1 = jSONArray0.put(2807, (Object) double0);
      Number number0 = jSONArray1.getNumber(2807);
      assertEquals((-461.034185491568), number0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put(2820, false);
      try { 
        jSONArray1.getNumber(430);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[430] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1033, 1033);
      assertEquals(1034, jSONArray0.length());
      
      float float0 = jSONArray1.getFloat(1033);
      assertEquals(1033.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(142, (long) 547);
      assertEquals(143, jSONArray0.length());
      
      double double0 = jSONArray0.getDouble(142);
      assertEquals(547.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(547, (long) 547);
      try { 
        jSONArray0.getDouble(116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[116] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      boolean boolean0 = jSONArray0.getBoolean(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(3847, (long) 3847);
      boolean boolean0 = jSONArray1.optBoolean(53, true);
      assertEquals(3848, jSONArray0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.SECURE_RANDOM;
      linkedList0.add(cryptoPrimitive0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(" [character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 12 [character 13 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<DayOfWeek> class0 = DayOfWeek.class;
      try { 
        jSONArray0.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not an enum of type java.io.StringWriter@0000000002.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.optQuery("");
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(3511);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-1255.0F));
      float float0 = jSONArray0.optFloat(0);
      assertEquals((-1255.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("q6WO}>;3xcZ'{6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      boolean boolean0 = jSONArray0.isNull(44);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Collection<?>) null);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<DocumentationTool.Location> linkedList0 = new LinkedList<DocumentationTool.Location>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Locale.FilteringMode, Desktop.Action> hashMap0 = new HashMap<Locale.FilteringMode, Desktop.Action>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(2071);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-267));
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(76);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(53, (long) 53);
      jSONArray0.toList();
      assertEquals(54, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query("");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<MultipleGradientPaint.ColorSpaceType> linkedList0 = new LinkedList<MultipleGradientPaint.ColorSpaceType>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONArray1.optBigDecimal(0, bigDecimal0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (-2281.01672308));
      double double0 = jSONArray1.optDouble(0, (double) 0);
      assertEquals(1, jSONArray0.length());
      assertEquals((-2281.01672308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0L);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-41), (-1.0F));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-41] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(1274);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(2);
      assertEquals("", string0);
  }
}
