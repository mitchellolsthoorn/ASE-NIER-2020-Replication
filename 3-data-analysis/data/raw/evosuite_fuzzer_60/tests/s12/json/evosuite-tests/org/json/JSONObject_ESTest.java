/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 10:19:59 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.sql.RowIdLifetime;
import java.text.Normalizer;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-20));
      JSONObject jSONObject0 = new JSONObject(byte0);
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.io.StringWriter@0000000003", charArrayReader0);
      jSONObject1.toString((int) (byte) (-20));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("+WjrX");
      assertEquals("+WjrX", object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(",Ds}1Hpz^ S~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [,Ds}1Hpz^ S~] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<ByteArrayInputStream, BufferedOutputStream> hashMap0 = new HashMap<ByteArrayInputStream, BufferedOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getNumber("#/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("DfcZ->O)LJP-qX");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "Unable to write JSONAr ay value at index: 0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      JSONObject.indent(mockPrintWriter0, (-533));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JSONObject.testValidity(bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(59);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOnce("Substring bounds error", hashMap0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap1 = new HashMap<CardTerminals.State, RowIdLifetime>();
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.APPLICATION;
      hashMap0.put((Short) null, resource_AuthenticationType0);
      jSONObject0.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"\b\":{\"x\":true},\"number\":[],\"x\":\"a string\"}", (Map<?, ?>) hashMap1);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<Character> set0 = locale0.getExtensionKeys();
      JSONObject jSONObject0 = new JSONObject(set0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.io.StringWriter@0000000003", "java.io.StringWriter@0000000003");
      float float0 = jSONObject1.optFloat("java.io.StringWriter@0000000003");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unable to write JSONAr ay value at index: 0", false);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      jSONObject0.put("Unable to write JSONAr ay value at index: 0", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBigInteger("Unable to write JSONAr ay value at index: 0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000021] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOnce("Substring bounds error", hashMap0);
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.APPLICATION;
      hashMap0.put((Short) null, resource_AuthenticationType0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.append("fI", (Object) null);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.remove("fI");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", byte0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.query("#/");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = jSONObject0.optQuery("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal(147L);
      Number number0 = jSONObject0.optNumber("[@AqwfXE4", (Number) bigDecimal0);
      assertEquals((short)147, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      JSONObject jSONObject0 = new JSONObject((Object) "/");
      jSONObject0.optNumber("JSONObject[", (Number) bigDecimal0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Character, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Character, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-1676));
      Number number0 = jSONObject0.optNumber("java.io.StringWriter@0000000002", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("T'F%L$l", bigDecimal0);
      Number number0 = jSONObject1.optNumber("T'F%L$l");
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"y\":7,\"lo\":99,\"' and instead saw '\":[],\"b\":null,\"Null pointer\":-99}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.optLong("-?bn{G", (long) (short) (-29049));
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("java.lang.Byte@0000000002", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("int");
      int int0 = jSONObject1.optInt("int");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unable to write JSONAr ay value at index: 0", false);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      float float0 = jSONObject0.optFloat("]CLY%[*S:L*7}f|KT{|", (-1831.1F));
      assertEquals(2, jSONObject0.length());
      assertEquals((-1831.1F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Character, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Character, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("=,(Z$c-_uK}.Lpy", 1613.4601056);
      assertEquals(1613.4601056, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("not", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("n", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optBigDecimal("0tGJtc$t.", (BigDecimal) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("", bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Character, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Character, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(1956L);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("c^l(A@,Twy0/eHIcfj", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      Short short0 = new Short((short)10);
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.APPLICATION;
      hashMap0.put(short0, resource_AuthenticationType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.put("' and instead saw ''", (Map<?, ?>) null);
      boolean boolean0 = jSONObject0.isNull("' and instead saw ''");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("0@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-33));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000003", (int) (byte) (-33));
      long long0 = jSONObject1.getLong("java.io.StringWriter@0000000003");
      assertEquals(1, jSONObject0.length());
      assertEquals((-33L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, (short)10, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, byte0, (-667), (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 747, 2402);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 116, 116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",Ds}1Hpz^ S~");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("lon", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("X_WR?mG AvtjI=&paf", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",Ds}1Hpz^ S~");
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<CharArrayReader, Component.BaselineResizeBehavior> hashMap0 = new HashMap<CharArrayReader, Component.BaselineResizeBehavior>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<Character> set0 = locale0.getExtensionKeys();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-3771));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("WIlFDOGTY?q8[]GF", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((int) (byte)0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 38);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":true}");
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      try { 
        jSONObject0.getString("0)rgO78=:S+c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Long, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Long, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getJSONObject("B+_ DH1MW1,G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("yK1+3&j<}qS*;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<CharArrayReader, ObjectInputStream> hashMap0 = new HashMap<CharArrayReader, ObjectInputStream>();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      Double double0 = new Double(1731.13489813402);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("org.json.JSONWriter", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name org.json.JSONWriter, locale it
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("islongValue", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3052
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|O%rrORy>~QpQU");
      jSONObject0.write((Writer) mockPrintWriter0, 48, 2362);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      MockFile mockFile0 = new MockFile("'86;F26%$cmn#xO");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      jSONObject0.write((Writer) bufferedWriter0, (int) (byte)0, 58);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(802);
      jSONObject0.write((Writer) stringWriter0, 802, 802);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("r#EUA", "org.json.JSONObject$Null");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Object object0 = JSONObject.wrap(pipedReader0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Boolean boolean0 = new Boolean("get");
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.wrap("Unable to write JSONAr ay value at index: 0");
      assertEquals("Unable to write JSONAr ay value at index: 0", object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.APPLICATION;
      Object object0 = JSONObject.wrap(resource_AuthenticationType0);
      assertSame(resource_AuthenticationType0, object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(2602, (float) 2602);
      assertEquals(2603, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Month> linkedList0 = new LinkedList<Month>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(970, (Object) null);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("5 4^D +\"xoT");
      assertEquals("5 4^D +\"xoT", object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(101);
      JSONObject.quote("~@Mq/j/OYQ)x+s", (Writer) stringWriter0);
      assertEquals("\"~@Mq/j/OYQ)x+s\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(39);
      JSONObject.quote("", (Writer) charArrayWriter0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(101);
      Writer writer0 = JSONObject.quote((String) null, (Writer) stringWriter0);
      assertEquals("\"\"", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Resource.AuthenticationType, String> hashMap0 = new HashMap<Resource.AuthenticationType, String>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("Substring bounds error", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Byte byte0 = new Byte((byte) (-83));
      JSONObject jSONObject1 = jSONObject0.put("int", (Object) byte0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("W)7Pz", "W)7Pz");
      assertEquals("W)7Pz", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("toU", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("0", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.accumulate("java.math.BigDecimal@0000000002", stringWriter0);
      int int0 = jSONObject1.optInt("java.math.BigDecimal@0000000002", 2709);
      assertEquals(1, jSONObject0.length());
      assertEquals(2709, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.put("' and instead saw ''", 87);
      float float0 = jSONObject0.optFloat("' and instead saw ''", 1.0F);
      assertEquals(87.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<Character> set0 = locale0.getExtensionKeys();
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw ''", (Collection<?>) set0);
      float float0 = jSONObject1.optFloat("' and instead saw ''", 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat(".|':fWf+0Ws K!q", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      jSONObject0.put("SNIymT*+&|<%z=2bI", (Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("SNIymT*+&|<%z=2bI", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "fale");
      jSONObject0.optDouble("fale", (-3276.18723));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      KeyRep.Type keyRep_Type0 = KeyRep.Type.SECRET;
      Class<KeyRep.Type> class0 = KeyRep.Type.class;
      KeyRep.Type keyRep_Type1 = jSONObject0.optEnum(class0, "TD}-7O2,m$(cYg#", keyRep_Type0);
      assertSame(keyRep_Type1, keyRep_Type0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<CryptoPrimitive, FilterOutputStream> hashMap0 = new HashMap<CryptoPrimitive, FilterOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt("java.io.StringWriter@0000000002");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(59);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.increment("int");
      try { 
        jSONObject0.getBoolean("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("int");
      Object object0 = jSONObject1.get("int");
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      jSONObject0.optEnum(class0, "java.lang.Byte@0000000002");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove(" line ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("800.80629745348", (Collection<?>) linkedList0);
      Map<String, Object> map0 = jSONObject1.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unable to write JSONAr ay value at index: 0", false);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      StringWriter stringWriter0 = new StringWriter(802);
      jSONObject1.write((Writer) stringWriter0, 101, 802);
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unable to write JSONAr ay value at index: 0", false);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("Substring bounds error", hashMap0);
      jSONObject1.toString();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      Short short0 = new Short((short)0);
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      hashMap0.put(short0, resource_AuthenticationType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.writeValue(charArrayWriter0, (Object) null, (byte)6, 3377);
      assertEquals(4, charArrayWriter0.size());
      assertEquals("null", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONArray jSONArray0 = (JSONArray)JSONObject.wrap(linkedList0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((long) (byte) (-32));
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((short) (-32), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(object0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("na");
      JSONObject jSONObject0 = new JSONObject(locale_LanguageRange0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float((-173.634));
      Object object0 = JSONObject.wrap(float0);
      assertEquals((-173.634F), object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Long long0 = new Long((byte)47);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(47L, object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Short short0 = new Short((byte) (-10));
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short) (-10), object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Character character0 = new Character('X');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('X', object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(48, (Object) jSONObject0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(2602, Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1236);
      try { 
        jSONObject0.put("a0PHkx32JW1Pt:i", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("fale");
      assertEquals("fale", object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("7CyE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [/] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("r0cxhUnNsD+mA&E");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("{\"fruit\":\"\",\"size\":\"Large\",\"color\":\"a string\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":-99}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("0", "0");
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      boolean boolean0 = jSONObject0.similar(charArrayReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<GroupLayout.Alignment, WebParam.Mode> hashMap0 = new HashMap<GroupLayout.Alignment, WebParam.Mode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getInt("9 T^$,GN@>;W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("\"a string\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getDouble("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.io.StringWriter@0000000003", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, locale_FilteringMode0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Character, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Character, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      StringWriter stringWriter0 = new StringWriter(8);
      JSONObject jSONObject1 = jSONObject0.put("isfloatValue", 921);
      try { 
        jSONObject1.putOnce("isfloatValue", stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"isfloatValue\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(1819);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (float) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("G_)UCvND2vD", true);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("G_)UCvND2vD", false);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<WebParam.Mode, RoundingMode> hashMap0 = new HashMap<WebParam.Mode, RoundingMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONObject", (Map<?, ?>) hashMap0);
      String string0 = jSONObject1.optString("org.json.JSONObject", "?");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-20));
      JSONObject jSONObject0 = new JSONObject(byte0);
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.io.StringWriter@0000000003", charArrayReader0);
      jSONObject1.optNumber("java.io.StringWriter@0000000003");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.io.StringWriter@0000000003", "java.io.StringWriter@0000000003");
      Number number0 = jSONObject1.optNumber("java.io.StringWriter@0000000003", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.increment("int");
      long long0 = jSONObject0.optLong("int");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      jSONObject0.put("SNIymT*+&|<%z=2bI", (Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("SNIymT*+&|<%z=2bI", 3478L);
      assertEquals(3478L, long0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "ugB]9*kK4v9ix]@+EXR");
      JSONObject jSONObject1 = jSONObject0.put("ugB]9*kK4v9ix]@+EXR", (Map<?, ?>) null);
      jSONObject1.optJSONObject("ugB]9*kK4v9ix]@+EXR");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("TD}-7O2,m$(cYg#");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("%1]0", "%1]0");
      int int0 = jSONObject0.optInt("%1]0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("val [", "java.lang.Byte@0000000002");
      int int0 = jSONObject0.optInt("val [", (int) (byte)0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.increment("int");
      int int0 = jSONObject0.optInt("int", (-1200));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((byte)6);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.io.StringWriter@0000000003", integer0);
      float float0 = jSONObject1.optFloat("java.io.StringWriter@0000000003");
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("0", "0");
      float float0 = jSONObject1.optFloat("0");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("java.io.StringWriter@0000000003", "java.io.StringWriter@0000000003");
      double double0 = jSONObject0.optDouble("java.io.StringWriter@0000000003", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("int");
      double double0 = jSONObject1.optDouble("int");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger("n{~hOm}PM}1T", bigInteger0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-33));
      JSONObject jSONObject0 = new JSONObject(byte0);
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      jSONObject0.putOpt("java.io.StringWriter@0000000003", charArrayReader0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("java.io.StringWriter@0000000003", bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(47);
      BigDecimal bigDecimal0 = new BigDecimal((-3234));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal(",Ds}1Hpz^ S~", bigDecimal0);
      assertEquals((byte)94, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unable to write JSONAr ay value at index: 0", false);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      jSONObject0.put("Unable to write JSONAr ay value at index: 0", (Map<?, ?>) hashMap0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      try { 
        jSONObject0.getEnum(class0, "Unable to write JSONAr ay value at index: 0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] is not an enum of type java.io.StringWriter@0000000021.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject(14);
      Long long0 = new Long(0L);
      jSONObject0.put("org.json.JSONObject", (Map<?, ?>) hashMap0);
      String string0 = jSONObject0.toString();
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      String string0 = jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<Character, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Character, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.put("isfloatValue", 921);
      jSONObject0.increment("isfloatValue");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("java.io.StringWriter@0000000003", "java.io.StringWriter@0000000003");
      boolean boolean0 = jSONObject0.has("java.io.StringWriter@0000000003");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("java.io.StringWriter@0000000003", "java.io.StringWriter@0000000003");
      String string0 = jSONObject0.getString("java.io.StringWriter@0000000003");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HashMap<Long, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Long, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.put("' and instead saw ''", 87);
      long long0 = jSONObject0.getLong("' and instead saw ''");
      assertEquals(87L, long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<Character> set0 = locale0.getExtensionKeys();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection<?>) set0);
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<CharArrayReader, Component.BaselineResizeBehavior> hashMap0 = new HashMap<CharArrayReader, Component.BaselineResizeBehavior>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("");
      assertNotSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<Character> set0 = locale0.getExtensionKeys();
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw ''", (Collection<?>) set0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("' and instead saw ''");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-33));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put("java.io.StringWriter@0000000003", (int) (byte) (-33));
      jSONObject0.getNumber("java.io.StringWriter@0000000003");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      HashMap<JTable.PrintMode, BigDecimal> hashMap0 = new HashMap<JTable.PrintMode, BigDecimal>();
      jSONObject0.put("java.io.StringWriter@0000000002", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getNumber("java.io.StringWriter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.put("' and instead saw ''", 87);
      assertFalse(jSONObject0.isEmpty());
      
      float float0 = jSONObject0.getFloat("' and instead saw ''");
      assertEquals(87.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HashMap<WebParam.Mode, RoundingMode> hashMap0 = new HashMap<WebParam.Mode, RoundingMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("org.json.JSONObject", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getFloat("org.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.io.StringWriter@0000000003", "java.io.StringWriter@0000000003");
      try { 
        jSONObject1.getBigDecimal("java.io.StringWriter@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOnce("Substring bounds error", hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("Substring bounds error", true);
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", byte0);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = JSONObject.doubleToString(437.22654);
      assertEquals("437.22654", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = JSONObject.doubleToString((byte)0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.increment("int");
      Map<String, Object> map0 = jSONObject0.toMap();
      try { 
        jSONObject0.append("int", map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[int] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("FbTE9]~xF9E:]I", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("fI", stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      hashMap0.put((Short) null, resource_AuthenticationType0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      Short short0 = new Short((short)10);
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.APPLICATION;
      hashMap0.put(short0, resource_AuthenticationType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"isisOpen\":[]k\"] not a string.\":99,\"Misplaced array.\":true,\"Null pointer\":99}");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 15 [character 16 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"a string\",\"\":true,\"intValue\":[],\"b\":-99,\"xx\":-99}");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"y\":7,\"] not a string.\":99,\"Misplaced array.\":[],\"Null pointer\":99,\"hashCode\":{}}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      BigDecimal bigDecimal0 = new BigDecimal(1617L);
      String[] stringArray0 = JSONObject.getNames((Object) bigDecimal0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("6**Zh0D ${s5,s3g", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      jSONObject0.write((Writer) mockPrintWriter0);
      assertEquals(62, charArrayWriter0.size());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(".|':fWf+0Ws K!q");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("8JR>y6eL", (-99L));
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean(">Z-86m4LMebkY-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("A/I%/g}o&7tv${+B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iskeySet", 0.0F);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      jSONObject0.put("#Jlj}tgMs\"N<)S_2+;o", 0.0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      HashMap<Character, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Character, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "/");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray0);
  }
}
