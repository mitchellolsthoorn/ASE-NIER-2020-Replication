/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 08:14:28 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.security.KeyRep;
import java.sql.JDBCType;
import java.text.Normalizer;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.swing.LayoutStyle;
import javax.tools.JavaFileObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      jSONObject1.optBoolean("pointer cannot be null");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.optInt("pointer cannot be null");
      charArrayWriter0.write("pointer cannot be null");
      jSONObject0.write((Writer) charArrayWriter0, 57, 57);
      String string0 = "TVP:GE]/[RbtGcul _";
      try { 
        jSONObject0.getJSONObject("pointer cannot be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Unable to write JSONObject value for key: ", "Unable to write JSONObject value for key: ");
      JSONObject jSONObject1 = jSONObject0.put("K9@TKD", (Collection<?>) null);
      JSONObject.valueToString("K9@TKD");
      JSONObject.valueToString(jSONObject1);
      jSONObject0.toMap();
      JSONObject jSONObject2 = (JSONObject)JSONObject.wrap(jSONObject0);
      BigDecimal bigDecimal0 = new BigDecimal((-943L));
      jSONObject2.accumulate("NZ", bigDecimal0);
      jSONObject0.remove("NZ");
      jSONObject0.optNumber("K9@TKD");
      jSONObject0.entrySet();
      jSONObject2.keys();
      JSONObject.quote("K9@TKD");
      try { 
        jSONObject0.getString("java.io.StringWriter@0000000016");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000035] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Unable to write JSONObject value for key: ", "Unable to write JSONObject value for key: ");
      JSONObject jSONObject1 = jSONObject0.put("K9@TKD", (Collection<?>) null);
      JSONObject.valueToString("K9@TKD");
      JSONObject.valueToString(jSONObject1);
      jSONObject0.toMap();
      JSONObject jSONObject2 = (JSONObject)JSONObject.wrap(jSONObject0);
      BigDecimal bigDecimal0 = new BigDecimal((-943L));
      JSONObject jSONObject3 = jSONObject2.accumulate("NZ", bigDecimal0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject4 = new JSONObject(jSONObject2, stringArray0);
      jSONObject2.optLong("ite");
      jSONObject0.put("Unable to write JSONObject value for key: ", (Object) bigDecimal0);
      jSONObject1.put("org.json.JSONObject@0000000001", 0.0F);
      JSONObject.stringToValue("ite");
      jSONObject3.optFloat("] is not a number.");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(501);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "s;";
      stringArray0[1] = "ite";
      stringArray0[2] = "?`E 6Ku";
      stringArray0[3] = "?`E 6Ku";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("fdv4%jgKN#0c1^", true);
      jSONObject1.optLong("?`E 6Ku");
      jSONObject1.put("?`E 6Ku", (Object) "ite");
      jSONObject0.put("] is not a JSONArray.", (float) 501);
      JSONObject.stringToValue("4L$7KSH");
      jSONObject0.optNumber("ite");
      Byte byte0 = new Byte((byte)4);
      JSONObject.wrap(byte0);
      jSONObject0.optNumber("ite", (Number) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a valid number.";
      String string0 = "m_@fTAq#{Qo(4\"Y0w1$";
      stringArray0[1] = "m_@fTAq#{Qo(4\"Y0w1$";
      stringArray0[2] = "dc]/;1>b;s2tw$$r$v";
      stringArray0[3] = "utf-8";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[4] = "xk9+Y0z.$'NjG";
      stringArray0[5] = "org.json.JSONTokener";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.put("6J}W_5O?!Uoe", (-1871L));
      try { 
        JSONObject.stringToNumber("6J}W_5O?!Uoe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a valid number.";
      stringArray0[1] = "m_@fTAq#{Qo(4\"Y0w1$";
      stringArray0[2] = "dc]/;1>b;s2tw$$r$v";
      stringArray0[3] = "utf-8";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[4] = "xk9+Y0z.$'NjG";
      String string0 = "org.json.JSONTokener";
      stringArray0[5] = "org.json.JSONTokener";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      long long0 = (-1871L);
      jSONObject0.put("6J}W_5O?!Uoe", (-1871L));
      try { 
        JSONObject.stringToNumber("6J}W_5O?!Uoe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ha";
      stringArray0[1] = "";
      String string0 = "e+}l";
      stringArray0[2] = "e+}l";
      stringArray0[3] = "s;";
      stringArray0[4] = "isspliterEOa]or";
      stringArray0[5] = "Null pointer";
      stringArray0[6] = "ite";
      stringArray0[7] = "?`E 6Ku";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.optLong("Null pointer");
      float float0 = 0.0F;
      JSONObject jSONObject1 = jSONObject0.put("e+}l", (Object) "Null pointer");
      // Undeclared exception!
      try { 
        jSONObject1.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.json.JSONException");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "index %d is out of bounds - the array has %d elements";
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString("index %d is out of bounds - the array has %d elements");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optBigDecimal("java.io.StringWriter@0000000003", bigDecimal0);
      JSONObject.quote((String) null);
      jSONObject0.increment("RHutwj%");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a valid number.";
      stringArray0[1] = "m_@fTAq#{Qo(4\"Y0w1$";
      MockFileWriter mockFileWriter0 = new MockFileWriter("s<E$_rR?nJ", true);
      JSONObject.indent(mockFileWriter0, 102);
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<CharArrayWriter, Month> hashMap0 = new HashMap<CharArrayWriter, Month>();
      JSONObject jSONObject1 = jSONObject0.put("e9,[.MP T}|", (Map<?, ?>) hashMap0);
      jSONObject1.optLong("s<E$_rR?nJ");
      jSONObject0.names();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject0.toString(9);
      long long0 = 224L;
      jSONObject1.put("java.io.StringWriter@0000000003", 224L);
      Boolean.valueOf(true);
      JSONObject.valueToString(jSONObject0);
      JSONObject.wrap("org.json.JSONObject@0000000001");
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ha";
      stringArray0[1] = "";
      stringArray0[2] = "e+}l";
      stringArray0[3] = "s;";
      stringArray0[4] = "isspliterEOa]or";
      stringArray0[5] = "Null pointer";
      stringArray0[6] = "ite";
      stringArray0[7] = "?`E 6Ku";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.optLong("Null pointer");
      jSONObject0.put("e+}l", (Object) "Null pointer");
      jSONObject0.put("s;", 0.0F);
      JSONObject.stringToValue("e+}l");
      jSONObject0.optFloat("e+}l");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K9@TKD", (Collection<?>) null);
      JSONObject.wrap("K9@TKD");
      JSONObject.valueToString(jSONObject1);
      jSONObject0.toMap();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject1.put("K9@TKD", false);
      jSONObject1.optLong("JSONArray[");
      JSONObject jSONObject3 = jSONObject1.put("?`E 6Ku", (Object) "?`E 6Ku");
      JSONObject jSONObject4 = jSONObject3.put("readUnsignedShort", (float) 0L);
      JSONObject.stringToValue("4l$7ksh");
      jSONObject4.optNumber("xIK%V0F(~Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("java.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "readUnsignedShort");
      JSONObject.wrap(printStream0);
      jSONObject0.isNull("?`E 6Ku");
      JSONObject.isDecimalNotation("Null key.");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      String string0 = "Unable to write JSONObject valuefor key: ";
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      jSONObject0.put("Unable to write JSONObject valuefor key: ", 1902);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      JSONObject.valueToString(objectOutputStream0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a valid number.";
      String string0 = "m_@fTAq#{Qo(4\"Y0w1$";
      stringArray0[1] = "m_@fTAq#{Qo(4\"Y0w1$";
      stringArray0[2] = "dc]/;1>b;s2tw$$r$v";
      stringArray0[3] = "utf-8";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[4] = "xk9+Y0z.$'NjG";
      stringArray0[5] = "org.json.JSONTokener";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.put("6J}W_5O?!Uoe", (-1871L));
      JSONObject.indent((Writer) null, (-1936));
      String string1 = "";
      jSONObject0.put("", (Object) null);
      // Undeclared exception!
      try { 
        JSONObject.quote("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a valid number.";
      String string0 = "m_@fTAq#{Qo(4\"Y0w1$";
      stringArray0[1] = "m_@fTAq#{Qo(4\"Y0w1$";
      stringArray0[2] = "dc]/;1>b;s2tw$$r$v";
      stringArray0[3] = "utf-8";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[4] = "xk9+Y0z.$'NjG";
      stringArray0[5] = "org.json.JSONTokener";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.put("6J}W_5O?!Uoe", (-1871L));
      JSONObject.getNames(jSONObject0);
      JSONObject.indent((Writer) null, (-1936));
      String string1 = "";
      jSONObject0.put("", (Object) null);
      // Undeclared exception!
      try { 
        JSONObject.quote("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject valuefor key: ", 1902);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      JSONObject.valueToString(objectOutputStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1902);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter1.write("Unable to write JSONObject valuefor key: ");
      Object object0 = new Object();
      jSONObject0.remove("java.io.StringWriter@0000000056");
      jSONObject1.optJSONObject("MEhNKFn9(;;");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(501);
      jSONObject0.toString(9);
      jSONObject0.put("java.io.StringWriter@0000000002", (long) 501);
      Boolean.valueOf(false);
      JSONObject.valueToString("java.io.StringWriter@0000000002");
      Float float0 = new Float((double) 9);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject.wrap(float0);
      jSONObject0.optNumber("java.io.StringWriter@0000000009");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("java.io.StringWriter@0000000002", "J^JD5Vu )M*u-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // J^JD5Vu )M*u-
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 50);
      JSONObject.wrap((Object) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K9@TKD", (Collection<?>) null);
      JSONObject.wrap("K9@TKD");
      JSONObject.valueToString(jSONObject1);
      jSONObject0.toMap();
      JSONObject jSONObject2 = (JSONObject)JSONObject.wrap(jSONObject0);
      BigDecimal bigDecimal0 = new BigDecimal((-943L));
      jSONObject2.accumulate("NZ", bigDecimal0);
      jSONObject0.remove("NZ");
      jSONObject0.optNumber("K9@TKD");
      jSONObject0.entrySet();
      JSONObject.quote("K9@TKD");
      try { 
        jSONObject0.getString("K9@TKD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000022] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      jSONObject0.optBoolean("pointer cannot be null");
      jSONObject0.optBoolean("pointer cannot be null");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("pointer cannot be null");
      jSONObject0.write((Writer) charArrayWriter0, 57, 57);
      jSONObject0.remove("] could not be converted to BigDecimal.");
      jSONObject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject valuefor key: ", 1902);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      JSONObject.valueToString(objectOutputStream0);
      jSONObject1.optBoolean("Unable to write JSONObject valuefor key: ", false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1902);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter1.write("Unable to write JSONObject valuefor key: ");
      Object object0 = new Object();
      jSONObject1.optFloat("G[dmhWm[Q#cP/o_");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      String string0 = "longValue";
      JSONObject jSONObject1 = jSONObject0.put("longValue", true);
      jSONObject1.toString((-1891));
      String string1 = "has";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((-1891));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1891
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = MockFile.createTempFile("a[l[Qb&p", "a[l[Qb&p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      JSONObject.indent(mockPrintWriter0, 102);
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("\"");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"";
      stringArray0[1] = "a[l[Qb&p";
      stringArray0[3] = null;
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = null;
      try { 
        jSONObject0.getLong("val [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<BufferedOutputStream, Double> hashMap0 = new HashMap<BufferedOutputStream, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "e~V_5=&(tr";
      stringArray0[1] = "#{~ :@f($oo[Gmn";
      stringArray0[2] = "4Pt6}ofDT";
      stringArray0[3] = "$hr`|;@ObMQ6v[UoVo";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.remove("4Pt6}ofDT");
      jSONObject0.optNumber("pPRN`BA");
      jSONObject0.entrySet();
      JSONObject.quote((String) null);
      jSONObject0.optNumber("false");
      String[] stringArray1 = new String[4];
      stringArray1[0] = null;
      stringArray1[1] = "e~V_5=&(tr";
      stringArray1[2] = "XPW9Km;u3#!Z9Z ,&";
      stringArray1[3] = "pPRN`BA";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray1);
      try { 
        jSONObject2.getLong("getlength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(501);
      String string0 = "] is not a JSONArray.";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("' and instead saw ''");
      Set<String> set0 = charset0.aliases();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONObject jSONObject1 = new JSONObject(510);
      jSONObject1.put("getreadByte", false);
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject jSONObject2 = new JSONObject(charArrayReader0);
      jSONObject2.optInt("' and instead saw ''", 501);
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = jSONObject3.putOnce("}r=1k'Xn>4", (Object) null);
      try { 
        jSONObject4.getFloat("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.writeValue(charArrayWriter0, "Unable to write JSONObject valuefor key: ", 1902, (-1));
      JSONObject jSONObject1 = jSONObject0.put("$G_ln,7lQ8QRQ", false);
      jSONObject0.optInt("f<X2W)", 592);
      String string0 = "}r=1k'Xn>4";
      jSONObject0.putOnce((String) null, charArrayWriter0);
      try { 
        jSONObject1.getFloat("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000060] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(501);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("] is not a JSONArray.");
      charset0.aliases();
      List<String> list0 = new LinkedList<String>();
      JSONObject jSONObject1 = new JSONObject(510);
      JSONObject jSONObject2 = jSONObject0.put("] is not a JSONArray.", true);
      jSONObject2.optInt("] is not a JSONArray.", (-1629));
      JSONObject jSONObject3 = new JSONObject(byteBuffer0);
      try { 
        jSONObject2.getFloat((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ha";
      stringArray0[1] = "";
      stringArray0[2] = "e+}l";
      stringArray0[3] = "s;";
      stringArray0[4] = "isspliterEOa]or";
      stringArray0[5] = "Null pointer";
      stringArray0[6] = "ite";
      stringArray0[7] = "?`E 6Ku";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("e+}l", false);
      jSONObject1.optLong("Null pointer");
      JSONObject jSONObject2 = jSONObject0.put("e+}l", (Object) "Null pointer");
      JSONObject jSONObject3 = jSONObject1.put("s;", 0.0F);
      jSONObject3.putOnce("_rb;VWV75x}Vm", (Object) null);
      JSONObject.stringToValue("e+}l");
      jSONObject0.optNumber("3");
      JSONObject.wrap(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      Short.decode("0");
      String string0 = "Iw<$;~8+-81}";
      jSONObject0.remove("NVd37MJ1N2.");
      jSONObject0.entrySet();
      JSONObject.stringToValue("0");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) " W2<AB6?gU[;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1986);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject1 = new JSONObject(bigInteger0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject2 = jSONObject0.put("]gOmLIHjI@", (Map<?, ?>) null);
      BigInteger bigInteger1 = BigInteger.TEN;
      jSONObject1.optBigInteger("s?GeG*u", bigInteger0);
      jSONObject1.optDouble("X^#N");
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) null);
      jSONObject3.optNumber("NBZCs\"9<R?");
      jSONObject2.remove("cC");
      try { 
        jSONObject0.getBigInteger("s?GeG*u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      // Undeclared exception!
      try { 
        jSONObject1.optQuery("Expected a ':' after a key");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      float float0 = 0.0F;
      Float float1 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("0", false);
      JSONObject jSONObject2 = jSONObject1.put("@ln", (double) 0.0F);
      Short short0 = Short.decode("0");
      hashMap0.getOrDefault("@ln", short0);
      JSONObject jSONObject3 = jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = "X^#N";
      jSONObject3.optBigInteger("X^#N", bigInteger0);
      jSONObject1.optDouble("Q1p");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      long long0 = 22L;
      jSONObject1.optLong("IZb7", 22L);
      jSONObject0.accumulate("0", (Object) null);
      jSONObject3.put("Unable to increment [", 22L);
      try { 
        jSONObject2.getFloat("IZb7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000047] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      Short short0 = Short.decode("0");
      hashMap0.getOrDefault("@ln", short0);
      JSONObject jSONObject1 = jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject1.optBigInteger("X^#N", bigInteger0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)jSONArray0.write((Writer) mockPrintWriter0);
      StringWriter stringWriter0 = new StringWriter(4490);
      stringWriter0.append((CharSequence) "@ln");
      mockPrintWriter1.println(4490);
      JSONObject.isDecimalNotation("IZb7");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = MockFile.createTempFile("a[l[Qb&p", "a[l[Qb&p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      JSONObject.indent(mockPrintWriter0, 102);
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("a[l[Qb&p", (Map<?, ?>) null);
      assertEquals(2, jSONObject0.length());
      
      jSONObject1.names();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "le");
      Integer integer0 = new Integer(15);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "><50rHm4g/";
      String string0 = "toLowerCase";
      stringArray0[2] = "toLowerCase";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.optInt("toLowerCase", 15);
      jSONObject0.optBoolean("><50rHm4g/");
      jSONObject0.names();
      LinkedList<PushbackInputStream> linkedList0 = new LinkedList<PushbackInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("><50rHm4g/", (Collection<?>) linkedList0);
      try { 
        jSONObject1.getFloat("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      File file0 = MockFile.createTempFile("org.json.JSONPointerException", "org.json.JSONPointerException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      JSONObject.indent(mockPrintWriter0, (-2606));
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Double double0 = new Double((-2606));
      jSONObject0.names();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject valuefor key: ", 1902);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      JSONObject.valueToString(objectOutputStream0);
      jSONObject1.optBoolean("Unable to write JSONObject valuefor key: ", false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1902);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter1.write("Unable to write JSONObject valuefor key: ");
      Object object0 = JSONObject.NULL;
      Class<JDBCType> class0 = JDBCType.class;
      try { 
        jSONObject0.getEnum(class0, "Unable to write JSONObject valuefor key: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000059] is not an enum of type java.io.StringWriter@0000000060.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      File file0 = MockFile.createTempFile("toU", "toU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      JSONObject.indent(mockPrintWriter0, 102);
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject1 = new JSONObject((Object) "toU");
      JSONObject jSONObject2 = jSONObject1.put("*A(D{4L()4PML1@p<", (Map<?, ?>) null);
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.UGARITIC;
      jSONObject2.optEnum(class0, "Expected a ':' after a key", character_UnicodeScript0);
      jSONObject0.put("-:%S9.^K:K", (Collection<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      jSONObject0.optBoolean("pointer cannot be null");
      jSONObject1.optBoolean("pointer cannot be null");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('s');
      JSONObject.writeValue(charArrayWriter0, "pointer cannot be null", 121, 28);
      charArrayWriter0.write("g_6GoSov>");
      jSONObject0.write((Writer) charArrayWriter0, 57, 57);
      charArrayWriter0.close();
      jSONObject0.getBoolean("pointer cannot be null");
      jSONObject0.optNumber("/RF!\"g2C=e}X!?");
      jSONObject1.remove("] could not be converted to BigDecimal.");
      jSONObject1.toMap();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.KOREAN;
      Locale locale2 = Locale.ITALY;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ao8S");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject1.entrySet();
      String string0 = "getClass";
      jSONObject1.optNumber("getClass");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "utf-8";
      String string1 = null;
      JSONObject.stringToValue("utf-8");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject1 = new JSONObject();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "getClass");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      JSONObject jSONObject0 = new JSONObject(roundingMode0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)109;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONPointer0.toString();
      jSONObject0.optQuery(jSONPointer0);
      linkedList0.add("b8Epxm");
      MockFileWriter mockFileWriter0 = new MockFileWriter("b8Epxm");
      jSONObject0.write((Writer) mockFileWriter0);
      jSONObject0.optQuery(jSONPointer0);
      jSONObject0.optDouble("s1}@xS63vTdOWt", 1491.37363);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.entrySet();
      float float0 = 0.0F;
      Float float1 = new Float(0.0F);
      String string0 = "0";
      String string1 = "longValue";
      JSONObject jSONObject1 = jSONObject0.put("longValue", true);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject1.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "pointer cannot be null";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      jSONObject0.optBoolean("pointer cannot be null");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = jSONObject1.keySet();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONPointer.builder();
      jSONObject1.optQuery(jSONPointer0);
      JSONObject.stringToValue("pointer cannot be null");
      try { 
        jSONObject0.getDouble("pointer cannot be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject valuefor key: ", 1902);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.UK;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      jSONObject0.get("Unable to write JSONObject valuefor key: ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      String string0 = "{";
      JSONObject.stringToValue("]");
      jSONObject1.getDouble("Unable to write JSONObject valuefor key: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("{");
      // Undeclared exception!
      try { 
        Charset.forName("gethashCode");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // gethashCode
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject valuefor key: ", 1902);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.UK;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      jSONObject0.get("Unable to write JSONObject valuefor key: ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject.stringToValue("]");
      jSONObject1.getDouble("Unable to write JSONObject valuefor key: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("{");
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.BATAK;
      jSONObject1.optEnum(class0, "]", character_UnicodeScript0);
      try { 
        jSONObject0.getJSONArray("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000056] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      jSONObject0.put("pointer cannot be null", false);
      try { 
        jSONObject0.getBigDecimal("pointer cannot be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      String string0 = "e+}l";
      String string1 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("0", false);
      jSONObject1.put("@ln", (double) 0.0F);
      Short short0 = Short.decode("0");
      hashMap0.getOrDefault("@ln", short0);
      JSONObject jSONObject2 = jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject2.optBigInteger("X^#N", bigInteger0);
      jSONObject1.optDouble("Q1{p|R");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      jSONObject1.optLong("IZb7", 0L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)jSONArray0.write((Writer) mockPrintWriter0);
      StringWriter stringWriter0 = new StringWriter(4490);
      stringWriter0.append((CharSequence) "@ln");
      mockPrintWriter1.println(4490);
      jSONObject1.write((Writer) mockPrintWriter1, 574, 102);
      jSONObject2.isEmpty();
      jSONObject0.optString("JSON does not allow non-finite numbers.", "@ln");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "(x*\\.{gA ";
      jSONObject0.toMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "NZ";
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      jSONObject0.optBigDecimal("(x*.{gA ", bigDecimal0);
      String string2 = "xdJ!\\ FB6q*|8";
      MockFile mockFile0 = new MockFile("xdJ! FB6q*|8");
      try { 
        MockFile.createTempFile("(x*.{gA ", "NZ", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      File file0 = MockFile.createTempFile("toU", "toU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      JSONObject.indent(mockPrintWriter0, 102);
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject1 = new JSONObject((Object) "toU");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(102);
      charArrayWriter0.write("toU");
      Object object0 = new Object();
      Class<JDBCType> class0 = JDBCType.class;
      try { 
        jSONObject1.getEnum(class0, "toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an enum of type java.io.StringWriter@0000000010.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ha";
      stringArray0[1] = "";
      stringArray0[2] = "e+}l";
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      JSONObject.valueToString("e+}l");
      JSONObject jSONObject0 = new JSONObject();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jSONObject0.accumulate("s;", sequenceInputStream0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optJSONArray("P#.zI1HImzo");
      Object object0 = JSONObject.NULL;
      Class<JDBCType> class0 = JDBCType.class;
      try { 
        jSONObject0.getEnum(class0, "0@Zd@W^Vx*%CaG9]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an enum of type java.io.StringWriter@0000000010.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("3.+?(Za^%Om");
      Short short0 = new Short((short)123);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3.+?(Za^%Om";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      JSONObject jSONObject1 = new JSONObject(short0, stringArray0);
      HashMap<BufferedOutputStream, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<BufferedOutputStream, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject2.put(stringArray0[2], false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("0", false);
      JSONObject jSONObject2 = jSONObject1.put("@ln", (double) 0.0F);
      JSONObject jSONObject3 = jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject3.optBigInteger("X^#N", bigInteger0);
      jSONObject1.optDouble("Q1{p|R");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)jSONArray0.write((Writer) mockPrintWriter0);
      bufferedOutputStream0.close();
      jSONObject1.optInt("@ln");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter1, 3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bufferedWriter0;
      objectArray0[1] = (Object) jSONObject0;
      objectArray0[2] = (Object) set0;
      Object object0 = JSONObject.NULL;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "X^#N";
      objectArray0[5] = (Object) jSONObject0;
      objectArray0[6] = (Object) bufferedWriter0;
      objectArray0[7] = (Object) float0;
      objectArray0[8] = (Object) "Q1{p|R";
      mockPrintWriter1.format("Stepping back two steps is not supported", objectArray0);
      BufferedWriter bufferedWriter1 = (BufferedWriter)jSONObject1.write((Writer) bufferedWriter0, 3, 77);
      jSONObject3.optString("X^#N");
      jSONObject2.write((Writer) bufferedWriter1, (-1145), (-1082));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "index %d is out of bounds - the array has %d elements";
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString("index %d is out of bounds - the array has %d elements");
      jSONObject0.increment("RHutwj%");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "3.+?(Za^%Om";
      JSONObject.stringToValue("3.+?(Za^%Om");
      try { 
        jSONObject0.getString("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = Boolean.valueOf(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte) (-127);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pushbackInputStream0);
      jSONObject0.accumulate("R .(B%x(9I><wpWP@I", sequenceInputStream0);
      JSONObject.valueToString(boolean0);
      JSONObject jSONObject1 = jSONObject0.accumulate("(x*.{gA ", jSONObject0);
      jSONObject1.remove("gpv:`SI5~EWM9U@S#H");
      try { 
        jSONObject0.getString("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000898] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      jSONObject0.optBoolean("pointer cannot be null");
      jSONObject1.optBoolean("pointer cannot be null");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("pointer cannot be null");
      jSONObject0.write((Writer) charArrayWriter0, 57, 57);
      charArrayWriter0.close();
      jSONObject0.getBoolean("pointer cannot be null");
      jSONObject1.remove("] could not be converted to BigDecimal.");
      jSONObject1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, (-2154), (-2154));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("utf-8");
      String string0 = "/\\p$w{/UN";
      String string1 = "oZ.6 ;Pz0 2coA|>";
      jSONObject0.put("oZ.6 ;Pz0 2coA|>", 0L);
      jSONObject0.optBoolean("/p$w{/UN");
      jSONObject0.optBoolean("/p$w{/UN");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("utf-8");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('6');
      int int0 = 5218;
      charArrayWriter0.write(116);
      jSONObject0.write((Writer) charArrayWriter1, 3013, 3013);
      try { 
        jSONObject0.putOnce("oZ.6 ;Pz0 2coA|>", "/p$w{/UN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"oZ.6 ;Pz0 2coA|>\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject.quote(stringArray0[0]);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(501);
      String string0 = "] is not a JSONArray.";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("] is not a JSONArray.");
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      JSONObject.stringToValue("] is not a JSONArray.");
      String string1 = "getavailable";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("3.+?(Za^%Om");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3.+?(Za^%Om";
      stringArray0[1] = "3.+?(Za^%Om";
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate("org.json.JSONObject@0000000001", (Object) null);
      String string0 = "Q";
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String string1 = null;
      jSONObject0.optLong("~$");
      JSONObject jSONObject2 = jSONObject1.put("Q", (Object) "~$");
      // Undeclared exception!
      try { 
        jSONObject2.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject0.toString(9);
      JSONObject jSONObject1 = jSONObject0.put("(x*.{gA ", (long) 9);
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.getNumber("(x*.{gA ");
      JSONObject.valueToString(boolean0);
      JSONObject jSONObject2 = new JSONObject();
      String string0 = "Nesting too deep.";
      try { 
        jSONObject1.getBigDecimal("Nesting too deep.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<PipedWriter, Dialog.ModalityType> hashMap0 = new HashMap<PipedWriter, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockFile mockFile0 = new MockFile("getasCharBuffer", "$|u!/~Q<u&!Qv2,,B");
      File file0 = MockFile.createTempFile("getasCharBuffer", "$|u!/~Q<u&!Qv2,,B", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      JSONObject.getNames((Object) bufferedInputStream0);
      Byte byte0 = new Byte((byte)8);
      JSONObject.wrap(bufferedOutputStream0);
      jSONObject0.optNumber("-g", (Number) byte0);
      try { 
        jSONObject0.getBoolean("-g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ha";
      stringArray0[1] = "";
      stringArray0[2] = "e+}l";
      stringArray0[3] = "s;";
      stringArray0[4] = "isspliterEOa]or";
      stringArray0[5] = "Null pointer";
      stringArray0[6] = "ite";
      stringArray0[7] = "?`E 6Ku";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("e+}l", false);
      jSONObject1.optLong("Null pointer");
      JSONObject jSONObject2 = jSONObject0.put("e+}l", (Object) "Null pointer");
      jSONObject1.put("s;", 0.0F);
      JSONObject.stringToValue("e+}l");
      jSONObject0.optNumber("3");
      JSONObject.wrap(jSONObject2);
      JSONObject.getNames((Object) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Locale.LanguageRange> hashMap0 = new HashMap<Double, Locale.LanguageRange>();
      jSONObject0.put("false", (Map<?, ?>) hashMap0);
      JSONObject.getNames((Object) null);
      try { 
        jSONObject0.getNumber("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject.stringToValue("+1MqC'mmV<Wu}");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString("pointer cannot be null");
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("java.io.StringWriter@0000000002");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "K9@TKD";
      jSONObject0.put("K9@TKD", (Collection<?>) null);
      JSONObject.wrap("K9@TKD");
      jSONObject0.toMap();
      jSONObject0.opt("NZ");
      jSONObject0.remove("NZ");
      jSONObject0.optNumber("K9@TKD");
      jSONObject0.entrySet();
      JSONObject.quote("K9@TKD");
      jSONObject0.optNumber("tq8uP\";}WOhS");
      jSONObject0.optNumber("`nL9h");
      // Undeclared exception!
      try { 
        jSONObject0.query("tq8uP\";}WOhS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(501);
      boolean boolean0 = false;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("] is not a JSONArray.");
      Set<String> set0 = charset0.aliases();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONObject jSONObject1 = new JSONObject(510);
      JSONObject jSONObject2 = jSONObject0.put("] is not a JSONArray.", false);
      jSONObject2.optInt("] is not a JSONArray.", (-1629));
      jSONObject2.putOnce("}r=1k'Xn>4", jSONObject0);
      try { 
        jSONObject2.getFloat((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.KOREAN;
      Locale locale2 = Locale.ITALY;
      HashMap<BigInteger, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<BigInteger, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject2.entrySet();
      JSONObject.stringToValue("java.lang.Long@0000000050");
      jSONObject2.optNumber("-,-rGajg");
      // Undeclared exception!
      try { 
        jSONObject2.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ha";
      stringArray0[1] = "";
      stringArray0[2] = "e+}l";
      stringArray0[3] = "s;";
      stringArray0[4] = "isspliterEOa]or";
      stringArray0[5] = "Null pointer";
      stringArray0[6] = "ite";
      stringArray0[7] = "?`E 6Ku";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("e+}l", false);
      jSONObject1.optLong("Null pointer");
      JSONObject jSONObject2 = jSONObject0.put("e+}l", (Object) "Null pointer");
      jSONObject1.put("s;", 0.0F);
      JSONObject.stringToValue("e+}l");
      jSONObject0.optNumber("3");
      JSONObject.wrap(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean0);
      Boolean.valueOf("I");
      JSONObject.wrap(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject0.toString(9);
      JSONObject jSONObject2 = jSONObject1.put("java.io.StringWriter@0000000003", 224L);
      LinkedList<Resource.AuthenticationType> linkedList0 = new LinkedList<Resource.AuthenticationType>();
      // Undeclared exception!
      try { 
        jSONObject2.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "K9@TKD";
      JSONObject jSONObject1 = jSONObject0.put("K9@TKD", (Collection<?>) null);
      try { 
        jSONObject1.getJSONObject("e>=7ZKSB~WM`$i7q`s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JSONTokener jSONTokener0 = new JSONTokener(mockFileReader0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ha";
      stringArray0[1] = "";
      stringArray0[2] = "e+}l";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[3] = "s;";
      stringArray0[4] = "isspliterEOa]or";
      stringArray0[5] = "Null pointer";
      stringArray0[6] = "ite";
      stringArray0[7] = "?`E 6Ku";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("e+}l", false);
      jSONObject1.optLong("Null pointer");
      jSONObject0.put("e+}l", (Object) "Null pointer");
      jSONObject1.put("s;", 0.0F);
      JSONObject.stringToValue("e+}l");
      jSONObject0.optNumber("3");
      jSONObject0.remove("fliy82");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 9;
      jSONObject0.toString(9);
      JSONObject jSONObject1 = jSONObject0.put("ava", 0L);
      jSONObject0.optBoolean("-%c7H&f)", true);
      jSONObject0.optBoolean("Unable to preserve stream position");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("TyaZrv");
      charArrayWriter0.append('t');
      try { 
        jSONObject1.getFloat("nSIim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject valuefor key: ", 1902);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      JSONObject.valueToString(objectOutputStream0);
      jSONObject1.optBoolean("Unable to write JSONObject valuefor key: ", true);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject2 = new JSONObject(bigInteger0);
      JSONObject jSONObject3 = jSONObject0.put("java.io.StringWriter@0000000056", (Map<?, ?>) hashMap0);
      JSONObject jSONObject4 = new JSONObject(jSONObject3);
      jSONObject0.names();
      try { 
        jSONObject4.getNumber("java.io.StringWriter@0000000056");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000079] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      hashMap0.entrySet();
      String string0 = "IZb7";
      jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3087);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('t');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "IZb7");
      charArrayWriter2.write("Nesting too deep.");
      charArrayWriter2.append('\'');
      charArrayWriter2.write(72);
      Class<DayOfWeek> class0 = DayOfWeek.class;
      jSONObject0.optEnum(class0, "`z)T6");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A JSONObject text must end with '}'");
      jSONObject0.write((Writer) charArrayWriter1, 3013, 3087);
      CharArrayWriter charArrayWriter3 = charArrayWriter0.append('t');
      charArrayWriter3.close();
      CharBuffer charBuffer0 = CharBuffer.allocate(47);
      // Undeclared exception!
      try { 
        charArrayWriter1.append((CharSequence) charBuffer0, 72, 3013);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("longValue", true);
      jSONObject1.getBoolean("longValue");
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optDouble((String) null);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      int int0 = 117;
      try { 
        jSONArray0.getJSONObject(117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[117] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      jSONObject0.optBoolean("pointer cannot be null");
      jSONObject1.optBoolean("pointer cannot be null");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.writeValue(charArrayWriter0, "pointer cannot be null", 121, 28);
      charArrayWriter0.write("g_6GoSov>");
      jSONObject0.write((Writer) charArrayWriter0, 57, 57);
      charArrayWriter0.close();
      jSONObject0.getBoolean("pointer cannot be null");
      jSONObject0.optNumber("/RF!\"g2C=e}X!?");
      jSONObject1.remove("] could not be converted to BigDecimal.");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("longValue", true);
      jSONObject1.getBoolean("longValue");
      String string0 = "@ln";
      JSONObject jSONObject2 = jSONObject1.put("0", (double) 0.0F);
      jSONObject2.put("@ln", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string1 = null;
      jSONObject2.optBigInteger((String) null, bigInteger0);
      jSONObject0.optDouble((String) null);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      jSONArray0.write((Writer) mockPrintWriter0);
      int int0 = 117;
      try { 
        jSONArray0.getJSONObject(117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[117] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject0.toString(9);
      JSONObject jSONObject1 = jSONObject0.put("(x*.{gA ", 0L);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject.valueToString(boolean0);
      jSONObject0.accumulate("(x*.{gA ", jSONObject1);
      try { 
        jSONObject1.getBigDecimal("Nesting too deep.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000001720] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      String[] stringArray0 = new String[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "NdlRxb2fG %JU)";
      stringArray0[1] = "JSONArray initial value should be a string or collection or array.";
      String string0 = "toString";
      stringArray0[2] = "toString";
      JSONObject jSONObject0 = new JSONObject(objectOutputStream0, stringArray0);
      try { 
        jSONObject0.getBigInteger("a=*6^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      JSONObject jSONObject1 = jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject1.optBigInteger("X^#N", bigInteger0);
      jSONObject0.optDouble("IZb7");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      jSONObject1.optNumber("is");
      jSONObject1.remove("IZb7");
      try { 
        jSONObject1.getBigInteger("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = jSONObject0.toString(9);
      JSONObject jSONObject1 = jSONObject0.put("(x*.{gA ", (long) 9);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean0);
      JSONObject jSONObject2 = jSONObject0.accumulate("(x*.{gA ", jSONObject1);
      jSONObject1.put("java.io.StringWriter@0000000002", 0L);
      float float0 = jSONObject0.getFloat(string0);
      String string1 = "tg44,$QWj";
      jSONObject2.optDouble(string1, (double) float0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      String string0 = "A_yl";
      String string1 = "Unable to write JSONObject valuefor key: ";
      JSONObject jSONObject1 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      JSONObject jSONObject2 = jSONObject1.put("A_yl", 0L);
      jSONObject2.optBoolean("/p$w{/UN");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("Unable to write JSONObject valuefor key: ");
      charArrayWriter0.append('t');
      int int0 = 5218;
      charArrayWriter0.write(5218);
      Class<DayOfWeek> class0 = DayOfWeek.class;
      jSONObject1.optEnum(class0, "value [%s] is not an array or object therefore its key %s cannot be resolved");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`z)T6");
      try { 
        jSONObject2.write((Writer) charArrayWriter0, 3013, 5218);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(52);
      HashMap<BufferedOutputStream, Double> hashMap0 = new HashMap<BufferedOutputStream, Double>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "e~V\\_5=&(tr";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$hr`|;@ObMQ6v[UoVo";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.put("fdv4%jgKN#0c1^", true);
      jSONObject0.optLong("fdv4%jgKN#0c1^");
      JSONObject jSONObject3 = jSONObject1.put("e~V_5=&(tr", (Object) hashMap0);
      jSONObject3.put("$hr`|;@ObMQ6v[UoVo", (float) 0L);
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 58);
      JSONObject jSONObject2 = new JSONObject(bufferedInputStream0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1028L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      String string0 = "@ln";
      String string1 = null;
      int int0 = 13;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject1 = new JSONObject(pipedInputStream0);
      String string0 = "/\\p$w{/UN";
      JSONObject jSONObject2 = jSONObject0.put("A_yl", 0L);
      jSONObject2.optBoolean("{NP+~Knh=cq+,}=NoK'");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("/p$w{/UN");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('e');
      charArrayWriter1.write((-2461));
      jSONObject1.write((Writer) charArrayWriter0, (-1330), (-489));
      charArrayWriter1.close();
      // Undeclared exception!
      try { 
        charArrayWriter1.append((CharSequence) "Unable to write JSONObject value for key: ", 1789, 1371);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject.stringToValue("] could not be converted to BigInteger.");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(boolean0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("] could not be converted to BigInteger.", "Illegal escape.");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject1.optJSONArray("] could not be converted to BigInteger.");
      try { 
        jSONObject0.getInt("=GFh?N&^~ p9/^RI6x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("0", false);
      JSONObject jSONObject2 = jSONObject1.put("@ln", (double) 0.0F);
      jSONObject2.put("0", (-1.0));
      JSONObject jSONObject3 = jSONObject0.put("IZb7", (-2625L));
      jSONObject2.getFloat("0");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.entrySet();
      JSONObject.stringToValue("toLowerCase");
      Number number0 = jSONObject3.optNumber("IZb7");
      JSONObject.wrap(number0);
      jSONObject0.keySet();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      hashMap0.entrySet();
      boolean boolean0 = false;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list1);
      int int0 = 1975;
      JSONObject jSONObject1 = new JSONObject(1975);
      String string0 = "r{E rksdu ";
      JSONObject jSONObject2 = jSONObject1.put("r{E rksdu ", true);
      try { 
        jSONObject2.getFloat("r{E rksdu ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 510;
      JSONObject jSONObject0 = new JSONObject(510);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      JSONObject jSONObject1 = new JSONObject(510);
      JSONObject jSONObject2 = jSONObject0.put("] is not a JSONArray.", false);
      jSONObject2.optInt("] is not a JSONArray.", (-1629));
      try { 
        jSONObject2.getFloat("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("3.+?(Za^%Om");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3.+?(Za^%Om";
      stringArray0[1] = "3.+?(Za^%Om";
      stringArray0[2] = null;
      stringArray0[3] = "getClass";
      JSONObject jSONObject1 = new JSONObject("3.+?(Za^%Om", stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("3.+?(Za^%Om", false);
      jSONObject2.put("[2E6Uw,'z{^u:kp1.Ep", 1L);
      try { 
        jSONObject1.getFloat("3.+?(Za^%Om");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "3.+?(Za^%Om";
      JSONObject.stringToValue("3.+?(Za^%Om");
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject.getNames((Object) "utf-8");
      Long long0 = new Long(0L);
      StringWriter stringWriter0 = new StringWriter();
      HashMap<BigInteger, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<BigInteger, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.entrySet();
      JSONObject.stringToValue("-,-rGajg");
      jSONObject0.optNumber(" RM1Aq[K3J\"~^");
      // Undeclared exception!
      try { 
        jSONObject0.query("-,-rGajg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject.getNames((Object) "utf-8");
      Long long0 = new Long(0L);
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1415.5802F));
      MockFileWriter mockFileWriter0 = new MockFileWriter("] is not a valid number.", false);
      JSONObject.indent(mockFileWriter0, 102);
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject1 = new JSONObject((Object) "m_@fTAq#{Qo(4\"Y0w1$");
      HashMap<CharArrayWriter, Month> hashMap0 = new HashMap<CharArrayWriter, Month>();
      JSONObject jSONObject2 = jSONObject0.put("e9,[.MP T}|", (Map<?, ?>) hashMap0);
      jSONObject2.optLong("] is not a valid number.");
      jSONObject0.names();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0);
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-538));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -538
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ha";
      String string0 = "";
      stringArray0[1] = "";
      stringArray0[2] = "e+}l";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[3] = "s;";
      stringArray0[4] = "isspliterator";
      stringArray0[5] = "Null pointer";
      stringArray0[6] = "ite";
      stringArray0[7] = "?`E 6Ku";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("e+}l", false);
      jSONObject1.optLong("Null pointer");
      jSONObject0.put("e+}l", (Object) null);
      jSONObject1.put("s;", 0.0F);
      jSONObject0.optLong("&Y<Uw&?)0]", 0L);
      try { 
        jSONObject0.getBigDecimal("cxp<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K9@TKD", (Collection<?>) null);
      JSONObject.wrap("K9@TKD");
      jSONObject0.toMap();
      JSONObject jSONObject2 = (JSONObject)JSONObject.wrap(jSONObject0);
      BigDecimal bigDecimal0 = new BigDecimal((-943L));
      jSONObject2.optString("B`RaA");
      HashMap<DayOfWeek, Byte> hashMap0 = new HashMap<DayOfWeek, Byte>();
      jSONObject2.has("");
      jSONObject1.put("D-[f8$ yOZjldt", 1294.5F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.FALSE;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      JSONObject.valueToString(locale_FilteringMode0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Nesting error.", (Object) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optJSONArray((String) null);
      Object object1 = JSONObject.NULL;
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("0", false);
      jSONObject1.put("@ln", (double) 0.0F);
      Short short0 = Short.decode("0");
      hashMap0.getOrDefault("@ln", short0);
      JSONObject jSONObject2 = jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject2.optBigInteger("X^#N", bigInteger0);
      jSONObject1.optDouble("Q1{p|R");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)jSONArray0.write((Writer) mockPrintWriter0);
      StringWriter stringWriter0 = new StringWriter(4490);
      stringWriter0.append((CharSequence) "@ln");
      mockPrintWriter1.println(4490);
      jSONObject1.write((Writer) mockPrintWriter1, 574, 102);
      jSONObject2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(13);
      JSONObject jSONObject1 = jSONObject0.put(".", false);
      jSONObject0.optBoolean("#");
      jSONObject1.remove("I`,?xFt!ox=");
      jSONObject1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<KeyRep.Type> class0 = KeyRep.Type.class;
      KeyRep.Type keyRep_Type0 = KeyRep.Type.PRIVATE;
      jSONObject0.optEnum(class0, "`;U2%Z:YBjWH15", keyRep_Type0);
      jSONObject0.put("Misplaced array.", false);
      try { 
        jSONObject0.getBigDecimal("ma");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float(3770.11F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "Iw<$;~8+-81}";
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONObject0.optEnum(class0, "Iw<$;~8+-81}");
      jSONObject0.remove("Iw<$;~8+-81}");
      HashMap<Double, Locale.LanguageRange> hashMap0 = new HashMap<Double, Locale.LanguageRange>();
      Double double0 = null;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=~
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      long long0 = 1L;
      Class<Month> class0 = Month.class;
      jSONObject1.optEnum(class0, "*qrQuu;$$,jmAkj_P$");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("pointer cannot be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<PipedWriter, Dialog.ModalityType> hashMap0 = new HashMap<PipedWriter, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%vq";
      stringArray0[1] = "tr";
      stringArray0[3] = "";
      stringArray0[4] = "tr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONObject(stringArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile("a[l[Qb&p", "a[l[Qb&p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      JSONObject.indent(mockPrintWriter0, 102);
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject.stringToValue("a[l[Qb&p");
      jSONObject0.optNumber("a[l[Qb&p");
      JSONObject.wrap(linkedList0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      JSONObject jSONObject2 = jSONObject1.put("/p$w{/UN", 1L);
      jSONObject0.optBoolean("pointer cannot be null");
      Charset charset0 = Charset.defaultCharset();
      charset0.newEncoder();
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      jSONObject3.get("pointer cannot be null");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "pointer cannot be null");
      JSONObject.valueToString(stringWriter1);
      HashMap<ByteArrayInputStream, MockFileReader> hashMap0 = new HashMap<ByteArrayInputStream, MockFileReader>();
      HashMap<Float, StringWriter> hashMap1 = new HashMap<Float, StringWriter>();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter1, 1720);
      JSONObject.wrap(bufferedWriter0);
      JSONObject jSONObject4 = new JSONObject((Map<?, ?>) hashMap1);
      jSONObject4.put("pointer cannot be null", false);
      jSONObject1.put("pointer cannot be null", 1.0);
      jSONObject4.toString();
      // Undeclared exception!
      try { 
        jSONObject2.query("pointer cannot be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject valuefor key: ", 1902);
      jSONObject1.optBoolean("Unable to write JSONObject valuefor key: ", false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter1.write("Unable to write JSONObject valuefor key: ");
      charArrayWriter1.append('1');
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      String string0 = "A_yl";
      String string1 = "Unable to write JSONObject value for key: ";
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject value for key: ", false);
      long long0 = 0L;
      JSONObject jSONObject2 = jSONObject1.put("A_yl", 0L);
      jSONObject0.optBoolean((String) null, false);
      jSONObject2.optBoolean("/p$w{/UN");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("Unable to write JSONObject value for key: ");
      charArrayWriter0.append('t');
      charArrayWriter0.write(5218);
      charArrayWriter0.close();
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "Unable to write JSONObject value for key: ", 5218, 5218);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 510;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      jSONObject0.optInt("NgM!r|5", 510);
      jSONObject0.opt("NZ");
      jSONObject0.optDouble("{");
      try { 
        jSONObject0.getNumber("ho1bJTysee);");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ha";
      stringArray0[1] = "";
      stringArray0[2] = "e+}l";
      Float float0 = new Float(0.0F);
      Short short0 = new Short((short) (-399));
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      hashMap0.put(float0, short0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      Float float1 = new Float((double) (short)826);
      hashMap0.putIfAbsent(float1, (Short) null);
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      String string0 = "Unable to write JSONObject value for key: ";
      jSONObject0.put("Unable to write JSONObject value for key: ", false);
      JSONObject.quote("T\"");
      long long0 = 0L;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("Unable to write JSONObject value for key: ");
      charArrayWriter0.append('t');
      charArrayWriter0.write(5218);
      charArrayWriter0.close();
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "Unable to write JSONObject value for key: ", 5218, 5218);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Character.UnicodeScript, Character> hashMap0 = new HashMap<Character.UnicodeScript, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cC";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.KOREAN;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList2);
      JSONPointer jSONPointer1 = new JSONPointer(linkedList2);
      jSONObject1.optQuery(jSONPointer1);
      String string0 = "8D.u$m";
      JSONObject.stringToValue("");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<PipedWriter, Dialog.ModalityType> hashMap0 = new HashMap<PipedWriter, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 3);
      JSONObject.wrap(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 3);
      JSONObject.wrap("v;!");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Locale.LanguageRange> hashMap0 = new HashMap<Double, Locale.LanguageRange>();
      MockFile mockFile0 = new MockFile("getasFloatBuffer");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream1);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 3);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      JSONObject.wrap(roundingMode0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "pointer cannot be null");
      jSONObject1.put("/p$w{/UN", 1L);
      try { 
        jSONObject1.getFloat("L9~j\"4g(0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000037] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      JSONObject.valueToString(jSONObject0);
      boolean boolean0 = false;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      JSONPointer jSONPointer0 = new JSONPointer(list1);
      jSONObject1.optQuery(jSONPointer0);
      JSONObject jSONObject2 = jSONObject0.put("WvS", false);
      jSONObject2.optInt("`", (-1629));
      try { 
        jSONObject1.getFloat((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K9@TKD", (Collection<?>) null);
      JSONObject.wrap("K9@TKD");
      jSONObject0.toMap();
      jSONObject0.opt("NZ");
      JSONObject.stringToValue("K9@TKD");
      jSONObject0.optNumber("K9@TKD");
      jSONObject0.entrySet();
      JSONObject.quote("K9@TKD");
      jSONObject1.remove("XPW9Km;u3#!Z9Z ,&");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optBigDecimal("", (BigDecimal) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "J.#)=[xn&+Gt";
      stringArray0[1] = "J.#)=[xn&+Gt";
      stringArray0[2] = "";
      stringArray0[3] = "9";
      JSONObject jSONObject1 = new JSONObject(hashMap0, stringArray0);
      jSONObject1.entrySet();
      jSONObject1.put("9", 1899);
      JSONObject.stringToValue("getread");
      jSONObject1.optNumber("9");
      jSONObject0.remove("J.#)=[xn&+Gt");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "pointer cannot be null";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", true);
      long long0 = 1L;
      jSONObject1.put("/p$w{/UN", 1L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.optBoolean("pointer cannot be null");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "pointer cannot be null");
      charArrayWriter0.write("pointer cannot be null");
      Long long1 = new Long(1L);
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "index %d is out of bounds - the array has %d elements";
      stringArray0[1] = "index %d is out of bounds - the array has %d elements";
      stringArray0[2] = "0000";
      stringArray0[3] = "index %d is out of bounds - the array has %d elements";
      stringArray0[4] = "index %d is out of bounds - the array has %d elements";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("/", true);
      jSONObject0.put("index %d is out of bounds - the array has %d elements", 0L);
      try { 
        jSONObject2.getFloat("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      String string0 = "A_yl";
      String string1 = "Unable to write JSONObject value for key: ";
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject value for key: ", false);
      String string2 = "/\\p$w{/UN";
      JSONObject jSONObject2 = jSONObject1.put("A_yl", 0L);
      jSONObject2.optBoolean("/p$w{/UN");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("Unable to write JSONObject value for key: ");
      charArrayWriter0.append('t');
      int int0 = 5218;
      charArrayWriter0.write(5218);
      // Undeclared exception!
      jSONObject2.write((Writer) charArrayWriter0, 3013, 5218);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "is";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = jSONObject0.keySet();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list1 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      Locale.filterTags(list1, (Collection<String>) list0);
      JSONObject.stringToValue("h[O]");
      try { 
        jSONObject0.getDouble("getavailable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Character.UnicodeScript, Character> hashMap0 = new HashMap<Character.UnicodeScript, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cC";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.KOREAN;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject1.optQuery(jSONPointer0);
      JSONObject.stringToValue("cC");
      try { 
        jSONObject0.getDouble("getavailable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      jSONObject0.put("@ln", (double) 0.0F);
      JSONObject jSONObject1 = jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject1.optBigInteger("X^#N", bigInteger0);
      jSONObject0.optDouble("IZb7");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      jSONArray0.write((Writer) mockPrintWriter0);
      try { 
        jSONObject1.put("IZb7", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      jSONObject0.optBoolean("pointer cannot be null");
      jSONObject1.optBoolean("pointer cannot be null");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.writeValue(charArrayWriter0, "pointer cannot be null", 121, 28);
      String string0 = "g_6GoSov>";
      charArrayWriter0.write("g_6GoSov>");
      jSONObject1.optInt("JSONArray initial value should be a string or collection or array.", 32);
      try { 
        jSONObject0.putOnce("pointer cannot be null", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"pointer cannot be null\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject();
      Character character0 = new Character('e');
      jSONObject0.putOnce(":!v])wd'.n_i}vp|Kht", ":!v])wd'.n_i}vp|Kht");
      jSONObject1.accumulate(":!v])wd'.n_i}vp|Kht", character0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optJSONArray("d]{O)sIw&XLeA");
      try { 
        jSONObject1.getInt("F%GW3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "ponter cannot be null";
      stringArray0[2] = "ponter cannot be null";
      JSONObject jSONObject0 = new JSONObject("ponter cannot be null", stringArray0);
      jSONObject0.put("ponter cannot be null", false);
      try { 
        jSONObject0.getBigDecimal("ponter cannot be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1858);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "get";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONObject("%vq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JSONObject.numberToString(integer0);
      JSONObject jSONObject0 = new JSONObject(103);
      // Undeclared exception!
      try { 
        jSONObject0.query("java.lang.Integer@0000000001");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      JSONObject jSONObject2 = jSONObject1.put("/p$w{/UN", 1L);
      jSONObject0.optBoolean("pointer cannot be null");
      Charset charset0 = Charset.defaultCharset();
      charset0.newEncoder();
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      jSONObject3.get("pointer cannot be null");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "pointer cannot be null");
      JSONObject.valueToString(stringWriter1);
      HashMap<ByteArrayInputStream, MockFileReader> hashMap0 = new HashMap<ByteArrayInputStream, MockFileReader>();
      HashMap<Float, StringWriter> hashMap1 = new HashMap<Float, StringWriter>();
      JSONObject jSONObject4 = new JSONObject((Map<?, ?>) hashMap1);
      jSONObject4.put("pointer cannot be null", false);
      jSONObject1.put("pointer cannot be null", 1.0);
      jSONObject4.toString();
      // Undeclared exception!
      try { 
        jSONObject2.query("pointer cannot be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Character.UnicodeScript, Character> hashMap0 = new HashMap<Character.UnicodeScript, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "null";
      jSONObject0.optBoolean("null");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String string1 = "index %d is out of bounds - the array has %d elements";
      charArrayWriter0.write("index %d is out of bounds - the array has %d elements");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('t');
      int int0 = 5218;
      charArrayWriter1.write(125);
      charArrayWriter0.close();
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "index %d is out of bounds - the array has %d elements", (-3073), 69);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "ponter cannot be null";
      stringArray0[2] = "ponter cannot be null";
      JSONObject jSONObject0 = new JSONObject("ponter cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("ponter cannot be null", false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        jSONObject1.getInt("c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = null;
      HashMap<Character, Thread.State> hashMap0 = new HashMap<Character, Thread.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getInt("Bad vaue from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "org.json.JSONPointerException";
      JSONTokener jSONTokener0 = new JSONTokener("org.json.JSONPointerException");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.GERMAN;
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'k';
      charArray0[5] = '\"';
      JSONTokener jSONTokener0 = new JSONTokener("29pPfHkMdo4@e.MkFA");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      jSONObject1.optBoolean("pointer cannot be null");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.optInt("pointer cannot be null");
      charArrayWriter0.write("pointer cannot be null");
      jSONObject0.write((Writer) charArrayWriter0, 57, 57);
      HashMap<Locale.LanguageRange, JavaFileObject.Kind> hashMap0 = new HashMap<Locale.LanguageRange, JavaFileObject.Kind>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getJSONArray("pointer cannot be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      JSONObject jSONObject1 = jSONObject0.put("0", false);
      jSONObject1.put("@ln", (double) 0.0F);
      JSONObject jSONObject2 = jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      jSONObject1.optDouble("Q1{p|R");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      jSONObject1.optInt("@ln");
      BufferedWriter bufferedWriter0 = new BufferedWriter(writer0, 3);
      jSONObject1.write((Writer) bufferedWriter0, 3, 98);
      jSONObject2.optString("X#N");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject valuefor key: ", 1902);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      JSONObject.valueToString(objectOutputStream0);
      jSONObject1.optBoolean("Unable to write JSONObject valuefor key: ", true);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Short short0 = new Short((short)92);
      hashMap0.put((Float) null, short0);
      jSONObject1.toString();
      Float float0 = new Float(1.0F);
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("isdoubleValue", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name isdoubleValue, locale fr_FR
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 510;
      JSONObject jSONObject0 = new JSONObject(510);
      Float float0 = new Float(3770.11F);
      HashMap<Double, PipedInputStream> hashMap0 = new HashMap<Double, PipedInputStream>();
      jSONObject0.put("Iw<$;~8+-81}", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("Iw<$;~8+-81}", bigInteger0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optDouble("Q1{p|R");
      try { 
        jSONObject0.getInt("@ln");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      JSONObject jSONObject1 = jSONObject0.put("0", false);
      jSONObject1.put("@ln", (double) 0.0F);
      jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      jSONObject1.optDouble("Q1{p|R");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      jSONArray0.write((Writer) mockPrintWriter0);
      jSONObject1.optInt("@ln");
      // Undeclared exception!
      try { 
        Charset.forName("0");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject valuefor key: ", 1902);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      JSONObject.valueToString(objectOutputStream0);
      jSONObject1.optBoolean("Unable to write JSONObject valuefor key: ", false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1902);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      try { 
        jSONObject0.write((Writer) charArrayWriter1, 2227, 2227);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      hashMap0.entrySet();
      JSONObject jSONObject1 = new JSONObject((Object) "r");
      JSONObject jSONObject2 = jSONObject1.put("@ln", (double) 0.0F);
      MockFileWriter mockFileWriter0 = new MockFileWriter("r");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@ln";
      JSONObject jSONObject3 = new JSONObject((Object) "r");
      jSONObject0.put("@ln", 0L);
      jSONObject2.toMap();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("0", false);
      jSONObject1.put("@ln", (double) 0.0F);
      JSONObject jSONObject2 = jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject2.optBigInteger("X^#N", bigInteger0);
      jSONObject1.optDouble("Q1{p|R");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      jSONObject1.optInt("@ln");
      BufferedWriter bufferedWriter0 = new BufferedWriter(writer0, 3);
      jSONObject1.write((Writer) bufferedWriter0, 3, 98);
      jSONObject2.optString("X^#N");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject.stringToValue("{\"to\":\"] is not a JSONObject.\",\"size\":{},\"color\":true,\"] could not be converted to BigDecimal.\":true,\"value2\":false,\"number\":99}");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Character.UnicodeScript, Character> hashMap0 = new HashMap<Character.UnicodeScript, Character>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("{\"fruit\":\"] is not a JSONObject.\",\"size\":{},\"color\":true,\"value\":true,\"value2\":false,\"number\":null}");
      jSONObject0.optNumber((String) null);
      String string0 = "e4]g7nJ\\AG 0";
      Locale locale0 = Locale.JAPANESE;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}";
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      JSONObject.numberToString(integer0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "99";
      try { 
        jSONObject0.get("99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      jSONObject0.optBoolean("pointer cannot be null");
      jSONObject1.optBoolean("pointer cannot be null");
      jSONObject1.remove("] could not be converted to BigDecimal.");
      jSONObject1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject0.put("(x*.{gA ", (long) 9);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean0);
      JSONObject jSONObject1 = new JSONObject(9);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject valuefor key: ", 1902);
      jSONObject1.optBoolean("Unable to write JSONObject valuefor key: ", false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1902);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter1.write("Unable to write JSONObject valuefor key: ");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      JSONObject.numberToString(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      jSONObject0.optBoolean("pointer cannot be null");
      jSONObject0.optJSONArray("Jel4lp:+9}K~t^");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "pointer cannot be null";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      jSONObject1.put("/p$w{/UN", 1L);
      String string1 = "BS+ :Q6fK";
      jSONObject0.optBoolean("pointer cannot be null");
      String string2 = "";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("pointer cannot be null");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('t');
      int int0 = 5218;
      charArrayWriter0.write(5218);
      charArrayWriter1.close();
      // Undeclared exception!
      try { 
        charArrayWriter1.append((CharSequence) "BS+ :Q6fK", 5218, 5218);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject.isDecimalNotation("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}");
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject.isDecimalNotation("nable towrite SONObject valuefor key: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.writeValue(charArrayWriter0, "nable towrite SONObject valuefor key: ", 1902, (-1));
      JSONObject jSONObject0 = new JSONObject((Object) "7}vLAoQ");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}";
      JSONObject.isDecimalNotation("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}");
      String string1 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to write JSONObject valuefor key: ");
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject valuefor key: ", 1902);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      JSONObject.valueToString(objectOutputStream0);
      jSONObject1.optBoolean("Unable to write JSONObject valuefor key: ", false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1902);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter1.write("Unable to write JSONObject valuefor key: ");
      Object object0 = new Object();
      try { 
        jSONObject1.getBoolean("Unable to write JSONObject valuefor key: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000059] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "08";
      try { 
        jSONObject0.getBoolean("08");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JSONObject.numberToString(integer0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(501);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("] is not a JSONArray.");
      Set<String> set0 = charset0.aliases();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONObject jSONObject1 = new JSONObject(510);
      JSONObject jSONObject2 = jSONObject0.put("] is not a JSONArray.", true);
      jSONObject2.optInt("] is not a JSONArray.", (-1629));
      JSONObject jSONObject3 = new JSONObject(byteBuffer0);
      try { 
        jSONObject2.getFloat((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "@ln";
      JSONObject jSONObject2 = jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string1 = "X^#N";
      jSONObject2.optBigInteger("X^#N", bigInteger0);
      jSONObject1.optDouble("Q1{p|R");
      try { 
        jSONObject1.getInt("X^#N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HashMap<DayOfWeek, ObjectOutputStream> hashMap0 = new HashMap<DayOfWeek, ObjectOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.entrySet();
      JSONObject.stringToValue("value [%s] is not an array or object therefore its key %s cannot be resolved");
      jSONObject0.optNumber("\"a string\"");
      jSONObject0.remove("\"a string\"");
      jSONObject0.keys();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 3);
      JSONObject jSONObject0 = new JSONObject(bufferedOutputStream0);
      try { 
        jSONObject0.getJSONArray("~v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      jSONObject0.put("A_yl", false);
      jSONObject0.keys();
      String string0 = null;
      jSONObject0.optInt("Z&p`]vsCv5E'1{");
      boolean boolean0 = false;
      try { 
        pipedInputStream0.connect(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1575);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      JSONPointer jSONPointer0 = new JSONPointer(list1);
      jSONObject0.query(jSONPointer0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "K9@TKD";
      jSONObject0.put("K9@TKD", (Collection<?>) null);
      JSONObject.wrap("K9@TKD");
      jSONObject0.toMap();
      jSONObject0.opt("NZ");
      jSONObject0.remove("NZ");
      jSONObject0.entrySet();
      JSONObject.stringToValue("]`'");
      jSONObject0.optNumber("tq8uP\";}WOhS");
      jSONObject0.optNumber("`nL9h");
      // Undeclared exception!
      try { 
        jSONObject0.query("tq8uP\";}WOhS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<StringReader, Character> hashMap0 = new HashMap<StringReader, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.opt("$pd\"wLUHv");
      jSONObject0.remove("] not found.");
      jSONObject0.optNumber("gettoLowerCase");
      jSONObject0.entrySet();
      JSONObject.quote((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject(9);
      Boolean boolean0 = Boolean.valueOf(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("K9@TKD", (Collection<?>) null);
      Object object0 = JSONObject.wrap("K9@TKD");
      jSONObject0.toMap();
      jSONObject0.opt("NZ");
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (Collection<?>) null);
      jSONObject1.toString();
      try { 
        jSONObject1.getJSONObject("e>=7ZKSB~WM`$i7q`s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject0.toString(9);
      jSONObject1.put("java.io.StringWriter@0000000003", 224L);
      Boolean.valueOf(true);
      JSONObject.valueToString(jSONObject0);
      JSONObject.wrap("org.json.JSONObject@0000000001");
      jSONObject1.optNumber("org.json.JSONObject@0000000001");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.putOpt((String) null, (Object) null);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toMap();
      jSONObject0.opt("true");
      String string1 = "";
      try { 
        jSONObject0.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HashMap<Character.UnicodeScript, Character> hashMap0 = new HashMap<Character.UnicodeScript, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.entrySet();
      JSONObject.stringToValue("{\"fruit\":\"] is not a JSONObject.\",\"size\":{},\"color\":true,\"value\":true,\"value2\":false,\"number\":null}");
      jSONObject0.optNumber("getread");
      Object object0 = jSONObject0.remove("s++xvqs8>!w=X$WVO");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HashMap<Locale.LanguageRange, JavaFileObject.Kind> hashMap0 = new HashMap<Locale.LanguageRange, JavaFileObject.Kind>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getJSONArray("p;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "pointer cannot be null";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      jSONObject1.put("/p$w{/UN", 1L);
      jSONObject0.optBoolean("pointer cannot be null");
      jSONObject1.optBoolean("pointer cannot be null");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("g_6GoSov>");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('t');
      charArrayWriter0.write(5218);
      jSONObject0.write((Writer) charArrayWriter0, 57, 57);
      charArrayWriter0.close();
      // Undeclared exception!
      try { 
        charArrayWriter1.append((CharSequence) "pointer cannot be null", 5218, 3013);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("N/mC", 101);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(101);
      JSONObject.valueToString(jSONObject0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      try { 
        jSONObject2.getInt("K9@TKD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "";
      int int0 = 0;
      jSONObject0.put("", 0);
      int int1 = 65;
      try { 
        jSONObject0.getJSONArray("35 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.CANADA;
      String string0 = "asDoubleBuffer";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("asDoubleBuffer", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name asDoubleBuffer, locale en_CA
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HashMap<Character.UnicodeScript, Character> hashMap0 = new HashMap<Character.UnicodeScript, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getFloat("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("3.+?(Za^%Om");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3.+?(Za^%Om";
      stringArray0[1] = "3.+?(Za^%Om";
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate("org.json.JSONObject@0000000001", (Object) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optJSONArray((String) null);
      try { 
        jSONObject1.getInt("/Zv8Z$,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = jSONObject0.keySet();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list1 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      Locale.filterTags(list1, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject0.optQuery(jSONPointer0);
      String string0 = "1Egd=;Cb5'";
      JSONObject.stringToValue("1Egd=;Cb5'");
      try { 
        jSONObject0.getDouble("1Egd=;Cb5'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(510);
      boolean boolean0 = false;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      JSONPointer jSONPointer0 = new JSONPointer(list1);
      jSONObject0.optQuery(jSONPointer0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", false);
      jSONObject1.optInt("] is not a JSONArray.", (-1629));
      String string0 = null;
      try { 
        jSONObject1.getFloat((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("Null pointer", false);
      try { 
        jSONObject0.getBigDecimal("v;!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(510);
      boolean boolean0 = false;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONObject jSONObject1 = new JSONObject(510);
      JSONObject jSONObject2 = jSONObject0.put("] is not a JSONArray.", false);
      jSONObject2.optInt("] is not a JSONArray.", (-1629));
      try { 
        jSONObject2.getFloat((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject1 = new JSONObject(9);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean0);
      JSONObject jSONObject2 = jSONObject0.accumulate("(x*.{gA ", jSONObject1);
      jSONObject0.toString();
      jSONObject2.optJSONObject("java.io.StringWriter@0000000010");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "false";
      HashMap<Double, Locale.LanguageRange> hashMap0 = new HashMap<Double, Locale.LanguageRange>();
      Double double0 = new Double(0.0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("false");
      hashMap0.put(double0, locale_LanguageRange0);
      jSONObject0.put("false", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getNumber("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      Short short0 = new Short((short)826);
      hashMap0.put(float0, short0);
      jSONObject0.toString();
      hashMap0.putIfAbsent(float0, (Short) null);
      try { 
        JSONObject.stringToNumber("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":{},\"number\":\"1\"}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":{},\"number\":\"1\"}] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("QA^epH[eYJAw+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "f^";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("f^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Locale.LanguageRange> hashMap0 = new HashMap<Double, Locale.LanguageRange>();
      Double double0 = new Double(0.0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("false");
      hashMap0.put(double0, locale_LanguageRange0);
      jSONObject0.put("false", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getNumber("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K9@TKD", (Collection<?>) null);
      JSONObject.wrap("K9@TKD");
      Map<String, Object> map0 = jSONObject0.toMap();
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      jSONObject0.optBigDecimal("K9@TKD", bigDecimal0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "K9@TKD";
      stringArray0[1] = "K9@TKD";
      JSONObject jSONObject2 = new JSONObject(map0, stringArray0);
      jSONObject0.entrySet();
      jSONObject1.put("NZ", 1291);
      JSONObject.stringToValue("gethashCode");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      JSONObject jSONObject3 = new JSONObject(pushbackInputStream0, stringArray0);
      jSONObject3.optNumber("4oix-( eg");
      jSONObject0.remove("gethashCode");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = new String[3];
      HashMap<StringReader, Character> hashMap0 = new HashMap<StringReader, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "J.#)=[xn&+Gt";
      String string1 = "";
      jSONObject0.optBigDecimal("J.#)=[xn&+Gt", (BigDecimal) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("T=8,I?5", 0.0);
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(194);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      Writer writer0 = jSONArray0.write((Writer) bufferedWriter0);
      Writer writer1 = jSONArray0.write(writer0, 3765, 3765);
      jSONObject0.write(writer1, 3765, 3765);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      JSONObject jSONObject1 = jSONObject0.put("IZb7", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject1.optBigInteger("X^#N", bigInteger0);
      jSONObject0.optDouble("IZb7");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      jSONArray0.write((Writer) mockPrintWriter0);
      JSONObject jSONObject2 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "J.#)=[xn&+Gt";
      jSONObject0.optBigDecimal("", (BigDecimal) null);
      jSONObject0.optDouble("J.#)=[xn&+Gt");
      String string1 = "Te09/&C";
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.INHERIT;
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.GERMAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3041));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3041
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(29);
      Short short0 = new Short((short)31);
      boolean boolean0 = jSONObject0.similar(short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-979));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -979
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "j%x(fB66}i(\\q";
      jSONObject0.optString("j%x(fB66}i(q");
      File file0 = MockFile.createTempFile("DJdLg", "\"j");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      int int0 = (-1298);
      BufferedWriter bufferedWriter0 = null;
      try {
        bufferedWriter0 = new BufferedWriter(mockFileWriter0, (-1298));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HashMap<Character.UnicodeScript, Character> hashMap0 = new HashMap<Character.UnicodeScript, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getFloat("{\"fruit\":\"Apple\",\"size\":\"getread\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":true}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("j%x(fB66}i(q");
      HashMap<DayOfWeek, Byte> hashMap0 = new HashMap<DayOfWeek, Byte>();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "pointer cannot be null";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "pointer cannot be null";
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      jSONObject1.optBoolean("pointer cannot be null");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.optInt("pointer cannot be null");
      charArrayWriter0.write("pointer cannot be null");
      charArrayWriter0.write("pointer cannot be null");
      Object object0 = new Object();
      Class<JDBCType> class0 = JDBCType.class;
      try { 
        jSONObject0.getEnum(class0, "pointer cannot be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JSONObject.numberToString(integer0);
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optInt("le", 0);
      try { 
        jSONObject0.getFloat("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}");
      File file0 = MockFile.createTempFile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}";
      objectArray0[4] = (Object) "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}";
      objectArray0[5] = (Object) jSONObject0;
      objectArray0[6] = (Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}";
      objectArray0[7] = (Object) jSONObject0;
      objectArray0[8] = (Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}";
      PrintStream printStream0 = mockPrintStream1.printf("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", objectArray0);
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(printStream0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }
}
