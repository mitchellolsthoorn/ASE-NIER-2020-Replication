/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 08:08:11 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.math.BigDecimal;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[5];
      jSONScanner0.scanFieldString(charArray0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"org.joda.time.LocalDate\":99,\"illegal json.\":-99,\"pos \":{},\"\":{}}");
      jSONScanner0.nextIdent();
      jSONScanner0.ch = '-';
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(0L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Zz)");
      jSONScanner0.setToken(1180);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(0L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-208));
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":true}", 36);
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"zV+OXv`5]\":99,\"\u0000\u0000\":99,\"com.alibaba.fastjson.parser.JSONScanner\":{}}", 36);
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(2774);
      jSONScanner0.scanFieldStringArray(charArray0, (-1394), symbolTable0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0hZH9");
      long long0 = jSONScanner0.scanLong('J');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 144);
      jSONScanner0.next();
      jSONScanner0.scanDate('9');
      long long0 = jSONScanner0.scanLong('5');
      assertEquals(20, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      double double0 = jSONScanner0.scanDouble('R');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]", 36);
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]", 36);
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\u0000\u0000", parserConfig0, 0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '9', ']', '(', '9', 2940, 1632);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('8', '0', '0', '<', '{', '{', 9, (-498));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseInt error : \":[99],\"\u0000\u0000\":true,\"com.alibaba.fastjson.parser.JSONScanner\":{},\"_asm\":null}", 36);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('!', ',', '\u001A', '.', 'z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,-99,false]", 36);
      jSONScanner0.next();
      jSONScanner0.scanDate('C');
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,99,{},true,99]", 36);
      jSONScanner0.setToken(115);
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K7e");
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 36);
      jSONScanner0.nextToken();
      jSONScanner0.next();
      jSONScanner0.scanDate('\u001A');
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTimeZone('}', 'i', 'd', '|', 'D');
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "{\"zV+OXv`5]\":99,\"\\u0000\\u0)00\":99,\"com.ali7aba.fastjson.parser.JSONScanner\":{}}";
      JSONScanner jSONScanner0 = new JSONScanner(string0, 2729);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"zV+OXv`5]\":99,\"\\u0000\\u0)00\":99,\"com.ali7aba.fastjson.parser.JSONScanner\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"can not cast to Date, value : \",\"color\":\"Red\",\"value\":false,\"value2\":null,\"number\":\"\"}");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-747), (-747), (-747));
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTime('^', 'U', '{', '>', 'J', '<');
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "{\"zV+OXv`5]\":99,\"\\u0000\\u0)00\":99,\"com.ali7aba.fastjson.parser.JSONScanner\":{}}";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      char[] charArray0 = new char[2];
      jSONScanner0.nextIdent();
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[3];
      jSONScanner0.copyTo(0, 0, charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      jSONScanner0.arrayCopy(0, charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":null,\"com.alibaba.fastjson.serializer.FieldSerializer\":[],\"color\":\"Red\",\"value\":-99,\"value2\":false,\"\"@type\":\"\":\"1\",\"x\":false,\"xx\":-99}");
      char[] charArray0 = jSONScanner0.sub_chars(15, 28);
      assertEquals(28, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"zV+OXv`5]\":[[]],\"\u0000\u0000\":99,\"com.alibaba.fastjson.parser.JSONScanner\":\"a string\"}", 36);
      String string0 = jSONScanner0.subString(36, 36);
      assertEquals("ba.fastjson.parser.JSONScanner\":\"a s", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}", 36);
      String string0 = jSONScanner0.subString(0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5[%cvhu7|]V*", 42);
      jSONScanner0.nextIdent();
      String string0 = jSONScanner0.stringVal();
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99]", 36);
      jSONScanner0.next();
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      String string0 = jSONScanner0.numberString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{},\"syntax error :\":false,\"pos \":false}");
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((-1635L), false);
      boolean boolean0 = jSONScanner0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("cBzw^.%(VJE[rpV!Y", 117);
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}", (-492));
      int int0 = jSONScanner0.indexOf('t', (-492));
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EL}1;T+K)Iw}6xHAj");
      jSONScanner0.skipObject(true);
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":-99,\"\":{},\"\"llegaljs\":true}", 36);
      jSONScanner0.next();
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.scanString();
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((short) (-99), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char char0 = jSONScanner0.charAt(0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":false,\"\":7,\"illegal json.\":-99,\"pos \":false}");
      char char0 = jSONScanner0.charAt(26);
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\u0000\u0000\":[-99]}", 36);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DJ", 36);
      jSONScanner0.nextIdent();
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]<Pgz<$<", parserConfig0, (-2));
      String string0 = jSONScanner0.addSymbol(0, 0, 110, defaultJSONParser0.symbolTable);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":true,\"z\":true,\"a\":[],\"b\":{}}", (-571));
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(93, (-1320));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("J", 36);
      jSONScanner0.bp = (-1917);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"pos \":7,\"\":99,\"\"@type\":\"pDJ\":true,\"illegal json.\":-99}");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":P_${YSGoB6^7", 36);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$%l>&)(");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}", 57);
      jSONScanner0.next();
      SymbolTable symbolTable0 = new SymbolTable(99);
      jSONScanner0.scanSymbol(symbolTable0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, 6, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"index must > 0, but \":[true,[]],\"\u0000\u0000\":false}", 36);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H$%l>&)(#jCcs");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"zV+OXv`5] z 9\":\"hello\",\"\":null,\"z\":-99,\"b\":{\"\"@type\":\"zV+OXv`5] z 9\":{}}}", 2918);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@tipI\":\"");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", column \":false}", 57);
      jSONScanner0.next();
      jSONScanner0.skipObject(true);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "{\"zV+OXv`5]\":99,\"\\u0000\\u0)00\":99,\"com.ali7aba.fastjson.parser.JSONScanner\":{}}";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      jSONScanner0.bp = 1142;
      // Undeclared exception!
      try { 
        jSONScanner0.info();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":null}", 36);
      jSONScanner0.next();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\u0000\u0000\":[null],\"\"@type\":\"{\"fieldName\":[99],\"\u0000\u0000\":99,\"com.alibaba.fastjson.parser.JSONScanner\":{\"yyyy\uB144M\uC6D4d\uC77C\":{}},\"_asm\":99}\":-99}", 36);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(36, 36, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":g", (-801));
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-801));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("pDJ", 92, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,99,{},true,99]", 36);
      jSONScanner0.sp = (-2851);
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H$%l>&)(#jCcs");
      jSONScanner0.next();
      jSONScanner0.next();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":1.0,\"\"@type\":\"\":null}");
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(0, charArray0, 65535, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H$%l>&)(#jCcs");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(123, 13, 13, defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x5)Kd}g:r+xziG");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-3243), (-3243), 6, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("XK#C5sVdD.qWj?T", (-3430));
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(100, (-3625), 2422, parserConfig0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2), 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 3570, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', char0);
      
      jSONScanner0.skipArray(false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("zV+OXv`5] z 9", (-571));
      jSONScanner0.skipArray(true);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":true,\"size\":{},\"color\":\"Red\",\"value\":true,\"\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"fruit\":true,\"size\":{},\"color\":\"Red\",\"value\":true,\"\":false,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"pos \":[99],\"\u0000\u0000\":99,\"com.alibaba.fastjson.parser.JSONScanner\":{},\"_asm\":{}}", 36);
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField(0L, false);
      jSONScanner0.skipObject(true);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"zV+OXv`5]\":-99,\"\u0000\u0000\":\"a string\"}", 36);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"zV+OXv`5]\":-99,\"\u0000\u0000\":\"a string\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":true,\"\"@type\":\"\":7,\"illegal json.\":[],\"illegal str, \":\"a string\"}");
      jSONScanner0.scanString();
      String string0 = jSONScanner0.info();
      assertEquals("pos 2, line 1, column 3{\"\":true,\"\"@type\":\"\":7,\"illegal json.\":[],\"illegal str, \":\"a string\"}", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\u0000\u0000\":[null]}", 36);
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("OC6[8CH");
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-1164), (-1164));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = JSONScanner.charArrayCompare("index must > 0, but ", 3, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("{\"\":null,\"com.alibaba.fastjson.serializer.FieldSerializer\":[],\"color\":\"Red\",\"value\":-99,\"value2\":false,\"\"@type\":\"\":\"1\",\"x\":false,\"xx\":-99}", (-1), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("ZKA}F\"[.?", (-2649), charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.JSONScanner\":[],\"\u0000\u0000\":[],\"fastjson.parser.autoTypeSupport\":null}", 36);
      jSONScanner0.nextIdent();
      jSONScanner0.skipObject();
      UUID uUID0 = jSONScanner0.scanUUID('\u001A');
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"com.alibaba.fastjson.parser.JSONScanner\":true,\"a\":[],\"b\":{}}");
      int int0 = jSONScanner0.indexOf('A', 2004);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", (-58));
      ParserConfig parserConfig0 = ParserConfig.global;
      String string0 = jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DJ", 102);
      SymbolTable symbolTable0 = new SymbolTable(102);
      String string0 = jSONScanner0.scanTypeName(symbolTable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str, \":[],\"kotlin.jvm.internal.DefaultConstructorMarker\":\"a string\",\"array level > 512\":\"a string\"}", 36);
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[2];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"([C)Ljava/math/BigDecimal;\":[99],\"\u0000\u0000\":{},\"com.alibaba.fastjson.parser.JSONScanner\":-99,\"_asm\":-99,\"\"@type\":\", line \":true}");
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[9];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 102, line 1, column 103{\"([C)Ljava/math/BigDecimal;\":[99],\"\u0000\u0000\":{},\"com.alibaba.fastjson.parser.JSONScanner\":-99,\"_asm\":-99,\"\"@type\":\", line \":true}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"java/lang/Double\":[99,99],\"\u0000\u0000\":99,\"com.alibaba.fastjson.parser.JSONScanner\":null,\"_asm\":99,\"\"@type\":\"false\":null}", 36);
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"pos \":7,\"\":99,\"\"@type\":\"pDJ\":true,\"illegal json.\":-99}");
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[5];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 18, line 1, column 19{\"pos \":7,\"\":99,\"\"@type\":\"pDJ\":true,\"illegal json.\":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\".gel<:cX+\":3836395346087470,\"5[%cvhu7|\":\"a string\",\"illegal str, \":{\"parseInt error : \":99},\", line \":99}", 36);
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[4];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":1.0,\"\"@type\":\"\":null}");
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 17, line 1, column 18{\", line \":1.0,\"\"@type\":\"\":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"$%l>&)(\":0.0}");
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[9];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "{\"zV+OXv`5]\":99,\"\\u0000\\u0)00\":99,\"com.ali7aba.fastjson.parser.JSONScanner\":{}}";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[0];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"([C)Lja");
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[9];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 1, line 1, column 2{\"([C)Lja
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", lince ");
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z");
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[[]],\"syntax error :\":false,\"illegal json.\":null,\"org.joda.time.tz.FixedDateTimeZone\":[null]}");
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField(0L, false);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseInt error : \":[99],\"\u0000\u0000\":true,\"com.alibaba.fastjson.parser.JSONScanner\":{},\"_asm\":null,\"\"@type\":\"zV+OXv`5] z 9\":false}", 36);
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((long) 36, true);
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":false,\"syntax error :\":false,\"illegal json.\":null}");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((-7724053899351418539L), true);
      assertEquals(54, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str, \":\"a string\",\"kotlin.jvm.internal.DefaultConstructorMarker\":\"a string\",\"array level > 512\":true}", 36);
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((long) 36, false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str, \":\"a string\",\"kotlin.jvm.internal.DefaultConstructorMarker\":\"a string\",\"array level > 512\":\"a string\"}", 36);
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((-262L), false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/String;)V\":{\"([C)[F\":null},\"java.time.\":true,\"zV+OXv`5]\":0.0}");
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((-15934130658874518L), false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"pos \":7,\"\":99,\"\"@type\":\"pDJ\":true,\"illegal json.\":-99}");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-2262244760619952111L), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 18, line 1, column 19{\"pos \":7,\"\":99,\"\"@type\":\"pDJ\":true,\"illegal json.\":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\".gel<:cX+\":3836395346087470}", 36);
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((-262L), false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"index must > 0, but \":1099511628211}", 36);
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((-1635L), true);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/String;)V\":{\"([C)[F\":null},\"java.time.\":true,\"zV+OXv`5]\":0.0,\"\":-99}");
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((-15934130658874518L), false);
      assertEquals(82, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[],\"syntax error :\":null,\"illegal json.\":null,\"pos \":false}");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((-3750763034362895579L), true);
      assertEquals(14, jSONScanner0.token());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "{\"zV+OXv`5]\":99,\"\\u0000\\u0)00\":99,\"com.ali7aba.fastjson.parser.JSONScanner\":{}}";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((long) (-1394), true);
      assertEquals(12, jSONScanner0.token());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\u0000\u0000\":-99}", 36);
      jSONScanner0.bp = 36;
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((long) 36, false);
      assertEquals(12, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ", 36);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 36, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pDJ");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-23L), true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]", 36);
      jSONScanner0.next();
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((-262L), false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}", 36);
      jSONScanner0.next();
      SymbolTable symbolTable0 = new SymbolTable(116);
      jSONScanner0.scanSymbol(symbolTable0);
      int int0 = jSONScanner0.seekObjectToField((-2184L), false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((-1635L), false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",{\"setToken\":[],\"\"@type\":\"\":true},false,\"a string\",false,\"a string\"]", 36);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(36);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,{},false]", 36);
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(36);
      assertEquals(13, jSONScanner0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,{\".gel<:cX+\":99},{},[]]", 36);
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(36);
      assertTrue(jSONScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"\"@type\":\"ull\":[]},{},false]", 36);
      jSONScanner0.nextToken();
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json.
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,{\"setToken\":[]},false,\"a string\",false,\"a string\"]", 36);
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(36);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"`I2EthQlLF]+h1b4:F[");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 144);
      jSONScanner0.next();
      jSONScanner0.scanDate('9');
      assertEquals(4, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.seekArrayToItem(82);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5[%cvhu7|]V*", 42);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-2499));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -2499
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#hC}l({(VFbc0Gv");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 36);
      jSONScanner0.nextToken();
      jSONScanner0.next();
      jSONScanner0.skipArray();
      assertEquals(36, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false]", 36);
      jSONScanner0.next();
      jSONScanner0.skipArray(true);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"`I2EthQlLF]+h1b4:F[");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1\"@type\":\"`I2EthQlLF]+h1b4:F[
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[-99,\"a string\"],\"parseInt error : \":99,\"unclosed str\":true,\"b\":{\"\":{\"x\":true}}}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,{\".gel<:cX+\":99},-99,{}]", 36);
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(36);
      assertEquals(15, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<O-sgT7l`gOTN}POl");
      jSONScanner0.skipObject(false);
      assertEquals(15, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1\"@type\":\"{}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":99}", 36);
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken(52);
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals(4, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":true}", 36);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 45);
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[3];
      jSONScanner0.matchField2(charArray0);
      assertEquals('s', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\".gel<:cX+\":3836395346087470,\"5[%cvhu7|\":\"a string\",\"illegal str, \":{\"parseInt error : \":[]},\", line \":99}", 36);
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":null}", 36);
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(3501);
      jSONScanner0.scanFieldStringArray(charArray0, 2774, symbolTable0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[]}", 36);
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(3501);
      jSONScanner0.scanFieldStringArray(charArray0, 2774, symbolTable0);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "{\"zV+OXv`5]\":99,\"\\u0000\\u0)00\":99,\"com.ali7aba.fastjson.parser.JSONScanner\":{}}";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(2774);
      jSONScanner0.scanFieldStringArray(charArray0, (-1394), symbolTable0);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":true,\"z\":true,\"a\":[],\"b\":{}}", (-571));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[^tIOm%d");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, 36, defaultJSONParser0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "5A_h@Akz\\u.aL";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"@type\":\"");
      jSONScanner0.scanFieldStringArray((char[]) null, 98, defaultJSONParser0.symbolTable);
      assertEquals('5', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ", 9);
      jSONScanner0.next();
      char[] charArray0 = new char[7];
      SymbolTable symbolTable0 = new SymbolTable(108);
      jSONScanner0.scanFieldStringArray(charArray0, (-1394), symbolTable0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"llegaljso, \"1}");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.scanDate('l');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,\"a string\"]", 36);
      jSONScanner0.next();
      jSONScanner0.scanDate('&');
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nd<Lj", 4062);
      jSONScanner0.scanDate('u');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5[%cvhu7|]V*", 42);
      jSONScanner0.scanDate('j');
      assertEquals('5', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,\"a!string\"_");
      jSONScanner0.next();
      jSONScanner0.scanDate('-');
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"`I2EthQlLF]+h1b4:F[");
      jSONScanner0.scanString();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('!');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nd<Lj", 4062);
      jSONScanner0.scanLong('%');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,\"a string\"]", 36);
      jSONScanner0.next();
      long long0 = jSONScanner0.scanLong('p');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"5[%cvhu7|\":99,\"illegal str, \":\"a string\",\".gel<:cX+\":\"a string\",\"nul\":false}", 36);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONScanner0, parserConfig0);
      long long0 = jSONScanner0.scanLong('&');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5[%cvhu7|]V*", 42);
      long long0 = jSONScanner0.scanLong('R');
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,-99,false]", 36);
      jSONScanner0.next();
      jSONScanner0.scanDate('C');
      long long0 = jSONScanner0.scanLong('_');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nd<Lj", 4062);
      double double0 = jSONScanner0.scanDouble(')');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"5[%cvhu7|\":[],\"illegal str, \":\"a string\",\".gel<:cX+\":\"a string\"}", 36);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONScanner0, parserConfig0);
      double double0 = jSONScanner0.scanDouble('Z');
      assertEquals(12, jSONScanner0.token());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5[%cvhu7|]V*");
      double double0 = jSONScanner0.scanDouble('c');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,\"a!sting\"_");
      jSONScanner0.next();
      double double0 = jSONScanner0.scanDouble('-');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-99.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,99,[true],true,99,null]", 36);
      jSONScanner0.next();
      jSONScanner0.scanInt('9');
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(36);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nd<Lj", (-323));
      jSONScanner0.scanInt('w');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"llegaljso, \"1}");
      assertEquals('{', jSONScanner0.getCurrent());
      
      jSONScanner0.scanString();
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.scanInt('?');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":-1.0}", 36);
      jSONScanner0.next();
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.scanInt('}');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":5523567194850793192}", 36);
      jSONScanner0.next();
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanInt('}');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error : 55235671948507
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5[%cvhu7|]V*", 2260);
      int int0 = jSONScanner0.scanInt('Q');
      assertEquals(5, int0);
      assertEquals('5', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,\"a!string\"_");
      assertEquals('[', jSONScanner0.getCurrent());
      
      jSONScanner0.next();
      int int0 = jSONScanner0.scanInt('&');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      jSONScanner0.scanInt('y');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":true}", 36);
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(3, jSONScanner0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("f(A1G6RAmo}!=R_+qV+", 0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 2289);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals('f', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "{\"zV+OXv`5]\":99,\"\\u0000\\u0)00\":99,\"com.ali7aba.fastjson.parser.JSONScanner\":{}}";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      char[] charArray0 = new char[1];
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"pos \":[\"a string\",99],\"\u0000\u0000\":{},\"com.alibaba.fastjson.parser.JSONScanner\":{},\"_asm\":false}", 36);
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((-262L), false);
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(90, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":-99,\"\":{},\"\"llegaljs\":true}", 36);
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      jSONScanner0.scanString();
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\"a string\",\"\"@type\":\"\u0000\u0000\":7,\"illegal json.\":99}");
      char[] charArray0 = new char[9];
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 36);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[false]", 36);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("zV+OXv`5] z 9");
      char[] charArray0 = new char[4];
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"`I2EthQlLF]+h1b4:F[");
      jSONScanner0.scanString();
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(7, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseInt error : \":[99],\"\u0000\u0000\":true,\"com.alibaba.fastjson.parser.JSONScanner\":{},\"_asm\":null,\"\"@type\":\"zV+OXv`5] z 9\":false}", 36);
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"llegaljso, \"1}");
      char[] charArray0 = new char[3];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("false", (-1756));
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseInt error : \":[99],\"\u0000\u0000\":true,\"com.alibaba.fastjson.parser.JSONScanner\":{},\"_asm\":null,\"\"@type\":\"zV+OXv`5] z 9\":false}", 36);
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      Date date0 = jSONScanner0.scanFieldDate(charArray0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":-99,\"unclosed str\":[],\"b\":{}}", 2918);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"number\":\"1\"}", (-296));
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseInt error : \":[99],\"\u0000\u0000\":true,\"com.alibaba.fastjson.parser.JSONScanner\":{},\"_asm\":null,\"\"@type\":\"zV+OXv`5] z 9\":false}", 36);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pDJ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\"a string\",\"\"@type\":\"\u0000\u0000\":7,\"illegal json.\":99}");
      char[] charArray0 = new char[9];
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DJ", 510);
      jSONScanner0.ch = '\u001A';
      jSONScanner0.nextIdent();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('7', '7', 'A', 'A', 'A', 'j', (-1549), '7');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '@', '0', '\"', '$', 'p', 594, 65535);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('7', '/', 'A', 'A', 'A', '/', (-1549), '/');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTimeZone('5', '5', '5');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,\"a!string\"_");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', '-', '-');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,{\"setToken\":[],\"ull{\".gel<:cX+\":3836395346087470,\"5[%cvhu7|\":-99,\"illegal str, \":true}\":{}},false,\"a string\",false,\"a string\"]", 36);
      jSONScanner0.nextToken();
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('9', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"zV+OXv`5]\":0.0,\"(Ljava/lang/String;)V\":{\"com.alibaba.fastjson.parser.JSONScanner\":\"a string\"},\"com.alibaba.fastjson.parser.JSONScanner\":false,\"\"@type\":\"\u0000\u0000\":null}");
      jSONScanner0.scanIdent();
      jSONScanner0.skipString();
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"java/lang/Double\":[99,99],\"\u0000\u0000\":99,\"com.alibaba.fastjson.parser.JSONScanner\":null,\"_asm\":99,\"\"@type\":\"false\":null}", 36);
      jSONScanner0.nextIdent();
      jSONScanner0.scanDate('!');
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[-99],\"syntax error :\":\"a string\",\"illegal json.\":null,\"pos \":false}");
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%?/tzrUByfa)pQBi", (-571));
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('%', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<O-sgT7l`gOTN}POl");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal enum. ");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('i', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("z;5Na6", (-1689));
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('z', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("zV+OXv`5] z 9", (-571));
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('z', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g5Gxu$=pGh2");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('g', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DJ", 36);
      char[] charArray0 = new char[0];
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DJ", 36);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 5MF;mjl[)");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.numberString();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5[%cvhu7|]V*", 42);
      jSONScanner0.nextIdent();
      jSONScanner0.numberString();
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nd<Lj", 4062);
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.numberString();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(L");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(47, 47);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#hC}l({(VFbc0Gv");
      String string0 = jSONScanner0.stringVal();
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nd<Lj", 4062);
      jSONScanner0.hasSpecial = true;
      String string0 = jSONScanner0.stringVal();
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 9);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("can not cast to int, value : ", 191, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanInt('[');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", (-1670));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(1172, 1172, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":false,\"b\":{}}", 3853);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('/', '/', '5', '<', '5', '5');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(81, charArray0, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\", line ", (-829));
      jSONScanner0.scanDate('|');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H$%l>&)(#jCcs");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1H$%l>&)(#jCcs
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-38));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
