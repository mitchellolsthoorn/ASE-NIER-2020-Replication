/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 10:50:13 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.MultipleGradientPaint;
import java.awt.Window;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.sql.RowIdLifetime;
import java.text.Normalizer;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.swing.GroupLayout;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.indent(pipedWriter0, (-1133));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("\"a trinQ");
      assertEquals("\"a trinQ", object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" }Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      JSONObject.indent(mockFileWriter0, 70);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0);
      jSONObject0.putOnce("1144", bufferedReader0);
      Object object0 = jSONObject0.remove("1144");
      assertSame(object0, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[99],\"b\":{}}", 2760.795F);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      String string0 = jSONObject0.optString("k5t'<=y-!kEr7", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = jSONObject0.optString("Unable to preserve stream position", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      Number number0 = jSONObject0.optNumber("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":{},\"value\":true,\"value2\":false,\"number\":\"1\"}", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<BigDecimal, Locale.Category> hashMap0 = new HashMap<BigDecimal, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("4g.b*q2", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a strinQS");
      jSONObject0.optLong("is", 99L);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("true", (-1011));
      assertEquals((-1011), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("ispoll", 73);
      int int0 = jSONObject1.optInt("ispoll");
      assertEquals(73, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("org.json.JSONWriter", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat(",:]}/\"[{;=#", 640.0F);
      assertEquals(640.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Long@0000000001", 1145.0);
      float float0 = jSONObject0.optFloat("java.lang.Long@0000000001");
      assertEquals(1145.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Long@0000000001");
      jSONObject0.put("java.lang.Long@0000000001", (double) (-1846L));
      float float0 = jSONObject0.optFloat("java.lang.Long@0000000001");
      assertEquals(3, jSONObject0.length());
      assertEquals((-1846.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<BigDecimal, Locale.Category> hashMap0 = new HashMap<BigDecimal, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble(",99Nds#S!{CY&I]", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      double double0 = jSONObject0.optDouble("Zf!", 5757.78996);
      assertEquals(5757.78996, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("false", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<BigDecimal, Locale.Category> hashMap0 = new HashMap<BigDecimal, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = jSONObject0.optBigInteger((String) null, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-15);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("", bigInteger0);
      assertEquals((short) (-3840), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-26);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal((String) null, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-363.0961301144081));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal(" line ", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "gettoUpperCase");
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, pipedOutputStream0, 123, (-897));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("cud+}:I,\"ga\"", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<StandardLocation, Integer> hashMap0 = new HashMap<StandardLocation, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query("tri");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<BigDecimal, Locale.Category> hashMap0 = new HashMap<BigDecimal, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("5\"G0=#!PrA.wI", (double) Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1991.5291));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(63);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 114);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      JSONObject jSONObject0 = new JSONObject(pushbackReader0);
      try { 
        jSONObject0.getNumber("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Thread.State> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Thread.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getLong("\"a string\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      try { 
        jSONObject0.getFloat("] is not a valid number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBigDecimal("g!/(U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"a string\"");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(59);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale locale0 = new Locale("l]B", "l]B");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("l]B", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name l]B, locale l]b_L]B
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\n", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-2413));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2413
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a strinQS");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, (byte)108);
      JSONObject jSONObject0 = new JSONObject((int) (byte)108);
      Writer writer0 = jSONObject0.write((Writer) bufferedWriter0, 87, (int) (byte)108);
      assertSame(writer0, bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.put("n?l", 0.0);
      Writer writer0 = jSONObject1.write((Writer) stringWriter0, (-508), (-508));
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject1 = jSONObject0.putOpt("wtLKMG&$*]}:", charArrayWriter0);
      jSONObject1.write((Writer) charArrayWriter0, 87, 470);
      assertEquals(1, jSONObject0.length());
      assertEquals(71, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a string\"");
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("value [%s] is not an array or object therefore its key %s cannot be resolved");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 25);
      Object object0 = JSONObject.wrap(pushbackReader0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S;XKNe", true);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Double double0 = new Double(969.105555723392);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(969.105555723392, object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = JSONObject.wrap("gettoUpperCase");
      assertEquals("gettoUpperCase", object0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Object object0 = JSONObject.wrap(locale_Category0);
      assertSame(object0, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0.0F);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, (byte)108);
      JSONObject.testValidity(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("49+`:\"{:9z$");
      assertEquals("49+`:\"{:9z$", object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("Duplicate key \"", (Writer) charArrayWriter0);
      assertEquals(18, charArrayWriter0.size());
      assertEquals("\"Duplicate key \\\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!^`lsY2");
      Writer writer0 = JSONObject.quote("", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("2_b", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      jSONObject0.put("gettoUpperCase", (-512));
      try { 
        jSONObject0.putOnce("gettoUpperCase", "gettoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"gettoUpperCase\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[13];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("CJp*>yTCntw;sPl4|", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, "gettoU3pperRase");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-83), (byte)47);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000001", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      PipedReader pipedReader0 = new PipedReader(1338);
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      JSONObject jSONObject1 = jSONObject0.put("gettoUpperCase", (Object) pushbackReader0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      JSONObject jSONObject0 = new JSONObject(pushbackReader0);
      String string0 = jSONObject0.optString("nul", "nul");
      assertEquals("nul", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<MockFileWriter, RowIdLifetime> hashMap0 = new HashMap<MockFileWriter, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("&tm7?a-bRj-;f", (-491L));
      assertEquals((-491L), long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("6.g/x3n97i1", 47);
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      float float0 = jSONObject0.optFloat("{\"fruit\":false,\"\"\"\":null,\"0\":\"Null key.\",\"value\":\"a string\",\"\f\":false,\"Unable to write JSONObject value for key: \":{}}", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      JSONObject jSONObject0 = new JSONObject(pushbackReader0);
      double double0 = jSONObject0.optDouble("null", (-2607.526579103));
      assertEquals((-2607.526579103), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("+i?_EX1z7-", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unable to preserve stream position", (Map<?, ?>) hashMap0);
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.INHERIT;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type1 = jSONObject1.optEnum(class0, "Unable to preserve stream position", processBuilder_Redirect_Type0);
      assertSame(processBuilder_Redirect_Type1, processBuilder_Redirect_Type0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Thread.State> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Thread.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKC;
      Normalizer.Form normalizer_Form1 = jSONObject0.optEnum(class0, (String) null, normalizer_Form0);
      assertEquals(Normalizer.Form.NFKC, normalizer_Form1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("\"a string\"", stringArray0);
      Object object0 = jSONObject0.opt("{\"fruit\":\"Apple\",\"size\":true,\"color\":\"getposition\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a string\"");
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a string\"");
      jSONObject0.put("S;XKNe", 1825);
      jSONObject0.get("S;XKNe");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a strinQS");
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a strinQS");
      Class<MultipleGradientPaint.ColorSpaceType> class0 = MultipleGradientPaint.ColorSpaceType.class;
      jSONObject0.optEnum(class0, "\"a strinQS");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-809));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^dA", true);
      JSONObject jSONObject1 = new JSONObject(mockFileOutputStream0);
      jSONObject0.putOpt("e", jSONObject1);
      jSONObject0.toMap();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      jSONObject0.append("n?l", dataInputStream0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a strinQS");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, (byte)108);
      try { 
        jSONObject0.write((Writer) bufferedWriter0, (int) (byte)108, 87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      jSONObject0.append("n?l", dataInputStream0);
      JSONObject.writeValue(charArrayWriter0, jSONObject0, 1317, 1317);
      assertEquals(73, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(1.0);
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      hashMap0.put(double0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        JSONObject.writeValue(pipedWriter0, bigInteger0, 123, 123);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, (Object) null, (-818), 99);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      PipedWriter pipedWriter0 = new PipedWriter();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      Double double0 = new Double((-988));
      hashMap0.put(formatter_BigDecimalLayoutForm0, double0);
      try { 
        JSONObject.writeValue(pipedWriter0, hashMap0, (-988), (-988));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Character character0 = Character.valueOf('c');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('c', object0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      JSONObject jSONObject0 = new JSONObject(pushbackReader0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float((float) (-966));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("j(q%r");
      assertEquals("j(q%r", object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      JSONObject jSONObject0 = new JSONObject(object0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-390));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("4g.b*q2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-1");
      assertEquals((-1), number0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("I.jP<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [I.jP<] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("\"a string\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [\"a string\"] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("1AbEo<dAoP6xU>");
      assertEquals("1AbEo<dAoP6xU>", object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("get");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a string\"");
      jSONObject0.similar("S;XKNe");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a string\"");
      try { 
        jSONObject0.getJSONArray("Zlu'x+kMbMOmS/$n4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      try { 
        jSONObject0.get("{\"fruit\":false,\"size\":-99,\"0\":\"Null key.\",\"value\":\"a string\",\"\f\":false,\"Unable to write JSONObject value for key: \":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("n?l", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a string\"");
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, bigInteger0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" line ", 0.0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " line ";
      stringArray0[1] = " line ";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] could not convert to BigDecimal.", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("istrim", false);
      try { 
        jSONObject1.getBigInteger("istrim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<MultipleGradientPaint.ColorSpaceType> class0 = MultipleGradientPaint.ColorSpaceType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      jSONObject0.putOnce("gettoUpperCase", byteArrayOutputStream0);
      long long0 = jSONObject0.optLong("gettoUpperCase");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("gettoUpperCase", "gettoUpperCase");
      long long0 = jSONObject1.optLong("gettoUpperCase");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("\"a string\"", stringArray0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Null pointer");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("0");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gettoUpperCase", true);
      int int0 = jSONObject1.optInt("gettoUpperCase");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject jSONObject1 = jSONObject0.append("n?l", dataInputStream0);
      float float0 = jSONObject1.optFloat("n?l");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" line ", 0.0);
      float float0 = jSONObject0.optFloat(" line ");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<MockFileWriter, RowIdLifetime> hashMap0 = new HashMap<MockFileWriter, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("|>%A+UlD`g}>", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("gettoUpperCase", "gettoUpperCase");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject1.optBigInteger("gettoUpperCase", bigInteger0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal((String) null, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Float float0 = new Float((float) (-988));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a strinQS");
      jSONObject0.names();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a strinQS");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject1 = jSONObject0.append("\"a strinQS", locale_Category0);
      try { 
        jSONObject1.increment("\"a strinQS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000028].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Long@0000000001");
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000001", (double) (-1846L));
      boolean boolean0 = jSONObject1.has("java.lang.Long@0000000001");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("\"a string\"", stringArray0);
      boolean boolean0 = jSONObject0.has(stringArray0[2]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<BigDecimal, Locale.Category> hashMap0 = new HashMap<BigDecimal, Locale.Category>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("Z.1d'NmC|", dataInputStream0);
      try { 
        jSONObject0.getString("Z.1d'NmC|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "6#");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      String[] stringArray0 = JSONObject.getNames((Object) charset0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put(" line ", 0.0);
      JSONObject.getNames(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("\"a string\"", stringArray0);
      jSONObject0.put("\"a string\"", 0.0);
      try { 
        jSONObject0.getJSONObject("\"a string\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("l4E])[i,1X6~H");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("l4E])[i,1X6~H", 33.7857095988518);
      try { 
        jSONObject1.getJSONArray("l4E])[i,1X6~H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<BigDecimal, Locale.Category> hashMap0 = new HashMap<BigDecimal, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("Bk)R/)GX!|");
      int int0 = jSONObject1.getInt("Bk)R/)GX!|");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Unable to preserve stream position", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getInt("Unable to preserve stream position");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Unable to preserve stream position", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("Unable to preserve stream position");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("gettoUpperCase", "gettoUpperCase");
      try { 
        jSONObject1.getBoolean("gettoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("~2hViaC");
      Number number0 = jSONObject1.getNumber("~2hViaC");
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2046.5186859));
      assertEquals("-2046.5186859", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a strinQS");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject1 = jSONObject0.append("\"a strinQS", locale_Category0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      jSONObject1.append("\"a strinQS", bufferedOutputStream0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject jSONObject1 = jSONObject0.append("n?l", dataInputStream0);
      Class<Desktop.Action> class0 = Desktop.Action.class;
      try { 
        jSONObject1.getEnum(class0, "n?l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an enum of type java.io.StringWriter@0000000010.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("gettoUpperCase", "gettoUpperCase");
      try { 
        jSONObject1.append("gettoUpperCase", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[gettoUpperCase] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<PipedReader> linkedList0 = new LinkedList<PipedReader>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"is\":99,\"size\":false,\"toU\":99,\"javax.org.evosuite.runtime.mock.java.io\":[],\"\":true}", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      hashMap0.put(formatter_BigDecimalLayoutForm0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":true,\"toLowerCase\":\"getposition\",\"value\":true,\"\"\"\":false,\".\":99,\"xx\":{\".\":true}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 73 [character 74 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":false,\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"ishashCode\"}");
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove(" line ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a strinQS");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"a string\"");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("Unable to preserve stream position");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HashMap<BigDecimal, Locale.Category> hashMap0 = new HashMap<BigDecimal, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("}oiU8*YX[a=G^p");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      JSONObject jSONObject1 = jSONObject0.put("W4{lK08>S{1._-KB", (Collection<?>) linkedList0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Integer> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("<8GdnY9S./3Rw");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-1", (-702L));
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      boolean boolean0 = jSONObject0.isNull("{\"fruit\":false,\"\"\"\":null,\"0\":\"Null key.\",\"value\":\"a string\",\"\f\":false,\"Unable to write JSONObject value for key: \":{}}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" line ", 0.0);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble(" line ");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      Number number0 = jSONObject0.optNumber(".");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("l4E])[i,1X6~H");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }
}
