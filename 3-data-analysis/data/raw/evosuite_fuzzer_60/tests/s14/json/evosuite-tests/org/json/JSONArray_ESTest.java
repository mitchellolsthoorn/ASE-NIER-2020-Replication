/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 10:45:53 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.Window;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Authenticator;
import java.sql.JDBCType;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.swing.GroupLayout;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.put(false);
      try { 
        jSONArray2.toJSONObject(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      try { 
        jSONArray1.getBigInteger(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray1 = jSONArray0.put(1638, (Collection<?>) linkedList0);
      try { 
        jSONArray1.getBigDecimal(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<JTable.PrintMode> linkedList0 = new LinkedList<JTable.PrintMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      MockFile mockFile0 = new MockFile("", "{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(4583, (Object) linkedList0);
      String string0 = jSONArray1.toString();
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(4651, (Map<?, ?>) null);
      jSONArray0.remove(4600);
      assertEquals(4651, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.query("");
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.optString((int) (byte)59, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      String string0 = jSONArray1.optString(0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("3WeJuUTY&=AK&S", "Kq[A'UP0 2Hv");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery("");
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Number number0 = jSONArray0.optNumber((-195), (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((double) 93);
      Number number0 = jSONArray0.optNumber((-1551), (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      Number number0 = jSONArray0.optNumber(10, (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = jSONArray0.optInt(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[true,{}]");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      int int0 = jSONArray0.optInt(3115, (-1046));
      assertEquals((-1046), int0);
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[99,{},\"a string\",[],\"a string\"]");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      int int0 = jSONArray0.optInt(0);
      assertEquals(99, int0);
      assertEquals(5, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(10, (-1380.4767F));
      int int0 = jSONArray0.optInt(10);
      assertEquals((-1380), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      float float0 = jSONArray0.optFloat((-3407), (float) (-3407));
      assertEquals((-3407.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(4651, (double) 4651L);
      assertEquals(4651.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0, (float) 0);
      double double0 = jSONArray0.optDouble(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(4, (float) 4);
      double double0 = jSONArray1.optDouble(4);
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.optBoolean(4, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = jSONArray0.optBigInteger(4603, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(2647, bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = new BigDecimal((-797L));
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal((-1379), bigDecimal0);
      assertEquals((short) (-797), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1064.6448579081);
      int int0 = jSONArray1.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("] could not be converted to BigInteger.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0, (float) 0);
      boolean boolean0 = jSONArray0.isNull(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(4, (float) 4);
      float float0 = jSONArray1.getFloat(4);
      assertEquals(4.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(4, (-668.5395F));
      float float0 = jSONArray0.getFloat(4);
      assertEquals((-668.5395F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.put(12, (Collection<?>) linkedList0);
      jSONArray0.get(12);
      assertEquals(13, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 2757, (-947));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(9, (Object) null);
      // Undeclared exception!
      jSONArray1.toString(1230);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(3144, (-1699.8875F));
      // Undeclared exception!
      jSONArray0.toList();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<MultipleGradientPaint.CycleMethod, String> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, String>();
      try { 
        jSONArray0.put((-1), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2643), (-290));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2643] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-948), (float) 3700);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-948] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2556), 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2556] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[99,{},\"\",[[]],\"a string\"]");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(3144, (-1699.8875F));
      // Undeclared exception!
      jSONArray1.join("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getNumber(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getBoolean(180);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[180] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0, (float) 0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(4, (float) 4);
      StringWriter stringWriter0 = new StringWriter(4);
      Writer writer0 = jSONArray1.write((Writer) stringWriter0, 4, (-1047));
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(4, (float) 4);
      StringWriter stringWriter0 = new StringWriter(4);
      Writer writer0 = jSONArray0.write((Writer) stringWriter0, (-1047), 69);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(3678, (float) 0);
      StringWriter stringWriter0 = new StringWriter(3676);
      // Undeclared exception!
      jSONArray1.write((Writer) stringWriter0, 0, 91);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONArray0.put((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter(4025);
      jSONArray0.write((Writer) stringWriter0, 4025, 32);
      assertEquals("[[]]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter(3676);
      jSONArray0.write((Writer) stringWriter0, 0, 91);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<JTable.PrintMode> linkedList0 = new LinkedList<JTable.PrintMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<JDBCType, Short> hashMap0 = new HashMap<JDBCType, Short>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONArray jSONArray2 = jSONArray1.put(1, (Object) bigInteger0);
      assertFalse(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      Double double0 = new Double(0);
      JSONArray jSONArray2 = jSONArray1.put(0, (Object) double0);
      assertSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Double double0 = new Double((-3907.94));
      try { 
        jSONArray0.put((-1071), (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1071] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.optString((-1976), "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = jSONArray0.optNumber(10, (Number) bigDecimal0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(44, (-3769L));
      assertEquals((-3769L), long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency0 = GraphicsDevice.WindowTranslucency.TRANSLUCENT;
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency1 = jSONArray0.optEnum(class0, (-862), graphicsDevice_WindowTranslucency0);
      assertSame(graphicsDevice_WindowTranslucency0, graphicsDevice_WindowTranslucency1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(4, (float) 4);
      Class<Month> class0 = Month.class;
      Month month0 = Month.FEBRUARY;
      Month month1 = jSONArray1.optEnum(class0, 4, month0);
      assertEquals(Month.FEBRUARY, month1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(4, 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(1630, 3134.7197F);
      assertEquals(3134.7197F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      double double0 = jSONArray0.optDouble((-478), (double) (-478));
      assertEquals((-478.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      Object object0 = jSONArray1.opt(0);
      assertEquals(0.0F, object0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt(484);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt((-1));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONArray0.put((Collection<?>) linkedList0);
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[99,null,99,[]]");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      try { 
        jSONArray0.get(484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[484] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean((-2556), true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.put(object0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      jSONArray0.optEnum(class0, 0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[true,\"a string\",\"a string\",{\"JSONArray[\":false}]");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      List<Object> list0 = jSONArray0.toList();
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(2917, (Object) null);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.contains(2917));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[99,{},\"a string\",[],\"a string\"]");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
      assertEquals(5, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[99,{\"Illegal escape.\":99}]");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      jSONArray0.toString(98);
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(4, (float) 4);
      JSONArray jSONArray2 = new JSONArray();
      assertTrue(jSONArray2.isEmpty());
      
      jSONArray2.toJSONObject(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[99,{},\"a string\",[],\"a string\"]");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      JSONArray jSONArray1 = new JSONArray("[99,{},\"a string\",[],\"a string\"]");
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertTrue(boolean0);
      assertEquals(5, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Integer integer0 = new Integer(97);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.push(integer0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList1);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[-99]]");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.similar(stringReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(93);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.remove((-1071));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3136, (long) 3136);
      jSONArray0.put(3096, false);
      assertEquals(3137, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2210), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2210] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(true);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      String string0 = jSONArray1.optString(0, "] could not be converted to BigInteger.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      Number number0 = jSONArray1.optNumber(0);
      assertNotNull(number0);
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0, (float) 0);
      long long0 = jSONArray0.optLong(0, 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(44, (Object) linkedList0);
      long long0 = jSONArray0.optLong(44, (long) 44);
      assertEquals(44L, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(1630);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.optJSONArray(386);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(3122, (Object) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONArray1.optBigDecimal(3122, bigDecimal0);
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0, (float) 0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(4, (float) 4);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(4, bigInteger0);
      assertEquals((short)4, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONArray1.optBigInteger(44, bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      try { 
        jSONArray1.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(10, (Object) linkedList0);
      int int0 = jSONArray0.optInt(10);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3700, (float) 3700);
      int int0 = jSONArray0.optInt(3700, 3700);
      assertEquals(3700, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      float float0 = jSONArray1.optFloat(44, (float) 44);
      assertEquals(44.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      float float0 = jSONArray1.optFloat(0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0, (float) 0);
      double double0 = jSONArray0.optDouble(0, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[\"a string\",\"a string\",{},true]");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      jSONArray0.join("");
      assertEquals(4, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(4);
      try { 
        jSONArray1.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      long long0 = jSONArray1.getLong(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(872, (float) 872);
      try { 
        jSONArray1.getLong(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      try { 
        jSONArray1.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(4, (float) 4);
      assertEquals(5, jSONArray0.length());
      
      int int0 = jSONArray0.getInt(4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(3144, (-1699.8875F));
      try { 
        jSONArray1.getInt(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      Number number0 = jSONArray1.getNumber(0);
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      assertEquals(1, jSONArray0.length());
      
      float float0 = jSONArray1.getFloat(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(562, 0.0F);
      try { 
        jSONArray0.getFloat(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(44, (Object) linkedList0);
      try { 
        jSONArray0.getDouble(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      linkedList0.add(dayOfWeek0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = jSONArray0.optNumber(0, (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      long long0 = jSONArray0.optLong(3116);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[\"a string\",\"a string\",{\"org.json.JSONException\":-99},-99]");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      // Undeclared exception!
      try { 
        jSONArray0.query("[\"a string\",\"a string\",{\"org.json.JSONException\":-99},-99]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0.0F);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("-7-'F_h^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.isNull(2329);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      jSONArray0.put((Collection<?>) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[]");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      HashMap<Authenticator.RequestorType, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Authenticator.RequestorType, GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber((-883));
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3136, (long) 3136);
      boolean boolean0 = jSONArray0.optBoolean(10);
      assertEquals(3137, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      float float0 = jSONArray0.optFloat((-1));
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(4, 4453);
      assertEquals(5, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      try { 
        jSONArray0.put((-1114), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1114] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(9, (double) 9);
      assertEquals(10, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0L);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(3700, (float) 3700);
      try { 
        jSONArray1.getJSONArray(3700);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[3700] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(570);
      assertEquals("", string0);
  }
}
