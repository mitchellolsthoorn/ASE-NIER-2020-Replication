/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 09:51:12 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Short short0 = new Short((short) (-1280));
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.autoTypeAccept", "parser", sQLDataException0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short)2351, 47, 9);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, short0, sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -255
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("}", jSONPath_WildCardSegment0, jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RefOpSegement0);
      assertSame(jSONPath_Filter0, jSONPath_RefOpSegement0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%%");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "toJSON error";
      stringArray0[1] = "%%";
      stringArray0[2] = "toJSON error";
      stringArray0[3] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}";
      stringArray0[4] = "%%";
      stringArray0[5] = "j>PePyLqNa%yBU.%+;0";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("l%kW]t<", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}", "dw1zt:v-8*N)W{}", stringArray0, false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_MatchSegement0);
      assertSame(jSONPath_MatchSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_deser__");
      JSONPath jSONPath0 = new JSONPath("_asm_deser__");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, jSONPath0, jSONPath_JSONPathParser0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/2");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("/cause/stackTrace/2");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")Z26x\".*5+rIx{Gp)D");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. )Z26x\".*5+rIx{Gp)D
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[-99,null]");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3eDgk3p;#g!1");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('(');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$WildCardSegment");
      jSONPath_JSONPathParser0.accept('c');
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("nhjv", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      BigInteger bigInteger0 = BigInteger.ONE;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, bigInteger0, serializeConfig0);
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("utf-8");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 34, 153);
      BigInteger bigInteger0 = BigInteger.TEN;
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, bigInteger0);
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!/o#joer x{>QE");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1m/17SnW]Y85Cac.sSs");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransactionRollbackException0);
      assertEquals(80, map0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("TQ*4dF)bqSeSL]??{$", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "M");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("!");
      Long long0 = new Long((-5808512892688781180L));
      int int0 = jSONPath0.size((Object) long0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      SQLDataException sQLDataException0 = new SQLDataException("4[J");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("utf-8", "4[J", (-26), sQLDataException0);
      int int0 = jSONPath0.size((Object) sQLTransientConnectionException0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"a string\"");
      UUID uUID0 = MockUUID.fromString("\"a string\"");
      boolean boolean0 = jSONPath0.setPropertyValue(uUID0, "toJSON error", (-218L), (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("internal");
      Short short0 = new Short((short)46);
      Integer integer0 = new Integer(159);
      boolean boolean0 = jSONPath0.set((Object) short0, (Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "value not found in path ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("Ej6^d", serializeConfig0, parserConfig0);
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long(1940L);
      JSONPath jSONPath0 = JSONPath.compile("y");
      Collection<Object> collection0 = jSONPath0.getPropertyValues(long0);
      assertFalse(collection0.contains(1940L));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      Object object0 = jSONPath0.getPropertyValue("l%kW]t<", "unsupported set operation.", 5274044858141538265L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      Class<Float> class0 = Float.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", serializeConfig0, parserConfig0);
      Class<Object> class0 = Object.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("utf-8");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{\"x\":\"hello\",\"com.alibaba.fastjson.JSONPath\":\"a string\",\"z\":null,\"/stackTrace/5\":[],\"b\":99}");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)jSONPath0.getArrayItem(sQLSyntaxErrorException0, 0);
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[5];
      Object object0 = JSONPath.extract("", "M", parserConfig0, 34, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[false,{\",zWIC\":null}]");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      int int0 = jSONPath0.evalSize(bigDecimal0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("$", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize(serializeConfig0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("!", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize(jSONPath0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"a string\"");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("\"alke", true);
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_PropertySegment0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) "3Sae~'f}3\"", "fastjson.parser.autoTypeAccept");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("!");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("u?|q+#<_>d", jSONPath_Operator0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      Object object0 = jSONPath0.eval((Object) jSONPath_FilterSegment0);
      assertSame(jSONPath_FilterSegment0, object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Short short0 = new Short((short) (-1280));
      Short short1 = new Short((short)11);
      int int0 = JSONPath.compare(short1, short0);
      assertEquals(1291, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 4);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[1] = class0;
      // Undeclared exception!
      try { 
        JSONPath.size((Object) classArray0[1], "/cause/cause/stackTrace/10");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("max", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("OPem4@tPaGG&");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "OPem4@tPaGG&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : OPem4@tPaGG&
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("}", serializeConfig0, (ParserConfig) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(16384, 1057, (byte) (-83));
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_RangeSegment0, "=(f.DnL+g", (byte) (-83), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("true");
      Locale locale0 = Locale.UK;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "com.alibaba.fastjson.serializer.IntegerCodec", (Object) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("QLQ*h>Z", (-2858));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Sprp&#`T");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) pattern0, "e9#3/U<", (Object) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.regex.Pattern
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nhjv");
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) javaBeanSerializer0, (Object) "}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("l%kW]t<", 2923L, 2923L, false);
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_IntBetweenSegement0, (Object) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : l%kW]t<
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$WildCardSegment");
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$WildCardSegment");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(74, 74, 124);
      // Undeclared exception!
      jSONPath1.set((Object) jSONPath0, (Object) jSONPath_RangeSegment0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.compatibleWithFieldName");
      Short short0 = new Short((short)46);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) short0, (Object) "fastjson.compatibleWithFieldName");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("L25]Qd3uAHcX1?Tv");
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "L25]Qd3uAHcX1?Tv", (Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : L25]Qd3uAHcX1?Tv
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Float float0 = new Float((-785.0));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "true";
      stringArray0[1] = "[]";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(float0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("\"", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("O");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "O", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.EnumDeserializer");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "com.alibaba.fastjson.parser.deserializer.EnumDeserializer", 195);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "\"a string\"", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLClientInfoException0);
      Spliterator<Throwable> spliterator0 = sQLTransientConnectionException0.spliterator();
      JSONPath jSONPath0 = JSONPath.compile("[true]");
      jSONPath0.remove((Object) spliterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" ");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "/largeUpdateCountc");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("{\"Or\":[]}", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 4);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) sQLRecoverableException0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("nin", intArray0, (Throwable) null);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("p=a");
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, batchUpdateException0, (Object) null);
      JSONPath.keySet(object0, "[I");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath.keySet((Object) "parseInt error : ", "Y[!2U',iNn7t$*");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3eDgk3p;#g!1");
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) jSONPath_JSONPathParser0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : l%kW]t<
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(14);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("r1@J}rO8tRjKY8Xu7/", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : r1@J}rO8tRjKY8Xu7/
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"a string\"");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("cx/kN;Fi,o%Ro6OR");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue("", "_bEaC|:*!%hbB", 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$WildCardSegment");
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LocalVariableTypeTable");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("}", serializeConfig0, (ParserConfig) null);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSONPath.extract("US", "fastjson.parser.deny.internal", parserConfig0, 1203, (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "/stackTrace/9", parserConfig0, 114, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[1];
      JSONPath.extract("{\"x\":\"|d|q\",\"y\":7,\"z\":true,\"a\":[],\"NoChange\":{\"x\":-99,\"xx\":true}}", "jsonpath can not be null", parserConfig0, (-550), featureArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONPath.extract("[false]", "[false]");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%%7yir! 1BF0c");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("utf", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. %%7yir! 1BF0c
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("zQ:*EC'*LaS]GfMk3_o", 2035L, 2035L, false);
      JSONPath jSONPath0 = new JSONPath("zQ:*EC'*LaS]GfMk3_o", (SerializeConfig) null, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(jSONPath_IntBetweenSegement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(120);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("9<z%\"]@_eTbMa", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(classLoader0, "fastjson.parser.autoTypeSupport", (-32L), classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "l%kW]t<", (-4270347329889690746L), (Object) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("}", serializeConfig0, (ParserConfig) null);
      Byte byte0 = new Byte((byte) (-83));
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(byte0, "=(f.DnL+g", 2153L, "=(f.DnL+g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("cx/kN;Fi,o%Ro6OR", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet("hAt", "fastjson.parser.autoTypeAccept", (byte)124, calendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path cx/kN;Fi,o%Ro6OR, segement fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("}", serializeConfig0, (ParserConfig) null);
      Class<SQLException> class0 = SQLException.class;
      LinkedHashSet<JSONPath.PropertySegment> linkedHashSet0 = new LinkedHashSet<JSONPath.PropertySegment>();
      Vector<Object> vector0 = new Vector<Object>(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(class0, "=(f.DnL+g", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("/stackTrace/5", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[9];
      JSONPath jSONPath0 = JSONPath.compile("internal");
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) intArray0[1]);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(stack0, stack0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("!", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(double0, (List<Object>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // java.lang.Double
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(parserConfig0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(116);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(124, 2300, 124);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) serializeConfig0, "/9", (Object) jSONPath_RangeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Double double0 = new Double((-74.38432193708063));
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) double0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}", (Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[false,{}]");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      DataTruncation dataTruncation0 = new DataTruncation(2935, true, true, 2935, 1024, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "[false,{}]", (Object) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. [false,{}]
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", intArray0, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("i$Y-LP~O&-U=/", batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}", sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}", 1843, sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLInvalidAuthorizationSpecException0, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "[false]", "[false]", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path [false]
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(867, (-588), (-751));
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_RangeSegment0, ">b\"dwEe:\"tY|+g#", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. >b\"dwEe:\"tY|+g#
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONPath jSONPath0 = new JSONPath("O", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(6, 0, (-1825));
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_PropertySegment0, class0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(object0, "NOn(^S2", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"NOT_LIKE\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":{},\"value2\":99,\"number\":[]}", serializeConfig0, parserConfig0);
      jSONPath0.deepSet(double0, "nP", (-1719L), double0);
      assertEquals("{\"NOT_LIKE\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":{},\"value2\":99,\"number\":[]}", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      jSONPath0.deepSet((Object) null, "l%kW]t<", (-1), (Object) null);
      assertEquals("l%kW]t<", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"a string\"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"a string\"");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLRecoverableException0, "!J9ZWw)Md39bh", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path \"a string\", segement !J9ZWw)Md39bh
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(5634);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("S^1C-m%j+49?oya{", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, classLoader0, 5634, classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$ValueSegment", false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, batchUpdateException0);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLClientInfoException0, "com.alibaba.fastjson.JSONPath$ValueSegment");
      assertEquals(0, sQLClientInfoException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("GBg6tg7", false);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, parserConfig0, "fastjson.parser.autoTypeAccept");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("illegal json, ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : illegal json, 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath.compile("{'3e%e~D\"]#HSkFm1Y");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-2147483648");
      Long long0 = new Long(2131L);
      JSONPath jSONPath0 = JSONPath.compile("[C");
      MockUUID.randomUUID();
      JSONPath jSONPath1 = new JSONPath("IN");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, (Object) null, 2110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath.compile("");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("i", (SerializeConfig) null, (ParserConfig) null);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(34);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) jSONPath_ArrayAccessSegment0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("internal");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("internal", "internal", 3113);
      boolean boolean0 = jSONPath0.remove((Object) sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/9");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2078209979), 1607, (-2078209979), 2833, 61);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      boolean boolean0 = jSONPath0.remove((Object) date0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("K1Q1x4]C>>y<w6o");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("{\"NOT_LIKE\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":{},\"value2\":99,\"number\":[]}", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) " SiZ!zXNupi`>/B", (Object[]) null);
      assertEquals("{\"NOT_LIKE\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":{},\"value2\":99,\"number\":[]}", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("cx/kN;Fi,o%Ro6OR", "*b(QOKikD0}a4@Hy", 82);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("cx/kN;Fi,o%Ro6OR", sQLTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("cx/kN;Fi,o%Ro6OR", "*b(QOKikD0}a4@Hy", sQLNonTransientConnectionException0);
      JSONPath jSONPath0 = new JSONPath(".-Z0c|{<Md_Lf%V*");
      MockDate mockDate0 = new MockDate(0L);
      SQLDataException sQLDataException0 = new SQLDataException("cx/kN;Fi,o%Ro6OR", "cx/kN;Fi,o%Ro6OR", sQLTimeoutException0);
      boolean boolean0 = jSONPath0.containsValue((Object) mockDate0, (Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      boolean boolean0 = jSONPath0.contains((Object) "{\"NOT_LIKE\":\"Apple\",\"(CLjava/lang/String;\":\"Large\",\"color\":\"Red\",\"value\":{\"x\":99},\"value2\":99,\"number\":[]}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Sbp:", parserConfig0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("AllowUnQuotedFieldNames");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}$x-@0c|%/6!\"w", parserConfig0);
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2300);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$WildCardSegment");
      Object object0 = jSONPath0.eval((Object) jSONPath_ArrayAccessSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fcet5m\":{}}");
      Byte byte0 = new Byte((byte)96);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fcet5m\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"NOT_LIKE\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":{},\"value2\":99,\"number\":[]}", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("f B2c RYx>N", false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("N@T7W<x}Axd3ZMD.r", "z0$");
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("/cause/stackTrace/13", ")'v{;&'|j)f8dPG8=H", parserConfig0, (-550), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("nDC;Nk.V|py<k--M", "java.", (-1612035422));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.";
      stringArray0[1] = "u*";
      stringArray0[2] = "/stackTrace/9";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLIntegrityConstraintViolationException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "deny";
      stringArray0[1] = "M";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath_Operator0, stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject("l%kW]t<", (String[]) null);
      assertEquals("l%kW]t<", object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("aH(Ie?r;JUxP4", stringArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("Y>Sb\"qI&|RYDn ", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"a string\"");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(91, (-550), 2551);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, hashMap0, hashMap0);
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bm");
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLDataException sQLDataException0 = new SQLDataException("Ndqz&X[Lm+m<_zf", "alibaba", sQLWarning0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLDataException0, (String) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2002);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("dd.MM.yyyy HH:mm:ss", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue("yyyy/MM/dd HH:mm:ss", "fastjson.parser.safeMode", 0L, "NOT_LpKE");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("hashCode");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("hAt");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.alibaba.fastjson.JSONPath$NotNullSegement", hashMap0, sQLRecoverableException0);
      jSONPath0.deepSet(sQLClientInfoException0, "not", 3267L, "hAt");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("{\"%%\":\"Apple\",\"size\":99,\"/uRLs/1\":\"Red\",\"value\":null,\"value2\":null,\"number\":-99}", serializeConfig0, parserConfig0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan(aSMDeserializerFactory0, "\"RX&uc%Ln*#)-", linkedList0);
      assertFalse(linkedList0.contains("\"RX&uc%Ln*#)-"));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "false";
      stringArray0[1] = "false";
      stringArray0[2] = "false";
      stringArray0[3] = "false";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray((Object) null, stringArray0);
      JSONPath.eval((Object) jSONArray0, "false");
      assertEquals(4, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double double0 = new Double((-1.0));
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(62, 8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Long long0 = new Long(1670L);
      Float float0 = new Float((double) 1670L);
      boolean boolean0 = JSONPath.eqNotNull(long0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Long long0 = new Long(2131L);
      boolean boolean0 = JSONPath.eqNotNull(long0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float((-1.0));
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":99,\"number\":\"1\"}", serializeConfig0, parserConfig0);
      Class<SQLException> class0 = SQLException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      boolean boolean0 = JSONPath.eq(double0, javaBeanSerializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("&,#<wA(<%/xN0SW^", "fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      boolean boolean0 = JSONPath.eq(class0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1));
      boolean boolean0 = JSONPath.eq((Object) null, jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("com.alibaba.fastjson.JSONPath$Context", "com.alibaba.fastjson.JSONPath$Context");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("value", (Throwable) null);
      boolean boolean0 = JSONPath.eq("l%kW]t<", sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("internal");
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepGetPropertyValues(stack0, stack0);
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"|d|q\",\"y\":7,\"z\":true,\"a\":[],\"NoChange\":{\"x\":-99,\"xx\":true}}");
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, hashMap0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, sQLNonTransientException0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("}", serializeConfig0, (ParserConfig) null);
      Byte byte0 = new Byte((byte) (-83));
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("=(f.DnL+g", "}", false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, serializeConfig0, byte0, sQLTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("l%kW]t<", "l%kW]t<", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("WuuOAL0t(", serializeConfig0, parserConfig0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, true);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, serializeConfig0, jSONPath_StringOpSegement0, aSMDeserializerFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("Y>S0\"qI&|RYDn ", serializeConfig0, parserConfig0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$WildCardSegment", serializeConfig0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("parser");
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "fastjson.parser.deny");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, batchUpdateException0, sQLRecoverableException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("j&H9tZ!`y[4@ku1");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_NullSegement0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("j&H9tZ!`y[4@ku1");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, parserConfig0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("not");
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("not", longArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, jSONPath_IntObjInSegement0);
      assertSame(jSONPath_IntObjInSegement0, object0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("not");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("y", "tojson");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("y", "KgNt%pR4Lt%r6$P7", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, (-711), 99999999, sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLFeatureNotSupportedException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, dataTruncation0, sQLTimeoutException0);
      assertEquals(2, jSONArray0.size());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("R sl");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("R sl", "R sl", (-2078209979));
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("/cause/stackTrace/9", (-2078209979), (-2078209979), false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, sQLTransientConnectionException0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("/cause/stackTrace/9", 1843, (-2078209979), false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.autoTypeSupport", (-1170L), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("!");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_Operator0, "!");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("rlike", "rlike", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("a", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("rlike", true);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1140), (-1140), (-1140));
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, jSONPath_PropertySegment0, jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("FD#tdPz@k;)mvo", "FD#tdPz@k;)mvo");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.springframework.aop.", "org.springframework.aop.", sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.springframework.aop.", "FD#tdPz@k;)mvo", 0, sQLFeatureNotSupportedException0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("2J)U*Q+:(_\"\"NM8", "O]P,q", true);
      JSONPath jSONPath0 = new JSONPath("org.springframework.aop.");
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, sQLTransactionRollbackException0, jSONPath_MultiIndexSegment0, "2J)U*Q+:(_\"\"NM8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("!", serializeConfig0, parserConfig0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("V,WINUST=/Li31.Ye", "ASMClassLoader", "com.alibaba.fastjson.JSONObject$SecureObjectInputStream", (String[]) null, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, sQLRecoverableException0, parserConfig0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("[-99,null]", "[-99,null]", (String) null, stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("5w+", (String) null, "H}(45yfcja7+", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bm");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("MDTPT/_E?t=O");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("bm", jSONPath_Segment0, jSONPath_Operator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("MDTPT/_E?t=O");
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_Segment0, jSONPath_Segment0, sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "QLQ*h>Z";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("zlP.\u0000f>#aaof-t8", stringArray0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("zlP.\u0000f>#aaof-t8", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation((-304), false, false, (-304), (-304));
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, dataTruncation0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, dataTruncation0, "QLQ*h>Z", sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      Long[] longArray0 = new Long[2];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("Hn`@hj7", longArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath0, "bm", jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":{\"x\":null},\"size\":\"NOT_LIKE\",\"color\":\"Red\",\"value\":\"a string\",\"(\":false,\"number\":\"1\"}");
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(6607618197526598121L);
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.deny.internal", longArray0, false);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_SizeSegment0, longArray0[0], jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"NOT_LIKE\":\"com.alibaba.fastjson.JSONPath\",\"size\":\"Large\",\"color\":\"Red\",\"value\":{},\"value2\":null,\"number\":99}", serializeConfig0, parserConfig0);
      Long[] longArray0 = new Long[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.deny", longArray0, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Integer integer0 = new Integer(2542);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, sQLTransactionRollbackException0, sQLTransactionRollbackException0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.EnumDeserializer");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("&,#<wA(<%/xN0SW^", (-6586085717218287427L), 1187L, false);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "com.alibaba.fastjson.parser.deserializer.EnumDeserializer", (Object) null, "com.alibaba.fastjson.parser.deserializer.EnumDeserializer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("L25]Qd3uAHcX1?Tv");
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("stackTrace", longArray0, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(63, 63, 44);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, parserConfig0, jSONPath0, jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("Y>S0\"qI&|RYDn ", serializeConfig0, parserConfig0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("NhJv/l$p+Ymx", parserConfig0, false);
      Integer integer0 = new Integer((-4427));
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, parserConfig0, integer0, "Y>S0\"qI&|RYDn ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("true");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("true");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("%%", sQLTransientConnectionException0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, sQLSyntaxErrorException0, sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("RS", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny.internal");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.autoTypeAccept");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, double0, sQLTransactionRollbackException0, serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("unsupport type ", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(90, 90, 90);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$Context");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTimeoutException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, sQLTransactionRollbackException0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-4354), 34, (-1703));
      BigInteger bigInteger0 = BigInteger.TEN;
      SQLDataException sQLDataException0 = new SQLDataException("utf-8", "utf-8", 34);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, sQLDataException0, bigInteger0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3572), (-285), (-3572));
      JSONPath jSONPath0 = JSONPath.compile("l%kW]t<");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "fastjson.parser.autoTypeSupport";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray1);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, stringArray0[0], "J8j?>S@F3c}@'gJ`]");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/", "getFieldValue error.");
      boolean boolean0 = jSONPath0.setPropertyValue(arrayList0, "/rT3} MQ06", (-811277319855450459L), sQLRecoverableException0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"/stackTrace/5\":[],\"b\":99}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"/stackTrace/5\":[],\"b\":99}", (-218), sQLNonTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"/stackTrace/5\":[],\"b\":99}", "Sp2FN,", sQLWarning0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("Sp2FN,", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.safeMode", true);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLIntegrityConstraintViolationException0, sQLNonTransientConnectionException0);
      assertEquals("{\"x\":\"hello\",\"y\":7,\"z\":true,\"/stackTrace/5\":[],\"b\":99}", sQLIntegrityConstraintViolationException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[[]]", "[[]]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 2, line 1, column 3[[]]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = JSONPath.compare("(@|ec2:/kyThEWt", "(@|ec2:/kyThEWt");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-4901L));
      // Undeclared exception!
      try { 
        JSONPath.compare(localDate0, parserConfig0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.parser.ParserConfig cannot be cast to java.time.chrono.ChronoLocalDate
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9<z%\"]@_eTbMa");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SerializeConfig serializeConfig0 = new SerializeConfig(120);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("9<z%\"]@_eTbMa", serializeConfig0, parserConfig0);
      Object object0 = JSONPath.reserveToArray(jSONPath_JSONPathParser0, (String[]) null);
      Object object1 = jSONPath_MinSegment0.eval(jSONPath0, "fastjson.parser.deny", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath jSONPath0 = new JSONPath("not support jsonpath : ", serializeConfig0, parserConfig0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"NOT_LIKE\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":{},\"value2\":99,\"number\":[]}", false);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, aSMDeserializerFactory0, jSONPath_PropertySegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$WildCardSegment");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$WildCardSegment", sQLDataException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.parser.deserializer.EnumDeserializer");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("6 []U0kQ)~d2Ta|(d:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6 []U0kQ)~d2Ta|(d\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("illegal json, ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'i, but ' '
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("uuOb`.iFDV9\u0005t-jKu");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("MDTPT/_E?t=O");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1670L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">v|KmM|aB]");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=(f.DnL+g");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("u*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("u*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(489L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"helle\",\"com.alibaba.fastjson.JSONPath\":\"a string\",\"z\":null,\"/stackTrace/5\":[],\"b\":99}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"x\":\"helle\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "javax.xml.datatype.XMLGregorianCalendar";
      stringArray0[1] = "[%.6ei9PqfkJ&iWz=}";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("{\"x\":\"helle\",\"com.alibaba.fastjson.JSONPath\":\"a string\",\"z\":null,\"/stackTrace/5\":[],\"b\":99}", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '.'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"alke");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/10");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("b?Z?]HKmH+aV-ZB");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but 'Z'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/9");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("$mHn#[:]j}!e9", "$mHn#[:]j}!e9");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2$mHn#[:]j}!e9
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l");
      jSONPath0.init();
      assertEquals("l", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny.internal");
      JSONPath jSONPath0 = new JSONPath("-");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) sQLTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("cx/kN;Fi,o%Ro6OR", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) map0, (Object[]) jSONPath_OperatorArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : cx/kN;Fi,o%Ro6OR
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "/stackTrace/10");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1087), 116, (-2098));
      JSONPath jSONPath0 = new JSONPath("false");
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = jSONPath0.set((Object) mockGregorianCalendar0, (Object) bigInteger0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"NOT_LIKE\":\"Apple\",\"size\":\"Large\",\"/stackTrace/3\":\"com.alibaba.fastjson.JSONPath$MatchSegement\",\"value\":{},\"value2\":99,\"number\":[],\"x\":\"a string\",\"xx\":null}", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeSupport", true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.deny.internal", "FD", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientConnectionException0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, bigDecimal0);
      boolean boolean0 = JSONPath.set(object0, "fastjson.parser.autoTypeSupport", (Object) "ZC");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("}", serializeConfig0, (ParserConfig) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, (Object) null, "}");
      boolean boolean0 = jSONPath0.set((Object) "}", object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$WildCardSegment");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "com.alibaba.fastjson.JSONPath$WildCardSegment", (Object) "com.alibaba.fastjson.JSONPath$WildCardSegment", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("*", "l%kW]t<", 2150);
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/9");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("!");
      boolean boolean0 = JSONPath.remove((Object) jSONPath0, "com.alibaba.fastjson.parIer.deserializer.EnumDeserializer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("!", serializeConfig0, parserConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("9+4oZ", "fastjson.parser.deny.internal");
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLSyntaxErrorException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      String[] stringArray0 = new String[0];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Qr7yv");
      jSONPath0.arrayAdd((Object) sQLSyntaxErrorException0, (Object[]) stringArray0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fFstjson.parser.deserializer.EnumDeserializer");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "NOT_LpKE", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fFstjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("I");
      Set<?> set0 = jSONPath0.keySet((Object) "{\"utf\":false,\"y\":7,\"z\":true,\"a\":[{}],\"NoChange\":{\"utf\":-99,\"xx\":true}}");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"(\":false,\"number\":\"1\"}");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2818, false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("A0eJg6b|=o", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : A0eJg6b|=o
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("f]RGgnUN");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      ParserConfig parserConfig0 = new ParserConfig(true);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("!", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.contains((Object) double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract(", segement ", "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.EnumDeserializer");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      boolean boolean0 = JSONPath.containsValue((Object) null, "AllowArbitraryCommas", (Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$WildCardSegment");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("u*");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("L25");
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, "L25", jSONPath_JSONPathParser0);
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("_asm_deser__", 0.0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("_asm_deser__");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_Operator0, jSONPath_SizeSegment0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("QLQ*h>Z", (-2858));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("QLQ*h>Z", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.util.FieldInfo");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2858), (-2858), (-2858));
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath_RangeSegment0, "QLQ*h>Z", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("L25]Qd3uAHcX1?Tv");
      JSONPath jSONPath0 = new JSONPath("L25]Qd3uAHcX1?Tv");
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, (Object) null, jSONPath0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[[]]");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('[', char0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2300);
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      UUID uUID0 = MockUUID.fromString("Vw");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", "{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, uUID0, sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.util.UUID
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("l%kW]t<", 2923L, 2923L, false);
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(9);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, jSONPath_IntBetweenSegement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$IntBetweenSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath_Operator0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}", object0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("\"a string\"", (-719183851066137122L), (-719183851066137122L), false);
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(jSONPath_IntBetweenSegement0, 12);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("y'*]D9", "{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2y'*]D9
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      String string0 = jSONPath0.getPath();
      assertEquals("fastjson.parser.safeMode", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Object object0 = JSONPath.extract("", "t");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"And\",\"color\":-99,\"com.alibaba.fastjson.JSONPath$IntInSegement\":[],\"value2\":99,\"number\":\"1\",\"x\":true}", serializeConfig0, parserConfig0);
      JSONPath.arrayAdd((Object) jSONPath0, "com.alibaba.fastjson.JSONPath$StringInSegement", (Object[]) null);
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"And\",\"color\":-99,\"com.alibaba.fastjson.JSONPath$IntInSegement\":[],\"value2\":99,\"number\":\"1\",\"x\":true}", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.util.FieldInfo");
      Set<?> set0 = JSONPath.keySet((Object) jSONPath0, "com.alibaba.fastjson.util.FieldInfo");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Set<?> set0 = jSONPath0.evalKeySet(sQLNonTransientException0);
      assertNotNull(set0);
      
      boolean boolean0 = JSONPath.set((Object) null, "nin", (Object) set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("!", (-2095516571388852610L), jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("!");
      Byte byte0 = new Byte((byte)109);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, byte0, jSONPath_Operator0, "!");
      assertFalse(boolean0);
  }
}
