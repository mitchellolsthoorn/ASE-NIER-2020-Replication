/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 09:44:52 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.sql.JDBCType;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.tools.DocumentationTool;
import javax.tools.JavaFileObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("\"");
      assertEquals("\"", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("{\"#/\":true,\"color\":\"readUnsignedShort\",\"value\":true,\"Misplaced endObject.\":null,\"number\":{}}", stringArray0);
      try { 
        jSONObject0.getString("{\"#/\":true,\"color\":\"readUnsignedShort\",\"value\":true,\"Misplaced endObject.\":null,\"number\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"Duplicate key \"\":null,\"x\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 18 [character 19 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" ~n&,v>4_|^,ctY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = MockFile.createTempFile("`Nl@GY]3QYvr!Aq", "Nesting error.");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      JSONObject.indent(bufferedWriter0, (-2923));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9T=Q)}SK/SZF7");
      assertEquals("9T=Q)}SK/SZF7", object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Proxy.Type, Thread.State> hashMap0 = new HashMap<Proxy.Type, Thread.State>();
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not an int.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getBigInteger("] is not an int.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.write((Writer) stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.remove("X8O\":Kf");
      assertEquals(Proxy.Type.DIRECT, object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.query("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("'", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.optNumber("PI].T7tR*cUwse'Yw", (Number) bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-1L));
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("=I6", (Number) bigInteger0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("isnegate", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("isreadUnsignedByte", 100);
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<DocumentationTool.Location, ObjectInputStream> hashMap0 = new HashMap<DocumentationTool.Location, ObjectInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("+.t\"#/X", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"]\":\"Large\",\"color\":-99,\"value\":{\"x\":{}},\"] is not a valid number.\":-99,\"number\":null}");
      double double0 = jSONObject0.optDouble("zfVlXGRj!y\"rU", (double) 6);
      assertEquals(6.0, double0, 0.01);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("dD{bzdC:H", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((long) (byte) (-7));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("isreadUnsignedByte", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("M!CWQ'rFcG<7h", "LyE");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt("M!CWQ'rFcG<7h");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1390);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3013);
      JSONObject jSONObject1 = jSONObject0.putOpt("X8O\":Kf", byteArrayOutputStream0);
      boolean boolean0 = jSONObject1.isNull("X8O\":Kf");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("-+biNq5 {'w4|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("java.io.StringWriter@0000000003", bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<JDBCType, CardTerminals.State> hashMap0 = new HashMap<JDBCType, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 31, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("{\"org.json.JSONPointerException\":0.0}", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push(";IO.K5;D=Bm%+\"b");
      linkedList0.add(";IO.K5;D=Bm%+\"b");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      // Undeclared exception!
      try { 
        jSONObject0.query(jSONPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value [null] is not an array or object therefore its key ;IO.K5;D=Bm%+\"b cannot be resolved
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":true,\"color\":\"Red\",\"value\":\"a string\",\"Misplaced endObject.\":-99,\"number\":\"getkeySet\"}");
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"]\":\"Large\",\"color\":[],\"-0\":{\"x\":{}},\"] is not a valid number.\":-99,\"number\":null}");
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LineNumberReader, WebParam.Mode> hashMap0 = new HashMap<LineNumberReader, WebParam.Mode>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(621);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Character.UnicodeScript, JavaFileObject.Kind> hashMap0 = new HashMap<Character.UnicodeScript, JavaFileObject.Kind>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 1528);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"gettoString\":\"hello\",\"y\":7,\"] is not a number.\":true,\"a\":false,\"b\":[],\"xx\":99,\"negate\":null,\"toString\":true}");
      try { 
        jSONObject0.getLong("{\"gettoString\":\"hello\",\"y\":7,\"] is not a number.\":true,\"a\":false,\"b\":[],\"xx\":99,\"negate\":null,\"toString\":true}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000061] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getJSONArray("2D{M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("lock");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("getreadLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("Unable to preserve stream position");
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[%B3!Xv6bo");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<ObjectOutputStream, TrayIcon.MessageType> hashMap0 = new HashMap<ObjectOutputStream, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("intern", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name intern, locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("3XKEv)v^]UPe", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Byte byte0 = new Byte((byte)42);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(byte0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-2042));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2042
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, 47, 100);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(621);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      StringWriter stringWriter0 = new StringWriter((byte)34);
      HashMap<Double, InputStreamReader> hashMap0 = new HashMap<Double, InputStreamReader>();
      jSONObject0.put("v~+'Z", (Map<?, ?>) hashMap0);
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, (int) (byte) (-20), 485);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      File file0 = MockFile.createTempFile("getlongValueExact", "] is not an int.");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      Object object0 = JSONObject.wrap(bufferedWriter0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Boolean boolean0 = new Boolean("!x$[AN$");
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(110);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(110, object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = JSONObject.wrap("{}");
      assertEquals("{}", object0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Object object0 = JSONObject.wrap(locale_Category0);
      assertSame(locale_Category0, object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject.testValidity("=z");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-99");
      assertEquals((-99), object0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("LyE");
      assertEquals("LyE", object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      File file0 = MockFile.createTempFile("getlongValueExact", "isloTgValueExact");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      Writer writer0 = JSONObject.quote("BB;\"E>uJLWy/?", (Writer) mockFileWriter0);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.json.JSONObject$Null", "org.json.JSONObject$Null");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      Writer writer0 = JSONObject.quote("\t", (Writer) mockFileWriter0);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      Writer writer0 = JSONObject.quote((String) null, (Writer) stringWriter0);
      assertEquals("\"\"", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1390);
      JSONObject jSONObject1 = jSONObject0.put(")V}?Iek||q", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = jSONObject0.keySet();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("1", (Number) bigInteger0);
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      jSONObject0.put("' and instead saw ''", (Object) objectOutputStream0);
      long long0 = jSONObject0.optLong("' and instead saw ''", 2370L);
      assertEquals(2370L, long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("'?");
      long long0 = jSONObject1.optLong("'?", 99L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("A&4-;1{w?4n SV7&`Qm", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\t", (-1923));
      assertEquals((-1923), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat((String) null, (-1583.791F));
      assertEquals((-1583.791F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("org.json.JSONObject$1", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("X8O\":Kf", true);
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("N;'gsg}JBrTi?;>", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      StandardProtocolFamily standardProtocolFamily1 = jSONObject0.optEnum(class0, "Null key.", standardProtocolFamily0);
      assertSame(standardProtocolFamily1, standardProtocolFamily0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("M!CWQ'rFcG<7h");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer((-2672));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("~0", stringArray0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONObject0.optEnum(class0, "");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(16);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"1\"}");
      JSONObject jSONObject1 = jSONObject0.put("neg", 2065);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"int\":-99,\"number\":null}");
      int int0 = jSONObject0.length();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("java.io.StringWriter@0000000002");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"isreadLong\":[],\"x\":\"a string\"}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"]\":\"Large\",\"color\":-99,\"value\":{\"java.\":{\"java.\":false}},\"] is not a valid number.\":-99,\"number\":null,\"java.\":false}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(7, map0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("'?");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.put("-0", (Map<?, ?>) null);
      Writer writer0 = jSONObject1.write((Writer) stringWriter0, 45, 45);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<WebParam.Mode, BufferedReader> hashMap0 = new HashMap<WebParam.Mode, BufferedReader>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.writeValue(stringWriter0, hashMap0, (-748), (byte)90);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONObject.\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"] is not a valid number.\":-99,\"number\":null}");
      String string0 = jSONObject0.toString();
      assertEquals(6, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      jSONObject0.write((Writer) mockPrintWriter0, 100, 100);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject.writeValue(stringWriter0, (Object) null, 790, 0);
      assertEquals("null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double((-2742.27674909805));
      Object object0 = JSONObject.wrap(double0);
      assertEquals((-2742.27674909805), object0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, Float> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, Float>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      Float float0 = new Float(0.0);
      hashMap0.put(multipleGradientPaint_CycleMethod0, float0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Long long0 = new Long(59);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(59L, object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Short short0 = Short.valueOf((short)240);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)240, object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "X8O\":Kf");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"descendingIterator\":\"hello\",\"Unable to write JSONObject value for key: \":7,\"Expected a ':' after a key\":true,\"a\":false,\"b\":false,\"xx\":99,\"negate\":false,\"toString\":[-99],\"x\":\"a string\"}");
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(9, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("'?", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("00");
      assertEquals("00", object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-99");
      assertEquals((-99), number0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("0M}:oeR+kp7@kbpp");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(" at ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [ at ] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("A JSONObject tewt must end with '}'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("xN5FSU");
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("#97**j6sicWk}oj[Ilf", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      jSONObject0.put("] is not an int.", (Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not an int.";
      stringArray0[1] = "] is not an int.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":t?u-,\"color\":\"Red\",\"value\":\"a string\",\"Misplaced endObject.\":-99,\"number\":\"getkeySet\"}");
      JSONObject jSONObject1 = jSONObject0.putOnce("{\"fruit\":t?u-,\"color\":\"Red\",\"value\":\"a string\",\"Misplaced endObject.\":-99,\"number\":\"getkeySet\"}", (Object) null);
      assertEquals(5, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("readUnsignedByte", true);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      File file0 = MockFile.createTempFile("getlongValueExact", "islongValueExact");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      jSONObject0.put("] is not an int.", (Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("] is not an int.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      jSONObject0.put("] is not an int.", (Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("] is not an int.");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("'?");
      long long0 = jSONObject0.optLong("'?");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject1 = jSONObject0.put("] is not an int.", (Map<?, ?>) hashMap0);
      long long0 = jSONObject1.optLong("] is not an int.");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<String, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Bad value from toJSONString: ");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger1 = jSONObject0.optBigInteger("false", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("-0", "\t");
      BigInteger bigInteger0 = BigInteger.valueOf((-66L));
      BigInteger bigInteger1 = jSONObject0.optBigInteger("-0", bigInteger0);
      assertEquals((short) (-66), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("-0", bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("'?");
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("'?", (BigDecimal) null);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Long long0 = new Long((-1L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      jSONObject0.put("] is not an int.", (Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("-0", "\t");
      try { 
        jSONObject0.increment("-0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000009].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("'?");
      boolean boolean0 = jSONObject0.has("'?");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("&D JA#]TB&W\"@Pu(S3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("'?");
      try { 
        jSONObject1.getString("'?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 268);
      String[] stringArray0 = JSONObject.getNames((Object) pushbackInputStream0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = JSONObject.getNames((Object) stringArray0[0]);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"]\":{\"x\":false},\"ha\":-99,\"value\":{\"x\":{}},\"] is not a valid number.\":-99,\"number\":null}");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("Nesting error.");
      long long0 = jSONObject1.getLong("Nesting error.");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("i%m~", 1.0);
      int int0 = jSONObject0.getInt("i%m~");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put(")", (Object) hashMap0);
      try { 
        jSONObject0.getInt(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("E:7Gyl+_.r&t", false);
      try { 
        jSONObject0.getFloat("E:7Gyl+_.r&t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("'?");
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("'?");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getDouble("X8O\":Kf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject1 = jSONObject0.put("] is not an int.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getNumber("] is not an int.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("~0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = JSONObject.doubleToString((short)1);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = JSONObject.doubleToString(902.718132);
      assertEquals("902.718132", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("-0", "\t");
      Boolean boolean0 = Boolean.valueOf("-0");
      jSONObject1.append("-0", boolean0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      hashMap0.put((String) null, proxy_Type0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"]\":\"Large,\"color\":-99,\"value\"{\"java.\":{\"java\":false}},\"] is not a valid number.:-9,\"number\":nll,\"java.\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 30 [character 31 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = JSONObject.valueToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("gettoString", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("k\"~UL'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("A JSONObject text must end with '}'");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<LineNumberReader, PipedReader> hashMap0 = new HashMap<LineNumberReader, PipedReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("=z", (Collection<?>) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<JDBCType> class0 = JDBCType.class;
      try { 
        jSONObject0.getEnum(class0, ";IO.K5;D=Bm%+\"b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"gettoString\":\"hello\",\"y\":7,\"z\":true,\"a\":{},\"b\":[],\"xx\":99,\"negate\":{}}");
      // Undeclared exception!
      try { 
        jSONObject0.query("flatValue");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must end with '}'", 1L);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("'?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("<>eVfL*nP'PXd!.]", (float) 125);
      try { 
        jSONObject0.getJSONObject("<>eVfL*nP'PXd!.]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("a ,cPV}n!5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("RnC");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      jSONObject0.putOnce("isreadLine", iterator0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":false,\"]\":\"lo\",\"color\":-99,\"value\":{\"x\":{}},\"] is not a valid number.\":-99,\"number\":null}");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("A JSONObject tewt must end with '}'");
      assertEquals(0, int0);
  }
}
