/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 09:56:41 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.Window;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.nio.CharBuffer;
import java.security.CryptoPrimitive;
import java.sql.JDBCType;
import java.sql.RowIdLifetime;
import java.text.Normalizer;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.LayoutStyle;
import javax.tools.DocumentationTool;
import javax.tools.JavaFileObject;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.put(480, (-327L));
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray0.optNumber(480, (Number) bigInteger0);
      Integer integer0 = new Integer(480);
      jSONArray0.getDouble(480);
      Iterator<Object> iterator0 = jSONArray1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONArray jSONArray1 = jSONArray0.put(315, true);
      JSONArray jSONArray2 = jSONArray0.put(0.0F);
      jSONArray1.optJSONArray(315);
      boolean boolean0 = jSONArray2.getBoolean(315);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1, (long) 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray1.optNumber(1, (Number) bigInteger0);
      Integer integer0 = new Integer((-677));
      try { 
        jSONArray0.getDouble(775);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[775] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[{\"] is not a number.\":{\"true\":-99}},-99,\"a string\",null]");
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(44, (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
      
      double double0 = jSONArray0.optDouble(98, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Object object0 = new Object();
      jSONArray1.similar(jSONArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray1.optLong(322, (long) (byte) (-65));
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 0, 116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.put(358, false);
      jSONArray0.getBoolean(358);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(91, false);
      jSONArray1.optJSONObject(91);
      Float float0 = new Float((float) 91);
      jSONArray1.put((Object) float0);
      jSONArray1.optBoolean(91);
      try { 
        jSONArray1.getLong(200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[200] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, JDBCType> hashMap0 = new HashMap<DocumentationTool.Location, JDBCType>();
      JSONArray jSONArray1 = jSONArray0.put(false);
      boolean boolean0 = jSONArray1.optBoolean(0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(" [character ");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 12 [character 13 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(" [character ");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(" [character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 12 [character 13 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.put(3999, true);
      jSONArray0.optFloat(358, (float) 358);
      double double0 = jSONArray1.optDouble(3999, (double) 3999);
      assertEquals(4000, jSONArray0.length());
      assertEquals(3999.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) "O :&]#");
      BigDecimal bigDecimal0 = new BigDecimal(377.0);
      jSONArray1.optBigDecimal(44, bigDecimal0);
      int int0 = jSONArray0.optInt(44, (-2702));
      assertEquals((-2702), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      linkedList0.add(authenticator_RequestorType0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((Collection<?>) linkedList0);
      jSONArray0.opt(1);
      JSONArray jSONArray1 = jSONArray0.put(1, true);
      Object object0 = new Object();
      jSONArray1.put(object0);
      try { 
        jSONArray1.getDouble(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray("[\"a string\",[false],[],\"a string\"]");
      JSONArray jSONArray1 = jSONArray0.put(33, (Object) "[\"a string\",[false],[],\"a string\"]");
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.optInt(42, 33);
      jSONArray0.optDouble(33);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("[\"a string\",[false],[],\"a string\"]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      linkedList0.add(authenticator_RequestorType0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      JSONArray jSONArray2 = new JSONArray();
      int int0 = jSONArray2.optInt(44, 44);
      assertEquals(44, int0);
      
      double double0 = jSONArray1.optDouble(44);
      assertEquals(Double.NaN, double0, 0.01);
      
      try { 
        jSONArray1.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.put(358, false);
      float float0 = jSONArray0.optFloat(358, (float) 358);
      assertEquals(359, jSONArray0.length());
      assertEquals(358.0F, float0, 0.01F);
      
      double double0 = jSONArray0.optDouble((-2920), (-2888.9655000363637));
      assertEquals(359, jSONArray0.length());
      assertEquals((-2888.9655000363637), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.put(358, true);
      jSONArray0.optBoolean(358);
      try { 
        jSONArray0.getLong(358);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[358] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(3999, false);
      JSONArray jSONArray2 = jSONArray1.put((float) 3999);
      jSONArray1.optJSONArray(10);
      try { 
        jSONArray2.getBoolean(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray("[\"a string\",[99,null],{},\"a string\"]");
      jSONArray0.join("[\"a string\",[99,null],{},\"a string\"]");
      jSONArray0.optNumber(0);
      JSONArray jSONArray1 = new JSONArray();
      String string0 = jSONArray0.toString();
      assertEquals(4, jSONArray0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONArray0.optEnum(class0, 44, dialog_ModalityType0);
      Integer integer0 = new Integer(44);
      String string0 = jSONArray1.optString(44, "8hfssO-_Q");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(44, (Object) linkedList0);
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONArray0.optEnum(class0, 44, dialog_ModalityType0);
      Integer integer0 = new Integer(44);
      LinkedList linkedList1 = (LinkedList)jSONArray0.get(44);
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 509;
      jSONArray0.put(509, (long) 509);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray0.optNumber(509, (Number) bigInteger0);
      Integer integer0 = new Integer(509);
      jSONArray0.getDouble(509);
      // Undeclared exception!
      jSONArray0.toString(509);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-6L));
      jSONArray0.optBigDecimal(58, bigDecimal0);
      jSONArray0.put(91, true);
      assertEquals(92, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 44);
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) pipedInputStream0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 44);
      jSONArray1.optBigDecimal(44, bigDecimal0);
      jSONArray1.put(44, true);
      assertEquals(45, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(3999, false);
      jSONArray1.put((float) 3999);
      BigDecimal bigDecimal0 = new BigDecimal(992);
      jSONArray1.optBigDecimal(98, bigDecimal0);
      try { 
        jSONArray0.getDouble(9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[9] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(4021);
      JSONArray jSONArray1 = jSONArray0.optJSONArray((-554));
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) "O :&]#");
      Integer integer0 = new Integer(44);
      jSONArray0.optJSONArray(44);
      JSONArray jSONArray2 = jSONArray1.put(false);
      assertSame(jSONArray0, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",99,null,\"a string\",[{}]]");
      HashMap<GraphicsDevice.WindowTranslucency, BigInteger> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, BigInteger>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      jSONArray1.put(0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray2 = new JSONArray("[\"a string\",99,null,\"a string\",[{}]]");
      jSONArray0.optFloat(4051);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray2.isEmpty();
      jSONArray0.remove(4051);
      try { 
        jSONArray2.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(70, (Object) null);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList1);
      jSONArray0.toJSONObject(jSONArray1);
      jSONArray0.toList();
      Integer integer0 = new Integer(91);
      assertEquals(91, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.toJSONObject(jSONArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jSONArray0.optBigDecimal(25, (BigDecimal) null);
      jSONArray0.toList();
      try { 
        jSONArray0.getLong(4051);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4051] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) "O :&]#");
      BigDecimal bigDecimal0 = new BigDecimal(377.0);
      jSONArray1.optBigDecimal(44, bigDecimal0);
      JSONArray jSONArray2 = jSONArray1.put(12, false);
      assertSame(jSONArray1, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 44;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONArray0.optBigDecimal(44, bigDecimal0);
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      jSONArray0.optBigInteger(1, (BigInteger) null);
      JSONArray jSONArray2 = new JSONArray();
      try { 
        jSONArray1.getLong(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      jSONArray0.optBigDecimal(58, bigDecimal0);
      jSONArray0.put(12, false);
      assertEquals(13, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      JSONArray jSONArray1 = jSONArray0.put(4087, (Map<?, ?>) hashMap0);
      jSONArray1.optFloat(4087);
      jSONArray1.isEmpty();
      jSONArray1.remove(281);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) bigDecimal0);
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      jSONArray1.toJSONObject(jSONArray2);
      jSONArray1.toList();
      Integer integer0 = new Integer((-171));
      jSONArray0.isNull(44);
      try { 
        jSONArray2.put((-4646), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4646] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(253, 1L);
      HashMap<Normalizer.Form, Thread.State> hashMap0 = new HashMap<Normalizer.Form, Thread.State>();
      JSONArray jSONArray2 = jSONArray1.put((Map<?, ?>) hashMap0);
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      jSONArray2.optEnum((Class<Dialog.ModalityType>) null, 253, dialog_ModalityType0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "false");
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(3020, (float) 3020);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("false");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "false");
      // Undeclared exception!
      jSONArray1.write((Writer) printWriter0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Formatter.BigDecimalLayoutForm> linkedList0 = new LinkedList<Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";KAdrpC=U2");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      int int0 = 707;
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter1, 707, 1519);
      jSONArray0.write(writer0);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray("hYk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.toString(0);
      HashMap<DocumentationTool.Location, JDBCType> hashMap0 = new HashMap<DocumentationTool.Location, JDBCType>();
      jSONArray1.put(0, (Map<?, ?>) hashMap0);
      jSONArray0.optFloat(0);
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      jSONArray1.toJSONObject((JSONArray) null);
      assertEquals(1, jSONArray1.length());
      
      jSONArray1.put(16, (Object) jSONArray2);
      int int0 = jSONArray0.optInt((-45), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^+fA`<ae[o;qm!CWL5");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 1;
      jSONArray0.length();
      try { 
        jSONArray0.put((-1279), Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1279] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-13);
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 44;
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      int int1 = (-7122);
      int int2 = 976;
      jSONArray1.optNumber(976, (Number) null);
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray2.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONArray0.optNumber(206, (Number) bigDecimal0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.toJSONObject(jSONArray1);
      jSONArray0.put(803, (Object) null);
      int int0 = jSONArray0.optInt(803, 803);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(803, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(30, (Object) null);
      jSONArray1.optInt(44, 10);
      jSONArray1.optJSONObject(10);
      HashMap<WebParam.Mode, JSONObject> hashMap0 = new HashMap<WebParam.Mode, JSONObject>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getBigInteger(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2138, (Object) linkedList0);
      jSONArray1.toString();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('c');
      jSONArray1.put((-205.83029F));
      // Undeclared exception!
      jSONArray1.write((Writer) stringWriter1, 2138, 3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.put(1, (long) 1);
      jSONArray1.toString(1);
      try { 
        jSONArray1.getJSONArray(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.opt(1);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.toJSONObject(jSONArray2);
      jSONArray1.toList();
      Object object0 = jSONArray0.optQuery("/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",99,null]");
      JSONArray jSONArray1 = new JSONArray("[\"a string\",99,null]");
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.join("[\"a string\",99,null]");
      jSONArray1.isEmpty();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("java.io.StringWriter@0000000007[\"a string\",99,null]java.io.StringWriter@0000000009[\"a string\",99,null]null");
      HashMap<CardTerminals.State, Short> hashMap0 = new HashMap<CardTerminals.State, Short>();
      jSONArray0.put(414, (Map<?, ?>) hashMap0);
      Locale locale0 = new Locale("[\"a string\",99,null]", "java.io.StringWriter@0000000007[\"a string\",99,null]java.io.StringWriter@0000000009[\"a string\",99,null]null");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "[\"a string\",99,null]";
      jSONArray0.put(0.0);
      objectArray0[1] = (Object) "[\"a string\",99,null]";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "[\"a string\",99,null]", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      jSONArray0.write((Writer) mockPrintWriter1, 0, 0);
      assertEquals(416, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(27);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      jSONArray1.optInt(44, 10);
      JSONObject jSONObject0 = jSONArray1.optJSONObject(10);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.join("3");
      float float0 = jSONArray1.optFloat(3500, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      int int1 = 1000034;
      // Undeclared exception!
      jSONArray0.put(1000034, (-12L));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "[\"a stribg\",99,\"a string\"+";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[\"a stribg\",99,\"a string\"+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 26 [character 27 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONArray0.optNumber(206, (Number) bigDecimal0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.toJSONObject(jSONArray1);
      jSONArray0.put(803, (Object) null);
      int int0 = jSONArray0.optInt(803, 803);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(803, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray("[\"a string\",[],{},\"a string\"]");
      jSONArray0.join("[\"a string\",[],{},\"a string\"]");
      float float0 = jSONArray0.optFloat(0, (-1596.19F));
      assertEquals((-1596.19F), float0, 0.01F);
      assertEquals(4, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",99,\"a string\"]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = new JSONArray("[\"a string\",99,\"a string\"]");
      JSONArray jSONArray2 = (JSONArray)jSONArray1.query("");
      jSONArray1.join("");
      float float0 = jSONArray2.optFloat(87, 1004.3476F);
      assertEquals(1004.3476F, float0, 0.01F);
      assertEquals(3, jSONArray2.length());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",99,\"a string\"]");
      JSONArray jSONArray1 = new JSONArray("[\"a string\",99,\"a string\"]");
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.join("[\"a string\",99,\"a string\"]");
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("java.io.StringWriter@0000000007[\"a string\",99,\"a string\"]java.io.StringWriter@0000000009[\"a string\",99,\"a string\"]java.io.StringWriter@0000000011");
      Locale locale0 = new Locale("[\"a string\",99,\"a string\"]", "java.io.StringWriter@0000000007[\"a string\",99,\"a string\"]java.io.StringWriter@0000000009[\"a string\",99,\"a string\"]java.io.StringWriter@0000000011");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "L;NLa^>gt5";
      objectArray0[1] = (Object) "L;NLa^>gt5";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "[\"a string\",99,\"a string\"]", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      jSONArray0.write((Writer) mockPrintWriter1, 0, 0);
      assertEquals(3, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.TOOLKIT_MODAL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.optEnum(class0, 803, dialog_ModalityType0);
      Integer integer0 = new Integer(803);
      jSONArray0.isNull(1);
      Object object0 = jSONArray0.opt(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      linkedList0.offerLast((BigDecimal) null);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 44;
      int int1 = (-1510);
      jSONArray0.opt((-1510));
      jSONArray1.isNull(2138);
      String string0 = "-7E\\";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "-7E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(1);
      assertEquals(0L, long0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Short short0 = new Short((short)2724);
      JSONArray jSONArray1 = jSONArray0.put((Object) short0);
      JSONArray jSONArray2 = jSONArray0.put(86, 10L);
      String string0 = jSONArray2.toString();
      assertNotNull(string0);
      
      int int0 = jSONArray1.optInt(86);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[{},[],{\"\":true}]");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Proxy.Type> linkedList1 = new LinkedList<Proxy.Type>();
      List<Object> list0 = jSONArray0.toList();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) list0);
      jSONArray1.join("@!q=Rw#o");
      try { 
        jSONArray0.getFloat(69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[69] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[{},{},true]");
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[{\"] is not a number.\":{}},-99,\"a string\",null]");
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.put((-2417));
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(3201, 3218);
      //  // Unstable assertion: assertEquals(3218, int0);
      
      JSONArray jSONArray1 = jSONArray0.put(3208, 1L);
      String string0 = jSONArray1.toString();
      //  // Unstable assertion: assertNull(string0);
      
      long long0 = jSONArray0.optLong(1);
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long((-3369L));
      JSONArray jSONArray1 = jSONArray0.put(3216, (Object) long0);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      jSONArray1.optEnum(class0, (-4109), dialog_ModalityType0);
      Object object0 = new Object();
      try { 
        jSONArray0.getNumber(3200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[3200] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(0L);
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) long0);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      jSONArray1.optEnum(class0, 44, dialog_ModalityType0);
      long long1 = jSONArray0.getLong(44);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 3232;
      JSONArray jSONArray1 = jSONArray0.put(3232, false);
      jSONArray0.put(0.0F);
      jSONArray1.optNumber(3232);
      JSONArray jSONArray2 = new JSONArray();
      try { 
        jSONArray2.getBigDecimal(3220);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[3220] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(4052, false);
      jSONArray1.optNumber(4052);
      jSONArray0.toString();
      assertEquals(4053, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray1.put(44, object0);
      Class<DayOfWeek> class0 = DayOfWeek.class;
      jSONArray2.optEnum(class0, 44);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray0.optInt((-5544), (-1500));
      jSONArray2.optDouble((-1031));
      try { 
        jSONArray3.put((-1377), 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1377] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",99,\"a string\"]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = new JSONArray("[\"a string\",99,\"a string\"]");
      // Undeclared exception!
      try { 
        jSONArray1.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((long) 691);
      jSONArray0.optNumber(236, (Number) bigDecimal0);
      LinkedList<Proxy.Type> linkedList1 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      linkedList1.addFirst(proxy_Type0);
      jSONArray0.optNumber(236);
      try { 
        jSONArray0.getBigDecimal(691);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[691] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(253, 1L);
      int int0 = 10;
      jSONArray0.get(253);
      String string0 = "";
      // Undeclared exception!
      try { 
        RoundingMode.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.math.RoundingMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(0L);
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) long0);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      jSONArray1.optEnum(class0, 44, dialog_ModalityType0);
      Object object0 = new Object();
      Number number0 = jSONArray0.getNumber(44);
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.toString();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      int int0 = new Integer(46);
      jSONArray0.put(46);
      JSONArray jSONArray2 = jSONArray1.put((-1129));
      assertEquals(1, jSONArray2.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      linkedList0.clear();
      jSONArray0.remove(248);
      int int0 = (-3510);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList1 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedList0.containsAll(linkedList1);
      try { 
        jSONArray0.getBigInteger((-3510));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3510] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getBigInteger((-781));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-781] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(253, (-2575L));
      jSONArray1.optInt(253);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(253, 1L);
      HashMap<Normalizer.Form, Thread.State> hashMap0 = new HashMap<Normalizer.Form, Thread.State>();
      jSONArray1.put((Map<?, ?>) hashMap0);
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      int int0 = jSONArray0.optInt(253, 2106);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-358);
      try { 
        jSONArray0.put((-358), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-358] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(358, true);
      float float0 = jSONArray1.optFloat(358, (float) 358);
      assertEquals(359, jSONArray0.length());
      assertEquals(358.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      long long0 = 0L;
      try { 
        jSONArray0.put((-1554), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1554] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(253, 1L);
      HashMap<Normalizer.Form, Thread.State> hashMap0 = new HashMap<Normalizer.Form, Thread.State>();
      JSONArray jSONArray2 = jSONArray1.put((Map<?, ?>) hashMap0);
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray1.toString((int) (byte) (-90));
      JSONArray jSONArray3 = new JSONArray();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      linkedList0.push(proxy_Type0);
      jSONArray1.optNumber(580);
      jSONArray2.iterator();
      JSONArray jSONArray4 = new JSONArray();
      jSONArray4.put((long) (byte) (-1));
      LinkedList<Dialog.ModalityType> linkedList1 = new LinkedList<Dialog.ModalityType>();
      try { 
        jSONArray1.put((-1), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(253, 1L);
      HashMap<Normalizer.Form, Thread.State> hashMap0 = new HashMap<Normalizer.Form, Thread.State>();
      JSONArray jSONArray2 = jSONArray1.put((Map<?, ?>) hashMap0);
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      jSONArray2.optEnum(class0, 253, dialog_ModalityType0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      jSONArray0.optNumber(691, (Number) bigDecimal0);
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray1.toString(0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.optNumber(2026);
      jSONArray0.iterator();
      JSONArray jSONArray3 = new JSONArray();
      jSONArray2.put((-3356L));
      LinkedList<Dialog.ModalityType> linkedList1 = new LinkedList<Dialog.ModalityType>();
      jSONArray3.put((int) (byte)46, (Collection<?>) linkedList1);
      try { 
        jSONArray0.put((-2736), (Object) jSONArray3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2736] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3992, (Collection<?>) linkedList0);
      assertEquals(3993, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      try { 
        jSONArray1.getFloat(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(509, (long) 509);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray0.optNumber(509, (Number) bigInteger0);
      Integer integer0 = new Integer(509);
      double double0 = jSONArray0.getDouble(509);
      assertEquals(509.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(253, 1L);
      HashMap<Normalizer.Form, Thread.State> hashMap0 = new HashMap<Normalizer.Form, Thread.State>();
      JSONArray jSONArray2 = jSONArray1.put((Map<?, ?>) hashMap0);
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      linkedList0.addFirst(proxy_Type0);
      JSONArray jSONArray3 = jSONArray2.put(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray3.optQuery("");
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      JSONArray jSONArray4 = jSONArray0.put((Collection<?>) linkedList1);
      jSONArray4.optNumber(253);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONArray3.optBigInteger(2699, bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2138, (Object) linkedList0);
      int int0 = jSONArray0.optInt(2138, 2138);
      assertEquals(2138, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2138, (Object) linkedList0);
      jSONArray1.optDouble(2138);
      jSONArray1.optString(2138, "A JSONArray text must start with '['");
      Class<Month> class0 = Month.class;
      jSONArray1.optEnum(class0, 2138);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.put(91, 1L);
      jSONArray0.optString(91);
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      jSONArray0.optEnum(class0, 3568);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getDouble(5138);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[5138] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(4021);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.put(4021, true);
      jSONArray1.put(4021, (float) 4021);
      double double0 = jSONArray1.getDouble(4021);
      assertEquals(4022, jSONArray0.length());
      assertEquals(4021.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(358, true);
      try { 
        jSONArray1.getDouble(358);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[358] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 3232;
      jSONArray0.put(3232, false);
      jSONArray0.put(0.0F);
      int int1 = 474;
      try { 
        jSONArray0.getDouble(474);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[474] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        jSONArray0.put((-2920), Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2920] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte byte0 = (byte) (-65);
      JSONArray jSONArray1 = new JSONArray();
      try { 
        jSONArray1.put((-1011), 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1011] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(54, 1257L);
      HashMap<Normalizer.Form, Thread.State> hashMap0 = new HashMap<Normalizer.Form, Thread.State>();
      Class<Window.Type> class0 = Window.Type.class;
      jSONArray0.optEnum(class0, 54);
      jSONArray0.optEnum(class0, 53);
      jSONArray1.put((Map<?, ?>) hashMap0);
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      linkedList0.addFirst(proxy_Type0);
      int int0 = 51;
      try { 
        jSONArray0.getFloat(51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[51] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(253, 1L);
      HashMap<Normalizer.Form, Thread.State> hashMap0 = new HashMap<Normalizer.Form, Thread.State>();
      Class<Window.Type> class0 = Window.Type.class;
      jSONArray0.optEnum(class0, 107);
      Class<Window.Type> class1 = Window.Type.class;
      jSONArray0.optEnum(class1, 44);
      JSONArray jSONArray2 = jSONArray1.put((Map<?, ?>) hashMap0);
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      linkedList0.addFirst(proxy_Type0);
      jSONArray2.getFloat(253);
      Class<Component.BaselineResizeBehavior> class2 = Component.BaselineResizeBehavior.class;
      int int0 = 0;
      try { 
        jSONArray2.getEnum(class2, 253);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[253] is not an enum of type java.io.StringWriter@0000000009.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(253, 1L);
      HashMap<Normalizer.Form, Thread.State> hashMap0 = new HashMap<Normalizer.Form, Thread.State>();
      JSONArray jSONArray2 = jSONArray1.put((Map<?, ?>) hashMap0);
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      linkedList0.addFirst(proxy_Type0);
      JSONArray jSONArray3 = jSONArray2.put(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.optQuery("");
      jSONArray3.getFloat(253);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      jSONArray1.put((Collection<?>) linkedList0);
      jSONArray3.optNumber(253);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONArray2.optBigInteger(2699, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray("[\"a string\",[],[],\"a string\"]");
      jSONArray0.join("[\"a string\",[],[],\"a string\"]");
      assertEquals(4, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertFalse(jSONArray1.isEmpty());
      
      jSONArray0.optBoolean(1165, false);
      JSONArray jSONArray2 = new JSONArray();
      assertTrue(jSONArray2.isEmpty());
      
      jSONArray2.toJSONObject(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.opt((-30));
      Byte.valueOf((byte) (-34));
      JSONArray jSONArray1 = jSONArray0.put(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray1.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(300, 1L);
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.TOOLKIT_MODAL;
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONArray0.optEnum(class0, 34, dialog_ModalityType0);
      Integer integer0 = new Integer(300);
      Integer integer1 = Integer.getInteger((String) null, integer0);
      jSONArray0.put(34, (Object) integer1);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1798), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1798] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong((-34));
      JSONArray jSONArray1 = jSONArray0.put(91, (-54L));
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      try { 
        jSONArray1.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.put(358, false);
      try { 
        jSONArray0.getJSONObject(358);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[358] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.put(3232, false);
      jSONArray0.put(0.0F);
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.MODELESS;
      Dialog.ModalityType dialog_ModalityType1 = Dialog.ModalityType.DOCUMENT_MODAL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      linkedList0.add(dialog_ModalityType1);
      linkedList0.add(dialog_ModalityType0);
      jSONArray0.optString(61);
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      jSONArray0.optEnum(class0, 470);
      assertEquals(3234, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Normalizer.Form, Thread.State> hashMap0 = new HashMap<Normalizer.Form, Thread.State>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-42);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONArray0.optBigInteger(0, bigInteger0);
      try { 
        jSONArray0.getJSONArray((-2078));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2078] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-635);
      try { 
        jSONArray0.get((-635));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-635] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(1);
      jSONArray0.put(91, (long) 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-42);
      jSONArray0.join("5~S,>9Jr0");
      byteArray0[2] = (byte)44;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONArray0.optBigInteger(44, bigInteger0);
      try { 
        jSONArray0.getJSONArray((byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("org.json.JSONPointerException");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.join("m>;=#XpS1kO,`");
      long long0 = (-428L);
      String string0 = null;
      try { 
        jSONArray0.get(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = new JSONArray();
      Byte byte0 = new Byte((byte) (-3));
      jSONArray0.similar(byte0);
      int int0 = (-3589);
      StringReader stringReader0 = new StringReader("[-99]");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray2 = new JSONArray(jSONTokener0);
      jSONArray2.optNumber((-3589));
      JSONArray jSONArray3 = new JSONArray();
      try { 
        jSONArray2.getBigDecimal(65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[65] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[{},false]");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Proxy.Type> linkedList1 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      linkedList1.addFirst(proxy_Type0);
      int int0 = 0;
      int int1 = 1;
      try { 
        jSONArray0.getJSONObject(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.put(1517, 44);
      assertEquals(1518, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(10, (long) 10);
      Float float0 = new Float(0.9978117765692092);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.TOOLKIT_MODAL;
      jSONArray0.optEnum(class0, (-361), dialog_ModalityType0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)69;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONArray0.toString();
      jSONArray0.put((int) (byte)91, (int) (byte)91);
      assertEquals(92, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      try { 
        jSONArray0.put((-1643), (Object) locale_Category0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1643] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      jSONArray0.optNumber(691, (Number) bigDecimal0);
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray1.toString(0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray0.iterator();
      JSONArray jSONArray3 = new JSONArray();
      try { 
        jSONArray0.put((-2736), (Object) jSONArray3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2736] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(1);
      jSONArray0.put(91, (long) 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)44;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONArray0.optBigInteger(44, bigInteger0);
      try { 
        jSONArray0.getJSONArray((byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      JSONArray jSONArray1 = jSONArray0.put(1, (long) 1);
      try { 
        jSONArray1.getJSONArray(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[true,\"a string\"]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = new JSONArray("[true,\"a string\"]");
      JSONArray jSONArray2 = jSONArray1.put(4563, 0L);
      jSONArray2.remove(55);
      assertEquals(4563, jSONArray2.length());
      
      jSONArray0.toString();
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(27, (float) 27);
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(60);
      jSONArray0.remove(27);
      assertEquals(27, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Object object0 = new Object();
      jSONArray1.similar(jSONArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      jSONArray0.optBigInteger((byte) (-65), bigInteger1);
      try { 
        jSONArray1.getJSONObject((byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-65] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(34);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      jSONArray0.put(0, (Map<?, ?>) hashMap0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(0);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONArray0.optBoolean(63);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (Object) linkedList0);
      int int0 = jSONArray0.optInt(45, 45);
      assertEquals(1, jSONArray0.length());
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      int int0 = 0;
      jSONArray1.toString(0);
      HashMap<DocumentationTool.Location, JDBCType> hashMap0 = new HashMap<DocumentationTool.Location, JDBCType>();
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      jSONArray0.optFloat(0);
      jSONArray2.isEmpty();
      int int1 = 125;
      jSONArray0.remove(0);
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray("java.io.StringWriter@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[{},{},99,\"a string\"]");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Proxy.Type> linkedList1 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      linkedList1.addFirst(proxy_Type0);
      int int0 = 0;
      int int1 = 1;
      jSONArray0.getJSONObject(1);
      try { 
        jSONArray0.getString(49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[49] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(44, (Object) linkedList0);
      try { 
        jSONArray0.getJSONObject(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.isEmpty();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Proxy.Type> linkedList2 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      linkedList2.addFirst(proxy_Type0);
      int int0 = 0;
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.length();
      JSONArray jSONArray1 = jSONArray0.put((long) 0);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt((-4109), (-4109));
      long long0 = new Integer((-4109));
      jSONArray0.opt(181);
      JSONArray jSONArray1 = jSONArray0.put((-1L));
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1);
      jSONArray0.put(false);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery("");
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[{},\"a string\"]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = new JSONArray("[{},\"a string\"]");
      jSONArray1.put(4563, 0L);
      assertEquals(4564, jSONArray1.length());
      
      jSONArray0.toString();
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONArray0.optNumber(4021, (Number) bigDecimal0);
      Integer integer0 = new Integer(4021);
      double double0 = jSONArray0.optDouble(4021, (-2838.5));
      assertEquals((-2838.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery("");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[[]]");
      JSONArray jSONArray1 = jSONArray0.put(false);
      int int0 = 2153;
      JSONArray jSONArray2 = new JSONArray();
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.ONE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONArray2.optQuery(jSONPointer0);
      JSONArray jSONArray3 = new JSONArray("[[]]");
      jSONArray3.put((Object) jSONArray1);
      JSONArray jSONArray4 = jSONArray3.put(2153, (long) 2153);
      jSONArray4.toString();
      jSONArray2.optDouble(2153);
      JSONArray jSONArray5 = null;
      try {
        jSONArray5 = new JSONArray(jSONArray4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(4021);
      JSONArray jSONArray1 = jSONArray0.put(true);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      jSONArray1.optBoolean((-6), true);
      jSONArray0.optLong(60, (-3139L));
      try { 
        jSONArray1.getFloat(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)10;
      Class<CryptoPrimitive> class0 = CryptoPrimitive.class;
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_ENCAPSULATION;
      jSONArray0.optEnum(class0, 1711, cryptoPrimitive0);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = jSONArray0.optString(93, "-iZ _9W");
      assertEquals("-iZ _9W", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 10;
      jSONArray0.optLong(102, 0L);
      Float float0 = new Float(0.0);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.TOOLKIT_MODAL;
      JSONArray jSONArray1 = new JSONArray();
      Dialog.ModalityType dialog_ModalityType1 = jSONArray1.optEnum(class0, 10, dialog_ModalityType0);
      jSONArray0.query("");
      jSONArray0.similar(dialog_ModalityType1);
      jSONArray0.optNumber((-870));
      try { 
        jSONArray0.getBigDecimal((-870));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-870] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, JDBCType> hashMap0 = new HashMap<DocumentationTool.Location, JDBCType>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray1.optBigInteger(0, bigInteger0);
      double double0 = jSONArray0.optDouble(0, (double) 0);
      assertEquals(1, jSONArray0.length());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray("[\"a string\",[],[],\"a string\"]");
      JSONArray jSONArray1 = new JSONArray();
      int int0 = jSONArray1.optInt(2263, 91);
      assertEquals(91, int0);
      
      double double0 = jSONArray0.optDouble(91);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      jSONArray0.optString(91);
      jSONArray0.optLong(13, (long) 13);
      Object object0 = new Object();
      JSONArray jSONArray1 = new JSONArray();
      Object object1 = new Object();
      JSONArray jSONArray2 = jSONArray1.put(object1);
      JSONArray jSONArray3 = jSONArray0.put(91, (long) 91);
      jSONArray2.toString();
      jSONArray3.optDouble(91);
      jSONArray0.put((float) 13L);
      assertEquals(93, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2138, (Object) linkedList0);
      try { 
        jSONArray1.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.put(91, 1L);
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      jSONArray1.put((Collection<?>) linkedList0);
      try { 
        jSONArray1.getString(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray("[\"a string\",[],[],[]]");
      jSONArray0.optFloat(1000000, (float) 1000000);
      try { 
        jSONArray0.getInt(1000000);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1000000] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.put(1, 1L);
      jSONArray1.toString();
      int int0 = jSONArray0.getInt(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.put(91, 1L);
      jSONArray1.toString();
      assertEquals(92, jSONArray0.length());
      
      try { 
        jSONArray0.getInt(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      int int0 = jSONArray1.optInt(44, 10);
      assertEquals(45, jSONArray0.length());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.opt(59);
      jSONArray0.optInt(93, 60);
      try { 
        jSONArray0.getLong((-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-79] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")?xHlrEQ");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getFloat(589);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[589] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[]");
      jSONArray0.put(false);
      boolean boolean0 = jSONArray0.optBoolean(2153, true);
      assertTrue(boolean0);
      
      jSONArray0.optLong((-1005), 1119L);
      try { 
        jSONArray0.getFloat(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.similar(jSONArray0);
      int int0 = (-3589);
      int int1 = 65;
      jSONArray2.optNumber(65);
      JSONArray jSONArray3 = new JSONArray();
      try { 
        jSONArray2.getBigDecimal((byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-65] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray0 = new JSONArray();
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      jSONArray0.optEnum(class0, 1088);
      boolean boolean0 = jSONArray0.similar(bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 5912;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byte byte0 = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-93);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "";
      Object object0 = new Object();
      jSONArray0.similar((Object) null);
      jSONArray0.optNumber((-3589));
      JSONArray jSONArray1 = new JSONArray();
      try { 
        jSONArray1.getBigDecimal((byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.put(44, (Object) linkedList0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(3967);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optString(0);
      jSONArray0.optLong(0, (long) 0);
      Object object0 = new Object();
      jSONArray0.put(object0);
      try { 
        jSONArray0.put((-2399), (-2446L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2399] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 44;
      int int1 = (-1510);
      jSONArray0.opt((-1510));
      String string0 = "-7E\\";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "-7E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      jSONArray1.toJSONObject(jSONArray2);
      jSONArray1.toList();
      try { 
        jSONArray0.getLong(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toList();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONArray1.toList();
      try { 
        jSONArray1.getNumber(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.opt(44);
      jSONArray0.isEmpty();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      linkedList2.pollLast();
      List<String> list0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONArray0.query(jSONPointer0);
      Short short0 = new Short((short)160);
      jSONArray0.optNumber((-2760), (Number) short0);
      jSONArray0.optBoolean(8192);
      try { 
        jSONArray0.getBigDecimal((-2760));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2760] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt((-4109), (-4109));
      try { 
        jSONArray0.getLong(87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[87] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt((-390), (-390));
      assertEquals((-390), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(191, (long) (-1));
      jSONArray1.toString();
      assertEquals(192, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(1);
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.optJSONArray(91);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(1);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      HashMap<MultipleGradientPaint.CycleMethod, SocketFlow.Status> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, SocketFlow.Status>();
      try { 
        jSONArray0.put((-3298), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3298] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) null);
      try { 
        jSONArray1.getBigDecimal(23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[23] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(253, 1L);
      HashMap<Normalizer.Form, Thread.State> hashMap0 = new HashMap<Normalizer.Form, Thread.State>();
      jSONArray1.put((Map<?, ?>) hashMap0);
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      linkedList0.addFirst(proxy_Type0);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      int int0 = 0;
      try { 
        jSONArray1.getEnum(class0, 253);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[253] is not an enum of type java.io.StringWriter@0000000009.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 35;
      jSONArray0.put(35, true);
      try { 
        jSONArray0.getEnum(class0, 35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[35] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[-99]");
      jSONArray0.put(false);
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("[-99]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("true", bigInteger0);
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("A JSONArray text must start with '['");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-756);
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONArray0.optEnum(class0, (-756));
      try { 
        jSONArray0.getString((-756));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-756] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"a string\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, JDBCType> hashMap0 = new HashMap<DocumentationTool.Location, JDBCType>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Map<?, ?>) hashMap0);
      jSONArray1.isEmpty();
      jSONArray1.toString();
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(4021);
      HashMap<ProcessBuilder.Redirect.Type, Desktop.Action> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Desktop.Action>();
      JSONArray jSONArray1 = jSONArray0.put(4021, (Map<?, ?>) hashMap0);
      jSONArray0.isEmpty();
      jSONArray1.remove((-1335));
      assertEquals(4022, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      float float0 = jSONArray0.optFloat(37, (float) 37);
      assertEquals(37.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Object object0 = jSONArray0.remove(28);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONArray0.optNumber(4021, (Number) bigDecimal0);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray1 = new JSONArray();
      float float0 = jSONArray0.optFloat(4021);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.WRITE;
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      Month month0 = Month.APRIL;
      hashMap0.put(month0, processBuilder_Redirect_Type0);
      int int0 = 93;
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.toString(93);
      JSONArray jSONArray2 = jSONArray0.put(93, (Map<?, ?>) hashMap0);
      jSONArray2.optFloat(545);
      jSONArray0.isEmpty();
      int int1 = 93;
      jSONArray2.remove(125);
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray("java.io.StringWriter@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, JDBCType> hashMap0 = new HashMap<DocumentationTool.Location, JDBCType>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray1.optBigInteger(0, bigInteger0);
      JSONArray jSONArray2 = new JSONArray();
      try { 
        jSONArray2.getJSONObject((-4141));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4141] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("true", bigInteger0);
      jSONArray0.optBigInteger(0, bigInteger1);
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray0.optBigInteger(0, bigInteger0);
      try { 
        jSONArray0.getJSONObject(3020);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[3020] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      linkedList0.addFirst(proxy_Type0);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      int int0 = 0;
      try { 
        jSONArray0.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not an enum of type java.io.StringWriter@0000000002.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      try { 
        jSONArray0.getEnum(class0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not an enum of type java.io.StringWriter@0000000002.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.opt(44);
      File file0 = MockFile.createTempFile("ac}{>*4>`", "ac}{>*4>`");
      MockFile mockFile0 = new MockFile(file0, "ac}{>*4>`");
      linkedList0.clone();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0F);
      try { 
        jSONArray0.getJSONObject(3999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[3999] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":[],\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONArray jSONArray1 = jSONArray0.put(912.211F);
      jSONArray1.put((Collection<?>) linkedList0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        linkedList0.add(10, locale_Category0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JavaFileObject.Kind> linkedList0 = new LinkedList<JavaFileObject.Kind>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      try { 
        jSONArray1.getString((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 521;
      try { 
        jSONArray0.getString(521);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[521] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1), 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",true,false,\"a string\"]");
      HashMap<DayOfWeek, RoundingMode> hashMap0 = new HashMap<DayOfWeek, RoundingMode>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      JSONArray jSONArray1 = new JSONArray("[\"a string\",true,false,\"a string\"]");
      try { 
        jSONArray1.getLong(18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[18] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 253;
      JSONArray jSONArray1 = jSONArray0.put(253, 1L);
      HashMap<Normalizer.Form, Thread.State> hashMap0 = new HashMap<Normalizer.Form, Thread.State>();
      jSONArray1.put((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(253);
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'q';
      charArray0[2] = 'D';
      charArray0[3] = '}';
      charArray0[4] = 'j';
      charArray0[5] = 'Y';
      charArray0[6] = ' ';
      charArray0[7] = '\"';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) charBuffer0, 253, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(4002);
      try { 
        jSONArray0.getJSONObject(4002);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4002] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2420;
      try { 
        jSONArray0.getJSONObject(2420);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2420] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(44, (long) 44);
      assertEquals(44L, long0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.put(358, false);
      jSONArray1.optLong(358, 0L);
      assertEquals(359, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 10;
      jSONArray0.optLong(10, 0L);
      Float float0 = new Float(1.0);
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":false}";
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.TOOLKIT_MODAL;
      jSONArray0.optEnum(class0, (-361), dialog_ModalityType0);
      // Undeclared exception!
      try { 
        jSONArray0.query("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":false}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      try { 
        jSONArray0.getJSONArray(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.MODELESS;
      Dialog.ModalityType dialog_ModalityType1 = jSONArray0.optEnum(class0, 44, dialog_ModalityType0);
      assertSame(dialog_ModalityType0, dialog_ModalityType1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<Window.Type> class0 = Window.Type.class;
      linkedList0.add((JSONObject) null);
      linkedList0.parallelStream();
      Window.Type window_Type0 = Window.Type.UTILITY;
      jSONArray0.optEnum(class0, 0, window_Type0);
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      jSONArray1.toString();
      try { 
        jSONArray0.getNumber(339);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[339] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 3;
      int int1 = 0;
      try { 
        jSONArray0.getNumber(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray("[\"a string\",[true],[],\"a string\",false]");
      try { 
        jSONArray0.getBigDecimal(33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[33] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(44, (Object) linkedList0);
      try { 
        jSONArray0.getLong(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(3962);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      jSONArray0.put((-939.505091347148));
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      linkedList0.add(authenticator_RequestorType0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.isEmpty();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList0.pollLast();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONArray0.query(jSONPointer0);
      Short short0 = new Short((short)160);
      jSONArray0.optNumber(8192, (Number) short0);
      jSONArray0.optBoolean(8192);
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 509;
      JSONArray jSONArray1 = jSONArray0.put(509, (long) 509);
      try { 
        jSONArray1.put((-2660), (-81.9F));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2660] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(300, 1L);
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.TOOLKIT_MODAL;
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONArray0.optEnum(class0, 34, dialog_ModalityType0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONArray0.toString();
      jSONArray0.put(1221, 1221);
      jSONArray1.put((int) (byte)102, (-1.0F));
      assertEquals(1222, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      linkedList0.addFirst(proxy_Type0);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      try { 
        jSONArray0.getEnum(class0, (-29));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-29] is not an enum of type java.io.StringWriter@0000000002.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(91, 1L);
      assertEquals(92, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray1 = jSONArray0.put(28, (Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      jSONArray1.put(27, (float) 27);
      assertEquals(29, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkedList<MultipleGradientPaint.ColorSpaceType> linkedList0 = new LinkedList<MultipleGradientPaint.ColorSpaceType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 1734;
      HashMap<ProcessBuilder.Redirect.Type, DocumentationTool.Location> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, DocumentationTool.Location>();
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.READ;
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCUMENTATION_OUTPUT;
      hashMap0.put(processBuilder_Redirect_Type0, documentationTool_Location0);
      linkedList0.add(multipleGradientPaint_ColorSpaceType0);
      try { 
        jSONArray0.put(1734, Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(roundingMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getBoolean(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt((-1927));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean((-5056), true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      int int1 = 662;
      jSONArray0.optBoolean((-2600), false);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, (Object) linkedList0);
      jSONArray1.optInt(70, 44);
      // Undeclared exception!
      try { 
        jSONArray0.query("u_!W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = ":m\\XxuklIXtp&";
      // Undeclared exception!
      try { 
        jSONArray0.query(":mXxuklIXtp&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[-99,true]");
      jSONArray0.put(false);
      jSONArray0.optQuery("");
      jSONArray0.query("");
      assertEquals(3, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("] is not a number.");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":{},\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      HashMap<Integer, MultipleGradientPaint.ColorSpaceType> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Integer, MultipleGradientPaint.ColorSpaceType>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[\"a stribg\",99,a string\"+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 24 [character 25 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray("[\"a string\",[],[],\"a string\",\"a string\"]");
      assertEquals(5, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("] could not convert to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }
}
