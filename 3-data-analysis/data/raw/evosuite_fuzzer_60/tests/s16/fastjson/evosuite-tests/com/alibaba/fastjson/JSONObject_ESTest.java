/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 11:16:34 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.time.ZoneId;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      int int0 = jSONObject0.getIntValue("[<ox&9<");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = jSONObject0.getBoolean("map is null.");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[1];
      featureArray0[3] = feature0;
      featureArray0[4] = featureArray0[3];
      featureArray0[5] = featureArray0[0];
      featureArray0[6] = feature0;
      JSONObject jSONObject0 = JSON.parseObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}", featureArray0);
      jSONObject0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<DataInputStream> class0 = DataInputStream.class;
      ParserConfig parserConfig0 = new ParserConfig();
      DataInputStream dataInputStream0 = jSONObject0.toJavaObject(class0, parserConfig0, jSONObject0.DEFAULT_PARSER_FEATURE);
      assertNotNull(dataInputStream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(106);
      LinkedHashMap<Integer, Object> linkedHashMap0 = new LinkedHashMap<Integer, Object>();
      jSONObject0.putIfAbsent((String) null, linkedHashMap0);
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)jSONObject0.put((String) null, (Object) null);
      assertTrue(linkedHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(103, false);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      jSONObject0.fluentPut("{)cu@g5!ioAc,YEjz", pascalNameFilter0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("{)cu@g5!ioAc,YEjz");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":{\"x\":99},\"\":-99,\"color\":99,\"set\":true,\"value2\":false,\"writeUnsorted\":true}");
      String string0 = "";
      Integer integer0 = jSONObject0.getInteger(string0);
      assertEquals((-99), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"can not cast to byte[], value : \":\"Red\",\"value\":true,\"value2\":{},\"number\":\"1\",\"x\":-99,\"xx\":false}");
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.get(jSONObject0.DEFAULT_GENERATE_FEATURE);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      JSONObject jSONObject1 = jSONObject0.fluentPut("1.2.68", "1.2.68");
      Set<String> set0 = jSONObject1.keySet();
      jSONObject1.fluentRemove(set0);
      assertTrue(set0.contains("1.2.68"));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = feature0;
      featureArray0[4] = featureArray0[0];
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      JSONObject jSONObject0 = JSON.parseObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}", featureArray0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(map0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((byte)112);
      boolean boolean0 = jSONObject0.containsKey(short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(103, false);
      Class<InputStream> class0 = InputStream.class;
      jSONObject0.toJavaObject(class0);
      jSONObject0.clone();
      String string0 = "=Dj\\k5V|j";
      JSONObject jSONObject1 = jSONObject0.getJSONObject(string0);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      Double double0 = new Double(0.0);
      Object[] objectArray0 = new Object[1];
      try { 
        jSONObject0.invoke(double0, (Method) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      // Undeclared exception!
      try { 
        jSONObject0.getTimestamp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONObject0.fluentPut("[,", pipedInputStream0);
      // Undeclared exception!
      try { 
        jSONObject0.getShortValue("[,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.io.PipedInputStream@5b13d936
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.fluentPut("1.2.68", "1.2.68");
      // Undeclared exception!
      try { 
        jSONObject0.getShortValue("1.2.68");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1.2.68\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentPut("bin", "bin");
      // Undeclared exception!
      try { 
        jSONObject0.getFloatValue("bin");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":{\"x\":99},\"B{\":\"Large\",\"color\":true,\"set\":true,\"value2\":false,\"writeUnsorted\":true}");
      String string0 = "B{";
      // Undeclared exception!
      try { 
        jSONObject0.getDoubleValue(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":99,\"\":false,\"color\":\"(CLjava/lang/String;J)V\",\"1.2.68\":false,\"number\":\"a string\"}");
      // Undeclared exception!
      try { 
        jSONObject0.getDate(jSONObject0.VERSION);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(26344, true);
      JSONObject jSONObject1 = jSONObject0.fluentPut("1.2.68", "F'TW|;@$r9Z\"KHH");
      // Undeclared exception!
      try { 
        jSONObject1.getByteValue("1.2.68");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F'TW|;@$r9Z\"KHH\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      // Undeclared exception!
      try { 
        jSONObject0.fluentPutAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-4313), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -4313
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-4339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -4339
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = jSONObject0.getFloat("5+yg=Ag@Z'aA");
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(26344, true);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      Class<Float> class0 = Float.class;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject(class0, parserConfig0, jSONObject0.DEFAULT_PARSER_FEATURE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Object> class0 = Object.class;
      JSONObject jSONObject1 = (JSONObject)jSONObject0.toJavaObject(class0);
      assertEquals(0, jSONObject1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject.SecureObjectInputStream.ensureFields();
      JSONObject.SecureObjectInputStream.ensureFields();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(101, true);
      Object object0 = jSONObject0.clone();
      assertNotSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.getString("java/lang/Character");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":{\"x\":99},\"size\":\"Large\",\"color\":[],\"set\":true,\"value2\":false,\"writeUnsorted\":true}");
      double double0 = jSONObject0.getDoubleValue(jSONObject0.DEFAULT_TYPE_KEY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(26344, true);
      float float0 = jSONObject0.getFloatValue("fastjson.parser.deny");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.getLongValue("illegal getter");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      short short0 = jSONObject0.getShortValue("B{");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte byte0 = jSONObject0.getByteValue("5+yg=A'@Z'aA");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(26344, true);
      boolean boolean0 = jSONObject0.getBooleanValue("F'TW|;@$r9Z\"KHH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "{\"fruit\":{},\"size\":\"Large\",\"color\":\"\",\"set\":true,\"value2\":false,\"number\":true}";
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":{},\"size\":\"Large\",\"color\":\"\",\"set\":true,\"value2\":false,\"number\":true}");
      byte[] byteArray0 = jSONObject0.getBytes(string0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Field field0 = jSONObject0.getObject("equals", (TypeReference) null);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.getJSONArray(",[(r~`@ *[");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      TreeMap<String, Short> treeMap0 = new TreeMap<String, Short>();
      JSONObject jSONObject1 = jSONObject0.fluentPut("[,", treeMap0);
      boolean boolean0 = jSONObject1.containsValue(treeMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte) (-21));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LinkedHashMap<JSON, Method> linkedHashMap0 = new LinkedHashMap<JSON, Method>();
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)jSONObject0.getOrDefault(dataInputStream0, linkedHashMap0);
      assertTrue(linkedHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":{\"x\":99},\"size\":\"Large\",\"color\":[],\"set\":true,\"value2\":false,\"writeUnsorted\":true}");
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<String, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // map is null.
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      JSONObject jSONObject1 = jSONObject0.fluentPut("1.2.68", (Object) null);
      boolean boolean0 = jSONObject1.equals(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.clear();
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":{},\"size\":\"Large\",\"color\":\"\",\"set\":true,\"value2\":false,\"number\":true}");
      Collection<Object> collection0 = jSONObject0.values();
      assertFalse(collection0.contains("{\"fruit\":{},\"size\":\"Large\",\"color\":\"\",\"set\":true,\"value2\":false,\"number\":true}"));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":null,\"size\":\"Large\",\"\":\"(CLjava/lang/String;J)V\",\"value\":\"a string\",\"\":false,\"number\":true}");
      Object object0 = jSONObject0.put(jSONObject0.VERSION, (Object) jSONObject0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(26344, true);
      Timestamp timestamp0 = jSONObject0.getTimestamp("");
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Date date0 = jSONObject0.getDate("&7");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1965, false);
      Long long0 = jSONObject0.getLong("R5!<sU:G:/$r%y[");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":{},\"size\":\"Large\",\"color\":\"\",\"set\":true,\"value2\":false,\"number\":true}");
      Integer integer0 = jSONObject0.getInteger(jSONObject0.VERSION);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = jSONObject0.getDouble("1.2.68");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.getBigDecimal(")32C>ut1");
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentRemove("toString");
      assertEquals(0, jSONObject1.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      java.sql.Date date0 = jSONObject0.getSqlDate("(!>^JL.U)dj!V!");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":{},\"size\":\"Large\",\"color\":\"\",\"set\":true,\"value2\":false,\"number\":true}");
      assertFalse(jSONObject0.isEmpty());
      
      jSONObject0.fluentClear();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1965, false);
      AbstractMap.SimpleEntry<Short, JSONArray> abstractMap_SimpleEntry0 = jSONObject0.getObject((String) null, (Type) null);
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(26344, true);
      Byte byte0 = jSONObject0.getByte("seperator");
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(26344, true);
      Short short0 = jSONObject0.getShort((String) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      TreeMap<String, Short> treeMap0 = new TreeMap<String, Short>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(treeMap0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(745);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      jSONObject0.putAll(map0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Object object0 = jSONObject0.remove((Object) pascalNameFilter0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(26344, true);
      BigInteger bigInteger0 = jSONObject0.getBigInteger("Mjc+jWx# tPl}^5A|");
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":{\"x\":99},\"size\":\"Large\",\"color\":[],\"set\":true,\"value2\":false,\"writeUnsorted\":true}");
      TreeMap<Integer, Double> treeMap0 = new TreeMap<Integer, Double>();
      boolean boolean0 = jSONObject0.containsValue(treeMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Double> class0 = Double.class;
      Double double0 = jSONObject0.getObject("", class0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject.SecureObjectInputStream jSONObject_SecureObjectInputStream0 = null;
      try {
        jSONObject_SecureObjectInputStream0 = new JSONObject.SecureObjectInputStream((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONObject$SecureObjectInputStream", e);
      }
  }
}
