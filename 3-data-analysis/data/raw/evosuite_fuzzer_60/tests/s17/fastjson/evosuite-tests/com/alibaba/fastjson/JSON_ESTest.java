/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 11:25:27 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.GenericArrayTypeImpl;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSON_ESTest extends JSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = JSON.isValid("yyyy-MM-dd HH:mm:ss");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray(";{r#4q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ;, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeature0;
      JSON.writeJSONString((Writer) charArrayWriter0, (Object) jSONPObject0, 957, serializerFeatureArray0);
      assertEquals(6, charArrayWriter0.size());
      assertEquals("null()", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      MockFileWriter mockFileWriter0 = new MockFileWriter("*|]=", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature1;
      JSON.writeJSONStringTo(uTF8Decoder0, mockPrintWriter0, serializerFeatureArray0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SerializeWriter serializeWriter0 = new SerializeWriter(4);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      JSON.writeJSONString((Writer) serializeWriter0, (Object) serializeWriter0, serializerFeatureArray0);
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) genericArrayTypeImpl0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      Integer integer0 = JSON.parseObject("", (Type) null, (-200), featureArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature feature0 = Feature.NonStringKeyAsString;
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      Object object0 = JSON.parse(byteArray0, (int) (byte)0, (int) (byte)0, (CharsetDecoder) uTF8Decoder0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("fastjson.parser.deny.internal");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("fastjson.serializerFeatures.MapSortField");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = JSON.isValid("fastjson.parser.deny");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = jSONObject0.toJavaObject(class0);
      assertNotNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JSON.toJavaObject((JSON) null, class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      String string0 = JSON.toJavaObject((JSON) jSONArray0, class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedHashMap<JSONObject, SimplePropertyPreFilter> linkedHashMap0 = new LinkedHashMap<JSONObject, SimplePropertyPreFilter>();
      SerializeConfig serializeConfig0 = new SerializeConfig(3089, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONStringZ(linkedHashMap0, serializeConfig0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Feature feature0 = Feature.AutoCloseSource;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) feature0, serializerFeatureArray0);
      assertEquals("\"AutoCloseSource\"", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[15];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) serializeFilterArray0[1], serializeFilterArray0, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) serializerFeature0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals("\"NotWriteRootClassName\"", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[4];
      String string0 = JSON.toJSONString((Object) uTF8Decoder0, serializeConfig0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(606);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) jSONArray0.DEFAULT_GENERATE_FEATURE, serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
      assertEquals("3089", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.unmappableCharacterAction();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<JSONObject> class0 = JSONObject.class;
      String[] stringArray0 = new String[4];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      String string0 = JSON.toJSONString((Object) codingErrorAction0, serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-2), 3);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      String string0 = JSON.toJSONString((Object) bufferedInputStream0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      serializerFeatureArray0[6] = serializerFeatureArray0[1];
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONArray0, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, serializeFilterArray0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedHashMap<JSONObject, SimplePropertyPreFilter> linkedHashMap0 = new LinkedHashMap<JSONObject, SimplePropertyPreFilter>();
      Object object0 = JSON.toJSON((Object) linkedHashMap0, (SerializeConfig) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes(object0, (SerializeFilter) null, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      serializerFeatureArray0[6] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, serializeConfig0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, serializeConfig0, serializeFilterArray0, "fastjson.parser.features.ErrorOnEnumNotMatch", 13, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(25);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONObject0, serializeConfig0, serializeFilterArray0, 2147483645, serializerFeatureArray0);
      assertEquals(43, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) pascalNameFilter0, serializeConfig0, 2376, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Object object0 = JSON.toJSON((Object) JSON.defaultTimeZone, parserConfig0);
      assertEquals("GMT", object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = JSON.toJSON((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = JSON.toJSON((Object) "");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[5];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-107);
      JSONArray jSONArray0 = JSON.parseObject(byteArray0, (Charset) null, (Type) null, parserConfig0, (ParseProcess) null, (-560), featureArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-98);
      Feature[] featureArray0 = new Feature[3];
      Integer integer0 = JSON.parseObject(byteArray0, (Type) null, featureArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = featureArray0[2];
      JSONObject jSONObject0 = JSON.parseObject("", featureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<JSONPObject> class0 = JSONPObject.class;
      Feature[] featureArray0 = new Feature[3];
      JSONObject jSONObject0 = JSON.parseObject("", (Type) class0, featureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      Feature[] featureArray0 = new Feature[1];
      String string0 = JSON.parseObject("", (Type) class0, (ParseProcess) null, featureArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[4];
      JSON jSON0 = JSON.parseObject("", (Type) null, parserConfig0, (-332), featureArray0);
      assertNull(jSON0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = JSON.parseObject("{\"x\":\"hello\",\"y\":true,\"z\":-99,\"not support Type Annotation.\":[-99],\"b\":{}}", class0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject((String) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{}");
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Feature[] featureArray0 = new Feature[9];
      Integer integer0 = JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) null, ParserConfig.global, featureArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      Object object0 = JSON.parse("", featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      Object object0 = JSON.parse("", parserConfig0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Object object0 = JSON.parse("", parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = JSON.parse((String) null, 15);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.writeJSONString((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      // Undeclared exception!
      try { 
        jSONObject0.toString((SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      jSONObject0.put((String) null, (Object) uTF8Decoder0);
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(jSONObject0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      jSONPObject0.addParameter("/**/");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat(jSONPObject0, "", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "*@IbGy~./", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "J7x<", serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "3LcA~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":-99}");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONObject0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) genericArrayTypeImpl0, serializeConfig0, serializeFilterArray0, "e~<", 989, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeatureArray0[5];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", 3089, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "@type");
      // Undeclared exception!
      try { 
        jSONArray0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      MockFile mockFile0 = new MockFile("parser.features.ErrorOnEnumNotMatch");
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Charset) null, (Object) mockFile0, serializeConfig0, serializeFilterArray0, "*|]=", 2579, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFile, Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) serializeConfig0, serializeConfig0, serializeFilterArray0, ")sk(RH", (-393217), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) class0, serializeConfig0, serializeFilterArray0, 104, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) class0, serializeConfig0, 603, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", 1005, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONArray0, 3089, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[2];
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[2];
      featureArray0[4] = featureArray0[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 2, (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 2, line 1, column 3\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Object> class0 = Object.class;
      byte[] byteArray0 = new byte[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 282, 989, charset0, (Type) class0, parserConfig0, (ParseProcess) null, (-2443), (Feature[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 282
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("$\"LDMJj$'`v", (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2$\"LDMJj$'`v
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Feature feature0 = Feature.NonStringKeyAsString;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.serializerFeatures.MapSortField", (Type) null, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", (Type) null, parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      Class<JSON> class0 = JSON.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, concurrentHashMap0);
      Class<?> class1 = javaBeanSerializer0.getType();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parseObject("C!%n+louQblc{hGOxN", (Type) class1, parserConfig0, 20, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<String> class0 = String.class;
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[1];
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[1];
      featureArray0[3] = featureArray0[1];
      featureArray0[4] = featureArray0[0];
      featureArray0[5] = featureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse enum com.alibaba.fastjson.PropertyNamingStrategy error, value : 1.2
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0, 3089);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) pushbackInputStream0, charset0, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[10];
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)4);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, (byte)105);
      try { 
        JSON.parseObject((InputStream) bufferedInputStream0, charset0, (Type) class0, parserConfig0, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@type");
      File file0 = MockFile.createTempFile("1.2.68", "", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ParserConfig parserConfig0 = ParserConfig.global;
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      Feature[] featureArray0 = new Feature[2];
      try { 
        JSON.parseObject((InputStream) sequenceInputStream0, (Charset) null, (Type) null, parserConfig0, (ParseProcess) null, 3089, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Feature feature0 = Feature.InternFieldNames;
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)45;
      Feature feature0 = Feature.SortFeidFastMatch;
      Feature[] featureArray0 = new Feature[7];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[0];
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 606, 606, (CharsetDecoder) null, 606);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("1.2.68", parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.autoTypeAccept", parserConfig0, (-2129));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("~_@$ieqw:Ko3_*~xD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2~_@$ieqw:Ko3_*~xD
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = JSON.isValid("7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<GenericArrayTypeImpl, String> treeMap0 = new TreeMap<GenericArrayTypeImpl, String>();
      jSONArray0.remove((Object) treeMap0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONString((Object) pascalNameFilter0, 3089, serializerFeatureArray0);
      jSONArray0.contains(serializerFeature1);
      MockFile mockFile0 = new MockFile("parser.features.ErrorOnEnumNotMatch");
      File file0 = MockFile.createTempFile("+G\bk=_='_]", "@type", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[5];
      mockFile0.toURI();
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InternFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowISO8601DateFormat;
      FilterInputStream filterInputStream0 = JSON.parseObject((InputStream) mockFileInputStream0, (Charset) null, (Type) null, parserConfig0, (ParseProcess) null, 3089, featureArray0);
      assertNull(filterInputStream0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = JSON.toJSON((Object) "W(K", (SerializeConfig) null);
      assertEquals("W(K", object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Feature feature0 = Feature.NonStringKeyAsString;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Object object0 = JSON.toJSON((Object) feature0, serializeConfig0);
      assertEquals("NonStringKeyAsString", object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSON.toJSON((Object) null, (SerializeConfig) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      String[] stringArray0 = new String[6];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      serializerFeatureArray0[6] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes(charset0, (Object) charset0, serializeConfig0, serializeFilterArray0, stringArray0[2], (-393217), serializerFeatureArray0);
      assertEquals(29, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      String string0 = JSON.toJSONString((Object) null, serializeConfig0, (SerializeFilter[]) null, "yyyy-MM-dd HH:mm:ss", 8, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) genericArrayTypeImpl0, serializeConfig0, serializeFilterArray0, "e~<", 989, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.util.GenericArrayTypeImpl, method : getTypeName
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      String string0 = JSON.toJSONString((Object) "e~<", serializeConfig0, serializeFilterArray0, (String) null, 23, serializerFeatureArray0);
      assertEquals("'e~<'", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) genericArrayTypeImpl0, serializeConfig0, serializeFilterArray0, "", 989, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.util.GenericArrayTypeImpl, method : getTypeName
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@type", "10");
      File file0 = MockFile.createTempFile("@type", "@type", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ParserConfig parserConfig0 = ParserConfig.global;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeAccept", class0, class0, (Type) null, (Field) null, 29, 2257, 1210);
      Feature[] featureArray0 = new Feature[2];
      FilterInputStream filterInputStream0 = JSON.parseObject((InputStream) mockFileInputStream0, charset0, (Type) fieldInfo0.declaringClass, parserConfig0, (ParseProcess) null, 1590, featureArray0);
      assertNull(filterInputStream0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      byte[] byteArray0 = new byte[9];
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[10];
      GenericArrayTypeImpl genericArrayTypeImpl0 = JSON.parseObject(byteArray0, (int) 105, (-734), charset0, (Type) class0, parserConfig0, (ParseProcess) null, 2, featureArray0);
      assertNull(genericArrayTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, (-883), 14, charset0, (Type) class0, parserConfig0, (ParseProcess) null, (-734), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, (-707), 17, (Charset) null, (Type) null, parserConfig0, (ParseProcess) null, 971, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parse("QRDUW&;[", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("QRDUW&;[", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2QRDUW&;[
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":{},\"b\":{}}", parserConfig0, 0);
      assertEquals(5, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Object object0 = JSON.parse((String) null, parserConfig0, (-2129));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "*|]=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", 884);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "J7x<", serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, serializeConfig0, serializeFilterArray0, "fastjson.parser.features.ErrorOnEnumNotMatch", 13, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TreeMap<SimplePropertyPreFilter, Method> treeMap0 = new TreeMap<SimplePropertyPreFilter, Method>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) treeMap0, (SerializeConfig) null, 989, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<String> class0 = String.class;
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, charset0, (Type) null, parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 3089, 2, charset0, (Type) null, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3089
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) simplePropertyPreFilter0, serializeConfig0, serializeFilterArray0, 10, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3089);
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Object) "", 3, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Type type0 = JSON.getMixInAnnotations((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      Class class1 = (Class)FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      JSON.removeMixInAnnotations(class1);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSON.removeMixInAnnotations((Type) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      FieldInfo fieldInfo0 = new FieldInfo("clazz", class0, class0, class0, (Field) null, 3089, 3089, 3089);
      JSON.addMixInAnnotations(fieldInfo0.declaringClass, (Type) null);
      assertNull(fieldInfo0.getFormat());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      FieldInfo fieldInfo0 = new FieldInfo("clazz", class0, class0, class0, (Field) null, 3089, 3089, 3089);
      JSON.addMixInAnnotations(fieldInfo0.declaringClass, fieldInfo0.declaringClass);
      assertFalse(fieldInfo0.getOnly);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSON.addMixInAnnotations((Type) null, (Type) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("=sLLir2gU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("yyyy-MM-dd HH:mm:ss");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = JSON.isValid("(Ljava/lang/Enum;)V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = JSON.isValid("false");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = JSON.isValid("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = JSON.isValid("1.2.68");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = JSON.isValid("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = JSON.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 87, 87, (CharsetDecoder) uTF8Decoder0, (-34));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.serializer.SimplePropertyPreFilter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(65536);
      JSONPObject jSONPObject0 = new JSONPObject();
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONPObject0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan null error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedHashMap<JSONObject, SimplePropertyPreFilter> linkedHashMap0 = new LinkedHashMap<JSONObject, SimplePropertyPreFilter>();
      JSONObject jSONObject0 = new JSONObject(156, true);
      String[] stringArray0 = new String[2];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      linkedHashMap0.put(jSONObject0, simplePropertyPreFilter0);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) linkedHashMap0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      Object object0 = JSON.toJSON((Object) jSONObject0, serializeConfig0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Charset charset0 = Charset.defaultCharset();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      int int0 = JSON.writeJSONString((OutputStream) mockPrintStream0, charset0, (Object) "*|]=", serializeConfig0, serializeFilterArray0, "1.2.68", (-4342), serializerFeatureArray0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fastjson.parser.deny");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      int int0 = JSON.writeJSONString((OutputStream) bufferedOutputStream0, (Object) pascalNameFilter0, serializerFeatureArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.toJSONString((Object) jSONArray0, false);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONObject0, serializeConfig0, (SerializeFilter) null, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Charset) null, (Object) serializerFeature0, (SerializeConfig) null, (SerializeFilter[]) null, "fastjson.parser.deny.internal", 989, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1289, true);
      Charset charset0 = Charset.defaultCharset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes(charset0, (Object) null, serializeConfig0, (SerializeFilter[]) null, "", 322, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONStringWithDateFormat(jSONPObject0, "", serializerFeatureArray0);
      assertEquals("null()", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      List<Object> list0 = JSON.parseArray((String) null, typeArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.68", (Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : float
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("yyyy-MM-dd HH:mm:ss", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      List<SimplePropertyPreFilter> list0 = JSON.parseArray((String) null, class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      List<SimplePropertyPreFilter> list0 = JSON.parseArray("", class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual true, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      Feature[] featureArray0 = new Feature[5];
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(class0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 99999999, (Type) genericArrayTypeImpl0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[8];
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, (-1), (Type) null, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      char[] charArray0 = new char[0];
      PascalNameFilter pascalNameFilter0 = JSON.parseObject(charArray0, 989, (Type) null, featureArray0);
      assertNull(pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      PascalNameFilter pascalNameFilter0 = JSON.parseObject((char[]) null, 989, (Type) null, featureArray0);
      assertNull(pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) class0, featureArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", (Type) class0, 606, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", (Type) class0, 606, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      Integer integer0 = JSON.parseObject((String) null, (Type) null, 100, featureArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyyMMdd", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyyMMdd
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte)0, (int) (byte)0, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[0];
      Object object0 = JSON.parse(byteArray0, 989, 989, (CharsetDecoder) uTF8Decoder0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[0];
      Object object0 = JSON.parse((byte[]) null, 3281, 2122580455, (CharsetDecoder) uTF8Decoder0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-68);
      Object object0 = JSON.parse(byteArray0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object object0 = JSON.parse((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSON.parse("8R#b{vQla{o:KJU:", (ParserConfig) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSON.parseObject("can not cast to JSONObject.", (TypeReference<GenericArrayTypeImpl>) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = JSON.parseObject("", class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type", parserConfig0, 2809);
      JSON.handleResovleTask(defaultJSONParser0, (Field) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toJSONString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3089);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = jSONObject0.toString(serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat(jSONArray0, "yyyy-MM-dd HH:mm:ss", (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringBuffer stringBuffer0 = new StringBuffer("1.2.68");
      jSONObject0.writeJSONString((Appendable) stringBuffer0);
      assertEquals(8, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSON.clearMixInAnnotations();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSON.setDefaultTypeKey("{}");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, (Object) fileSystemHandling0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) pascalNameFilter0, (SerializeFilter) pascalNameFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = JSON.toJSONString((Object) null, true);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.autoTypeSupport", (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (-200), (-200), (CharsetDecoder) uTF8Decoder0, (Type) null, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 606, 606, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONObject0, serializeConfig0, (SerializeFilter) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONArray0, 606, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)93}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, serializeFilterArray0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", (Type) null, parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("1.2.68");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSON.toJSON((Object) stringBuffer0, serializeConfig0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", serializeConfig0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Object object0 = JSON.toJSON((Object) null, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, (Charset) null, (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 3, line 1, column 4\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("5rIj+)\bg", (Type) class0, parserConfig0, 989, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.autoTypeSupport", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONPObject0, 4, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("~_@$ieqw:Ko3_*~xD", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedHashMap<JSONObject, SimplePropertyPreFilter> linkedHashMap0 = new LinkedHashMap<JSONObject, SimplePropertyPreFilter>();
      Object object0 = JSON.toJSON((Object) linkedHashMap0, (SerializeConfig) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(object0, (SerializeFilter) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) null, serializeConfig0, (SerializeFilter) null, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }
}
