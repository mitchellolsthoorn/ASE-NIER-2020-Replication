/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 11:31:21 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Authenticator;
import java.net.Proxy;
import java.security.KeyRep;
import java.sql.JDBCType;
import java.sql.PseudoColumnUsage;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.annotation.Resource;
import javax.swing.DropMode;
import javax.swing.LayoutStyle;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((long) 61);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0, 2366, (-1630));
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      linkedList0.add(proxy_Type0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, (-1992.0F));
      try { 
        jSONArray0.getBigInteger(2085);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2085] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((int) (byte)57, (-4649.972673069601));
      try { 
        jSONArray0.getBigDecimal((byte)57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[57] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) list0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(60);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString(1655);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.query("");
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery(jSONPointer0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) list0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = jSONArray0.optNumber(2340, (Number) bigDecimal0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Formatter.BigDecimalLayoutForm> linkedList0 = new LinkedList<Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 44);
      Number number0 = jSONArray0.optNumber(0, (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      Number number0 = jSONArray0.optNumber(61, (Number) bigDecimal0);
      assertEquals((short) (-1), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      long long0 = jSONArray0.optLong(0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) list0);
      jSONArray0.put(60, (-4649.972673069601));
      long long0 = jSONArray0.optLong(60);
      assertEquals(61, jSONArray0.length());
      assertEquals((-4649L), long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(90, 85);
      assertEquals(85, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (-1992.0F));
      int int0 = jSONArray1.optInt(2369);
      assertEquals((-1992), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(2369, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2508, 2508);
      float float0 = jSONArray1.optFloat(2508);
      assertEquals(2509, jSONArray0.length());
      assertEquals(2508.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-15);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONArray0.put((Object) bigInteger0);
      float float0 = jSONArray0.optFloat((int) (byte)0);
      assertEquals((-2.7670116E20F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble((-349), 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      double double0 = jSONArray0.optDouble(45, (-25.194094681835097));
      assertEquals((-25.194094681835097), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(1299, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(793, (-1187.559213715));
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.optBigInteger(793, bigInteger0);
      assertEquals(794, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONArray0.optBigInteger((-422), bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = jSONArray0.optBigDecimal(1, (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(846, bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(1160, false);
      jSONArray1.opt(46);
      assertEquals(1161, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, (float) 10);
      int int0 = jSONArray0.length();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0);
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(2, (-1.0F));
      int int0 = jSONArray1.getInt(2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (-1992.0F));
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONArray1.write((Writer) stringWriter0, 2369, 101);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (float) 2369);
      jSONArray1.toString();
      // Undeclared exception!
      jSONArray1.toList();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalityType, Desktop.Action> hashMap0 = new HashMap<Dialog.ModalityType, Desktop.Action>(2369);
      try { 
        jSONArray0.put((-2596), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2596] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONArray0.put((-2718), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2718] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-386), 677);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-386] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1141), (float) 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1141] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((int) (byte)57, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (-1992.0F));
      jSONArray0.toString();
      // Undeclared exception!
      jSONArray1.join((String) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-108), 2342);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, (-1992.0F));
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write((Writer) stringWriter0, (-1341), 101);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, (-1707), (-1536));
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) linkedList1);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (-1992.0F));
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      JSONArray jSONArray2 = jSONArray1.put(45, (Object) locale_Category0);
      assertSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      try { 
        jSONArray0.put((-1801), (Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1801] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Dialog.ModalityType, Desktop.Action> hashMap0 = new HashMap<Dialog.ModalityType, Desktop.Action>(0);
      JSONArray jSONArray1 = jSONArray0.put(0, (Map<?, ?>) hashMap0);
      String string0 = jSONArray1.optString(0, "M+uAM<*8^kLFb9]1 s");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.optString(247, "M+uAM<*8^kLFb9]1 s");
      assertEquals("M+uAM<*8^kLFb9]1 s", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Number number0 = jSONArray0.optNumber(1910, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) list0);
      jSONArray0.put(60, 0.0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 60);
      jSONArray0.optNumber(60, (Number) bigDecimal0);
      assertEquals(61, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(2516, (long) 2369);
      assertEquals(2369L, long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, (-1992.0F));
      long long0 = jSONArray0.optLong(2369, 1L);
      assertEquals((-1992L), long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.APPLICATION;
      Resource.AuthenticationType resource_AuthenticationType1 = jSONArray0.optEnum(class0, 0, resource_AuthenticationType0);
      assertEquals(Resource.AuthenticationType.APPLICATION, resource_AuthenticationType1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, (-1992.0F));
      Class<StandardLocation> class0 = StandardLocation.class;
      StandardLocation standardLocation0 = StandardLocation.SOURCE_OUTPUT;
      StandardLocation standardLocation1 = jSONArray0.optEnum(class0, 2369, standardLocation0);
      assertEquals(StandardLocation.SOURCE_OUTPUT, standardLocation1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalityType, Desktop.Action> hashMap0 = new HashMap<Dialog.ModalityType, Desktop.Action>(128);
      jSONArray0.put(128, (Map<?, ?>) hashMap0);
      int int0 = jSONArray0.optInt(128, (-1157));
      assertEquals((-1157), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0);
      int int0 = jSONArray0.optInt(0, 65);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(10, (float) 10);
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) list0);
      Integer integer0 = new Integer(34);
      jSONArray0.put(45, (Object) integer0);
      double double0 = jSONArray0.optDouble(45, (double) 45);
      assertEquals(34.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.opt(846);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt((-203));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get(2342);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2342] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, (float) 10);
      Object object0 = jSONArray0.get(0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(3825, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) list0);
      Object object0 = jSONArray0.remove(10);
      JSONArray jSONArray1 = jSONArray0.put(object0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<DropMode> class0 = DropMode.class;
      jSONArray0.optEnum(class0, (-3369));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      jSONArray0.put(45, (Object) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList1);
      jSONArray1.put(1, (Object) jSONArray0);
      List<Object> list0 = jSONArray1.toList();
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (-1992.0F));
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0, 101, (-1341));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2366, false);
      // Undeclared exception!
      jSONArray0.toString(61);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2105, (float) 2369);
      jSONArray0.toString();
      String string0 = jSONArray1.toString();
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1140, 1140);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.toJSONObject(jSONArray0);
      assertEquals(1141, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (float) 2369);
      try { 
        jSONArray0.toJSONObject(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(337, 0.0F);
      boolean boolean0 = jSONArray1.similar(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(36, (float) 36);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long((-1043L));
      boolean boolean0 = jSONArray0.similar(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(10, (float) 10);
      jSONArray1.remove(8);
      assertEquals(10, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove((-1));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(45, true);
      assertEquals(46, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0, (-2131.0F));
      String string0 = jSONArray0.optString(0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(337, 0.0F);
      Number number0 = jSONArray1.optNumber(337);
      assertNotNull(number0);
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(10, (float) 10);
      long long0 = jSONArray1.optLong(10);
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalityType, Desktop.Action> hashMap0 = new HashMap<Dialog.ModalityType, Desktop.Action>(3491);
      JSONArray jSONArray1 = jSONArray0.put(475, (Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray1.optJSONObject(475);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(2369);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray((byte)57);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, (-1992.0F));
      BigDecimal bigDecimal0 = new BigDecimal((-1285L));
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(2369, bigDecimal0);
      assertEquals((short) (-1992), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(409.294234131007);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(2366, bigDecimal0);
      assertEquals((short)409, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Formatter.BigDecimalLayoutForm> linkedList0 = new LinkedList<Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(44, 0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.optBigInteger(44, bigInteger0);
      assertEquals(45, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<PseudoColumnUsage> linkedList0 = new LinkedList<PseudoColumnUsage>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = jSONArray0.optBigInteger(22, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<Formatter.BigDecimalLayoutForm> linkedList0 = new LinkedList<Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(44, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONArray1.optBigInteger(44, bigInteger0);
      assertEquals(45, jSONArray0.length());
      assertNotSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, (float) 2369);
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      try { 
        jSONArray0.getEnum(class0, 2369);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2369] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      JSONArray jSONArray1 = jSONArray0.put(45, (Object) linkedList1);
      int int0 = jSONArray1.optInt(45);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(10, (float) 10);
      int int0 = jSONArray1.optInt(10);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      jSONArray0.put(45, (Object) linkedList1);
      float float0 = jSONArray0.optFloat(45, (-1879.0F));
      assertEquals((-1879.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, (float) 10);
      float float0 = jSONArray0.optFloat(10, (float) 10L);
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      JSONArray jSONArray1 = jSONArray0.put(45, (Object) linkedList1);
      double double0 = jSONArray1.optDouble(45, (double) 45);
      assertEquals(45.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (float) 2369);
      double double0 = jSONArray1.optDouble(2369);
      assertEquals(2369.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList1);
      jSONArray1.put(1, (Object) jSONArray0);
      String string0 = jSONArray1.join("X$p!D");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.join("X$p!D");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(46, (float) 61);
      long long0 = jSONArray1.getLong(46);
      assertEquals(61L, long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalityType, Desktop.Action> hashMap0 = new HashMap<Dialog.ModalityType, Desktop.Action>(959);
      jSONArray0.put(128, (Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray0.getJSONObject(128);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, 0.0F);
      try { 
        jSONArray0.getJSONObject(2369);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2369] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<PushbackInputStream> linkedList0 = new LinkedList<PushbackInputStream>();
      JSONArray jSONArray1 = jSONArray0.put(128, (Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray0.getJSONArray(128);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, (-1992.0F));
      try { 
        jSONArray0.getJSONArray(2369);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2369] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (float) 2369);
      int int0 = jSONArray1.getInt(2369);
      assertEquals(2369, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(25, (-1992.0F));
      Number number0 = jSONArray0.getNumber(25);
      assertEquals((-1992.0F), number0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, (-1992.0F));
      try { 
        jSONArray0.getNumber(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2338, (long) 2369);
      assertEquals(2339, jSONArray0.length());
      
      float float0 = jSONArray1.getFloat(2338);
      assertEquals(2369.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (-1992.0F));
      try { 
        jSONArray1.getFloat(74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[74] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (-1992.0F));
      assertEquals(2370, jSONArray0.length());
      
      double double0 = jSONArray1.getDouble(2369);
      assertEquals((-1992.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Proxy.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<Proxy.Type, Component.BaselineResizeBehavior>();
      JSONArray jSONArray1 = jSONArray0.put(374, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getDouble(374);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[374] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Formatter.BigDecimalLayoutForm> linkedList0 = new LinkedList<Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(44, 0);
      boolean boolean0 = jSONArray1.optBoolean(0);
      assertEquals(45, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2105, (float) 2369);
      try { 
        jSONArray0.getLong(200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[200] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.io.StringWriter@0000000002");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Byte byte0 = new Byte((byte)57);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[E{o3Z6 I6;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(10);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery("");
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":\"a string\"}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((float) 0L);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("] is not a boolean.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<KeyRep.Type> linkedList0 = new LinkedList<KeyRep.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Locale.Category, Component.BaselineResizeBehavior> hashMap0 = new HashMap<Locale.Category, Component.BaselineResizeBehavior>();
      jSONArray0.put(355, (Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getString(355);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[355] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isNull(391);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Month> linkedList0 = new LinkedList<Month>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<GraphicsDevice.WindowTranslucency, Long> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, Long>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(1408);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1872), (long) (-1872));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1872] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((double) 45);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(395, 395);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONArray0.optBigDecimal(395, bigDecimal0);
      assertEquals(396, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONArray0.put(333, (Collection<?>) linkedList0);
      try { 
        jSONArray0.getBoolean(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, (float) 10);
      try { 
        jSONArray0.getInt(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(1961);
      assertEquals("", string0);
  }
}
