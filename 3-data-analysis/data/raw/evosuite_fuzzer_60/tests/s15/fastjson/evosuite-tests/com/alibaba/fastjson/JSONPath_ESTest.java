/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 11:10:09 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"fruit\":\"NE\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":false,\"with\":null,\"x\":99}", (-1067L), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"NE\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":false,\"with\":null,\"x\":99}");
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath0, "{\"fruit\":\"NE\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":false,\"with\":null,\"x\":99}", "{\"fruit\":\"NE\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":false,\"with\":null,\"x\":99}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(0, 45);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("javax.servlet.http.Cookie");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(999999999);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(999999999, 92, 99);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, serializeConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -10101008
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("org.joda.time.UTCDateTimeZone");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$W");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/12", (SerializeConfig) null, parserConfig0);
      jSONPath0.init();
      assertEquals("/stackTrace/12", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      String[] stringArray0 = new String[4];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("in", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MultiIndexSegment");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath_MaxSegment0, jSONPath0, ":");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("IT:NIF=XUeEEns#p_6", serializeConfig0, parserConfig0);
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, serializeConfig0, serializeConfig0);
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-99");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("org.joda.time.UTCDateTimeZone");
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/12");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('\\');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\\, but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("?r");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-718), 2, 761);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "|eN", 2, (Throwable) null);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, (Object) null);
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("end must greater than or equals start. start ", true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("C", serializeConfig0, parserConfig0);
      Double double0 = new Double((-1310.039508884));
      Byte byte0 = new Byte((byte)15);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, double0, byte0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9g#cQoJg7S8o#&t");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(9L, object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-9223372036854775808");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[6];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false,\"with\":null}", batchUpdateException0);
      boolean boolean0 = JSONPath.set((Object) sQLRecoverableException0, "/stackTrace/12", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/stackTrace/5", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("e", true);
      DataTruncation dataTruncation0 = new DataTruncation((-706), false, true, 39, 39);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, "9Y^NLb_teE[$", dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /stackTrace/5, segement e
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("g.'~QT");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      int int0 = jSONPath0.size((Object) sQLTransientConnectionException0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("wG");
      Byte byte0 = new Byte((byte)32);
      Short short0 = new Short((byte)32);
      boolean boolean0 = jSONPath0.setPropertyValue(short0, "illegal json : ", 871L, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      JSONPath jSONPath0 = JSONPath.compile("V");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      boolean boolean0 = jSONPath0.set((Object) sQLTimeoutException0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("can");
      Byte byte0 = new Byte((byte)74);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("r]g6A5v");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "x3:!'_\"");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("J,26\"#IjdW/vw[", sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("r]g6A5v", "com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLTransactionRollbackException0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLTimeoutException0, (String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "H~*cW6-6:'-dw");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("{\"fruit\":\"Apple\",\"size\":\" error, value : \",\"color\":-99,\"value\":true,\"value2\":{},\"number\":\"1\"}", stringArray0, false);
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_StringInSegement0, "keySet");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java.");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("java.");
      assertFalse(collection0.contains("java."));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("handles");
      Object object0 = jSONPath0.getPropertyValue("handles", "handles", 79L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("{\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"()\":false}", serializeConfig0, parserConfig0);
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":7,\"z\":[],\"a\":[],\"b\":{}}");
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("?r", serializeConfig0, parserConfig0);
      Class<String> class0 = String.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ArrayAccessSegment");
      int int0 = jSONPath0.evalSize("{\"x\":null,\"q?:,V.|=ne9Q1 8QX\":true,\"z\":true,\"a\":[99],\"b\":{}}");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer(2418);
      JSONPath jSONPath0 = JSONPath.compile("nin");
      Set<?> set0 = jSONPath0.evalKeySet(integer0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("(DZ)V", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.evalKeySet("K4'am?5L|eTZ+SN+70Z");
      assertFalse(set0.contains("K4'am?5L|eTZ+SN+70Z"));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      Object object0 = JSONPath.eval((Object) jSONPath_Operator0, "/stackTrace");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":null}");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "I)n0Mze#;qQ:%P?", sQLRecoverableException0);
      JSONPath.size((Object) sQLSyntaxErrorException0, "");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("nin", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1751.6));
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("keySet", serializeConfig0, parserConfig0);
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "fastjson.parser.safeMode", (Object) parserConfig0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"fruit\":99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<String> class0 = String.class;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_NullSegement0, (Object) class0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath jSONPath0 = JSONPath.compile("g.'~QT");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) aSMDeserializerFactory0, (Object) aSMDeserializerFactory0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1695, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("max", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = new BigDecimal(67);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.safeMode");
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$StringInSegement", serializeConfig0, parserConfig0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "/stackTrace/13", 116);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("1BoNO", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) serializeConfig0, (Object) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = " ";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(" ", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "V";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(locale0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/stackTrace/6";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("null", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("can not cast to double, value : ");
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(class0, "pyB", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      BigDecimal bigDecimal0 = new BigDecimal(922);
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigDecimal0, "G", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9g#cQoJg7S8o#&t");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-833));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_Operator0, "autoTypeSupport");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "", "fastjson.parser.safeMode");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      JSONPath jSONPath0 = JSONPath.compile("V");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath.read("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("6GFA?-)7?!v`/K-8");
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) jSONPath_NullSegement0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.JSONObjectCodec");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("w [rite", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("C0J51~Jk5");
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(mockDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue("", "", 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":99,\"size\":true,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"9\"}");
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("X/[ZX]#uYvzVj``6a D");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(sQLClientInfoException0, 1319);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        JSONPath.extract("-99", "com", parserConfig0, (-146), (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // int
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "3lr.%|", (ParserConfig) null, 10, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSONPath.extract("S", "}t_K'gykRZ9j~4*v", parserConfig0, 8, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2S
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "{\"fruit\":99,\"<clinit>\":99,\"value\":true,\"s\":\"1\"}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1881262653));
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      JSONPath jSONPath0 = JSONPath.compile("V");
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(class0, "$W", 97L, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONPath jSONPath0 = JSONPath.compile("{");
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("{", (String) null, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path {, segement null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      String[] stringArray0 = new String[5];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      JSONPath jSONPath0 = new JSONPath("z(Q@|jX$r");
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues((Object) null);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("value is null", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(bigDecimal0, (String[]) null);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, jSONArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%bRM5jMdiuO|", "%bRM5jMdiuO|");
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) propertyNamingStrategy0, "%bRM5jMdiuO|", (Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("message", (SerializeConfig) null, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) sQLInvalidAuthorizationSpecException0, (Object) "message");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[3];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("gz!e['w");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_Operator0, (Object) null);
      Long long0 = new Long(3089);
      jSONPath0.containsValue((Object) long0, object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("{\"x\":-99,\"y\":{},\"z\":true,\"/cause/stackTrace/11\":99,\"b\":{\"x\":\"a string\"}}", "{\"x\":-99,\"y\":{},\"z\":true,\"/cause/stackTrace/11\":99,\"b\":{\"x\":\"a string\"}}", 3);
      JSONPath.contains((Object) sQLTransactionRollbackException0, "vX|G,yp a,@#L%3z0");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        JSONPath.compare(throwableDeserializer0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("s", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.TEN;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepGetPropertyValues(bigInteger0, linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, jSONPath0, 561);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("%8!=", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath_Operator0, 198, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 5, jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("C]q^qZuJ");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(".ElzFDwW`D(a}", false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("'Dd", serializeConfig0, parserConfig0);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "'Dd", jSONPath_JSONPathParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("s[pJ,k}-_6D^()");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. s[pJ,k}-_6D^()
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">^7|n#CH)S");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(0, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath.set((Object) aSMDeserializerFactory0, "[n ", (Object) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&*g@Kn|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(4861L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9QA|G<re59f,Z0{o");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9QA|G<re59f\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("f");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONPath jSONPath0 = JSONPath.compile("V");
      boolean boolean0 = jSONPath0.set((Object) "V", (Object) javaBeanSerializer0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("JSONPath$IntOpSegement", serializeConfig0, (ParserConfig) null);
      Float float0 = new Float((double) 0L);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) float0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9");
      Integer integer0 = Integer.valueOf(91);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("value ");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("D|9NGIge", "L$]{<c$(mmfnX$u", 111);
      SQLTransientException sQLTransientException0 = new SQLTransientException("L$]{<c$(mmfnX$u", "value ", 79, sQLFeatureNotSupportedException0);
      SQLWarning sQLWarning0 = new SQLWarning(".ElzFDwW`D(a}", sQLTransientException0);
      boolean boolean0 = jSONPath0.remove((Object) sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1311, false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("default constructor not found. ", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = jSONPath0.remove((Object) bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("PascalCase");
      boolean boolean0 = jSONPath0.containsValue((Object) "x,D< MA3qI;KZ19", (Object) "'A_ps>nDakN@r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("PascalCase");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":-99}");
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("?r");
      JSONScanner jSONScanner0 = new JSONScanner("|eN", 1114);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2|eN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$StringInSegement", serializeConfig0, parserConfig0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "/stackTrace/13", 116);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("1BoNO", sQLFeatureNotSupportedException0);
      Object object0 = jSONPath0.eval((Object) sQLTimeoutException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("y4eB2M%&R", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : y4eB2M%&R
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("O=wH`XfRA");
      jSONPath0.set((Object) "G:x6_?<S@p", (Object) "/stackTrace/4");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(timeZone0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Short short0 = new Short((short)40);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "deny";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(short0, stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1863557081881630420L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "in";
      stringArray0[1] = "in";
      stringArray0[2] = "in";
      stringArray0[3] = "in";
      stringArray0[4] = "in";
      stringArray0[5] = "in";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(bigDecimal0, stringArray0);
      assertEquals(6, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("f");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1272);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2318), 62, (-2318));
      JSONPath jSONPath0 = new JSONPath("G");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(436, 62, 1272);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, mockGregorianCalendar0, "G");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/12", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue("/stackTrace/12", "fastjson.parser.deny", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"oracle.sql.\":true}", true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("{\"oracle.sql.\":true}", serializeConfig0, parserConfig0);
      jSONPath_PropertySegment0.remove(jSONPath0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer integer0 = new Integer(617);
      Float float0 = new Float((float) 0L);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) integer0, "value", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.lang.Integer#value
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("?r");
      DataTruncation dataTruncation0 = new DataTruncation(167, true, true, 1, 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(dataTruncation0);
      jSONPath0.deepSet(sQLTransactionRollbackException0, "?r", 2841L, sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.DataTruncation: Data truncation", sQLTransactionRollbackException0.toString());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("in");
      JSONPath jSONPath0 = new JSONPath("in");
      jSONPath0.deepSet(jSONPath_Segment0, "in", 0L, jSONPath_Segment0);
      assertEquals("in", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      String[] stringArray0 = new String[5];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      JSONPath jSONPath0 = new JSONPath("z(Q@|jX$r");
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues((Object) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      jSONPath0.deepScan(sQLClientInfoException0, "value is null", list0);
      assertNull(sQLClientInfoException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false,\"with\":null}", (-1067L), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("scanFieldBigInteger");
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false,\"with\":null}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false,\"with\":null}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-16));
      boolean boolean0 = JSONPath.eqNotNull(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Long long0 = new Long((-1576L));
      Float float0 = new Float((float) 0L);
      boolean boolean0 = JSONPath.eqNotNull(long0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Double double0 = new Double(4366.0112047);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float float0 = new Float(1855.353F);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Long long0 = new Long(0L);
      Float float0 = new Float((float) 0L);
      boolean boolean0 = JSONPath.eqNotNull(float0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(994);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(561, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer(0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = JSONPath.eqNotNull(integer0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1863557081881630420L);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, 5614464919154503228L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-2473.6));
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = new Integer(79);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("K]71(^Qc9&e_!)~HCU");
      boolean boolean0 = JSONPath.eq(integer0, sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("hHgjk@H", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1924), (-1924), (-1924), 11, 131072);
      boolean boolean0 = JSONPath.eq(mockGregorianCalendar0, jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("{*s-C[FK30y!^k", serializeConfig0, parserConfig0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLClientInfoException0, vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = new JSONPath("/stackTrace/12");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "getFieldValue error.");
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, sQLNonTransientException0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3068));
      JSONPath jSONPath0 = JSONPath.compile("B>)]fmib%s'");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, "B>)]fmib%s'", jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("keySet", serializeConfig0, parserConfig0);
      int[] intArray0 = new int[6];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.autoTypeAccept");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("z(Q@|jX$r", sQLTransactionRollbackException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLRecoverableException0, sQLRecoverableException0);
      assertEquals(6, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("g");
      SQLWarning sQLWarning0 = new SQLWarning("g");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "=cz%WkD#5(U";
      stringArray0[2] = "=cz%WkD#5(U";
      stringArray0[3] = "g";
      stringArray0[4] = "=cz%WkD#5(U";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("g", stringArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("g", "in");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, sQLWarning0, sQLRecoverableException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"a string\",\"com.alibaba.fastjson.serializer.AdderSerializer\":\" error, value : \",\"color\":-99,\"value\":true,\"*\":{},\"number\":null}";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("{\"fruit\":\"a string\",\"com.alibaba.fastjson.serializer.AdderSerializer\":\" error, value : \",\"color\":-99,\"value\":true,\"*\":{},\"number\":null}", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("keySet", serializeConfig0, parserConfig0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, true);
      Byte byte0 = new Byte((byte)27);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, byte0, javaBeanDeserializer0, batchUpdateException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("?r");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("ouBFO.", 1242L, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ouBFO.", "create asm deserializer error, ");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("h<A0@-kA", "4Q*MlOa>Wn=(q", sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("{\"e\":99,\"size\":false,\"color\":\"safeMode\",\"value\":{},\"value2\":false,\"number\":[]}", "?r", 37, sQLTransientConnectionException0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLTransactionRollbackException0, sQLTransactionRollbackException0, "4Q*MlOa>Wn=(q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONPath jSONPath0 = new JSONPath("g");
      SQLWarning sQLWarning0 = new SQLWarning("g");
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("g", stringArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("g", "in");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, sQLWarning0, sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("_asm_ser_", "g.'~QT", true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      JSONPath jSONPath0 = JSONPath.compile("g");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"'$;NWN&8RI_a");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, aSMDeserializerFactory0, sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("sZVaGG|p");
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fLQqO@", longArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      UUID uUID0 = MockUUID.fromString("sZVaGG|p");
      Long long0 = new Long((-6586085717218287427L));
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, uUID0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("z(Q@|jX$r");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("end must greater than or equals start. start ", 33, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("T ,%>)`TDn");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLClientInfoException0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("b");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("b", (Pattern) null, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, "~{jwuYO3xm;lL", "b", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("P}4i'T-+Pl");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("P}4i'T-+Pl", "", sQLTransientException0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntOpSegement");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("", (String) null, jSONPath_Operator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("and", "", 1024, (Throwable) null);
      // Undeclared exception!
      try { 
        jSONPath_StringOpSegement0.apply(jSONPath0, sQLTimeoutException0, sQLFeatureNotSupportedException0, "/cause/stackTrace/7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("R*!m/~uH+bRNO", "R*!m/~uH+bRNO", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("%8!=", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1674, 1674, 7);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "R*!m/~uH+bRNO", mockGregorianCalendar0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("?r");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("?r", "0bxl", jSONPath_Operator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("?r", "%O7/U");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "0bxl", "?r", sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/cause/stackTrace/4";
      stringArray0[1] = "/cause/stackTrace/4";
      stringArray0[2] = "/cause/stackTrace/4";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("like", "/cause/stackTrace/4", "like", stringArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/4", serializeConfig0, parserConfig0);
      Double double0 = new Double(0.0);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, parserConfig0, jSONPath0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny.internal", "~ZTiuQzKG", (String) null, (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("x=|!", (String) null, "hHgjk@H", parserConfig0.DENYS_INTERNAL, true);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath jSONPath0 = JSONPath.compile("jA");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("jA", jSONPath_WildCardSegment0, jSONPath_Operator0);
      Short short0 = new Short((short) (-1285));
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, short0, propertyNamingStrategy0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("/cause/stackTrace/4", (short)0, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/12", serializeConfig0, (ParserConfig) null);
      Float float0 = new Float((float) (short)0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, (Object) null, "com.alibaba.fastjson.JSONPath$RangeSegment", float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("Ssb,y$+ a7{M", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = JSONPath.compile("Ssb,y$+ a7{M");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_FilterSegment0, "Ssb,y$+ a7{M");
      assertEquals("Ssb,y$+ a7{M", object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      Long long0 = new Long((byte)38);
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("m )", longArray0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JSONPath jSONPath0 = JSONPath.compile("m )");
      DataTruncation dataTruncation0 = new DataTruncation((byte)115, false, false, 0, 224, sQLFeatureNotSupportedException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, dataTruncation0, jSONPath_Operator0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      Long[] longArray0 = new Long[2];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("m )", longArray0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JSONPath jSONPath0 = JSONPath.compile("m )");
      DataTruncation dataTruncation0 = new DataTruncation((byte)115, false, false, 0, 224, sQLFeatureNotSupportedException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, dataTruncation0, jSONPath_Operator0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("g.'~QT", "g.'~QT", false);
      JSONPath jSONPath0 = new JSONPath("g.'~QT");
      Double double0 = Double.valueOf((double) 79);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, jSONPath0, jSONPath_Operator0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("U", jSONPath_Operator0, true);
      JSONPath jSONPath0 = JSONPath.compile("{\"{\"fruit\":99,\"<clinit>\":99,\"value\":true,\"s\":\"1\"}\":99,\"size\":99,\"color\":[],\"value\":\"a string\",\"number\":\"1\"}");
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, serializeConfig0, "0[", jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("x%e`;%'a@z`h", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"fruit\":99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      Long long0 = new Long(0L);
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("can not cast to double, value : ");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("m3iGLWS");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, "", "", sQLNonTransientException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79);
      JSONPath jSONPath0 = new JSONPath("rlike");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-958), (-958), 39);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("z>xq5!u6$^][\"");
      long[] longArray0 = new long[2];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("DizL3^e5Z<a^.XE9:DQ", longArray0, false);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, "z>xq5!u6$^][\"", jSONPath_IntInSegement0);
      int int0 = jSONPath0.evalSize(object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7~.RI|cttE?.^#'";
      stringArray0[1] = "like";
      stringArray0[2] = "BETWEEN";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("IOUtils");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTimeoutException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "7~.RI|cttE?.^#'", sQLInvalidAuthorizationSpecException0);
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", true);
      JSONPath jSONPath0 = JSONPath.compile("javax.servlet.http.Cookie");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(999999999);
      jSONPath_PropertySegment0.setValue(jSONPath0, (Object) null, jSONPath_ArrayAccessSegment0);
      assertEquals("javax.servlet.http.Cookie", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("[S=B]", "scanFieldBigInteger", parserConfig0, 100, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[S=B]
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9g#cQoJg7S8o#&t");
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath0, jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("0QZZJ3cc!*X");
      // Undeclared exception!
      try { 
        JSONPath.compare("0QZZJ3cc!*X", jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, parserConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = new JSONPath("in");
      Long long0 = new Long(4209237715355727183L);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "in", long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("\"a string\"");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("My^)}VpV[N8#FZ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("a*jQq-KMhU:gU\u0003-qH");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"a*jQq-KMhU\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("parser", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("g.'~QT");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'g, but 'T'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("unsupported array put operation. ");
      jSONPath_JSONPathParser0.readName();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(":'KT^9{!", false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      Double double0 = new Double((-1310.039508884));
      Byte byte0 = new Byte((byte)36);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)36;
      intArray0[1] = (int) (byte)15;
      intArray0[2] = (int) (byte)36;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      JSONPath.set((Object) jSONPath_KeySetSegment0, "\\-", (Object) jSONPath0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("unsupported");
      jSONPath_JSONPathParser0.skipWhitespace();
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("can not cast to double, value : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$PropertySegment";
      stringArray0[1] = "[S=B]";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("[S=B]", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = JSONPath.compile("ZonedDateTime");
      DataTruncation dataTruncation0 = new DataTruncation(7, true, false, (-2226), 7);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", dataTruncation0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(object0, stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$RangeSegment");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("a string\"", object0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!3jagAso ~!");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(532);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-99");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("-99", longArray0, false);
      String string0 = "com.alibaba.fastjson.JSONPath$WildCardSegment";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      assertSame(jSONPath_Filter0, jSONPath_IntInSegement0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9g#cQoJg7S8o#&t");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.util.ASMUtils");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("like", "keySet", (-3410), sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLIntegrityConstraintViolationException0, "[7v?YS<?/TOPdx~]^}", (Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("j}`\"(GbgMNf[v");
      jSONPath_JSONPathParser0.readName();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("g.'~QT");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",,/2~tuv");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("C]q^qZuJ");
      jSONPath_JSONPathParser0.readName();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("z>xq5!u6$^][\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("hHgjk@H");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 'H'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?fsm^6~]w?");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but 'f'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\r1$";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("xD/O)2|", stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\u0004OO ~");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \u0004OO ~
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      JSONPath jSONPath0 = new JSONPath(".ElzFDwW`D(a}");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : .ElzFDwW`D(a}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "9");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntInSegement");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("yPm(dDA3[2fufCi*U");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSONPath$PropertySegment");
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, serializeConfig0, sQLTimeoutException0);
      Map<String, Object> map0 = JSONPath.paths(object0, serializeConfig0);
      assertEquals(5, map0.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SQLException> class0 = SQLException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Map<String, Object> map0 = JSONPath.paths((Object) sQLNonTransientConnectionException0, serializeConfig0);
      //  // Unstable assertion: assertEquals(80, map0.size());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "x5{S}?+ZoSG'`[&.I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(32);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) classLoader0, "*", (Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("?r");
      boolean boolean0 = JSONPath.set((Object) jSONPath0, "_", (Object) jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "/cause/stackTrace/2", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("|eN", 1765.26412565, jSONPath_Operator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("like", "fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_DoubleOpSegement0, "fastjson.parser.autoTypeSupport", (Object) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"a string\"", "mrq]3+7j(M$^oB{W");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTimeoutException0, "/stackTrace/6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = JSONPath.remove((Object) bigDecimal0, "com.alibaba.fastjson.JSONPath$RangeSegment");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.JSONPath$IntInSegement", ";pn,Vt`|]$JFr(l", 0);
      JSONPath jSONPath0 = new JSONPath("/", serializeConfig0, parserConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLIntegrityConstraintViolationException0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/12", (SerializeConfig) null, parserConfig0);
      Float float0 = new Float(0.0F);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) float0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wm");
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "UTCDateTimeZone", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path wm
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" ");
      Object[] objectArray0 = new Object[2];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(" ", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-99");
      jSONPath0.arrayAdd((Object) jSONPath0, (Object[]) null);
      assertEquals("-99", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("|");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1272);
      JSONPath jSONPath0 = new JSONPath("JSONPath$JSONPathParser");
      Set<?> set0 = jSONPath0.keySet((Object) serializeConfig0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"date\":\"hello\",\"z\":true,\"a\":99,\"b\":{\"double\":-99}}");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "parent", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaa.fasjson.JSONPath$IntOpSegement");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      boolean boolean0 = jSONPath0.contains((Object) sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("like", "V");
      boolean boolean0 = JSONPath.contains((Object) sQLInvalidAuthorizationSpecException0, "$W");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object object0 = JSONPath.extract("\u0000", "com.alibaba.fastjson.JSONPath");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("{", "{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/stackTrace/5", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = new JSONPath("in");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) jSONPath_MaxSegment0, objectArray0);
      assertEquals("in", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("?r");
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath0, "?r");
      assertNotNull(object0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2809, 2809, (-1110442901));
      SQLWarning sQLWarning0 = new SQLWarning("-99");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLWarning0, object0);
      assertNotNull(arrayList0);
      
      jSONPath0.getArrayItem(arrayList0, 2809);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("jsonpath error, path ", "", true);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/1");
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONPath_RlikeSegement0.apply(jSONPath0, "", bigInteger0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("b", "b");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"k!mh07{STe2^-z");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('k', char0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6");
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("P12&KFiVcU_`m", sQLTransientException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLNonTransientConnectionException0, (Object) sQLTransientException0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(97);
      JSONPath jSONPath0 = JSONPath.compile("equals");
      Long long0 = new Long((-7768608037458185275L));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Long
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3068));
      JSONPath jSONPath0 = new JSONPath("{Yf}");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, "{Yf}", jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", 6137737446243999215L, 6137737446243999215L, true);
      JSONPath jSONPath0 = new JSONPath("4!7e]{3e");
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", "4!7e]{3e", "f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("org.joda.time.UTCDateTimeZone", "org.joda.time.UTCDateTimeZone");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2org.joda.time.UTCDateTimeZone
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      boolean boolean0 = JSONPath.containsValue((Object) "BETWEEN", "BETWEEN", (Object) locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "com.alibaba.fastjson.JSONPath$IntOpSegement");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntOpSegement");
      String string0 = jSONPath0.getPath();
      assertEquals("com.alibaba.fastjson.JSONPath$IntOpSegement", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("", "");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) sQLRecoverableException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String[] stringArray0 = new String[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) bigInteger0, "$t?sy!,[Un", (Object[]) stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_MultiIndexSegment0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/stackTrace/6", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("/stackTrace/6");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/stackTrace/6", sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"/stackTrace/13\":\"hello\",\"y\":99,\"in\":99,\"a\":[[]],\"b\":{}}", "/stackTrace/6");
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, (Object) null, sQLNonTransientConnectionException0, sQLTransientConnectionException0);
      assertFalse(boolean0);
  }
}
