/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 12:06:23 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.lang.annotation.Annotation;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[{}],\"b\":{}}", (-2178));
      jSONScanner0.scanIdent();
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false,true,true]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 1, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ulltrue", (-401));
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-744L), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"2znz?");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1\"@type\":\"2znz?
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 2n?*Pz9:lZMB9");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, (-20), parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"type not match. \":[],\"V94(I]]z\":[]}", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) (-2530), false);
      jSONScanner0.scanDate('B');
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", (-2530));
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Y");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer\":99}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField(0L, true);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (-2530));
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone(')', 'k', ')', 'k', 'k');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false,\"a string\",false,false,{}]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json.\":\"setResolveStatus\",\"\":[\"a string\"],\"@\":false}", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('Y');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&Z^dxy^<vo$~lmPT#", (-2172));
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$jn/2mTakd}9D$VI3");
      jSONScanner0.skipObject(true);
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json.\":99,\"\":{\"x\":true,\"^=dr\":true}}", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) (-2530), false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 0);
      char[] charArray0 = new char[5];
      jSONScanner0.copyTo(0, 0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":null,\"size\":-99,\"color\":\"Red\",\"scanTypeName\":true,\"value2\":\"a string\",\"parse error\":\"1\",\"x\":false}", 0);
      char[] charArray0 = jSONScanner0.sub_chars(0, 8);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'{', '\"', 'f', 'r', 'u', 'i', 't', '\"'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[[],false,99,\"a string\",[-99,-99],\"a string\"]");
      char[] charArray0 = jSONScanner0.sub_chars(1, 0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a4V94(I]]zFgi2w4");
      String string0 = jSONScanner0.subString(0, 4);
      assertEquals("a4V9", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a4V94(I]]zFgi2w4");
      String string0 = jSONScanner0.subString(0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ulltrue");
      jSONScanner0.nextToken();
      jSONScanner0.stringVal();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8C<%= }|f", 5127);
      double double0 = jSONScanner0.scanDouble('\u0000');
      assertEquals(8.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8C<%= }|f");
      jSONScanner0.nextToken();
      String string0 = jSONScanner0.numberString();
      assertEquals("8", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false,\"a string\",false,false,{}]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      String string0 = jSONScanner0.numberString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", 0);
      char char0 = jSONScanner0.next();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Collections$EmptyMap");
      char char0 = jSONScanner0.next();
      assertEquals('a', char0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isEOF();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,null]");
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", 0);
      int int0 = jSONScanner0.indexOf(' ', 101);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"index must > 0, but \":-99,\"unclosed str, \":-99,\"(C)Z\":null}");
      char char0 = jSONScanner0.charAt(26);
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.GenericArrayTypeImpl");
      char char0 = jSONScanner0.charAt(27);
      assertEquals('e', char0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java/lang/String", 1416);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\"hello\",\"y\":7,\"z\":true,\"a\":true,\"b\":{\"\":null},\"xx\":-99}");
      char[] charArray0 = new char[8];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\"]", (-2530));
      jSONScanner0.nextToken();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"illegal json, \",\"can not cast to Date, value : \":[\"a string\"],\"value\":[],\", column \":false,\"number\":[],\"\":false}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      String string0 = jSONScanner0.addSymbol(4, 117, 0, defaultJSONParser0.symbolTable);
      assertEquals("uit\":\"Apple\",\"size\":\"illegal json, \",\"can not cast to Date, value : \":[\"a string\"],\"value\":[],\", column \":false,\"numb", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false,-99,true]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      String string0 = jSONScanner0.addSymbol(0, 0, 0, parserConfig0.symbolTable);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"$ref\":null}", (-2530));
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-2530), (-2530));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"type not match. \":false,\"2znz?\":true,\"java.util.HashMap\":true,\", column \":true}", (-2530));
      jSONScanner0.sp = (-1);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.GenericArrayTypeImpl");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", (-2530));
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", (-2530));
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true", parserConfig0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, (-2530), defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[],\"[\":true,\"illegal json, \":[null],\"illegal state. \":{\"\":99},\"x\":true}");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&Z^dxy^<vo$~lmPT#", (-2172));
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"type not match. \":[{}],\"com.alibaba.fastjson.parser.JSONScanner\":{\"v7q4qZ[?o\":\"a string\"}}", (-2530));
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")s;B&FfDX\"#bMw@>d");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("wmqUha\"#Qj\"sB/Uj#&s");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"getContext\":[99,true],\"x\":\"\",\"\":{},\"illegal state. \":true}", (-2178));
      jSONScanner0.bp = (-2178);
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('n');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField(0L, true);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tlI7}\"J6", (-2530));
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal json.");
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal");
      jSONScanner0.putChar('E');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":99}", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(0, 0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"unclosed str, \":{},\"scanBoolean\":{\"\":99}}", (-2530));
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(35, 15, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str, \"::99,\"(C)Z\":null}");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-214748364));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")Ljava/lang/Object;");
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare((String) null, (-1), charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", (-2552));
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.GenericArrayTypeImpl");
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(10, (char[]) null, 44, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"gzn0?");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(65279, 65279, 65279, parserConfig0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal str, ", 76);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(76, (-2946), 76, parserConfig0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"\":true,\"b\":{\"\":99}}");
      jSONScanner0.nextToken();
      jSONScanner0.skipString();
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@6V].;`?%^B^<}M^%");
      jSONScanner0.skipArray(true);
      assertEquals(25, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,-99,99,{},99,[]]");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.skipArray(false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.JSONException\":\"Apple\",\"index must > 0, but \":\"illegal json, \",\"can not cast to Date, value : \":[\"a string\",false],\"\"@type\":\"^=dr\":[],\", column \":false,\"number\":-99}", (-247));
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 1, line 1, column 2{\"com.alibaba.fastjson.JSONException\":\"Apple\",\"index must > 0, but \":\"illegal json, \",\"can not cast to Date, value : \":[\"a string\",false],\"\"@type\":\"^=dr\":[],\", column \":false,\"number\":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ulltrue");
      jSONScanner0.nextToken();
      jSONScanner0.next();
      jSONScanner0.skipObject(false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"illegal str, \":-99,\"G$`,oW5z$\":null,\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":-99,\"unclosed str, \":-99}", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) (-2530), false);
      jSONScanner0.skipObject(false);
      assertEquals(129, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ulltrue");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 7, line 1, column 8ulltrue
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":true,\"y\":7,\"\":true,\"illegal json, \":-99,\"com.alibaba.fastjson.parser.JSONScanner\":null}", 180);
      jSONScanner0.nextToken();
      jSONScanner0.skipObject(false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ulltrue");
      jSONScanner0.nextToken();
      jSONScanner0.info();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("listContext");
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-1120), 41);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = JSONScanner.charArrayCompare("{\"x\":\"hello\",\"y\":7,\"z\":true,\"b\":{},\"\":true}", 0, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("{\"illegal json.\":\"a string\",\"\":{\"2znz?\":{}}}", 0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = JSONScanner.charArrayCompare("dq", (-1), charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 613);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"xL:\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":99}", 0);
      int int0 = jSONScanner0.indexOf('x', (-2697));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"2znz?", 8);
      JSONScanner jSONScanner1 = new JSONScanner("\"@type\":\"2znz?");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      String string0 = jSONScanner1.scanTypeName(defaultJSONParser0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[J", (-2123));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"illegal");
      String string0 = jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json.\":\"\"@type\":\"\",\"x\":{}}", (-2530));
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json.\":\"a string\",\"\":{}}", (-2530));
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"v7q4qZ[?o\":0.0}", (-2530));
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"pos \":31}", (-2530));
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"4V94(I]]z\":2,\"illegal str, \":99}", (-2530));
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(34, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"il.egal str, \":-99,\"(Ljava/layg/String;C)V\":1],\"com.alibaba.fastjson.parser.deVerializer.JSONPDeserializ)r\":true}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"v7q4qZ[?o\":0.0,\"InitStringFieldAsEmpty\":null}", (-2530));
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"illegal str, \":99,\"\"@type\":\"{\"illegal json.\":\"a string\",\"\":{\"2znz?\":{\"getEndInclusive\":null}},\"Negative initial size: \":-99}\":null,\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":true}", (-2530));
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 27, line 1, column 28{\"\":7,\"illegal str, \":99,\"\"@type\":\"{\"illegal json.\":\"a string\",\"\":{\"2znz?\":{\"getEndInclusive\":null}},\"Negative initial size: \":-99}\":null,\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":true}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"type not match. \":[],\"V94(I]]z\":[]}", (-2530));
      jSONScanner0.nextToken();
      long[] longArray0 = new long[4];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json.\":\"a string\"}", (-2530));
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(28, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ", (-2530));
      jSONScanner0.nextToken();
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,false,99,\"a string\",{},{\"(C)Ljava/util/UUID;\":null}]");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":[]}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((long) (-2530), true);
      assertEquals(14, jSONScanner0.token());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull[null,-99,99,{},99,[]]\":false,\"illegal json, \":false}", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) (-2530), false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":null,\"ull\":-99,\"ull 2n?*Pz9:lZMB9\":null}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((long) (-2530), false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"type not match. \":false,\"2znz?\":true,\"java.util.HashMap\":true,\", column \":true}", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) (-2530), false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull[null,-99,99,{},99,[]]\":\"a string\",\"illegal json, \":99}", (-2530));
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((long) (-2530), false);
      assertEquals(60, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"writeNull\":1.0}", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) (-2530), false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull[null,-99,99,{},99,[]]\":false,\"illegal json, \":99,\"\"illegal \":\"a string\"}", (-2530));
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) (-2530), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 57, line 1, column 58{\"ull[null,-99,99,{},99,[]]\":false,\"illegal json, \":99,\"\"illegal \":\"a string\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"matchStat\":3600000.0,\"\"@type\":\"[99,false,99,\"a string\",[\"a string\"]]\":{}}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) (-2530), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 25, line 1, column 26{\"matchStat\":3600000.0,\"\"@type\":\"[99,false,99,\"a string\",[\"a string\"]]\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull\":2}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField(1183L, true);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"v7q4qZ[?o\":0.0,\"\"@type\":\"\":99}", (-2530));
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) (-2530), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 19, line 1, column 20{\"v7q4qZ[?o\":0.0,\"\"@type\":\"\":99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"type not match. \":[],\"V94(I]]z\":[]}", (-2530));
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-1599878993314829951L), false);
      assertEquals(14, jSONScanner0.token());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"type not match. \":[],\"V94(I]]z\":[]}", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) (-2530), false);
      long long0 = jSONScanner0.scanLong('B');
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-1829L), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 1, line 1, column 2{\"illegal
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\"@type\":\"{\"AllowSingleQuotes\":1000.0}\":\"a string\"},\"type not match. \":[],\"\"@type\":\"{\"AllowSingleQuotes\":1000.0}\":99}", (-2530));
      jSONScanner0.nextToken();
      assertEquals(12, jSONScanner0.token());
      
      int int0 = jSONScanner0.seekObjectToField((long) (-2530), false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"writeBefore\":\"write javaBean error, fastjson version 1.2.68\"}", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) (-2530), false);
      assertEquals(63, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(0L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":99,\"size\":\"Large\",\"color\":[],\"value\":true,\"value2\":false,\"number\":\"1\",\"\":[]}");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(5685L, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.nextToken((-2530));
      int int0 = jSONScanner0.seekObjectToField((long) (-2530), false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{},\"type not match. \":[],\"unclosed str, \":[]}", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) (-2530), false);
      int int0 = jSONScanner0.seekObjectToField((long) (-2530), true);
      assertEquals(49, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2530));
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((long) (-2530), false);
      assertEquals((-1), int0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false,{},\"a string\",[\"a string\",-99]]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      boolean boolean0 = jSONScanner0.seekArrayToItem(81);
      assertTrue(jSONScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,-99,99,99,\"a string\"]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      boolean boolean0 = jSONScanner0.seekArrayToItem(34);
      assertTrue(jSONScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false,99,\"a string\",[],false,true]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      boolean boolean0 = jSONScanner0.seekArrayToItem(0);
      assertEquals(1, jSONScanner0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":[],\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/**/", 4);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      boolean boolean0 = jSONScanner0.seekArrayToItem(2);
      assertEquals(4, jSONScanner0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", (-2530));
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-2530));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -2530
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,99,\"a string\",false,-99]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      boolean boolean0 = jSONScanner0.seekArrayToItem(81);
      assertEquals(28, jSONScanner0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'E}FQfNV\" ");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[false,-99,false,\"a string\"]", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.skipArray();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json.\":\"a string\",\"\":{\"2znz?\":{}}}", 11);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,-99,99,99,{}]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      boolean boolean0 = jSONScanner0.seekArrayToItem(34);
      assertTrue(jSONScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":{},\", column \":[\"a string\"]}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((-84L), true);
      jSONScanner0.skipObject();
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.FieldSerializer\":7,\"z\":true,\", column \":{\"\":null},\"xx\":99}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"com.alibaba.fastjson.serializer.FieldSerializer\":7,\"z\":true,\", column \":{\"\":null},\"xx\":99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"unclosed str\":15}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1\"@type\":\"{\"unclosed str\":15}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.JSONException\":\"Apple\",\"index must > 0, but \":\"illegal json, \",\"can not cast to Date, value : \":[\"a string\",false],\"\"@type\":\"^=dr\":[],\", column \":false,\"number\":-99}", (-247));
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"com.alibaba.fastjson.JSONException\":\"Apple\",\"index must > 0, but \":\"illegal json, \",\"can not cast to Date, value : \":[\"a string\",false],\"\"@type\":\"^=dr\":[],\", column \":false,\"number\":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" error, value : ");
      char[] charArray0 = new char[5];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,-99,99,{},99,[]]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONScanner0.scanFieldStringArray((char[]) null, 1, parserConfig0.symbolTable);
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 2n?*Pz9:lZMB9");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.scanFieldStringArray((char[]) null, (-2075), defaultJSONParser0.symbolTable);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,null]");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONScanner0.scanFieldStringArray((char[]) null, 0, parserConfig0.symbolTable);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[J", (-2123));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.scanFieldStringArray((char[]) null, (-2123), defaultJSONParser0.symbolTable);
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 2n?*Pz9:lZMB9");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, (-20), parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pos ", 57);
      char[] charArray0 = new char[1];
      SymbolTable symbolTable0 = new SymbolTable(43);
      jSONScanner0.scanFieldStringArray(charArray0, 43, symbolTable0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n**]/");
      jSONScanner0.scanDate('r');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,-99]", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('7');
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99]");
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('o');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,{}]", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('7');
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7gGS", 98);
      jSONScanner0.scanDate('Y');
      assertEquals('7', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('B');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n**]/");
      long long0 = jSONScanner0.scanLong('T');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,false,99,\"a string\",[\"a string\",-99]]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanLong('|');
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(81);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"2znz?");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      long long0 = jSONScanner0.scanLong('B');
      assertEquals(7, jSONScanner0.pos());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", (-2530));
      long long0 = jSONScanner0.scanLong('M');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,false,true,-99,99]", 47);
      jSONScanner0.nextToken();
      double double0 = jSONScanner0.scanDouble('/');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n**]/");
      double double0 = jSONScanner0.scanDouble('T');
      assertEquals(0.0, double0, 0.01);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0T+SqB8s#Y$]K<h=");
      double double0 = jSONScanner0.scanDouble(')');
      assertEquals(0.0, double0, 0.01);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!~e*gwVoDD0qO#");
      jSONScanner0.scanDouble('T');
      assertEquals('!', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", (-2530));
      double double0 = jSONScanner0.scanDouble('M');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-99.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"2znz?\":false,\"parseInt error : \":false,\"[double\":{}}", (-2530));
      jSONScanner0.nextToken();
      double double0 = jSONScanner0.scanDouble('b');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"2znz?");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanInt('k');
      assertEquals(17, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2zG{", 109);
      int int0 = jSONScanner0.scanInt('<');
      assertEquals('2', jSONScanner0.getCurrent());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull", 2);
      jSONScanner0.nextToken();
      jSONScanner0.scanInt('\u0000');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", 0);
      int int0 = jSONScanner0.scanInt('D');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"^=dr\":0.0,\"\"@type\":\"\":99,\"com.alibaba.fastjson.parser.deserializer.OptionalCodec\":{},\"xx\":true}", (-2527));
      jSONScanner0.nextToken();
      jSONScanner0.scanInt('P');
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ", 864);
      jSONScanner0.nextToken();
      jSONScanner0.scanInt('-');
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,falsenull,{},99]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(3, jSONScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", 0);
      char[] charArray0 = new char[9];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,falsenull,{},99]");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"^=dr\":true,\"y\":{},\"\":true,\"illegal json, \":-99,\"com.alibaba.fastjson.parser.JSONScanner\":null}", 180);
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BaI");
      char[] charArray0 = new char[2];
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<i0tH#f4M U<\"5d|");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", (-2530));
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"illegal str, \":-99,\"{}\":null,\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":99,\"unclosed str, \":-99}", (-2530));
      char[] charArray0 = new char[1];
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("1#|4Ec}RU", 1);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("LVx-1/Ww&ul", (-1203));
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":[],\"\":true,\"(C)Ljava/math/BigDecimal;\":[]}");
      char[] charArray0 = new char[3];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":[],\"value\":true,\"(C)Ljava/math/BigDecimal;\":\"1\"}");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"^=dr\":true,\"y\":{},\"\":true,\"illegal json, \":-99,\"com.alibaba.fastjson.parser.JSONScanner\":null}", 180);
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,-99,[],\"a string\"]", (-2530));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"8C<%= }|f\":\"2znz?\"}", (-2530));
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",-99,false,\"a string\"]", (-2530));
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 2n?*Pz9:lZMB9");
      char[] charArray0 = new char[20];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,falsenull,{},99]");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer\":99}");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals(12, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":[],\"\":true,\"(C)Ljava/math/BigDecimal;\":[]}");
      char[] charArray0 = new char[3];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":[],\"value\":true,\"(C)Ljava/math/BigDecimal;\":\"1\"}");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,false,true,-99,[\"a string\",-99,\"a string\"]]", 47);
      jSONScanner0.nextToken();
      jSONScanner0.seekArrayToItem(188);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', 'O', 'e', ')', 'r', 'O', 40, 2566);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', ')', '<', '<', '(', '{', (-1967), 70);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('8', '8', '8', 'j', 'C', '4', (-744), (-3972));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('-', '-', '-', '-', '-', '-', 3921, 3921);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(xtkR2'sB");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', ')', 'U', '?', 'd');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONScanner");
      jSONScanner0.nextToken();
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$jn/2mTakd}9D$VI3");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yyyy/MM/dd HH:mm:ss", (-247));
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"type not match. \":false,\"2znz?\":true,\"java.util.HashMap\":true,\", column \":true}", (-2530));
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,-99,fatrue]", (-2530));
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Bn\"icFY$B iUph\"'4", 1535);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('B', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("create url error", 47);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('c', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<i0tH#f4M U<\"5d|");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('<', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"2znz?");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.JSONException\":\"Apple\",\"index must > 0, but \":\"illegal json, \",\"can not cast to Date, value : \":[\"a string\",false],\"\"@type\":\"^=dr\":[],\", column \":false,\"number\":-99}", (-247));
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('k');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",\"a string\"]", (-2530));
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('7');
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2zG{", 109);
      jSONScanner0.nextToken();
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$uAd<");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(99, 99);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":\"a string\",\"b\":{}}");
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"illegal str, \":false,\"G$`,oW5z$\":\"a string\",\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":-99,\"unclosed str, \":-99,\"com.alibaba.fastjson.util.IdentityHashMap\":-99}", (-2530));
      jSONScanner0.hasSpecial = true;
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\"", 55232);
      jSONScanner0.bytesValue();
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("[-99,null]");
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"2znz?", 8);
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("\"@type\":\"\"@type\":\"2znz?", (-198), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 17);
      char char0 = jSONScanner0.charAt(125);
      assertEquals('\u001A', char0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(3071, 10, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("C9dd3#f,SNa", 84);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('e', 'e', 'e');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, (-1951), 1367);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[J", (-2123));
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('E', 'E', 'E', 'U', 'U', 'E');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false,\"a string\",\"a string\",false,null]", (-2530));
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy((-3036), (char[]) null, (-3036), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">xX5");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-574), (-574), (-574), (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
