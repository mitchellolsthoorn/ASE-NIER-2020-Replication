/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 07:53:57 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_asm_flag_");
      boolean boolean0 = jSONPath0.contains((Object) "{\"fruit\":\"Apple\",\"size\":\"com.alibaba.fastjson.JSONPath$RangeSegment\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{},\"x\":{}}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(619, 15, 20);
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("&Jgdoa", "-", 284, intArray0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, batchUpdateException0, classLoader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -29
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2810);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ReferenceCodec", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";8ysn0bf.c3LoeK_k", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ;
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k1");
      jSONPath_JSONPathParser0.explain();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but '\"'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!a");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<}'G");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$FilterGroup");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("com", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('-');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<}'G");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('}', char0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yyyy/MM/dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('l');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'l, but 'y'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SerializeConfig serializeConfig0 = new SerializeConfig(2702);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("[XE!k@HpEoI9z", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2702);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, serializeConfig0, jSONPath_ArrayAccessSegment0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("m@c&6", "m@c&6", true);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      // Undeclared exception!
      try { 
        jSONPath_RlikeSegement0.apply((JSONPath) null, (Object) null, (Object) null, sQLNonTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$RlikeSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3V");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(50L);
      assertEquals(53.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Short short0 = new Short((short)2018);
      boolean boolean0 = JSONPath.contains((Object) short0, "CfEIYje");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSONPath.eval((Object) null, "YmI]K0D|r00.");
      BigDecimal bigDecimal0 = new BigDecimal((-811277319855450459L));
      BigInteger bigInteger0 = BigInteger.ONE;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "field";
      bigInteger0.shiftRight(47);
      stringArray0[1] = "p0]_46Gg;n[ o";
      stringArray0[2] = "p0]_46Gg;n[ o";
      JSONPath.reserveToArray(bigInteger0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(13, false, true, 2702, 48);
      JSONPath.arrayAdd((Object) dataTruncation0, "fastjson.parser.deny", (Object[]) null);
      assertEquals("Data truncation", dataTruncation0.getMessage());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":-99,\"a\":[],\"b\":{}}", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("*");
      int int0 = JSONPath.size((Object) uUID0, "*");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"y\":7,\"a\":[],\"b\":{},\"x\":\"hello\",\"z\":true}");
      Long long0 = new Long(4647432019745535567L);
      boolean boolean0 = jSONPath0.setPropertyValue("{\"y\":7,\"a\":[],\"b\":{},\"x\":\"hello\",\"z\":true}", "[]", (-32768L), long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".000000000");
      Short short0 = new Short((short) (-998));
      Set<?> set0 = jSONPath0.keySet((Object) short0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("z[Gh)t");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "", 47);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(sQLTimeoutException0);
      assertFalse(collection0.contains("z[Gh)t"));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("B(J)?Mux,)Y3,T%X.W(");
      Object object0 = jSONPath0.getPropertyValue((Object) null, "B", (-811277319855450459L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("SW", serializeConfig0, parserConfig0);
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000000");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_asm_flag_");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(46, 17, 38);
      Object object0 = jSONPath0.getArrayItem(mockGregorianCalendar0, 0);
      assertSame(mockGregorianCalendar0, object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"com.alibaba.fastjson.asm.Label\":true,\"a\":[],\"b\":{},\"xx\":false,\"xxx\":{}}");
      Long long0 = new Long(0L);
      int int0 = jSONPath0.evalSize(long0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      JSONPath jSONPath0 = new JSONPath("not");
      int int0 = jSONPath0.evalSize(mockThrowable0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2810);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ReferenceCodec", serializeConfig0, parserConfig0);
      MockDate mockDate0 = new MockDate(2810);
      int int0 = jSONPath0.evalSize(mockDate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("p");
      JSONPath jSONPath0 = JSONPath.compile("p");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_JSONPathParser0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(13);
      JSONPath jSONPath0 = JSONPath.compile("d");
      Object object0 = jSONPath0.eval((Object) serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath.size((Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2810);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      ObjectSerializer objectSerializer0 = serializeConfig0.getObjectWriter(class0, true);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) objectSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      Class<Long> class0 = Long.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      Short short0 = new Short((short) (-528));
      // Undeclared exception!
      jSONPath0.setPropertyValue(javaBeanSerializer0, "cfeiyj", 989, short0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"f\":\"a string\",\"0001-01-01T00:00:00+08:00\":[],\"color\":false,\"value\":99,\"illeal\":false,\"number\":{}}");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(65279);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, (String) null, (-3077205613010077203L), jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".000000000");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      jSONPath0.deepScan(parserConfig0, "K3", (List<Object>) null);
      Class<JSONPath> class0 = JSONPath.class;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializeConfig0.config(class0, serializerFeature0, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.safeMode", "WMPe6", 207);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      int int0 = 680;
      int int1 = 2310;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(680, 680, 2310);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) mockGregorianCalendar0, "fastjson.parser.deny", (Object) parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2810);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ReferenceCodec", serializeConfig0, parserConfig0);
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "fastjson.parser.autoTypeAccept", (Object) serializeConfig0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "Iw");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("f", hashMap0, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "$f<5o_bj|R?G", "com.alibaba.fastjson.JSONPath$IntBetweenSegement", (Object) sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]I4R|4A|>#xC7Rw-pY", "(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z", hashMap0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("]I4R|4A|>#xC7Rw-pY", "]I4R|4A|>#xC7Rw-pY", 1219, sQLClientInfoException0);
      SQLWarning sQLWarning0 = new SQLWarning("]I4R|4A|>#xC7Rw-pY", sQLTransientException0);
      JSONPath.set((Object) sQLWarning0, ":$V~:<", (Object) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{\"write clob error\":\"hello\",\"y\":7,\"com.alibaba.fastjson.asm.Label\":true,\"a\":[],\"b\":{},\"xx\":null,\"xxx\":{\"write clob error\":false}}";
      stringArray0[1] = "{\"write clob error\":\"hello\",\"y\":7,\"com.alibaba.fastjson.asm.Label\":true,\"a\":[],\"b\":{},\"xx\":null,\"xxx\":{\"write clob error\":false}}";
      stringArray0[2] = "{\"write clob error\":\"hello\",\"y\":7,\"com.alibaba.fastjson.asm.Label\":true,\"a\":[],\"b\":{},\"xx\":null,\"xxx\":{\"write clob error\":false}}";
      stringArray0[3] = "{\"write clob error\":\"hello\",\"y\":7,\"com.alibaba.fastjson.asm.Label\":true,\"a\":[],\"b\":{},\"xx\":null,\"xxx\":{\"write clob error\":false}}";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.JSONPath$1", "{\"write clob error\":\"hello\",\"y\":7,\"com.alibaba.fastjson.asm.Label\":true,\"a\":[],\"b\":{},\"xx\":null,\"xxx\":{\"write clob error\":false}}", "{\"write clob error\":\"hello\",\"y\":7,\"com.alibaba.fastjson.asm.Label\":true,\"a\":[],\"b\":{},\"xx\":null,\"xxx\":{\"write clob error\":false}}", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("*n|Hx>WZ]kgnA2$|N8");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_MatchSegement0, (Object) "{\"write clob error\":\"hello\",\"y\":7,\"com.alibaba.fastjson.asm.Label\":true,\"a\":[],\"b\":{},\"xx\":null,\"xxx\":{\"write clob error\":false}}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. *n|Hx>WZ]kgnA2$|N8
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("\"a string\"", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(881);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath0, (Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"a string\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$IntBetweenSegement";
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_asm_flag_");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "_asm_flag_", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("SS0>m=vtx.X<OB4,");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-758));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "jUxD-5s|=", "jUxD-5s|=");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("dsnmugy", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = hashMap0.put("dsnmugy", clientInfoStatus0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) clientInfoStatus1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("-y9", "-y9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath.read("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) class0, "fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 3);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 258, sQLTransientException0);
      JSONPath.keySet((Object) sQLTransactionRollbackException0, "{\"f\":\"a string\",\"0001-01-01T00:00:00+08:00\":\"Large\",\"MM/dd/yyyy\":{},\"setResolveStatus\":99,\"unclosed str\":-99,\"number\":99}");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("V", true);
      JSONPath jSONPath0 = new JSONPath(".w8l}6\nbZD];");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath_PropertySegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : .w8l}6
         // bZD];
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rlike");
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("{\"y\":{},\"hex\":[],\"b\":{},\"x\":\"hello\",\"BrowserSecure\":true}", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("K3");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[false]");
      Byte byte0 = new Byte((byte)55);
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(byte0, 45380);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "r)eMB'&$e}r]#bI)_|", parserConfig0, 14, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[8];
      // Undeclared exception!
      try { 
        JSONPath.extract("T", "9P$0aT$tU#,hQ", parserConfig0, 3016, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2T
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("*", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2*
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("A;a3p[]/", "rlike");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "language");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("l@B.[FgU:Y4S~1");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("isEnabled");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2isEnabled
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath.eval((Object) batchUpdateException0, "7=+|\"$i?.T~,");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_{asm_>lag_");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      jSONPath0.deepSet(bigInteger0, "\"Y2?'z>.G=i#9'", 1L, "<5G");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[B");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("[B", "org.hibernate.Hibernate", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path [B, segement org.hibernate.Hibernate
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rlike");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("_asm_flag_", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2810);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ReferenceCodec", serializeConfig0, parserConfig0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(classLoader0, linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.net.URL;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^5*a.#0pZ42u;7~/\"eT");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[short", hashMap0, (Throwable) null);
      jSONPath0.containsValue((Object) sQLClientInfoException0, (Object) "[short");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":99,\"value2\":false,\"number\":\"1\"}");
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":99,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_JSONPathParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":99,\"value2\":false,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, "_asm_flag_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      JSONPath jSONPath0 = JSONPath.compile("<}'G");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "<}'G");
      jSONPath0.deepSet(serializerFeature0, "com.alibaba.fastjson.JSONPath$IntBetweenSegement", 2351, sQLTransactionRollbackException0);
      assertEquals("<}'G", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+jUDD-5s|=");
      SQLWarning sQLWarning0 = new SQLWarning("WMPe6", "<}'G", 2351);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("([C)Ljava/lang/String;", "fastjson.parser.deny", 1131, sQLWarning0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.deny.internal", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("<}'G", sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.serializer.ToStringSerializer", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, sQLTransientConnectionException0, 1131);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(")", false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("not");
      // Undeclared exception!
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath0, serializeConfig0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("\"a string\"", false);
      JSONPath jSONPath0 = JSONPath.compile("Xn.z.qc2m76;`'g>\"|");
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, ".", bigDecimal0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k1");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_flag_");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2810);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ReferenceCodec", serializeConfig0, parserConfig0);
      jSONPath0.init();
      assertEquals("com.alibaba.fastjson.serializer.ReferenceCodec", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("(I)C", "", 48);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("true", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) sQLTransientException0, (Object) "{\"x\":\"hello\",\"y\":7,\"com.alibaba.fastjson.asm.Label\":true,\"a\":[],\"b\":{},\"xx\":false,\"xxx\":{}}", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("unclosed.str");
      SQLDataException sQLDataException0 = new SQLDataException("4emzav]=@vQL!i");
      boolean boolean0 = jSONPath0.remove((Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000000");
      Object object0 = jSONPath0.eval((Object) "WMPe6");
      assertEquals("WMPe6", object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_asm_flag_");
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"REG_MATCH\":true,\"value2\":false,\"number\":null}", intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$IntBetweenSegement", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"REG_MATCH\":true,\"value2\":false,\"number\":null}", batchUpdateException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("_asm_flag_", false);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"f\":\"a string\",\"0001-01-01T00:00:00+08:00\":\"Large\",\"Tru\":false,\"value\":null,\"value2\":null,\"number\":99}");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1200));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, jSONPath_Operator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_asm_flag_");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(31186);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.JSONPath$IntBetweenSegement", "deserialize inet adress error", 0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, sQLRecoverableException0, sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract("f59JM)}BtH!/_cX6+", "", parserConfig0, (-1), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("l");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "l";
      stringArray0[1] = "l";
      stringArray0[2] = "l";
      stringArray0[3] = "l";
      stringArray0[4] = "l";
      stringArray0[5] = "l";
      stringArray0[6] = "l";
      stringArray0[7] = "l";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath0.set((Object) jSONPath_MultiPropertySegment0, (Object) "l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000000");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".000000000";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$IntBetweenSegement";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("com.alibaba.fastjson.JSONPat$ontex", stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("{\"y\":{},\"hex\":[],\"b\":{},\"x\":\"hello\",\"BrowserSecure\":true}", "}pM-0[t[Q", 4016, (int[]) null);
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)JSONPath.reserveToObject(batchUpdateException0, stringArray0);
      assertEquals("{\"y\":{},\"hex\":[],\"b\":{},\"x\":\"hello\",\"BrowserSecure\":true}", batchUpdateException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BmQ";
      stringArray0[1] = "true";
      stringArray0[2] = "BmQ";
      stringArray0[3] = "true";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_MultiPropertySegment0, stringArray0);
      assertEquals(4, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":{},\"0001-01-01T00:00:00+08:00\":\"Large\",\"color\":\"Red\",\"value\":99,\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":[],\"value\":true,\"value2\":false,\"number\":\"1\"}\":false,\"number\":99,\"x\":\"a string\"}");
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath0, (String[]) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_{asm_>lag_");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("K3");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/stackTrace/4", "K3", 110);
      Set<?> set0 = jSONPath0.evalKeySet(sQLNonTransientConnectionException0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000000");
      boolean boolean0 = jSONPath0.removePropertyValue(".000000000", ".000000000", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.alibaba.fastjson.JSONPaJh$IntBetoeenSegement";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = JSONPath.remove((Object) jSONPath_MultiPropertySegment0, "_asm_flag_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"y\":{},\"a\":[],\"b\":{},\"x\":\"hello\",\"*\":true,\"xx\":-99}");
      boolean boolean0 = jSONPath0.setPropertyValue("{\"y\":{},\"a\":[],\"b\":{},\"x\":\"hello\",\"*\":true,\"xx\":-99}", "\"a string\"", (-32768L), (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("B(J)?Mux,)Y3,T%X.W(");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("B(J)?Mux,)Y3,T%X.W(", "B(J)?Mux,)Y3,T%X.W(");
      Double double0 = new Double(1L);
      jSONPath0.deepSet(sQLTransactionRollbackException0, "B(J)?Mux,)Y3,T%X.W(", (byte)36, double0);
      assertEquals("java.sql.SQLTransactionRollbackException: B(J)?Mux,)Y3,T%X.W(", sQLTransactionRollbackException0.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("unclosed.str", true);
      JSONPath jSONPath0 = JSONPath.compile("unclosed.str");
      SQLTransientException sQLTransientException0 = new SQLTransientException("<pjJ)Q9?/p.", "cB2CswQ\"", (-1422));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("U3ipk;|e", ".", sQLTransientException0);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, "f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path unclosed.str, segement unclosed.str
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("true");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(8, 176, 148);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$SizeSegment", (Object) null);
      int int0 = jSONPath0.size((Object) arrayList0);
      assertEquals(0, int0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"f\":\"a string\",\"0001-01-01T00:00:00+08:00\":\"Large\",\"MM/dd/yyyy\":false,\"value\":99,\"value2\":true,\"number\":99}");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{\"f\":\"a string\",\"0001-01-01T00:00:00+08:00\":\"Large\",\"MM/dd/yyyy\":false,\"value\":99,\"value2\":true,\"number\":99}";
      stringArray0[1] = "{\"f\":\"a string\",\"0001-01-01T00:00:00+08:00\":\"Large\",\"MM/dd/yyyy\":false,\"value\":99,\"value2\":true,\"number\":99}";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Float float0 = new Float((float) (-1541));
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, float0, "{\"f\":\"a string\",\"0001-01-01T00:00:00+08:00\":\"Large\",\"MM/dd/yyyy\":false,\"value\":99,\"value2\":true,\"number\":99}");
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Long long0 = new Long(4647432019745535567L);
      Byte byte0 = new Byte((byte)11);
      boolean boolean0 = JSONPath.eqNotNull(long0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(34, 34);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1541));
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Long long0 = new Long(1);
      boolean boolean0 = JSONPath.eq(long0, "p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o/wsY2(DI?#)/UBCO?";
      stringArray0[1] = "crVate factory6method errorI ";
      stringArray0[2] = "o/wsY2(DI?#)/UBCO?";
      stringArray0[3] = "o/wsY2(DI?#)/UBCO?";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = JSONPath.eq(jSONPath_MultiPropertySegment0, jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("\"a string\"", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Long long0 = new Long(388L);
      boolean boolean0 = JSONPath.eq((Object) null, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("true");
      boolean boolean0 = JSONPath.eq(jSONPath0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Short short0 = new Short((short) (-1873));
      Byte byte0 = new Byte((byte)36);
      boolean boolean0 = JSONPath.eq(short0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_asm_flag_");
      Long long0 = new Long((-3077205613010077203L));
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepGetPropertyValues(long0, stack0);
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2810);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ReferenceCodec", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(bigDecimal0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":{},\"0001-01-01T00:00:00+08:00\":\"Large\",\"color\":\"Red\",\"value\":99,\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":[],\"value\":true,\"value2\":false,\"number\":\"1\"}\":false,\"number\":99,\"x\":\"a string\"}", serializeConfig0, parserConfig0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("uABLL3?W3");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, classLoader0, 0, bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Object object0 = jSONPath0.getArrayItem(hashMap0, 126);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("true");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("FLu#61F@8", "FLu#61F@8");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("7CZjWt^;Yb");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_NullSegement0, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$IntBetweenSegement";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.JSONPath$IntBetweenSegement", "com.alibaba.fastjson.JSONPath$IntBetweenSegement", "com.alibaba.fastjson.JSONPath$IntBetweenSegement", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("_asm_flag_");
      MockThrowable mockThrowable0 = new MockThrowable();
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, mockThrowable0, "_asm_flag_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2810);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ReferenceCodec", serializeConfig0, parserConfig0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("com.alibaba.fastjson.JSONPath$MinSegment", "fastjson.parser.safeMode", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("illeal jsonpath syntax. ", "*", "illeal jsonpath syntax. ", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("K3");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("*", (int[]) null);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLIntegrityConstraintViolationException0, sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(stringArray0[0], intArray0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath jSONPath0 = new JSONPath("field not found. ");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("-", 2358L, (-1799L), false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_SizeSegment0, batchUpdateException0);
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("true");
      String[] stringArray0 = new String[1];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("true", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      SQLException sQLException0 = new SQLException(",;7:>+97P#QA !a]cA&", (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/stackTrace/12", "true", sQLException0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath jSONPath0 = new JSONPath("_{asm_>lag_");
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("\\.", "<5G", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, (Object) null, "JSONPath$IntBetweenSegement", "JSONPath$IntBetweenSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$IntBetweenSegement";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.JSONPath$IntBetweenSegement", "com.alibaba.fastjson.JSONPath$IntBetweenSegement", "com.alibaba.fastjson.JSONPath$IntBetweenSegement", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("_asm_flag_");
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$IntBetweenSegement", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", batchUpdateException0);
      UUID uUID0 = MockUUID.fromString("+U:R%$M");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, sQLDataException0, "_asm_flag_", uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("$m*/j]wLsQ3Ba.^>ui", "not", "2Tn&BG{nIWexe.]O", (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("ident", "~<Jyi//68+N", (String) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("l", (String) null, "l", stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1541), (-1541), (-1541));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"f\":\"a string\",\"0001-01-01T00:00:00+08:00\":\"Large\",\"MM/dd/yyyy\":false,\"value\":99,\"value2\":true,\"number\":99}", jSONPath_RangeSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("{\"f\":\"a string\",\"0001-01-01T00:00:00+08:00\":\"Large\",\"MM/dd/yyyy\":false,\"value\":99,\"value2\":true,\"number\":99}");
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath0, jSONPath0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("-99", 377.44993, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("-99");
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_Operator0, jSONPath_Operator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPaJh$IntBetoeenSegement");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("^f7=$%Uh4Pn#0HeS7&", 2219, jSONPath_Operator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("$values", "$values", 26085);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      TimeZone timeZone0 = TimeZone.getTimeZone("([C)[I");
      Locale locale0 = new Locale("([C)[I", "like");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, sQLTransactionRollbackException0, jSONPath_SizeSegment0, mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":7,\"com.alibaba.fastjson.asm.Label\":true,\"a\":[],\"b\":{},\"xx\":false,\"xxx\":{}}");
      String[] stringArray0 = new String[2];
      stringArray0[0] = " \"c8K";
      stringArray0[1] = " \"c8K";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("{\"x\":\"hello\",\"y\":7,\"com.alibaba.fastjson.asm.Label\":true,\"a\":[],\"b\":{},\"xx\":false,\"xxx\":{}}", stringArray0, true);
      int[] intArray0 = new int[7];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "{\"x\":\"hello\",\"y\":7,\"com.alibaba.fastjson.asm.Label\":true,\"a\":[],\"b\":{},\"xx\":false,\"xxx\":{}}", jSONPath_MultiIndexSegment0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      Long[] longArray0 = new Long[8];
      Long long0 = new Long((-1580386065683472715L));
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("CdD:smC", longArray0, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("~=fQtSS\"E<_S;[");
      DataTruncation dataTruncation0 = new DataTruncation((-4686), true, false, (-4686), 936, sQLTimeoutException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, "CdD:smC", dataTruncation0, "CdD:smC");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Long long0 = new Long((-1873L));
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONPath$MultiPropertySegment", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile(">s n9HR=^7X");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      JSONPath jSONPath1 = (JSONPath)jSONPath_FilterSegment0.eval(jSONPath0, long0, jSONPath0);
      assertEquals(">s n9HR=^7X", jSONPath1.getPath());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(4, false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("LIKE", serializeConfig0, parserConfig0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("java/util/ArrayList", (-600L), (-600L), false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, "fastjson.parser.deny");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      long[] longArray0 = new long[2];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("not", longArray0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny");
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept", 2810, sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, sQLRecoverableException0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2810);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ReferenceCodec", serializeConfig0, parserConfig0);
      Integer integer0 = new Integer(2810);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.deny.internal", integer0, false);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, parserConfig0, serializeConfig0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000000");
      SQLWarning sQLWarning0 = new SQLWarning("WMPe6", "<}'G", 2351);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("<}'G", sQLWarning0, true);
      Float float0 = Float.valueOf((float) 2351);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, (Object) null, float0, serializerFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("like", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("{\"f\":\"a string\",\"0001-01-01T00:00:00+08:00\":\"Large\",\"color\":false,\"value\":99,\"value2\":false,\"number\":99}", serializeConfig0, parserConfig0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.autoTypeAccept");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$SizeSegment", true);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath_PropertySegment0, "{\"f\":\"a string\",\"0001-01-01T00:00:00+08:00\":\"Large\",\"color\":false,\"value\":99,\"value2\":false,\"number\":99}", parserConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONPath jSONPath0 = new JSONPath("_asm_flag_");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1141048066, 160, 1141048066);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("U#km6ZxuF;SZj");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, stringArray0[0]);
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1541), (-1541), (-1541));
      JSONPath jSONPath0 = new JSONPath("{\"f\":-99,\"0001-01-01T00:00:00+08:00\":\"com.alibaba.fastjson.JSONPath$IntBetweenSegement\",\"MM/dd/yyyy\":false,\"value\":99,\"value2\":true,\"number\":99}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"f\":-99,\"0001-01-01T00:00:00+08:00\":\"com.alibaba.fastjson.JSONPath$IntBetweenSegement\",\"MM/dd/yyyy\":false,\"value\":99,\"value2\":true,\"number\":99}", (-1541));
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "{\"f\":-99,\"0001-01-01T00:00:00+08:00\":\"com.alibaba.fastjson.JSONPath$IntBetweenSegement\",\"MM/dd/yyyy\":false,\"value\":99,\"value2\":true,\"number\":99}", jSONReaderScanner0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(4, false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("LIKE", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(4, 1141048066, 4);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, (Object) null, jSONPath_RangeSegment0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("K3");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("=|Jn:=;A%!7k3kp", (int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException("*", "NULL", batchUpdateException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, sQLDataException0, sQLDataException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rlike");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rlike";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, bigDecimal0, (Object) null);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(71);
      jSONPath_ArrayAccessSegment0.eval(jSONPath0, bigDecimal0, arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Na", true);
      JSONPath jSONPath0 = new JSONPath("Na");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("J-]`(,H", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null, sQLDataException0);
      jSONPath_PropertySegment0.setValue(jSONPath0, (Object) null, batchUpdateException0);
      assertEquals("", batchUpdateException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        JSONPath.compare(class0, sQLDataException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, "com.alibaba.fastjson.JSONPath$IntBetweenSegement");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = JSONPath.compare("com.alibaba.fastjson.JSONPath$IntBetweenSegement", "com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Short short0 = new Short((short)2473);
      Float float0 = new Float((double) 1839);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, short0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$SizeSegment", true);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("vNt");
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath_PropertySegment0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":false}");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      int[] intArray0 = new int[9];
      MockThrowable mockThrowable0 = new MockThrowable();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("3V", intArray0, mockThrowable0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":false}", (-2040271905), batchUpdateException0);
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray(sQLNonTransientException0, stringArray0);
      Object object1 = jSONPath_MaxSegment0.eval(jSONPath0, "3V", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k1");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("k1");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yyyy/MM/dd HH:mm:ss");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<}'G");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '<, but 'G'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("n!n");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'n'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=Z&d#mZ.BD)");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null,");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("a string\"", object0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("true");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"getFieldValue error.\":\"parseObject\",\"color\":{},\"value\":true,\"value2\":\"a string\",\"number\":false,\"x\":true}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&2]h>;q(}O x*>H");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-99");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3V");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(3L, object0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("):uD~8?X yy0h0^G");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \")\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"sun.reflect.annotation.AnnotationType\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":[]}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"fruit\":\"Apple\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/12");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "p";
      stringArray0[1] = "[false]";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("p", stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pB");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" :98$Hbm~IPw(ic'x");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("field not found. ");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : field not found. 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "p";
      stringArray0[1] = "[false,{}]";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("p", stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".000000000");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      int int0 = jSONPath0.size((Object) jSONPath_Operator0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[24];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.autoTypeAccept", "BlhNvHKz+wosm'w", intArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("BlhNvHKz+wosm'w", "T", 4904, batchUpdateException0);
      SerializeConfig serializeConfig0 = new SerializeConfig(8, false);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransientConnectionException0, serializeConfig0);
      //  // Unstable assertion: assertEquals(230, map0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(13);
      Map<String, Object> map0 = JSONPath.paths((Object) serializeConfig0);
      assertEquals(3, map0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "}CaB-'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"fruit\":\"Apple\",\"size\":\"Large\",\"nin\":-99,\"value\":true,\"value2\":false,\"number\":true}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"nin\":-99,\"value\":true,\"value2\":false,\"number\":true}", 45380);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLIntegrityConstraintViolationException0, (Object) sQLRecoverableException0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("unclosed.str", true);
      boolean boolean0 = JSONPath.set((Object) serializeConfig0, "f", (Object) jSONPath_PropertySegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("{\"f\":\"a string\",\"0001-01-01T00:00:00+08:00\":\"Large\",\"color\":false,\"value\":99,\"value2\":false,\"number\":99}", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = jSONPath0.set((Object) null, (Object) bigInteger0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      boolean boolean0 = jSONPath0.remove((Object) "com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-y9");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":-99,\"a\":[],\"b\":{}}", serializeConfig0, (ParserConfig) null);
      Object[] objectArray0 = new Object[2];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("-y9", 377.44993, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("-y9");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) jSONPath_DoubleOpSegement0, objectArray0);
      assertEquals("-y9", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      int[] intArray0 = new int[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("false", "false", 45380);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.JSONPath$IntObjInSegement", "autotype", 45380, batchUpdateException0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLInvalidAuthorizationSpecException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$IntObjInSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*n|Hx>WZ]kgnA2$|N8");
      SQLTransientException sQLTransientException0 = new SQLTransientException("(I)C", "", 48);
      jSONPath0.arrayAdd((Object) sQLTransientException0, (Object[]) null);
      assertEquals("", sQLTransientException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("true");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(4, false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("LIKE", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.keySet((Object) "LIKE");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2810);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ReferenceCodec", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("7K3");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "7K3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 7K3
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("l");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "l";
      stringArray0[1] = "l";
      stringArray0[2] = "l";
      stringArray0[3] = "l";
      stringArray0[4] = "l";
      stringArray0[5] = "l";
      stringArray0[6] = "l";
      stringArray0[7] = "l";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath0.containsValue((Object) "l", (Object) jSONPath_MultiPropertySegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_asm_flag_");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("in", (SerializeConfig) null, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":[],\"value\":true,\"value2\":false,\"number\":\"1\"}", true);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_PropertySegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BmQ");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"hello\",\"com.alibaba.fastjson.JSONPath\":7,\"hpqfDK\":null,\"a\":true,\"b\":{},\"xx\":\"a string\"}", parserConfig0);
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rlike");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("2");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rlike");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("illeal jsonpath syntax. ");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2illeal jsonpath syntax. 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"},\"\"a string\"\":false}");
      BigDecimal bigDecimal0 = new BigDecimal(163L);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"},\"\"a string\"\":false}", bigDecimal0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath(":x#'D{lT)6$CD&a([<j", (SerializeConfig) null, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny.internal");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("%Xr", "updateCounts", (-1614891592), sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        jSONPath_KeySetSegment0.eval(jSONPath0, classLoader0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      long[] longArray0 = new long[6];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("4e)>\"<fv'.*ynn$yl", longArray0, true);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("4e)>\"<fv'.*ynn$yl", "4e)>\"<fv'.*ynn$yl", true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntInSegement0, jSONPath_ValueSegment0, true);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("v~4h'leUAAf$ox%A~");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("v~4h'leUAAf$ox%A~", pattern0, jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("_asm_flag_", "WJKleuIdZY9&YbpRp1", jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|{b%#%");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      assertSame(jSONPath_StringOpSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("-y9", (String) null, sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLDataException0, (Object) sQLFeatureNotSupportedException0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000000");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.serializer.SerializeConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":false,\"value2\":false,\"number\":\"1\"}");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1655));
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":false,\"value2\":false,\"number\":\"1\"}", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("f");
      JSONPath jSONPath0 = JSONPath.compile("SS0>m=vtx.X<OB4,");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, sQLTransientConnectionException0, sQLClientInfoException0, sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":false,\"value2\":false,\"number\":\"1\"}");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, (Object) null, sQLIntegrityConstraintViolationException0);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath jSONPath0 = JSONPath.compile("ao@v\"WF);y:");
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, "ao@v\"WF);y:", (Object) null);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("21c/iM", "&834[%Ok/R,u @");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("V", true);
      int int0 = JSONPath.size((Object) jSONPath_PropertySegment0, "V");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("\"a string\"", serializeConfig0, parserConfig0);
      String string0 = jSONPath0.getPath();
      assertEquals("\"a string\"", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[&jN&D123!M5`!`U");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("B(J)?Mux,)Y3,T%X.W(", "B(J)?Mux,)Y3,T%X.W(");
      boolean boolean0 = JSONPath.remove((Object) sQLTransactionRollbackException0, "/cause/updateCounts");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2702);
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) serializeConfig0, (String) null, (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Short short0 = new Short((short)113);
      Set<?> set0 = JSONPath.keySet((Object) short0, "NE");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("B(J)?Mux,)Y3,T%X.W(");
      boolean boolean0 = JSONPath.set((Object) jSONPath0, "#", (Object) "~k4w;<'j'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      long[] longArray0 = new long[2];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("]9;cj", longArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("AHtJ@kH,+L!HD9JI");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      assertSame(jSONPath_Filter0, jSONPath_IntInSegement0);
  }
}
