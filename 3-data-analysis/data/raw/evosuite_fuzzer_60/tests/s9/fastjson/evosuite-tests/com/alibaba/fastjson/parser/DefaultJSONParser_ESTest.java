/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 09:30:56 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.temporal.ChronoField;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("creae instance error", parserConfig0, 20);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "creae instance error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName creae instance error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(1092, (-9));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect TreeSet, actual ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"synxzerror, \":false,\"\":[\"a str.n\",99,[]],\"(Ljava/lang/Class;\":99,\"Ljava/lang/reflect/Type;\":true}");
      Hashtable<BitSet, BigInteger> hashtable0 = new Hashtable<BitSet, BigInteger>();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      defaultJSONParser0.parseObject((Map) hashtable0, (Object) decimalFormat0);
      LinkedList<Timestamp> linkedList0 = new LinkedList<Timestamp>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedList0, (Object) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1923, (-1535));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?", parserConfig0, 96);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":null}");
      Class<Time> class0 = Time.class;
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(propertyProcessable0).getType(anyString());
      doReturn("fastjson.parser.deny.internal").when(propertyProcessable0).toString();
      defaultJSONParser0.parse(propertyProcessable0, (Object) null);
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner0);
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class1, (Collection) linkedList0, (Object) rectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, pos 4, line 1, column 5true
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<Integer> class0 = Integer.TYPE;
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}", parserConfig0, 3402);
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"synxzerror, \":null,\"size\":\", actual \",\"com.alibaba.fastjson.JSONPath$IntInSegement\":99,\"\":[\"a str.n\",99],\"Ljava/lang/reflect/Type;\":[]}");
      JSONObject jSONObject0 = (JSONObject)defaultJSONParser0.parseKey();
      assertEquals(5, jSONObject0.size());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"number\":\"1\"}", parserConfig0);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"C)Ljava/lang/Enum;\":\"Large\",\"color\":-99,\"value\":-99,\"\":false,\"number\":false}");
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) breakIterator0);
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertEquals(0, parseContext0.level);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":true,\"size\":\"Large\",\"color\":\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\",\"value\":true,\"value2\":false,\"number\":null,\"x\":\"a string\"}", parserConfig0, 1540);
      Hashtable<BitSet, BigInteger> hashtable0 = new Hashtable<BitSet, BigInteger>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":[],\"size\":\"\",\"color\":false,\"\":true,\"value2\":\"a string\",\"number\":{}}", parserConfig0, 1540);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("G*H<QsgJ!P");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, line 1, column 2G*H<QsgJ!P
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":false,\"\":[]}");
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(imageCapabilities0, "([C)[F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 1, line 1, column 2{\"\":false,\"\":[]}
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"java.time.OffsetDateTime\":\"array level > 512\",\"color\":true,\"\":{},\"number\":{\"\":[]}}", parserConfig0, 1540);
      Dimension dimension0 = new Dimension();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) dimension0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.serializer.ReferenceCodec", parserConfig0, 956);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      char[] charArray0 = new char[2];
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 1121, parserConfig0, (-141));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.deny", parserConfig0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("[]", (ParserConfig) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.deny.internal", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("true", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":99,\"java.nio.ByteBuffer\":-99,\"value2\":true,\"com.alibaba.fastjson.serializer.StringCodec\":\"1\",\"x\":false}");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Properties properties0 = new Properties();
      LinkedHashMap<MapDeserializer, BufferCapabilities> linkedHashMap0 = new LinkedHashMap<MapDeserializer, BufferCapabilities>();
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) properties0);
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser((Object) null, defaultJSONParser0.lexer, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\"false,\"\":[]}");
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, \":false,\"size\":\"Large\",\"color\":99,\"\":[]}");
      defaultJSONParser0.parseObject();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&.T!&gDE)1kSu-w");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2&.T!&gDE)1kSu-w
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("99");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Locale locale0 = Locale.CANADA_FRENCH;
      BreakIterator breakIterator0 = BreakIterator.getWordInstance(locale0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 2, line 1, column 399
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mapDeserializer0, (Object) numberFormat0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "TODO : ");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"_asm_flag_\":\"Apple\",\"size\":\"Large\",\"\":false,\"number\":true,\"x\":null}", parserConfig0, 3402);
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\"}");
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("`mfvHi?1bD", parserConfig0, 10000);
      Hashtable<BitSet, BigInteger> hashtable0 = new Hashtable<BitSet, BigInteger>();
      defaultJSONParser0.checkMapResolve(hashtable0, hashtable0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect ':' at ");
      LinkedHashSet<MockGregorianCalendar> linkedHashSet0 = new LinkedHashSet<MockGregorianCalendar>();
      defaultJSONParser0.checkListResolve(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class1, (Collection) linkedList0, (Object) rectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but true, pos 4, line 1, column 5true
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<MockDate> class0 = MockDate.class;
      MockDate mockDate0 = new MockDate(1, 1870, 2);
      Collator collator0 = defaultJSONParser0.parseObject((Type) class0, (Object) mockDate0);
      assertNull(collator0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":[null],\"unterminated\":99,\"java.nio.ByteBuffer\":-99,\"not support type \":true,\"com.alibaba.fastjson.serializer.StringCodec\":\"a string\",\"x\":false}");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Class<Float> class0 = Float.TYPE;
      Locale locale0 = Locale.KOREAN;
      Chronology chronology0 = Chronology.ofLocale(locale0);
      ChronoLocalDate chronoLocalDate0 = chronology0.dateYearDay(315, 45);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) chronoLocalDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("46", parserConfig0, 512);
      Class<Integer> class0 = Integer.TYPE;
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"..\":\"Large\",\"color\":true,\"number\":{\"\":{}}}", parserConfig0, 1540);
      Hashtable<BitSet, BigInteger> hashtable0 = new Hashtable<BitSet, BigInteger>();
      LinkedHashMap<MapDeserializer, BufferCapabilities> linkedHashMap0 = new LinkedHashMap<MapDeserializer, BufferCapabilities>();
      defaultJSONParser0.parseObject((Map) hashtable0, (Object) linkedHashMap0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(3, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":[false],\"\":false,\"number\":\"1\"}");
      LinkedHashMap<MapDeserializer, BufferCapabilities> linkedHashMap0 = new LinkedHashMap<MapDeserializer, BufferCapabilities>();
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) null);
      assertEquals(6, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":99,\"java.nio.ByteBuffer\":-99,\"value2\":true,\"com.alibaba.fastjson.serializer.StringCodec\":\"1\",\"x\":false}");
      Properties properties0 = new Properties();
      defaultJSONParser0.setContext((ParseContext) null, (Object) "<`M", (Object) properties0);
      LinkedHashMap<MapDeserializer, BufferCapabilities> linkedHashMap0 = new LinkedHashMap<MapDeserializer, BufferCapabilities>();
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) properties0);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(6, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}", parserConfig0, 1540);
      Hashtable<BitSet, BigInteger> hashtable0 = new Hashtable<BitSet, BigInteger>();
      Hashtable hashtable1 = (Hashtable)defaultJSONParser0.parseObject((Map) hashtable0, (Object) null);
      assertTrue(hashtable1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      Class<MockDate> class0 = MockDate.class;
      Stack<ChoiceFormat> stack0 = new Stack<ChoiceFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but {, pos 1, line 1, column 2{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[4];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException((-2222));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      HashMap<Point, JavaBeanDeserializer> hashMap0 = new HashMap<Point, JavaBeanDeserializer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual true, pos 4, line 1, column 5true
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\"false,\"\":[]}");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"\":true,\"\":false,\"number\":{}}", parserConfig0, 1540);
      Dimension dimension0 = new Dimension();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null, (Type) null, (Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      doReturn((String) null).when(propertyProcessable0).toString();
      Object object0 = defaultJSONParser0.parse(propertyProcessable0, (Object) dimension0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]", parserConfig0, 1540);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "creae instance error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, fieldName creae instance error, pos 1, line 1, column 2[]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"synxzerror, \":null,\"size\":\", actual \",\"com.alibaba.fastjson.JSONPath$IntInSegement\":99,\"\":[\"a str.n\",99],\"Ljava/lang/reflect/Type;\":[]}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 1);
      defaultJSONParser0.handleResovleTask(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      Object object0 = defaultJSONParser0.resolveReference("fastjson.parser.deny.internal");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":11}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.close();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false", parserConfig0, 1540);
      defaultJSONParser0.close();
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("jd^5Lzo/Hv{n?|");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-2408));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 4, line 1, column 5true
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = feature0;
      featureArray0[3] = featureArray0[0];
      featureArray0[4] = featureArray0[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("unterminated json string, ", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 12, line 1, column 13unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("g(,", parserConfig0, 3265);
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("46", parserConfig0, 512);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "syntax error : ");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(6, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Feature feature0 = Feature.NonStringKeyAsString;
      Feature[] featureArray0 = new Feature[4];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("[6", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"synxzerror, \":false,\"\":[\"a str.n\",99,[],null],\"com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context\":99,\"Ljava/lang/reflect/Type;\":-99}");
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertEquals(4, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"synxzerror, \":false,\"\":[\"a str.n\",99,[]],\"\":99,\"Ljava/lang/reflect/Type;\":[true]}");
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 1, line 1, column 2[]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"a string\"");
      Object object0 = defaultJSONParser0.getObject("\"a string\"");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^:k");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("^:k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":false,\"\":[]}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":[],\"size\":\"Large\",\"color\":\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\",\"value\":true,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":false,\"number\":null,\"x\":\"a string\"}", parserConfig0, 1540);
      Hashtable<BitSet, BigInteger> hashtable0 = new Hashtable<BitSet, BigInteger>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class java.util.Hashtable, property fruit
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[\"a string\"]");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect ':' at ");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[\"a string\"]");
      Class<Time> class0 = Time.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 1, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":null,\"x\":[],\"\":\"a string\"}");
      Class<Time> class0 = Time.class;
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = '.';
      charArray0[3] = '%';
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      ChronoField chronoField0 = ChronoField.YEAR_OF_ERA;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("?", parserConfig0, 96);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer, parserConfig0);
      defaultJSONParser2.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeSupport");
      defaultJSONParser1.addResolveTask(defaultJSONParser_ResolveTask0);
      parserConfig0.addAutoTypeCheckHandler((ParserConfig.AutoTypeCheckHandler) null);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      doReturn((String) null).when(propertyProcessable0).toString();
      Object object0 = defaultJSONParser0.parse(propertyProcessable0, (Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":99,\"java.nio.ByteBuffer\":-99,\"value2\":true,\"com.alibaba.fastjson.serializer.StringCodec\":\"1\",\"x\":false}");
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null, (Type) null, (Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      doReturn((String) null).when(propertyProcessable0).toString();
      Object object0 = defaultJSONParser0.parse(propertyProcessable0, (Object) breakIterator0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"size\":\"Large\",\"color\":true,\"\":false,\"number\":{\"\":{}}}", parserConfig0, 1540);
      Hashtable<BitSet, BigInteger> hashtable0 = new Hashtable<BitSet, BigInteger>();
      defaultJSONParser0.parseObject((Map) hashtable0, (Object) null);
      assertFalse(hashtable0.isEmpty());
      assertEquals(4, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"fileName\",\"syntax error : \":false,\"color\":-99,\"value\":[false],\"\":\"a string\",\"number\":{\"x\":[]}}");
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, null, public java.util.SimpleTimeZone(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":[false],\"\":false,\"number\":\"1\"}");
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) breakIterator0);
      LinkedHashMap<MapDeserializer, BufferCapabilities> linkedHashMap0 = new LinkedHashMap<MapDeserializer, BufferCapabilities>();
      Byte byte0 = Byte.valueOf((byte)7);
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) byte0);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(6, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"\":true,\"\":false,\"number\":{},\"x\":null}");
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"\":true,\"\":false,\"number\":{},\"x\":null}", parserConfig0, 3402);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\"false,\"\":[]}");
      Hashtable<Integer, Boolean> hashtable0 = new Hashtable<Integer, Boolean>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, (Object) "([C)[F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, name 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      Hashtable<BitSet, BigInteger> hashtable0 = new Hashtable<BitSet, BigInteger>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, (Object) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\", property \":true,\"value2\":true,\"number\":\"1\"}");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      IdentityHashMap<PageAttributes, ParameterizedTypeImpl> identityHashMap0 = new IdentityHashMap<PageAttributes, ParameterizedTypeImpl>();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) identityHashMap0, (Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 8, line 1, column 9{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\", property \":true,\"value2\":true,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":false,\"\":[]}");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Properties properties0 = new Properties();
      Object object0 = defaultJSONParser0.parseObject((Map) properties0, (Object) "");
      assertNotNull(object0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":false,\"\":[]}");
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(dateFormat0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6", parserConfig0);
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 39, parserConfig0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error : ");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(parserConfig0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("writeString", parserConfig0, (-2769));
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":17,\"\":[]}");
      Feature feature0 = Feature.SupportArrayToBean;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("jd^5Lzo/Hv{n?|");
      Feature feature0 = Feature.DisableFieldSmartMatch;
      defaultJSONParser0.config(feature0, true);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":null,\"\":\"Red\",\"value\":99,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-1602), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"synxzerror, \":false,\"size\":\", actual \",\"\":99,\"\":[\"a string\",99],\"Ljava/lang/reflect/Type;\":[]}");
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) jSONObject0, (Object) mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 96, line 1, column 97{\"synxzerror, \":false,\"size\":\", actual \",\"\":99,\"\":[\"a string\",99],\"Ljava/lang/reflect/Type;\":[]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-9");
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setResolveStatus((-423));
      assertEquals((-423), defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"a string\"");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual string, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":99,\"java.nio.ByteBuffer\":-99,\"value2\":true,\"com.alibaba.fastjson.serializer.StringCodec\":\"1\",\"x\":false}");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"C)Ljava/lang/Enum;\":\"Large\",\"color\":-99,\"value\":-99,\"\":false,\"number\":false}");
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("46", parserConfig0, 512);
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertTrue(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":false,\"\":[]}");
      defaultJSONParser0.setDateFormat("{\"\":false,\"\":[]}");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(6, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
  }
}
