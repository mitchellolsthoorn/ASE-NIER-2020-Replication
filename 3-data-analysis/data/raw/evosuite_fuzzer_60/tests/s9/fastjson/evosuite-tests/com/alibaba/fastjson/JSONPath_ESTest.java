/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 09:32:38 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("?xK@TVh.<DYe?<[&", 1419L, jSONPath_Operator0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("'");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_NotNullSegement0, true);
      JSONPath jSONPath0 = new JSONPath("?xK@TVh.<DYe?<[&");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, sQLFeatureNotSupportedException0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"fruit\":\"Apple\",\"size\":true,\"color\":\"max\",\"value\":true,\"number\":\"1\"}", 1419L, jSONPath_Operator0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("{\"fruit\":\"Apple\",\"size\":true,\"color\":\"max\",\"value\":true,\"number\":\"1\"}");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, true);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":true,\"color\":\"max\",\"value\":true,\"number\":\"1\"}");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":\"Apple\",\"size\":true,\"color\":\"max\",\"value\":true,\"number\":\"1\"}", false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_NotNullSegement0, jSONPath_PropertySegment0, "{\"fruit\":\"Apple\",\"size\":true,\"color\":\"max\",\"value\":true,\"number\":\"1\"}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(81);
      Integer integer1 = new Integer(12);
      boolean boolean0 = JSONPath.eqNotNull(integer1, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"not support jsonpath : \":null,\"xx\":99,\"x\":-99,\"YL50C8\":true}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1670, 69, 69);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_Operator0, jSONPath0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -22
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONPath jSONPath0 = new JSONPath("99");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 224, 0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "/stackTrace/2", propertyNamingStrategy0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Object object0 = JSONPath.extract("{\"b7\":-99,\"y\":true,\"z\":true,\"a\":[],\"/cause/stackTrace/12\":{},\"xx\":true}", "L.jLVVOVy", parserConfig0, 1167, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!y.");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("!y.");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("w#umI`JVPC~ VER");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!,k=7Y<mk:@;s{]X");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("C'");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(690L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/1", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) classLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$Context");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("\"V.M~0C=", "{\"/stackTrace/5\":\"a string\"}");
      boolean boolean0 = jSONPath0.remove((Object) sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("illegal json : ");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("S");
      jSONPath0.init();
      assertEquals("S", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("java.sql.Timestamp", serializeConfig0, parserConfig0);
      Byte byte0 = new Byte((byte)116);
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepScan(byte0, "h$@ 35;g", stack0);
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath_SizeSegment0.eval((JSONPath) null, jSONPath_Operator0, javaBeanSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$SizeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("b7~[`)pB");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("{DJE#ntG", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, "b7~[`)pB", parserConfig0, "b7~[`)pB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("getFildValue error.");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">Wr|Zi[^P&`mk7sG|e");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('*');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("min");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('I');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'I, but 'm'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "jsonpath error, path ");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("NOT_RLIKE", "{\"fruit\":true,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", sQLNonTransientException0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("vo\"", 6601085983368743140L, (-1882), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("S%", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "", parserConfig0, sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(17);
      JSONPath jSONPath0 = JSONPath.compile("t4?");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath0, propertyNamingStrategy0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("illegal json : ");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(81, 81, 81);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, jSONPath_RangeSegment0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1k3/c()X*/q");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-3462L));
      assertEquals((-3461.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.read("{\"/stackTrace/5\":\"a string\"}", "evalSize error : ");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/1", true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("-", serializeConfig0, parserConfig0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("fastjson.parser.autoTypeAccept", "m", 91);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, "m", sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path -, segement /stackTrace/1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("nin", sQLTransientConnectionException0);
      int int0 = JSONPath.size((Object) sQLNonTransientConnectionException0, ",");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      int int0 = JSONPath.size((Object) classLoader0, "fastjson.parser.autoTypeAccept");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*dPUd");
      boolean boolean0 = jSONPath0.setPropertyValue("*dPUd", (String) null, 3142L, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) "z=hxxH<DieO(LbWd", "fastjson.parser.safeMode");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/stackTrace/8");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("n]Nj|~+S~}uH", "-)Z_L3q>ZHju[X4[t&", sQLTransactionRollbackException0);
      Set<?> set0 = JSONPath.keySet((Object) sQLInvalidAuthorizationSpecException0, "/stackTrace/8");
      assertEquals(5, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("/cause/stackTrace/9");
      assertFalse(collection0.contains("/cause/stackTrace/9"));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("not support awt class : ");
      Object object0 = jSONPath0.getPropertyValue("not support awt class : ", "KZ<L5Z:1 &q", (-5808552475107396776L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      Class<BigInteger> class0 = BigInteger.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("qCfF", serializeConfig0, parserConfig0);
      Class<Byte> class0 = Byte.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{}");
      Class<Calendar> class0 = Calendar.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("E<_t58'=cl.2j~wtsb");
      Integer integer0 = new Integer((-2096));
      int int0 = jSONPath0.evalSize(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("a8[");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-236), 17, (-2395));
      int int0 = jSONPath0.evalSize(mockGregorianCalendar0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("evalSize error : ");
      JSONPath jSONPath0 = new JSONPath("@S0vNCaAZ");
      Set<?> set0 = jSONPath0.evalKeySet(pattern0);
      assertFalse(set0.contains("@S0vNCaAZ"));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("zmF$g+P kN)L{#KVY@");
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      Object object0 = jSONPath0.eval((Object) "");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) " : ", ")");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":-99,\"y\":true,\"z\":true,\"a\":[],\"/cause/stackTrace/12\":{}}");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("=", false);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 5, jSONPath_PropertySegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("O{_t:i`5e=Bpt");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "java", (Object) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Date> class0 = Date.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "{DJE#ntG", "fastjson.parser.autoTypeSupport", (Object) javaBeanSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLFeatureNotSupportedException0, "", (Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("2FrQ,(?P_2WV@$,k");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "2FrQ,(?P_2WV@$,k", (Object) "2FrQ,(?P_2WV@$,k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 2FrQ,(?P_2WV@$,k
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(batchUpdateException0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(564);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("syntax error, unexpect token ':'", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(bigInteger0, "fastjson.parser.autoTypeSupport", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("4EX RV/5<IT", "4EX RV/5<IT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 2, line 1, column 34EX RV/5<IT
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) propertyNamingStrategy0, "\"l7{/uH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"l7{/uH
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" : ");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":{}R");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":{}R
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(I)C");
      jSONPath0.init();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("99");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.SerialContext");
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("C{-");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("C{-", 1143);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("/cause/stackTrace/9", "GQs;T~7\"r`O", parserConfig0, (-335), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSONPath.extract("dd-MM-yyyy HH:mm:ss", "writeFieldValueStringWithDoubleQuote", parserConfig0, 3968, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null, parserConfig0, 106, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Feature[] featureArray0 = new Feature[3];
      BigDecimal bigDecimal0 = (BigDecimal)JSONPath.extract("+.5:oTYSuf'UTD", "t7F^n'TTc9l2Lj:t^", parserConfig0, (-613), featureArray0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("/cause/cause/stackTrace/3", "/stackTrace/4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "autoTypeAccept");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" : ");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("/cause/stackTrace/9", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      SerializeConfig serializeConfig0 = new SerializeConfig(4351, true);
      JSONPath jSONPath0 = new JSONPath("cause", serializeConfig0, (ParserConfig) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(dataTruncation0, linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("'");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement(" : ", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile(" : ");
      jSONPath0.containsValue((Object) jSONPath_IntInSegement0, (Object) " : ");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath.contains((Object) "fastjson.parser.autoTypeAccept", "@Z`Z'");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      JSONPath jSONPath1 = JSONPath.compile("t7F^n'TTc9l2Lj:t^");
      jSONPath1.contains((Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "/stackTrace/3");
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLTransactionRollbackException0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(19);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_ArrayAccessSegment0, "~.]R+fx", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$ArrayAccessSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("|q'dU<K@*Z9CcL");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      jSONPath0.deepSet(propertyNamingStrategy0, "O{_t:i`5e=Bpt", (-4270347329889690746L), propertyNamingStrategy0);
      assertEquals("|q'dU<K@*Z9CcL", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/5");
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(javaBeanSerializer0, "deny", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "com.alibaba.fastjson.JSONPath$RefOpSegement", (-808));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("O{_t:i`5e=Bpt", false);
      JSONPath jSONPath0 = new JSONPath("{}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_Operator0, "2N@8O#'Teq>a");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":true,\"color\":\"max\",\"value\":true,\"number\":\"1\"}");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/8", false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, sQLClientInfoException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("M", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Timestamp");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("value is null", false);
      boolean boolean0 = jSONPath0.set((Object) jSONPath_PropertySegment0, (Object) null, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(63, 63, 63);
      jSONPath0.arrayAdd((Object) jSONPath_RangeSegment0, (Object[]) null);
      assertEquals("/cause/stackTrace/9", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("#");
      boolean boolean0 = jSONPath0.containsValue((Object) "#", (Object) "#");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("LIKE", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3995), (-613), (-3995));
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("i^N'n?#lcw=@jd");
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 848);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("a8[");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(17);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("LT", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, "LT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(17);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("in", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, (Object) null, "in");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("illegal json : ");
      Float float0 = new Float((float) (-1));
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransactionRollbackException0, (Object) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "a8[";
      stringArray0[1] = "/cause/cause/stackTrace/10";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject((Object) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject(uUID0, stringArray0);
      assertEquals("00000000-0100-4000-8200-000003000000", object0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("java/lang/Object", false);
      Object object0 = JSONPath.reserveToObject(jSONPath_PropertySegment0, (String[]) null);
      assertSame(object0, jSONPath_PropertySegment0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(" : ", stringArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[] longArray0 = new long[8];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement(" : ", longArray0, true);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_IntInSegement0, (String[]) null);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{}");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, "{}", jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("SortFeidFastMatch", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize(serializeConfig0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("can not cast to boolean, value : ", true);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/2");
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, "", javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"1\"}");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(")7flab<8@<");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "z&>4i}p=t\"O", sQLTimeoutException0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLNonTransientConnectionException0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"1\"}", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"1\"}, segement {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float(100.0F);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float(0.0F);
      boolean boolean0 = JSONPath.eqNotNull(float0, 1419L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer integer0 = new Integer(990);
      boolean boolean0 = JSONPath.eqNotNull(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(349L);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{}");
      boolean boolean0 = JSONPath.eq(jSONPath0, "!N@8O#'Teq>a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("com.alibaba.fastjson.JSONPath$RegMatchSegement", "com");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/cause/stackTrace/8");
      boolean boolean0 = JSONPath.eq(sQLTransactionRollbackException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, "com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float((-4504.251F));
      boolean boolean0 = JSONPath.eq(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepGetPropertyValues(vector0, vector0);
      assertEquals("/cause/stackTrace/9", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("evalSize error : ");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("44wwym8{#[6QaqL", hashMap0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "alibaba", 167, sQLClientInfoException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, sQLTransientException0, sQLTransientException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("oA");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, "(JL8m7QD#", 318, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("/cause/stackTrace/11", 2551L, jSONPath_Operator0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"1\"}");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"1\"}");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_IntOpSegement0, false);
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"1\"}");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(")7flab<8@<");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_NotNullSegement0, sQLTimeoutException0, ")7flab<8@<");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"java\":true,\"/cause/stackTrace/6\":true}");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"java\":true,\"/cause/stackTrace/6\":true}");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("gOdlc!}Q)Y!P5o',gH", sQLClientInfoException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, "gOdlc!}Q)Y!P5o',gH", sQLFeatureNotSupportedException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("a8[");
      Byte byte0 = new Byte((byte)91);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("/cause/cause/stackTrace/10", (-1014497654951707614L), 1697L, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "/cause/cause/stackTrace/10", byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath jSONPath0 = new JSONPath("/#N9UD>K#gWIi)$c");
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("tt+^", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, "like");
      assertEquals("like", object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      long[] longArray0 = new long[4];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.parser.autoTypeAccept", longArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, serializeConfig0, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("7+.5:oTYSuf'UUD");
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/5");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("/stackTrace/5", "z>r<Y]", 2493, sQLClientInfoException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLTransientException0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("in");
      Pattern pattern0 = Pattern.compile("in");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("fastjson.parser.safeMode", pattern0, jSONPath_Operator0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1443168256, 1443168256, 187);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONReaderScanner0.matchStat, jSONPath_Operator0, jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("NOT_LIKE");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.deny", "fastjson.parser.autoTypeAccept", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.deny.internal", sQLTransactionRollbackException0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLTransactionRollbackException0, jSONPath_SizeSegment0, sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("java/lang/Object", "java/lang/Object", false);
      JSONPath jSONPath0 = new JSONPath(")k<@<q%2Is");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, "java/lang/Object", "", sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":99,\"/cause/stackTrace/6\":true}");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "EtC";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MaxSegment";
      stringArray0[2] = "{\"x\":99,\"/cause/stackTrace/6\":true}";
      stringArray0[3] = "{\"x\":99,\"/cause/stackTrace/6\":true}";
      stringArray0[4] = "{\"x\":99,\"/cause/stackTrace/6\":true}";
      stringArray0[5] = "com.alibaba.fastjson.JSONPath$MaxSegment";
      stringArray0[6] = "{\"x\":99,\"/cause/stackTrace/6\":true}";
      stringArray0[7] = "EtC";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("EtC", "com.alibaba.fastjson.JSONPath$MaxSegment", "{\"x\":99,\"/cause/stackTrace/6\":true}", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, "/stackTrace/13", sQLClientInfoException0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.JSONPath$MaxSegment", (String) null, "com.alibaba.fastjson.JSONPath$MaxSegment", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("zmF$g+P kN)L{#KVY@");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("zmF$g+P kN)L{#KVY@");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("z-ZY", (JSONPath.Segment) null, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RefOpSegement0, jSONPath_RefOpSegement0, true);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_JSONPathParser0, jSONPath_Operator0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("{DJE#ntG", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("nYBX'$,!1_^W{", 5614464919154503228L, jSONPath_Operator0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, serializeConfig0, "b7~[`)pB", serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"number\":\"1\"}", 1419L, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.IN;
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, (Object) null, jSONPath0, jSONPath_Operator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      String[] stringArray0 = new String[8];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("df,mcM/^VTQzd", stringArray0, false);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "df,mcM/^VTQzd", (Object) null, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("a8[");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("a8[", "a8[", 17);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "]";
      stringArray0[1] = "a8[";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("]", stringArray0, false);
      Short short0 = new Short((short)43);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny", "fastjson.parser.autoTypeAccept", (byte)91, sQLSyntaxErrorException0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, short0, sQLInvalidAuthorizationSpecException0, "a8[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("not support awt class : ");
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-3462L));
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      longArray0[2] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("not support awt class : ", longArray0, true);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("%", "%", (-1885), (Map<String, ClientInfoStatus>) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, sQLClientInfoException0, longArray0[1], bigInteger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("not support awt class : ");
      Long[] longArray0 = new Long[3];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("not support awt class : ", longArray0, true);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("%", "%", (-1885), (Map<String, ClientInfoStatus>) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, sQLClientInfoException0, longArray0[1], bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" : ");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement(" : ", 4363L, (-1014497654951707614L), true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "null", sQLDataException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement(" : ", longArray0, true);
      JSONPath jSONPath0 = new JSONPath(" : ");
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_Operator0, jSONPath_MultiPropertySegment0, sQLClientInfoException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      Double double0 = new Double((-37.68499549952));
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("!8fdo%IoT ??b)W&g", double0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1987), 393216, 393216);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, jSONPath_RangeSegment0, jSONPath_ValueSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("value is null", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"/cause/stackTrace/9\":[],\"b\":{},\"xx\":{}}");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, false);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"/cause/stackTrace/9\":[],\"b\":{},\"xx\":{}}");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, jSONPath_NotNullSegement0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("a8[");
      Byte byte0 = new Byte((byte)91);
      Map<String, Object> map0 = JSONPath.paths((Object) byte0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(51, 17, 51);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, map0);
      assertEquals(1, map0.size());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("99", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-91), (-1), (-49));
      // Undeclared exception!
      jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/cause/cause/stackTrace/3", true);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(17, 17, (-747));
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_PropertySegment0, jSONPath_Operator0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/cause/stackTrace/10");
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, "T.(h<");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("O{_t:i`5e=Bpt");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "illegal json : ";
      stringArray0[1] = "E+Szca?.'RONi<9Hpe";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "illegal json : ", "$6");
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("O{_t:i`5e=Bpt", true);
      JSONPath jSONPath0 = new JSONPath("{}");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("!N@8O#'Teq>a", jSONPath_PropertySegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLClientInfoException0, jSONPath_FilterSegment0);
      assertNull(sQLClientInfoException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("O{_t:i`5e=Bpt", true);
      JSONPath jSONPath0 = new JSONPath("E<_t58'=cl.2j~wtsb");
      Short short0 = new Short((short)3447);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, short0, jSONPath0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = JSONPath.compare("x", "x");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*dPUd", "/cause/stackTrace/10", hashMap0, sQLTimeoutException0);
      MockDate mockDate0 = new MockDate((-2147483647), (-2147483647), (-2147483647));
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLClientInfoException0, mockDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLClientInfoException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("m");
      Short short0 = new Short((short) (-1836));
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, class0, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("a8[");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, sQLNonTransientException0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":true,\"color\":\"max\",\"value\":true,\"number\":\"1\"}");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("/stackTrace/8");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/M=YA5");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("+.5:oTYSuf'UTD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+.5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"fruit\":\"Apple\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("a string\"", object0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("25L256/`79rF");
      jSONPath_JSONPathParser0.readValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'L, but 'F'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath.compile("/#;<!@c&T&\\R+KO_");
      // Undeclared exception!
      try { 
        JSONPath.extract("can not get javaBeanDeserializer. ", "\\-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LIKE");
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.serializer_buffer_threshold");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!y.");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'y'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=]V>EZm)IEar2B\"Rh&");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("n_et/!{v");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // n_et/!{v
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"~HqBg3y{\"?)");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("~HqBg3y{", object0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":true,\"color\":\"max\",\"value\":true,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(630915198288726429L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(JL8m7QD#");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+.5:oTYSuf'UTD");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement(" : ", longArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|&");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      assertSame(jSONPath_IntInSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$FilterGroup");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("json-path can not be null or empty", (String) null, jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      assertSame(jSONPath_StringOpSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/1");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTr[ace/9");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Short short0 = new Short((short) (-14636));
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) short0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /cause/stackTr[ace/9
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\t");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.skipWhitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("illegal json : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : illegal json : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[5)");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$.^k18eg,g<*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $.^k18eg,g<*
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "NOT_RLIKE");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLWarning sQLWarning0 = new SQLWarning("i(RL'28E:V^P", "@S0vNCaAZ", sQLInvalidAuthorizationSpecException0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "~";
      stringArray0[1] = "DA@28=-bUC~%2Z";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLWarning0, stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("m");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(460, 90, 5, 91, 2048);
      Object object0 = jSONPath0.eval((Object) mockGregorianCalendar0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/#;<!@c&T&R+KO_");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<DataTruncation> class0 = DataTruncation.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build(class0, type0, (PropertyNamingStrategy) null, false, false);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Map<String, Object> map0 = JSONPath.paths((Object) javaBeanDeserializer0, serializeConfig0);
      assertEquals(247, map0.size());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "SiX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" : ");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" : ", "lie", 521);
      boolean boolean0 = JSONPath.set((Object) sQLTransientConnectionException0, "\u0000", (Object) jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("rlike", " : ", sQLDataException0);
      boolean boolean0 = JSONPath.set((Object) "/cause/cause/stackTrace/10", "/stackTrace/1", (Object) sQLIntegrityConstraintViolationException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("oA", "fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "O{_t:i`5e=Bpt", (Object) sQLDataException0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Ld4$y.vBaYi{gX?fh", "fastjson.parser.autoTypeAccept", (short) (-14636));
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) classLoader0, (Object) sQLNonTransientConnectionException0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("C{-");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "AutoCloseSource";
      Object object0 = JSONPath.reserveToArray((Object) null, stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("AutoCloseSource");
      // Undeclared exception!
      try { 
        jSONPath0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLWarning sQLWarning0 = new SQLWarning("~", "f.[t%m2u?gN[uL|AfD", sQLInvalidAuthorizationSpecException0);
      JSONPath jSONPath0 = JSONPath.compile("MR|");
      boolean boolean0 = jSONPath0.remove((Object) sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "'", "'", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_Operator0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      JSONPath.arrayAdd((Object) null, "'", objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("O{_t:i`5e=Bpt", true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":{},\"min\":-99}");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) jSONPath_PropertySegment0, objectArray0);
      assertEquals("{\"x\":{},\"min\":-99}", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("java.sql.Timestamp", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.keySet((Object) "java.sql.Timestamp");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Long long0 = new Long((-3462L));
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = JSONPath.containsValue((Object) byteArray0[0], "%", (Object) long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("DisableCheckSpecialChar", "L", (Throwable) null);
      boolean boolean0 = JSONPath.containsValue((Object) sQLTransientConnectionException0, "L", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath0, (Object) serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/5");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("C%oiT{Fkl`+", "next");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      boolean boolean0 = jSONPath0.contains((Object) sQLTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("unclosed.str.lit", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("\\-", "/stackTrace/4");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("not support awt class : ");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) "/cause/stackTrace/9", "fastjson.parser.autoTypeAccept");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      Byte byte0 = new Byte((byte)2);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) jSONPath0, (Object) byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("null", "null", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("illegal json : ");
      Integer integer0 = new Integer(81);
      DataTruncation dataTruncation0 = new DataTruncation(81, true, false, 68, 68);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, integer0, dataTruncation0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("keySet");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/3", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, serializeConfig0, parserConfig0, "/cause/stackTrace/3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("getFieldValue error.");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('e', char0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/5");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "-2147483648");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("WriteMapNullValue", sQLFeatureNotSupportedException0);
      Long long0 = new Long(352);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTimeoutException0, (Object) long0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9");
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.alibaba.fastjson.JSONPath$MinSegment", "zC?&");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientException0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1970), 7655, (-3384));
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/2", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_SizeSegment0, "/cause/stackTrace/2");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "jR%";
      stringArray0[1] = ", minimumCapacity=";
      stringArray0[2] = "/stackTrace/2";
      stringArray0[3] = "+T8EL'VqN@";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) jSONPath_MultiPropertySegment0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[5)");
      String string0 = jSONPath0.getPath();
      assertEquals("[5)", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("lVqD", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) null, "/#;<!@c&T&\\R+KO_");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(17);
      JSONPath jSONPath0 = new JSONPath("{\"x\":99,\"/cause/stackTrace/6\":true}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/cause/cause/stackTrace/3", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/cause/cause/stackTrace/3", true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }
}
