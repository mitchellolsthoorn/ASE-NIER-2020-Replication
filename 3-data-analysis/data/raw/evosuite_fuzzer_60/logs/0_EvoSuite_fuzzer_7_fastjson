* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONObject
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.parser.JSONReaderScanner
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 12812
* Connecting to master process on port 12809
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.JSONReaderScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1110
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 338 / 1110
[MASTER] 11:03:40.152 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 11:03:40.165 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
[MASTER] 11:03:40.330 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 11:03:40.334 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONObject
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1211
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 496 / 1211
[MASTER] 11:03:42.057 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 11:03:42.058 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 11:03:42.058 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 11:03:42.059 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 11:03:43.187 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 11:03:51.514 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 11:04:01.212 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 11:04:27.976 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 64s and 17 generations, 14186 statements, best individual has fitness: 197.0
* Minimizing test suite
* Search finished after 63s and 31 generations, 18164 statements, best individual has fitness: 542.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 82%
* Total number of goals: 156
* Number of covered goals: 128
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 75%
* Total number of goals: 104
* Number of covered goals: 78
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 34
* Number of covered goals: 34
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 662
* Number of covered goals: 599
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 68%
* Total number of goals: 40
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 95%
* Total number of goals: 22
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 74%
* Total number of goals: 104
* Number of covered goals: 77
* Generated 71 tests with total length 214
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 59%
* Total number of goals: 254
* Number of covered goals: 151
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 50%
* Total number of goals: 172
* Number of covered goals: 86
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 89%
* Total number of goals: 18
* Number of covered goals: 16
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 56%
* Total number of goals: 333
* Number of covered goals: 187
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 37%
* Total number of goals: 162
* Number of covered goals: 60
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 93%
* Total number of goals: 59
* Number of covered goals: 55
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 90%
* Total number of goals: 59
* Number of covered goals: 53
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 49%
* Total number of goals: 172
* Number of covered goals: 85
* Generated 76 tests with total length 203
* Resulting test suite's coverage: 62% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 11:05:00.540 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_54_1590138300511/com/alibaba/fastjson/JSONObject_54_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_54_1590138300511/com/alibaba/fastjson/JSONObject_54_tmp__ESTest_scaffolding.java]]
[MASTER] 11:05:00.540 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:05:00.540 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:05:00.544 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.lang.Object> cannot be converted to java.lang.Class<java.util.HashMap<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Integer>>: 26
[MASTER] 11:05:00.545 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_54_1590138300511/com/alibaba/fastjson/JSONObject_54_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 09:05:00 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.JSONObject;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import java.util.AbstractMap;
13: import java.util.HashMap;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class JSONObject_54_tmp__ESTest extends JSONObject_54_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       JSONObject jSONObject0 = new JSONObject();
24:       Class<Object> class0 = Object.class;
25:       ParserConfig parserConfig0 = new ParserConfig();
26:       HashMap<AbstractMap.SimpleImmutableEntry, Integer> hashMap0 = jSONObject0.toJavaObject((Class<HashMap<AbstractMap.SimpleImmutableEntry, Integer>>) class0, parserConfig0, 16);
27:       assertSame(jSONObject0, hashMap0);
28:   }
29: }
RegularFileObject[/tmp/EvoSuite_54_1590138300511/com/alibaba/fastjson/JSONObject_54_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 09:05:00 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSONObject_54_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSONObject"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
76:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSONObject_54_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.util.ASMUtils",
84:       "com.alibaba.fastjson.JSONPath",
85:       "com.alibaba.fastjson.parser.JSONScanner",
86:       "com.alibaba.fastjson.parser.JSONLexerBase",
87:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
88:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
89:       "com.alibaba.fastjson.serializer.JSONSerializable",
90:       "com.alibaba.fastjson.serializer.SerializeWriter",
91:       "com.alibaba.fastjson.serializer.ReferenceCodec",
92:       "com.alibaba.fastjson.JSONException",
93:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
94:       "com.alibaba.fastjson.serializer.ToStringSerializer",
95:       "com.alibaba.fastjson.serializer.SerialContext",
96:       "com.alibaba.fastjson.serializer.AfterFilter",
97:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
98:       "com.alibaba.fastjson.TypeReference",
99:       "com.alibaba.fastjson.serializer.ObjectSerializer",
100:       "com.alibaba.fastjson.serializer.MapSerializer",
101:       "com.alibaba.fastjson.asm.Item",
102:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
103:       "com.alibaba.fastjson.serializer.DateCodec",
104:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
105:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
106:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
107:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
108:       "com.alibaba.fastjson.util.FieldInfo",
109:       "com.alibaba.fastjson.serializer.PropertyFilter",
110:       "com.alibaba.fastjson.annotation.JSONField",
111:       "com.alibaba.fastjson.parser.SymbolTable",
112:       "com.alibaba.fastjson.serializer.NameFilter",
113:       "com.alibaba.fastjson.serializer.ListSerializer",
114:       "com.alibaba.fastjson.JSONArray",
115:       "com.alibaba.fastjson.JSONAware",
116:       "com.alibaba.fastjson.serializer.LongCodec",
117:       "com.alibaba.fastjson.util.ASMClassLoader",
118:       "com.alibaba.fastjson.PropertyNamingStrategy",
119:       "com.alibaba.fastjson.parser.JSONToken",
120:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
121:       "com.alibaba.fastjson.serializer.AppendableSerializer",
122:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
123:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
124:       "com.alibaba.fastjson.serializer.ContextValueFilter",
125:       "com.alibaba.fastjson.util.ServiceLoader",
126:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
127:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
128:       "com.alibaba.fastjson.parser.DefaultJSONParser",
129:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
130:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
131:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
132:       "com.alibaba.fastjson.serializer.BeanContext",
133:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
134:       "com.alibaba.fastjson.util.IdentityHashMap",
135:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
136:       "com.alibaba.fastjson.JSON",
137:       "com.alibaba.fastjson.serializer.StringCodec",
138:       "com.alibaba.fastjson.serializer.SerializeFilterable",
139:       "com.alibaba.fastjson.JSONWriter",
140:       "com.alibaba.fastjson.asm.Opcodes",
141:       "com.alibaba.fastjson.JSONReader",
142:       "com.alibaba.fastjson.JSONStreamAware",
143:       "com.alibaba.fastjson.asm.MethodWriter",
144:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
145:       "com.alibaba.fastjson.serializer.SerializerFeature",
146:       "com.alibaba.fastjson.serializer.CalendarCodec",
147:       "com.alibaba.fastjson.util.IOUtils",
148:       "com.alibaba.fastjson.util.TypeUtils",
149:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
150:       "com.alibaba.fastjson.spi.Module",
151:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
152:       "com.alibaba.fastjson.serializer.MiscCodec",
153:       "com.alibaba.fastjson.util.IOUtils$1",
154:       "com.alibaba.fastjson.serializer.IntegerCodec",
155:       "com.alibaba.fastjson.serializer.SerializeFilter",
156:       "com.alibaba.fastjson.JSONPObject",
157:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
158:       "com.alibaba.fastjson.serializer.BeforeFilter",
159:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
160:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
161:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
162:       "com.alibaba.fastjson.JSONObject",
163:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
164:       "com.alibaba.fastjson.serializer.CharacterCodec",
165:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
166:       "com.alibaba.fastjson.asm.ByteVector",
167:       "com.alibaba.fastjson.parser.JSONLexer",
168:       "com.alibaba.fastjson.util.ASMClassLoader$1",
169:       "com.alibaba.fastjson.asm.Label",
170:       "com.alibaba.fastjson.asm.FieldWriter",
171:       "com.alibaba.fastjson.serializer.JSONSerializer",
172:       "com.alibaba.fastjson.util.JavaBeanInfo",
173:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
174:       "com.alibaba.fastjson.serializer.SerializeConfig",
175:       "com.alibaba.fastjson.serializer.AtomicCodec",
176:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
177:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
178:       "com.alibaba.fastjson.asm.Type",
179:       "com.alibaba.fastjson.serializer.FieldSerializer",
180:       "com.alibaba.fastjson.serializer.FloatCodec",
181:       "com.alibaba.fastjson.parser.JSONReaderScanner",
182:       "com.alibaba.fastjson.serializer.ValueFilter",
183:       "com.alibaba.fastjson.JSONPathException",
184:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
185:       "com.alibaba.fastjson.serializer.Labels",
186:       "com.alibaba.fastjson.serializer.CollectionCodec",
187:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
188:       "com.alibaba.fastjson.serializer.CharArrayCodec",
189:       "com.alibaba.fastjson.asm.MethodVisitor",
190:       "com.alibaba.fastjson.annotation.JSONCreator",
191:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
192:       "com.alibaba.fastjson.serializer.LabelFilter",
193:       "com.alibaba.fastjson.annotation.JSONType",
194:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
195:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
196:       "com.alibaba.fastjson.serializer.DoubleSerializer",
197:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
198:       "com.alibaba.fastjson.serializer.BooleanCodec",
199:       "com.alibaba.fastjson.parser.Feature",
200:       "com.alibaba.fastjson.parser.ParserConfig",
201:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
202:       "com.alibaba.fastjson.parser.ParseContext"
203:     );
204:   } 
205: 
206:   private static void resetClasses() {
207:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSONObject_54_tmp__ESTest_scaffolding.class.getClassLoader()); 
208: 
209:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
210:       "com.alibaba.fastjson.parser.Feature",
211:       "com.alibaba.fastjson.serializer.SerializerFeature",
212:       "com.alibaba.fastjson.util.IOUtils$1",
213:       "com.alibaba.fastjson.util.IOUtils",
214:       "com.alibaba.fastjson.JSON",
215:       "com.alibaba.fastjson.JSONObject",
216:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
217:       "com.alibaba.fastjson.util.IdentityHashMap",
218:       "com.alibaba.fastjson.util.ASMUtils",
219:       "com.alibaba.fastjson.parser.SymbolTable",
220:       "com.alibaba.fastjson.util.TypeUtils",
221:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
222:       "com.alibaba.fastjson.util.ASMClassLoader$1",
223:       "com.alibaba.fastjson.util.ASMClassLoader",
224:       "com.alibaba.fastjson.serializer.MiscCodec",
225:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
226:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
227:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
228:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
229:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
230:       "com.alibaba.fastjson.serializer.DateCodec",
231:       "com.alibaba.fastjson.serializer.CalendarCodec",
232:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
233:       "com.alibaba.fastjson.serializer.CollectionCodec",
234:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
235:       "com.alibaba.fastjson.serializer.StringCodec",
236:       "com.alibaba.fastjson.serializer.CharacterCodec",
237:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
238:       "com.alibaba.fastjson.serializer.IntegerCodec",
239:       "com.alibaba.fastjson.serializer.LongCodec",
240:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
241:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
242:       "com.alibaba.fastjson.serializer.FloatCodec",
243:       "com.alibaba.fastjson.serializer.BooleanCodec",
244:       "com.alibaba.fastjson.serializer.CharArrayCodec",
245:       "com.alibaba.fastjson.serializer.ReferenceCodec",
246:       "com.alibaba.fastjson.serializer.AtomicCodec",
247:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
248:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
249:       "com.alibaba.fastjson.parser.ParserConfig",
250:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
251:       "com.alibaba.fastjson.serializer.DoubleSerializer",
252:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
253:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
254:       "com.alibaba.fastjson.serializer.AppendableSerializer",
255:       "com.alibaba.fastjson.serializer.ToStringSerializer",
256:       "com.alibaba.fastjson.serializer.SerializeConfig",
257:       "com.alibaba.fastjson.parser.DefaultJSONParser",
258:       "com.alibaba.fastjson.parser.JSONLexerBase",
259:       "com.alibaba.fastjson.parser.JSONScanner",
260:       "com.alibaba.fastjson.parser.ParseContext",
261:       "com.alibaba.fastjson.serializer.SerializeWriter",
262:       "com.alibaba.fastjson.util.ServiceLoader",
263:       "com.alibaba.fastjson.util.JavaBeanInfo",
264:       "com.alibaba.fastjson.asm.ClassWriter",
265:       "com.alibaba.fastjson.asm.ByteVector",
266:       "com.alibaba.fastjson.asm.Item",
267:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
268:       "com.alibaba.fastjson.asm.MethodWriter",
269:       "com.alibaba.fastjson.asm.Label",
270:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
271:       "com.alibaba.fastjson.parser.JSONToken",
272:       "com.alibaba.fastjson.JSONException",
273:       "com.alibaba.fastjson.serializer.SerializeFilterable",
274:       "com.alibaba.fastjson.serializer.JSONSerializer",
275:       "com.alibaba.fastjson.serializer.MapSerializer",
276:       "com.alibaba.fastjson.serializer.SerialContext",
277:       "com.alibaba.fastjson.JSONArray",
278:       "com.alibaba.fastjson.asm.ClassReader",
279:       "com.alibaba.fastjson.asm.TypeCollector$1",
280:       "com.alibaba.fastjson.asm.TypeCollector",
281:       "com.alibaba.fastjson.asm.Type",
282:       "com.alibaba.fastjson.asm.MethodCollector",
283:       "com.alibaba.fastjson.util.FieldInfo",
284:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
285:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
286:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
287:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
288:       "com.alibaba.fastjson.asm.FieldWriter",
289:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
290:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
291:       "com.alibaba.fastjson.serializer.FieldSerializer",
292:       "com.alibaba.fastjson.serializer.BeanContext",
293:       "com.alibaba.fastjson.parser.JSONReaderScanner",
294:       "com.alibaba.fastjson.util.UTF8Decoder",
295:       "com.alibaba.fastjson.TypeReference$1",
296:       "com.alibaba.fastjson.TypeReference",
297:       "com.alibaba.fastjson.serializer.ArraySerializer",
298:       "com.alibaba.fastjson.serializer.PascalNameFilter",
299:       "com.alibaba.fastjson.serializer.ListSerializer",
300:       "com.alibaba.fastjson.serializer.EnumSerializer",
301:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
302:       "com.alibaba.fastjson.PropertyNamingStrategy",
303:       "com.alibaba.fastjson.util.RyuFloat",
304:       "com.alibaba.fastjson.util.ParameterizedTypeImpl"
305:     );
306:   }
307: }

[MASTER] 11:05:00.545 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
JSONObject jSONObject0 = new JSONObject();
Class<Object> class0 = Object.class;
ParserConfig parserConfig0 = new ParserConfig();
HashMap<AbstractMap.SimpleImmutableEntry, Integer> hashMap0 = jSONObject0.toJavaObject((Class<HashMap<AbstractMap.SimpleImmutableEntry, Integer>>) class0, parserConfig0, 16);
assertSame(jSONObject0, hashMap0);


[MASTER] 11:05:00.570 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_55_1590138300546/com/alibaba/fastjson/JSONObject_55_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_55_1590138300546/com/alibaba/fastjson/JSONObject_55_tmp__ESTest_scaffolding.java]]
[MASTER] 11:05:00.570 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:05:00.570 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:05:00.570 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<com.alibaba.fastjson.JSONArray> cannot be converted to java.lang.Class<java.util.HashMap<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Integer>>: 30
[MASTER] 11:05:00.571 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_55_1590138300546/com/alibaba/fastjson/JSONObject_55_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 09:05:00 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.JSONArray;
12: import com.alibaba.fastjson.JSONObject;
13: import com.alibaba.fastjson.parser.ParserConfig;
14: import java.util.AbstractMap;
15: import java.util.HashMap;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class JSONObject_55_tmp__ESTest extends JSONObject_55_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       JSONObject jSONObject0 = new JSONObject();
26:       ParserConfig parserConfig0 = new ParserConfig();
27:       Class<JSONArray> class0 = JSONArray.class;
28:       // Undeclared exception!
29:       try { 
30:         jSONObject0.toJavaObject((Class<HashMap<AbstractMap.SimpleImmutableEntry, Integer>>) class0, parserConfig0, (-992));
31:         fail("Expecting exception: RuntimeException");
32:       
33:       } catch(RuntimeException e) {
34:          //
35:          // can not get javaBeanDeserializer. com.alibaba.fastjson.JSONArray
36:          //
37:          verifyException("com.alibaba.fastjson.util.TypeUtils", e);
38:       }
39:   }
40: }
RegularFileObject[/tmp/EvoSuite_55_1590138300546/com/alibaba/fastjson/JSONObject_55_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 09:05:00 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSONObject_55_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSONObject"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
76:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSONObject_55_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.util.ASMUtils",
84:       "com.alibaba.fastjson.JSONPath",
85:       "com.alibaba.fastjson.parser.JSONScanner",
86:       "com.alibaba.fastjson.parser.JSONLexerBase",
87:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
88:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
89:       "com.alibaba.fastjson.serializer.JSONSerializable",
90:       "com.alibaba.fastjson.serializer.SerializeWriter",
91:       "com.alibaba.fastjson.serializer.ReferenceCodec",
92:       "com.alibaba.fastjson.JSONException",
93:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
94:       "com.alibaba.fastjson.serializer.ToStringSerializer",
95:       "com.alibaba.fastjson.serializer.SerialContext",
96:       "com.alibaba.fastjson.serializer.AfterFilter",
97:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
98:       "com.alibaba.fastjson.TypeReference",
99:       "com.alibaba.fastjson.serializer.ObjectSerializer",
100:       "com.alibaba.fastjson.serializer.MapSerializer",
101:       "com.alibaba.fastjson.asm.Item",
102:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
103:       "com.alibaba.fastjson.serializer.DateCodec",
104:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
105:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
106:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
107:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
108:       "com.alibaba.fastjson.util.FieldInfo",
109:       "com.alibaba.fastjson.serializer.PropertyFilter",
110:       "com.alibaba.fastjson.annotation.JSONField",
111:       "com.alibaba.fastjson.parser.SymbolTable",
112:       "com.alibaba.fastjson.serializer.NameFilter",
113:       "com.alibaba.fastjson.serializer.ListSerializer",
114:       "com.alibaba.fastjson.JSONArray",
115:       "com.alibaba.fastjson.JSONAware",
116:       "com.alibaba.fastjson.serializer.LongCodec",
117:       "com.alibaba.fastjson.util.ASMClassLoader",
118:       "com.alibaba.fastjson.PropertyNamingStrategy",
119:       "com.alibaba.fastjson.parser.JSONToken",
120:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
121:       "com.alibaba.fastjson.serializer.AppendableSerializer",
122:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
123:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
124:       "com.alibaba.fastjson.serializer.ContextValueFilter",
125:       "com.alibaba.fastjson.util.ServiceLoader",
126:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
127:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
128:       "com.alibaba.fastjson.parser.DefaultJSONParser",
129:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
130:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
131:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
132:       "com.alibaba.fastjson.serializer.BeanContext",
133:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
134:       "com.alibaba.fastjson.util.IdentityHashMap",
135:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
136:       "com.alibaba.fastjson.JSON",
137:       "com.alibaba.fastjson.serializer.StringCodec",
138:       "com.alibaba.fastjson.serializer.SerializeFilterable",
139:       "com.alibaba.fastjson.JSONWriter",
140:       "com.alibaba.fastjson.asm.Opcodes",
141:       "com.alibaba.fastjson.JSONReader",
142:       "com.alibaba.fastjson.JSONStreamAware",
143:       "com.alibaba.fastjson.asm.MethodWriter",
144:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
145:       "com.alibaba.fastjson.serializer.SerializerFeature",
146:       "com.alibaba.fastjson.serializer.CalendarCodec",
147:       "com.alibaba.fastjson.util.IOUtils",
148:       "com.alibaba.fastjson.util.TypeUtils",
149:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
150:       "com.alibaba.fastjson.spi.Module",
151:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
152:       "com.alibaba.fastjson.serializer.MiscCodec",
153:       "com.alibaba.fastjson.util.IOUtils$1",
154:       "com.alibaba.fastjson.serializer.IntegerCodec",
155:       "com.alibaba.fastjson.serializer.SerializeFilter",
156:       "com.alibaba.fastjson.JSONPObject",
157:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
158:       "com.alibaba.fastjson.serializer.BeforeFilter",
159:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
160:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
161:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
162:       "com.alibaba.fastjson.JSONObject",
163:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
164:       "com.alibaba.fastjson.serializer.CharacterCodec",
165:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
166:       "com.alibaba.fastjson.asm.ByteVector",
167:       "com.alibaba.fastjson.parser.JSONLexer",
168:       "com.alibaba.fastjson.util.ASMClassLoader$1",
169:       "com.alibaba.fastjson.asm.Label",
170:       "com.alibaba.fastjson.asm.FieldWriter",
171:       "com.alibaba.fastjson.serializer.JSONSerializer",
172:       "com.alibaba.fastjson.util.JavaBeanInfo",
173:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
174:       "com.alibaba.fastjson.serializer.SerializeConfig",
175:       "com.alibaba.fastjson.serializer.AtomicCodec",
176:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
177:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
178:       "com.alibaba.fastjson.asm.Type",
179:       "com.alibaba.fastjson.serializer.FieldSerializer",
180:       "com.alibaba.fastjson.serializer.FloatCodec",
181:       "com.alibaba.fastjson.parser.JSONReaderScanner",
182:       "com.alibaba.fastjson.serializer.ValueFilter",
183:       "com.alibaba.fastjson.JSONPathException",
184:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
185:       "com.alibaba.fastjson.serializer.Labels",
186:       "com.alibaba.fastjson.serializer.CollectionCodec",
187:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
188:       "com.alibaba.fastjson.serializer.CharArrayCodec",
189:       "com.alibaba.fastjson.asm.MethodVisitor",
190:       "com.alibaba.fastjson.annotation.JSONCreator",
191:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
192:       "com.alibaba.fastjson.serializer.LabelFilter",
193:       "com.alibaba.fastjson.annotation.JSONType",
194:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
195:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
196:       "com.alibaba.fastjson.serializer.DoubleSerializer",
197:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
198:       "com.alibaba.fastjson.serializer.BooleanCodec",
199:       "com.alibaba.fastjson.parser.Feature",
200:       "com.alibaba.fastjson.parser.ParserConfig",
201:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
202:       "com.alibaba.fastjson.parser.ParseContext"
203:     );
204:   } 
205: 
206:   private static void resetClasses() {
207:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSONObject_55_tmp__ESTest_scaffolding.class.getClassLoader()); 
208: 
209:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
210:       "com.alibaba.fastjson.parser.Feature",
211:       "com.alibaba.fastjson.serializer.SerializerFeature",
212:       "com.alibaba.fastjson.util.IOUtils$1",
213:       "com.alibaba.fastjson.util.IOUtils",
214:       "com.alibaba.fastjson.JSON",
215:       "com.alibaba.fastjson.JSONObject",
216:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
217:       "com.alibaba.fastjson.util.IdentityHashMap",
218:       "com.alibaba.fastjson.util.ASMUtils",
219:       "com.alibaba.fastjson.parser.SymbolTable",
220:       "com.alibaba.fastjson.util.TypeUtils",
221:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
222:       "com.alibaba.fastjson.util.ASMClassLoader$1",
223:       "com.alibaba.fastjson.util.ASMClassLoader",
224:       "com.alibaba.fastjson.serializer.MiscCodec",
225:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
226:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
227:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
228:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
229:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
230:       "com.alibaba.fastjson.serializer.DateCodec",
231:       "com.alibaba.fastjson.serializer.CalendarCodec",
232:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
233:       "com.alibaba.fastjson.serializer.CollectionCodec",
234:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
235:       "com.alibaba.fastjson.serializer.StringCodec",
236:       "com.alibaba.fastjson.serializer.CharacterCodec",
237:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
238:       "com.alibaba.fastjson.serializer.IntegerCodec",
239:       "com.alibaba.fastjson.serializer.LongCodec",
240:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
241:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
242:       "com.alibaba.fastjson.serializer.FloatCodec",
243:       "com.alibaba.fastjson.serializer.BooleanCodec",
244:       "com.alibaba.fastjson.serializer.CharArrayCodec",
245:       "com.alibaba.fastjson.serializer.ReferenceCodec",
246:       "com.alibaba.fastjson.serializer.AtomicCodec",
247:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
248:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
249:       "com.alibaba.fastjson.parser.ParserConfig",
250:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
251:       "com.alibaba.fastjson.serializer.DoubleSerializer",
252:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
253:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
254:       "com.alibaba.fastjson.serializer.AppendableSerializer",
255:       "com.alibaba.fastjson.serializer.ToStringSerializer",
256:       "com.alibaba.fastjson.serializer.SerializeConfig",
257:       "com.alibaba.fastjson.parser.DefaultJSONParser",
258:       "com.alibaba.fastjson.parser.JSONLexerBase",
259:       "com.alibaba.fastjson.parser.JSONScanner",
260:       "com.alibaba.fastjson.parser.ParseContext",
261:       "com.alibaba.fastjson.serializer.SerializeWriter",
262:       "com.alibaba.fastjson.util.ServiceLoader",
263:       "com.alibaba.fastjson.util.JavaBeanInfo",
264:       "com.alibaba.fastjson.asm.ClassWriter",
265:       "com.alibaba.fastjson.asm.ByteVector",
266:       "com.alibaba.fastjson.asm.Item",
267:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
268:       "com.alibaba.fastjson.asm.MethodWriter",
269:       "com.alibaba.fastjson.asm.Label",
270:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
271:       "com.alibaba.fastjson.parser.JSONToken",
272:       "com.alibaba.fastjson.JSONException",
273:       "com.alibaba.fastjson.serializer.SerializeFilterable",
274:       "com.alibaba.fastjson.serializer.JSONSerializer",
275:       "com.alibaba.fastjson.serializer.MapSerializer",
276:       "com.alibaba.fastjson.serializer.SerialContext",
277:       "com.alibaba.fastjson.JSONArray",
278:       "com.alibaba.fastjson.asm.ClassReader",
279:       "com.alibaba.fastjson.asm.TypeCollector$1",
280:       "com.alibaba.fastjson.asm.TypeCollector",
281:       "com.alibaba.fastjson.asm.Type",
282:       "com.alibaba.fastjson.asm.MethodCollector",
283:       "com.alibaba.fastjson.util.FieldInfo",
284:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
285:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
286:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
287:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
288:       "com.alibaba.fastjson.asm.FieldWriter",
289:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
290:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
291:       "com.alibaba.fastjson.serializer.FieldSerializer",
292:       "com.alibaba.fastjson.serializer.BeanContext",
293:       "com.alibaba.fastjson.parser.JSONReaderScanner",
294:       "com.alibaba.fastjson.util.UTF8Decoder",
295:       "com.alibaba.fastjson.TypeReference$1",
296:       "com.alibaba.fastjson.TypeReference",
297:       "com.alibaba.fastjson.serializer.ArraySerializer",
298:       "com.alibaba.fastjson.serializer.PascalNameFilter",
299:       "com.alibaba.fastjson.serializer.ListSerializer",
300:       "com.alibaba.fastjson.serializer.EnumSerializer",
301:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
302:       "com.alibaba.fastjson.PropertyNamingStrategy",
303:       "com.alibaba.fastjson.util.RyuFloat",
304:       "com.alibaba.fastjson.util.ParameterizedTypeImpl"
305:     );
306:   }
307: }

[MASTER] 11:05:00.571 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
JSONObject jSONObject0 = new JSONObject();
ParserConfig parserConfig0 = new ParserConfig();
Class<JSONArray> class0 = JSONArray.class;
jSONObject0.toJavaObject((Class<HashMap<AbstractMap.SimpleImmutableEntry, Integer>>) class0, parserConfig0, (-992));

[MASTER] 11:05:01.327 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_74_1590138301304/com/alibaba/fastjson/JSONObject_74_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_74_1590138301304/com/alibaba/fastjson/JSONObject_74_tmp__ESTest_scaffolding.java]]
[MASTER] 11:05:01.327 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:05:01.327 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:05:01.328 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.io.InputStream> cannot be converted to java.lang.Class<java.util.HashMap<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Integer>>: 27
[MASTER] 11:05:01.328 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_74_1590138301304/com/alibaba/fastjson/JSONObject_74_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 09:05:01 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.JSONObject;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import java.io.InputStream;
13: import java.util.AbstractMap;
14: import java.util.HashMap;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class JSONObject_74_tmp__ESTest extends JSONObject_74_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       JSONObject jSONObject0 = new JSONObject();
25:       Class<InputStream> class0 = InputStream.class;
26:       ParserConfig parserConfig0 = ParserConfig.global;
27:       HashMap<AbstractMap.SimpleImmutableEntry, Integer> hashMap0 = jSONObject0.toJavaObject((Class<HashMap<AbstractMap.SimpleImmutableEntry, Integer>>) class0, parserConfig0, 3);
28:       assertNull(hashMap0);
29:   }
30: }
RegularFileObject[/tmp/EvoSuite_74_1590138301304/com/alibaba/fastjson/JSONObject_74_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 09:05:01 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSONObject_74_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSONObject"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
76:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSONObject_74_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.util.ASMUtils",
84:       "com.alibaba.fastjson.JSONPath",
85:       "com.alibaba.fastjson.parser.JSONScanner",
86:       "com.alibaba.fastjson.parser.JSONLexerBase",
87:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
88:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
89:       "com.alibaba.fastjson.serializer.JSONSerializable",
90:       "com.alibaba.fastjson.serializer.SerializeWriter",
91:       "com.alibaba.fastjson.serializer.ReferenceCodec",
92:       "com.alibaba.fastjson.JSONException",
93:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
94:       "com.alibaba.fastjson.serializer.ToStringSerializer",
95:       "com.alibaba.fastjson.serializer.SerialContext",
96:       "com.alibaba.fastjson.serializer.AfterFilter",
97:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
98:       "com.alibaba.fastjson.TypeReference",
99:       "com.alibaba.fastjson.serializer.ObjectSerializer",
100:       "com.alibaba.fastjson.serializer.MapSerializer",
101:       "com.alibaba.fastjson.asm.Item",
102:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
103:       "com.alibaba.fastjson.serializer.DateCodec",
104:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
105:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
106:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
107:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
108:       "com.alibaba.fastjson.util.FieldInfo",
109:       "com.alibaba.fastjson.serializer.PropertyFilter",
110:       "com.alibaba.fastjson.annotation.JSONField",
111:       "com.alibaba.fastjson.parser.SymbolTable",
112:       "com.alibaba.fastjson.serializer.NameFilter",
113:       "com.alibaba.fastjson.serializer.ListSerializer",
114:       "com.alibaba.fastjson.JSONArray",
115:       "com.alibaba.fastjson.JSONAware",
116:       "com.alibaba.fastjson.serializer.LongCodec",
117:       "com.alibaba.fastjson.util.ASMClassLoader",
118:       "com.alibaba.fastjson.PropertyNamingStrategy",
119:       "com.alibaba.fastjson.parser.JSONToken",
120:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
121:       "com.alibaba.fastjson.serializer.AppendableSerializer",
122:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
123:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
124:       "com.alibaba.fastjson.serializer.ContextValueFilter",
125:       "com.alibaba.fastjson.util.ServiceLoader",
126:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
127:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
128:       "com.alibaba.fastjson.parser.DefaultJSONParser",
129:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
130:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
131:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
132:       "com.alibaba.fastjson.serializer.BeanContext",
133:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
134:       "com.alibaba.fastjson.util.IdentityHashMap",
135:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
136:       "com.alibaba.fastjson.JSON",
137:       "com.alibaba.fastjson.serializer.StringCodec",
138:       "com.alibaba.fastjson.serializer.SerializeFilterable",
139:       "com.alibaba.fastjson.JSONWriter",
140:       "com.alibaba.fastjson.asm.Opcodes",
141:       "com.alibaba.fastjson.JSONReader",
142:       "com.alibaba.fastjson.JSONStreamAware",
143:       "com.alibaba.fastjson.asm.MethodWriter",
144:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
145:       "com.alibaba.fastjson.serializer.SerializerFeature",
146:       "com.alibaba.fastjson.serializer.CalendarCodec",
147:       "com.alibaba.fastjson.util.IOUtils",
148:       "com.alibaba.fastjson.util.TypeUtils",
149:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
150:       "com.alibaba.fastjson.spi.Module",
151:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
152:       "com.alibaba.fastjson.serializer.MiscCodec",
153:       "com.alibaba.fastjson.util.IOUtils$1",
154:       "com.alibaba.fastjson.serializer.IntegerCodec",
155:       "com.alibaba.fastjson.serializer.SerializeFilter",
156:       "com.alibaba.fastjson.JSONPObject",
157:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
158:       "com.alibaba.fastjson.serializer.BeforeFilter",
159:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
160:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
161:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
162:       "com.alibaba.fastjson.JSONObject",
163:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
164:       "com.alibaba.fastjson.serializer.CharacterCodec",
165:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
166:       "com.alibaba.fastjson.asm.ByteVector",
167:       "com.alibaba.fastjson.parser.JSONLexer",
168:       "com.alibaba.fastjson.util.ASMClassLoader$1",
169:       "com.alibaba.fastjson.asm.Label",
170:       "com.alibaba.fastjson.asm.FieldWriter",
171:       "com.alibaba.fastjson.serializer.JSONSerializer",
172:       "com.alibaba.fastjson.util.JavaBeanInfo",
173:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
174:       "com.alibaba.fastjson.serializer.SerializeConfig",
175:       "com.alibaba.fastjson.serializer.AtomicCodec",
176:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
177:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
178:       "com.alibaba.fastjson.asm.Type",
179:       "com.alibaba.fastjson.serializer.FieldSerializer",
180:       "com.alibaba.fastjson.serializer.FloatCodec",
181:       "com.alibaba.fastjson.parser.JSONReaderScanner",
182:       "com.alibaba.fastjson.serializer.ValueFilter",
183:       "com.alibaba.fastjson.JSONPathException",
184:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
185:       "com.alibaba.fastjson.serializer.Labels",
186:       "com.alibaba.fastjson.serializer.CollectionCodec",
187:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
188:       "com.alibaba.fastjson.serializer.CharArrayCodec",
189:       "com.alibaba.fastjson.asm.MethodVisitor",
190:       "com.alibaba.fastjson.annotation.JSONCreator",
191:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
192:       "com.alibaba.fastjson.serializer.LabelFilter",
193:       "com.alibaba.fastjson.annotation.JSONType",
194:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
195:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
196:       "com.alibaba.fastjson.serializer.DoubleSerializer",
197:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
198:       "com.alibaba.fastjson.serializer.BooleanCodec",
199:       "com.alibaba.fastjson.parser.Feature",
200:       "com.alibaba.fastjson.parser.ParserConfig",
201:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
202:       "com.alibaba.fastjson.parser.ParseContext"
203:     );
204:   } 
205: 
206:   private static void resetClasses() {
207:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSONObject_74_tmp__ESTest_scaffolding.class.getClassLoader()); 
208: 
209:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
210:       "com.alibaba.fastjson.parser.Feature",
211:       "com.alibaba.fastjson.serializer.SerializerFeature",
212:       "com.alibaba.fastjson.util.IOUtils$1",
213:       "com.alibaba.fastjson.util.IOUtils",
214:       "com.alibaba.fastjson.JSON",
215:       "com.alibaba.fastjson.JSONObject",
216:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
217:       "com.alibaba.fastjson.util.IdentityHashMap",
218:       "com.alibaba.fastjson.util.ASMUtils",
219:       "com.alibaba.fastjson.parser.SymbolTable",
220:       "com.alibaba.fastjson.util.TypeUtils",
221:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
222:       "com.alibaba.fastjson.util.ASMClassLoader$1",
223:       "com.alibaba.fastjson.util.ASMClassLoader",
224:       "com.alibaba.fastjson.serializer.MiscCodec",
225:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
226:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
227:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
228:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
229:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
230:       "com.alibaba.fastjson.serializer.DateCodec",
231:       "com.alibaba.fastjson.serializer.CalendarCodec",
232:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
233:       "com.alibaba.fastjson.serializer.CollectionCodec",
234:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
235:       "com.alibaba.fastjson.serializer.StringCodec",
236:       "com.alibaba.fastjson.serializer.CharacterCodec",
237:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
238:       "com.alibaba.fastjson.serializer.IntegerCodec",
239:       "com.alibaba.fastjson.serializer.LongCodec",
240:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
241:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
242:       "com.alibaba.fastjson.serializer.FloatCodec",
243:       "com.alibaba.fastjson.serializer.BooleanCodec",
244:       "com.alibaba.fastjson.serializer.CharArrayCodec",
245:       "com.alibaba.fastjson.serializer.ReferenceCodec",
246:       "com.alibaba.fastjson.serializer.AtomicCodec",
247:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
248:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
249:       "com.alibaba.fastjson.parser.ParserConfig",
250:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
251:       "com.alibaba.fastjson.serializer.DoubleSerializer",
252:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
253:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
254:       "com.alibaba.fastjson.serializer.AppendableSerializer",
255:       "com.alibaba.fastjson.serializer.ToStringSerializer",
256:       "com.alibaba.fastjson.serializer.SerializeConfig",
257:       "com.alibaba.fastjson.parser.DefaultJSONParser",
258:       "com.alibaba.fastjson.parser.JSONLexerBase",
259:       "com.alibaba.fastjson.parser.JSONScanner",
260:       "com.alibaba.fastjson.parser.ParseContext",
261:       "com.alibaba.fastjson.serializer.SerializeWriter",
262:       "com.alibaba.fastjson.util.ServiceLoader",
263:       "com.alibaba.fastjson.util.JavaBeanInfo",
264:       "com.alibaba.fastjson.asm.ClassWriter",
265:       "com.alibaba.fastjson.asm.ByteVector",
266:       "com.alibaba.fastjson.asm.Item",
267:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
268:       "com.alibaba.fastjson.asm.MethodWriter",
269:       "com.alibaba.fastjson.asm.Label",
270:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
271:       "com.alibaba.fastjson.parser.JSONToken",
272:       "com.alibaba.fastjson.JSONException",
273:       "com.alibaba.fastjson.serializer.SerializeFilterable",
274:       "com.alibaba.fastjson.serializer.JSONSerializer",
275:       "com.alibaba.fastjson.serializer.MapSerializer",
276:       "com.alibaba.fastjson.serializer.SerialContext",
277:       "com.alibaba.fastjson.JSONArray",
278:       "com.alibaba.fastjson.asm.ClassReader",
279:       "com.alibaba.fastjson.asm.TypeCollector$1",
280:       "com.alibaba.fastjson.asm.TypeCollector",
281:       "com.alibaba.fastjson.asm.Type",
282:       "com.alibaba.fastjson.asm.MethodCollector",
283:       "com.alibaba.fastjson.util.FieldInfo",
284:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
285:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
286:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
287:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
288:       "com.alibaba.fastjson.asm.FieldWriter",
289:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
290:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
291:       "com.alibaba.fastjson.serializer.FieldSerializer",
292:       "com.alibaba.fastjson.serializer.BeanContext",
293:       "com.alibaba.fastjson.parser.JSONReaderScanner",
294:       "com.alibaba.fastjson.util.UTF8Decoder",
295:       "com.alibaba.fastjson.TypeReference$1",
296:       "com.alibaba.fastjson.TypeReference",
297:       "com.alibaba.fastjson.serializer.ArraySerializer",
298:       "com.alibaba.fastjson.serializer.PascalNameFilter",
299:       "com.alibaba.fastjson.serializer.ListSerializer",
300:       "com.alibaba.fastjson.serializer.EnumSerializer",
301:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
302:       "com.alibaba.fastjson.PropertyNamingStrategy",
303:       "com.alibaba.fastjson.util.RyuFloat",
304:       "com.alibaba.fastjson.util.ParameterizedTypeImpl"
305:     );
306:   }
307: }

[MASTER] 11:05:01.328 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
JSONObject jSONObject0 = new JSONObject();
Class<InputStream> class0 = InputStream.class;
ParserConfig parserConfig0 = ParserConfig.global;
HashMap<AbstractMap.SimpleImmutableEntry, Integer> hashMap0 = jSONObject0.toJavaObject((Class<HashMap<AbstractMap.SimpleImmutableEntry, Integer>>) class0, parserConfig0, 3);
assertNull(hashMap0);


* Resulting test suite's mutation score: 24%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 11
* Writing tests to file
* Writing JUnit test case 'JSONObject_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* Writing tests to file
* Writing JUnit test case 'JSONReaderScanner_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONReader
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSON
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONArray
* Starting Client-0
* Connecting to master process on port 12808
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 12811
* Connecting to master process on port 12813
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:06:56.753 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 11:06:56.755 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
[MASTER] 11:06:56.872 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 11:06:56.873 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONArray
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 740
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 232 / 740
[MASTER] 11:06:57.809 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 11:06:57.809 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Total number of test goals for DYNAMOSA: 1055
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 674 / 1055
[MASTER] 11:06:58.097 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 11:06:58.097 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSON
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2080
* Using seed 7
* Starting evolution
[MASTER] 11:06:58.870 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
* Initial Number of Goals in DynaMOSA = 747 / 2080
[MASTER] 11:06:58.973 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 11:06:58.975 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 11:06:58.992 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Enum<E> : Type points to itself
[MASTER] 11:06:58.993 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 11:06:58.993 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 11:07:07.125 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 11:07:09.752 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 11:07:16.134 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 11:07:20.923 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 11:07:34.893 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 63s and 11 generations, 5605 statements, best individual has fitness: 431.0
* Minimizing test suite
* Search finished after 64s and 32 generations, 8863 statements, best individual has fitness: 355.0
* Search finished after 63s and 73 generations, 47903 statements, best individual has fitness: 614.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 55%
* Total number of goals: 157
* Number of covered goals: 86
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 42%
* Total number of goals: 115
* Number of covered goals: 48
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Coverage analysis for criterion WEAKMUTATION
* Minimizing test suite
* Coverage of criterion WEAKMUTATION: 36%
* Total number of goals: 266
* Number of covered goals: 97
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 41%
* Total number of goals: 37
* Number of covered goals: 15
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 96%
* Total number of goals: 25
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 80%
* Total number of goals: 25
* Number of covered goals: 20
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 42%
* Total number of goals: 115
* Number of covered goals: 48
* Generated 44 tests with total length 204
* Resulting test suite's coverage: 56% (average coverage for all fitness functions)
* Generating assertions
* Minimizing test suite
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 79%
* Total number of goals: 173
* Number of covered goals: 136
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 73%
* Total number of goals: 101
* Number of covered goals: 74
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 99%
* Total number of goals: 87
* Number of covered goals: 86
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 325
* Number of covered goals: 282
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 219
* Number of covered goals: 72
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 94%
* Total number of goals: 68
* Number of covered goals: 64
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 78%
* Total number of goals: 68
* Number of covered goals: 53
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 72%
* Total number of goals: 101
* Number of covered goals: 73
* Generated 145 tests with total length 372
* Resulting test suite's coverage: 72% (average coverage for all fitness functions)
* Generating assertions
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 80%
* Total number of goals: 435
* Number of covered goals: 347
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 78%
* Total number of goals: 283
* Number of covered goals: 221
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 99%
* Total number of goals: 94
* Number of covered goals: 93
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 75%
* Total number of goals: 716
* Number of covered goals: 535
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 38%
* Total number of goals: 197
* Number of covered goals: 74
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 83
* Number of covered goals: 76
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 78%
* Total number of goals: 83
* Number of covered goals: 65
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 283
* Number of covered goals: 206
* Generated 209 tests with total length 936
* Resulting test suite's coverage: 72% (average coverage for all fitness functions)
* Generating assertions
* Writing tests to file
* Writing JUnit test case 'JSONReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 47%
* Compiling and checking tests
* Resulting test suite's mutation score: 29%
* Compiling and checking tests
[MASTER] 11:08:42.702 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_42_1590138522679/com/alibaba/fastjson/JSON_42_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_42_1590138522679/com/alibaba/fastjson/JSON_42_tmp__ESTest_scaffolding.java]]
[MASTER] 11:08:42.702 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:08:42.702 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:08:42.705 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.lang.String> cannot be converted to java.lang.Class<java.util.AbstractMap.SimpleImmutableEntry<com.alibaba.fastjson.serializer.SimplePropertyPreFilter,java.lang.Enum>>: 24
[MASTER] 11:08:42.706 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_42_1590138522679/com/alibaba/fastjson/JSON_42_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 09:08:42 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.JSON;
11: import com.alibaba.fastjson.parser.Feature;
12: import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
13: import java.util.AbstractMap;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class JSON_42_tmp__ESTest extends JSON_42_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Class<String> class0 = String.class;
24:       AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum> abstractMap_SimpleImmutableEntry0 = JSON.parseObject((String) null, (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) class0, (Feature[]) null);
25:       assertNull(abstractMap_SimpleImmutableEntry0);
26:   }
27: }
RegularFileObject[/tmp/EvoSuite_42_1590138522679/com/alibaba/fastjson/JSON_42_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 09:08:42 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSON_42_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSON"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
76:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSON_42_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.util.ASMUtils",
84:       "com.alibaba.fastjson.JSONPath",
85:       "com.alibaba.fastjson.parser.JSONScanner",
86:       "com.alibaba.fastjson.parser.JSONLexerBase",
87:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
88:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
89:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
90:       "com.alibaba.fastjson.serializer.JSONSerializable",
91:       "com.alibaba.fastjson.serializer.SerializeWriter",
92:       "com.alibaba.fastjson.serializer.ReferenceCodec",
93:       "com.alibaba.fastjson.JSONException",
94:       "com.alibaba.fastjson.asm.TypeCollector$1",
95:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
96:       "com.alibaba.fastjson.serializer.ToStringSerializer",
97:       "com.alibaba.fastjson.serializer.SerialContext",
98:       "com.alibaba.fastjson.JSONPath$FilterGroup",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.JSONValidator$Type",
103:       "com.alibaba.fastjson.serializer.ObjectSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.serializer.MapSerializer",
106:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
107:       "com.alibaba.fastjson.serializer.DateCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.JSONPath$Filter",
114:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
115:       "com.alibaba.fastjson.util.FieldInfo",
116:       "com.alibaba.fastjson.JSONValidator$UTF16Validator",
117:       "com.alibaba.fastjson.annotation.JSONField",
118:       "com.alibaba.fastjson.serializer.PropertyFilter",
119:       "com.alibaba.fastjson.parser.SymbolTable",
120:       "com.alibaba.fastjson.serializer.NameFilter",
121:       "com.alibaba.fastjson.serializer.ListSerializer",
122:       "com.alibaba.fastjson.JSONArray",
123:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
124:       "com.alibaba.fastjson.JSONAware",
125:       "com.alibaba.fastjson.serializer.LongCodec",
126:       "com.alibaba.fastjson.serializer.EnumSerializer",
127:       "com.alibaba.fastjson.util.ASMClassLoader",
128:       "com.alibaba.fastjson.PropertyNamingStrategy",
129:       "com.alibaba.fastjson.parser.JSONToken",
130:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
131:       "com.alibaba.fastjson.serializer.AppendableSerializer",
132:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
133:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
134:       "com.alibaba.fastjson.serializer.ContextValueFilter",
135:       "com.alibaba.fastjson.util.ServiceLoader",
136:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
137:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
138:       "com.alibaba.fastjson.JSONPath$FilterSegment",
139:       "com.alibaba.fastjson.parser.DefaultJSONParser",
140:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
141:       "com.alibaba.fastjson.JSONValidator$ReaderValidator",
142:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
143:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
144:       "com.alibaba.fastjson.serializer.BeanContext",
145:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
146:       "com.alibaba.fastjson.util.IdentityHashMap",
147:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
148:       "com.alibaba.fastjson.JSON",
149:       "com.alibaba.fastjson.serializer.StringCodec",
150:       "com.alibaba.fastjson.serializer.SerializeFilterable",
151:       "com.alibaba.fastjson.JSONWriter",
152:       "com.alibaba.fastjson.asm.Opcodes",
153:       "com.alibaba.fastjson.JSONReader",
154:       "com.alibaba.fastjson.JSONStreamAware",
155:       "com.alibaba.fastjson.asm.MethodWriter",
156:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
157:       "com.alibaba.fastjson.serializer.SerializerFeature",
158:       "com.alibaba.fastjson.JSONPath$Operator",
159:       "com.alibaba.fastjson.TypeReference$1",
160:       "com.alibaba.fastjson.serializer.CalendarCodec",
161:       "com.alibaba.fastjson.util.IOUtils",
162:       "com.alibaba.fastjson.util.TypeUtils",
163:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
164:       "com.alibaba.fastjson.asm.ClassReader",
165:       "com.alibaba.fastjson.JSONPath$Segment",
166:       "com.alibaba.fastjson.spi.Module",
167:       "com.alibaba.fastjson.JSONValidator",
168:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
169:       "com.alibaba.fastjson.serializer.MiscCodec",
170:       "com.alibaba.fastjson.util.IOUtils$1",
171:       "com.alibaba.fastjson.serializer.IntegerCodec",
172:       "com.alibaba.fastjson.serializer.SerializeFilter",
173:       "com.alibaba.fastjson.JSONPObject",
174:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
175:       "com.alibaba.fastjson.serializer.PascalNameFilter",
176:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
177:       "com.alibaba.fastjson.serializer.BeforeFilter",
178:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
179:       "com.alibaba.fastjson.serializer.ArraySerializer",
180:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
181:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
182:       "com.alibaba.fastjson.JSONObject",
183:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
184:       "com.alibaba.fastjson.serializer.CharacterCodec",
185:       "com.alibaba.fastjson.asm.TypeCollector",
186:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
187:       "com.alibaba.fastjson.asm.ByteVector",
188:       "com.alibaba.fastjson.parser.JSONLexer",
189:       "com.alibaba.fastjson.util.ASMClassLoader$1",
190:       "com.alibaba.fastjson.asm.Label",
191:       "com.alibaba.fastjson.JSONValidator$UTF8Validator",
192:       "com.alibaba.fastjson.asm.FieldWriter",
193:       "com.alibaba.fastjson.serializer.JSONSerializer",
194:       "com.alibaba.fastjson.util.JavaBeanInfo",
195:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
196:       "com.alibaba.fastjson.serializer.SerializeConfig",
197:       "com.alibaba.fastjson.serializer.AtomicCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
199:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
200:       "com.alibaba.fastjson.asm.Type",
201:       "com.alibaba.fastjson.serializer.FieldSerializer",
202:       "com.alibaba.fastjson.serializer.FloatCodec",
203:       "com.alibaba.fastjson.parser.JSONReaderScanner",
204:       "com.alibaba.fastjson.serializer.ValueFilter",
205:       "com.alibaba.fastjson.JSONPathException",
206:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
207:       "com.alibaba.fastjson.serializer.Labels",
208:       "com.alibaba.fastjson.serializer.CollectionCodec",
209:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
210:       "com.alibaba.fastjson.serializer.CharArrayCodec",
211:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
212:       "com.alibaba.fastjson.asm.MethodVisitor",
213:       "com.alibaba.fastjson.annotation.JSONCreator",
214:       "com.alibaba.fastjson.asm.MethodCollector",
215:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
216:       "com.alibaba.fastjson.annotation.JSONType",
217:       "com.alibaba.fastjson.serializer.LabelFilter",
218:       "com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator",
219:       "com.alibaba.fastjson.util.UTF8Decoder",
220:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
221:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
222:       "com.alibaba.fastjson.serializer.DoubleSerializer",
223:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
224:       "com.alibaba.fastjson.serializer.BooleanCodec",
225:       "com.alibaba.fastjson.parser.Feature",
226:       "com.alibaba.fastjson.parser.ParserConfig",
227:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
228:       "com.alibaba.fastjson.parser.ParseContext"
229:     );
230:   } 
231: 
232:   private static void resetClasses() {
233:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSON_42_tmp__ESTest_scaffolding.class.getClassLoader()); 
234: 
235:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
236:       "com.alibaba.fastjson.parser.Feature",
237:       "com.alibaba.fastjson.serializer.SerializerFeature",
238:       "com.alibaba.fastjson.util.IOUtils$1",
239:       "com.alibaba.fastjson.util.IOUtils",
240:       "com.alibaba.fastjson.JSON",
241:       "com.alibaba.fastjson.util.IdentityHashMap",
242:       "com.alibaba.fastjson.util.ASMUtils",
243:       "com.alibaba.fastjson.parser.SymbolTable",
244:       "com.alibaba.fastjson.util.TypeUtils",
245:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
246:       "com.alibaba.fastjson.util.ASMClassLoader$1",
247:       "com.alibaba.fastjson.util.ASMClassLoader",
248:       "com.alibaba.fastjson.serializer.MiscCodec",
249:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
250:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
251:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
252:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
253:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
254:       "com.alibaba.fastjson.serializer.DateCodec",
255:       "com.alibaba.fastjson.serializer.CalendarCodec",
256:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
257:       "com.alibaba.fastjson.serializer.CollectionCodec",
258:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
259:       "com.alibaba.fastjson.serializer.StringCodec",
260:       "com.alibaba.fastjson.serializer.CharacterCodec",
261:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
262:       "com.alibaba.fastjson.serializer.IntegerCodec",
263:       "com.alibaba.fastjson.serializer.LongCodec",
264:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
265:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
266:       "com.alibaba.fastjson.serializer.FloatCodec",
267:       "com.alibaba.fastjson.serializer.BooleanCodec",
268:       "com.alibaba.fastjson.serializer.CharArrayCodec",
269:       "com.alibaba.fastjson.serializer.ReferenceCodec",
270:       "com.alibaba.fastjson.serializer.AtomicCodec",
271:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
272:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
273:       "com.alibaba.fastjson.parser.ParserConfig",
274:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
275:       "com.alibaba.fastjson.serializer.DoubleSerializer",
276:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
277:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
278:       "com.alibaba.fastjson.serializer.AppendableSerializer",
279:       "com.alibaba.fastjson.serializer.ToStringSerializer",
280:       "com.alibaba.fastjson.serializer.SerializeConfig",
281:       "com.alibaba.fastjson.JSONPObject",
282:       "com.alibaba.fastjson.serializer.SerializeFilterable",
283:       "com.alibaba.fastjson.serializer.JSONSerializer",
284:       "com.alibaba.fastjson.serializer.SerializeWriter",
285:       "com.alibaba.fastjson.util.ServiceLoader",
286:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
287:       "com.alibaba.fastjson.parser.DefaultJSONParser",
288:       "com.alibaba.fastjson.parser.JSONLexerBase",
289:       "com.alibaba.fastjson.parser.JSONScanner",
290:       "com.alibaba.fastjson.JSONObject",
291:       "com.alibaba.fastjson.JSONArray",
292:       "com.alibaba.fastjson.JSONException",
293:       "com.alibaba.fastjson.parser.JSONToken",
294:       "com.alibaba.fastjson.serializer.PascalNameFilter",
295:       "com.alibaba.fastjson.parser.ParseContext",
296:       "com.alibaba.fastjson.serializer.MapSerializer",
297:       "com.alibaba.fastjson.serializer.SerialContext",
298:       "com.alibaba.fastjson.serializer.ListSerializer",
299:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
300:       "com.alibaba.fastjson.asm.ClassWriter",
301:       "com.alibaba.fastjson.asm.ByteVector",
302:       "com.alibaba.fastjson.asm.Item",
303:       "com.alibaba.fastjson.asm.MethodWriter",
304:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
305:       "com.alibaba.fastjson.asm.Label",
306:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
307:       "com.alibaba.fastjson.util.FieldInfo",
308:       "com.alibaba.fastjson.asm.FieldWriter",
309:       "com.alibaba.fastjson.asm.Type",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
315:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
316:       "com.alibaba.fastjson.util.JavaBeanInfo",
317:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
318:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
321:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
322:       "com.alibaba.fastjson.asm.ClassReader",
323:       "com.alibaba.fastjson.asm.TypeCollector$1",
324:       "com.alibaba.fastjson.asm.TypeCollector",
325:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
326:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
327:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
328:       "com.alibaba.fastjson.serializer.ArraySerializer",
329:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
330:       "com.alibaba.fastjson.parser.JSONReaderScanner",
331:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
332:       "com.alibaba.fastjson.asm.MethodCollector",
333:       "com.alibaba.fastjson.serializer.EnumSerializer",
334:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
335:       "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec",
336:       "com.alibaba.fastjson.PropertyNamingStrategy",
337:       "com.alibaba.fastjson.JSONPath$Operator",
338:       "com.alibaba.fastjson.JSONValidator$Type"
339:     );
340:   }
341: }

[MASTER] 11:08:42.706 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Class<String> class0 = String.class;
AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum> abstractMap_SimpleImmutableEntry0 = JSON.parseObject((String) null, (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) class0, (Feature[]) null);
assertNull(abstractMap_SimpleImmutableEntry0);


[MASTER] 11:08:44.952 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_129_1590138524926/com/alibaba/fastjson/JSON_129_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_129_1590138524926/com/alibaba/fastjson/JSON_129_tmp__ESTest_scaffolding.java]]
[MASTER] 11:08:44.952 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:08:44.952 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:08:44.952 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<com.alibaba.fastjson.serializer.SimplePropertyPreFilter> cannot be converted to java.lang.Class<java.util.AbstractMap.SimpleImmutableEntry<com.alibaba.fastjson.serializer.SimplePropertyPreFilter,java.lang.Enum>>: 28
[MASTER] 11:08:44.953 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_129_1590138524926/com/alibaba/fastjson/JSON_129_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 09:08:44 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.JSON;
12: import com.alibaba.fastjson.parser.Feature;
13: import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
14: import java.util.AbstractMap;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class JSON_129_tmp__ESTest extends JSON_129_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Feature[] featureArray0 = new Feature[1];
25:       Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
26:       // Undeclared exception!
27:       try { 
28:         JSON.parseObject("fastjson.parser.deny.internal", (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) class0, featureArray0);
29:         fail("Expecting exception: NullPointerException");
30:       
31:       } catch(NullPointerException e) {
32:          //
33:          // no message in exception (getMessage() returned null)
34:          //
35:          verifyException("com.alibaba.fastjson.JSON", e);
36:       }
37:   }
38: }
RegularFileObject[/tmp/EvoSuite_129_1590138524926/com/alibaba/fastjson/JSON_129_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 09:08:44 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSON_129_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSON"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
76:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSON_129_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.util.ASMUtils",
84:       "com.alibaba.fastjson.JSONPath",
85:       "com.alibaba.fastjson.parser.JSONScanner",
86:       "com.alibaba.fastjson.parser.JSONLexerBase",
87:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
88:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
89:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
90:       "com.alibaba.fastjson.serializer.JSONSerializable",
91:       "com.alibaba.fastjson.serializer.SerializeWriter",
92:       "com.alibaba.fastjson.serializer.ReferenceCodec",
93:       "com.alibaba.fastjson.JSONException",
94:       "com.alibaba.fastjson.asm.TypeCollector$1",
95:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
96:       "com.alibaba.fastjson.serializer.ToStringSerializer",
97:       "com.alibaba.fastjson.serializer.SerialContext",
98:       "com.alibaba.fastjson.JSONPath$FilterGroup",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.JSONValidator$Type",
103:       "com.alibaba.fastjson.serializer.ObjectSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.serializer.MapSerializer",
106:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
107:       "com.alibaba.fastjson.serializer.DateCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.JSONPath$Filter",
114:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
115:       "com.alibaba.fastjson.util.FieldInfo",
116:       "com.alibaba.fastjson.JSONValidator$UTF16Validator",
117:       "com.alibaba.fastjson.annotation.JSONField",
118:       "com.alibaba.fastjson.serializer.PropertyFilter",
119:       "com.alibaba.fastjson.parser.SymbolTable",
120:       "com.alibaba.fastjson.serializer.NameFilter",
121:       "com.alibaba.fastjson.serializer.ListSerializer",
122:       "com.alibaba.fastjson.JSONArray",
123:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
124:       "com.alibaba.fastjson.JSONAware",
125:       "com.alibaba.fastjson.serializer.LongCodec",
126:       "com.alibaba.fastjson.serializer.EnumSerializer",
127:       "com.alibaba.fastjson.util.ASMClassLoader",
128:       "com.alibaba.fastjson.PropertyNamingStrategy",
129:       "com.alibaba.fastjson.parser.JSONToken",
130:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
131:       "com.alibaba.fastjson.serializer.AppendableSerializer",
132:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
133:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
134:       "com.alibaba.fastjson.serializer.ContextValueFilter",
135:       "com.alibaba.fastjson.util.ServiceLoader",
136:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
137:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
138:       "com.alibaba.fastjson.JSONPath$FilterSegment",
139:       "com.alibaba.fastjson.parser.DefaultJSONParser",
140:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
141:       "com.alibaba.fastjson.JSONValidator$ReaderValidator",
142:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
143:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
144:       "com.alibaba.fastjson.serializer.BeanContext",
145:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
146:       "com.alibaba.fastjson.util.IdentityHashMap",
147:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
148:       "com.alibaba.fastjson.JSON",
149:       "com.alibaba.fastjson.serializer.StringCodec",
150:       "com.alibaba.fastjson.serializer.SerializeFilterable",
151:       "com.alibaba.fastjson.JSONWriter",
152:       "com.alibaba.fastjson.asm.Opcodes",
153:       "com.alibaba.fastjson.JSONReader",
154:       "com.alibaba.fastjson.JSONStreamAware",
155:       "com.alibaba.fastjson.asm.MethodWriter",
156:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
157:       "com.alibaba.fastjson.serializer.SerializerFeature",
158:       "com.alibaba.fastjson.JSONPath$Operator",
159:       "com.alibaba.fastjson.TypeReference$1",
160:       "com.alibaba.fastjson.serializer.CalendarCodec",
161:       "com.alibaba.fastjson.util.IOUtils",
162:       "com.alibaba.fastjson.util.TypeUtils",
163:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
164:       "com.alibaba.fastjson.asm.ClassReader",
165:       "com.alibaba.fastjson.JSONPath$Segment",
166:       "com.alibaba.fastjson.spi.Module",
167:       "com.alibaba.fastjson.JSONValidator",
168:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
169:       "com.alibaba.fastjson.serializer.MiscCodec",
170:       "com.alibaba.fastjson.util.IOUtils$1",
171:       "com.alibaba.fastjson.serializer.IntegerCodec",
172:       "com.alibaba.fastjson.serializer.SerializeFilter",
173:       "com.alibaba.fastjson.JSONPObject",
174:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
175:       "com.alibaba.fastjson.serializer.PascalNameFilter",
176:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
177:       "com.alibaba.fastjson.serializer.BeforeFilter",
178:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
179:       "com.alibaba.fastjson.serializer.ArraySerializer",
180:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
181:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
182:       "com.alibaba.fastjson.JSONObject",
183:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
184:       "com.alibaba.fastjson.serializer.CharacterCodec",
185:       "com.alibaba.fastjson.asm.TypeCollector",
186:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
187:       "com.alibaba.fastjson.asm.ByteVector",
188:       "com.alibaba.fastjson.parser.JSONLexer",
189:       "com.alibaba.fastjson.util.ASMClassLoader$1",
190:       "com.alibaba.fastjson.asm.Label",
191:       "com.alibaba.fastjson.JSONValidator$UTF8Validator",
192:       "com.alibaba.fastjson.asm.FieldWriter",
193:       "com.alibaba.fastjson.serializer.JSONSerializer",
194:       "com.alibaba.fastjson.util.JavaBeanInfo",
195:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
196:       "com.alibaba.fastjson.serializer.SerializeConfig",
197:       "com.alibaba.fastjson.serializer.AtomicCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
199:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
200:       "com.alibaba.fastjson.asm.Type",
201:       "com.alibaba.fastjson.serializer.FieldSerializer",
202:       "com.alibaba.fastjson.serializer.FloatCodec",
203:       "com.alibaba.fastjson.parser.JSONReaderScanner",
204:       "com.alibaba.fastjson.serializer.ValueFilter",
205:       "com.alibaba.fastjson.JSONPathException",
206:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
207:       "com.alibaba.fastjson.serializer.Labels",
208:       "com.alibaba.fastjson.serializer.CollectionCodec",
209:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
210:       "com.alibaba.fastjson.serializer.CharArrayCodec",
211:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
212:       "com.alibaba.fastjson.asm.MethodVisitor",
213:       "com.alibaba.fastjson.annotation.JSONCreator",
214:       "com.alibaba.fastjson.asm.MethodCollector",
215:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
216:       "com.alibaba.fastjson.annotation.JSONType",
217:       "com.alibaba.fastjson.serializer.LabelFilter",
218:       "com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator",
219:       "com.alibaba.fastjson.util.UTF8Decoder",
220:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
221:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
222:       "com.alibaba.fastjson.serializer.DoubleSerializer",
223:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
224:       "com.alibaba.fastjson.serializer.BooleanCodec",
225:       "com.alibaba.fastjson.parser.Feature",
226:       "com.alibaba.fastjson.parser.ParserConfig",
227:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
228:       "com.alibaba.fastjson.parser.ParseContext"
229:     );
230:   } 
231: 
232:   private static void resetClasses() {
233:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSON_129_tmp__ESTest_scaffolding.class.getClassLoader()); 
234: 
235:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
236:       "com.alibaba.fastjson.parser.Feature",
237:       "com.alibaba.fastjson.serializer.SerializerFeature",
238:       "com.alibaba.fastjson.util.IOUtils$1",
239:       "com.alibaba.fastjson.util.IOUtils",
240:       "com.alibaba.fastjson.JSON",
241:       "com.alibaba.fastjson.util.IdentityHashMap",
242:       "com.alibaba.fastjson.util.ASMUtils",
243:       "com.alibaba.fastjson.parser.SymbolTable",
244:       "com.alibaba.fastjson.util.TypeUtils",
245:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
246:       "com.alibaba.fastjson.util.ASMClassLoader$1",
247:       "com.alibaba.fastjson.util.ASMClassLoader",
248:       "com.alibaba.fastjson.serializer.MiscCodec",
249:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
250:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
251:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
252:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
253:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
254:       "com.alibaba.fastjson.serializer.DateCodec",
255:       "com.alibaba.fastjson.serializer.CalendarCodec",
256:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
257:       "com.alibaba.fastjson.serializer.CollectionCodec",
258:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
259:       "com.alibaba.fastjson.serializer.StringCodec",
260:       "com.alibaba.fastjson.serializer.CharacterCodec",
261:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
262:       "com.alibaba.fastjson.serializer.IntegerCodec",
263:       "com.alibaba.fastjson.serializer.LongCodec",
264:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
265:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
266:       "com.alibaba.fastjson.serializer.FloatCodec",
267:       "com.alibaba.fastjson.serializer.BooleanCodec",
268:       "com.alibaba.fastjson.serializer.CharArrayCodec",
269:       "com.alibaba.fastjson.serializer.ReferenceCodec",
270:       "com.alibaba.fastjson.serializer.AtomicCodec",
271:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
272:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
273:       "com.alibaba.fastjson.parser.ParserConfig",
274:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
275:       "com.alibaba.fastjson.serializer.DoubleSerializer",
276:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
277:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
278:       "com.alibaba.fastjson.serializer.AppendableSerializer",
279:       "com.alibaba.fastjson.serializer.ToStringSerializer",
280:       "com.alibaba.fastjson.serializer.SerializeConfig",
281:       "com.alibaba.fastjson.JSONPObject",
282:       "com.alibaba.fastjson.serializer.SerializeFilterable",
283:       "com.alibaba.fastjson.serializer.JSONSerializer",
284:       "com.alibaba.fastjson.serializer.SerializeWriter",
285:       "com.alibaba.fastjson.util.ServiceLoader",
286:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
287:       "com.alibaba.fastjson.parser.DefaultJSONParser",
288:       "com.alibaba.fastjson.parser.JSONLexerBase",
289:       "com.alibaba.fastjson.parser.JSONScanner",
290:       "com.alibaba.fastjson.JSONObject",
291:       "com.alibaba.fastjson.JSONArray",
292:       "com.alibaba.fastjson.JSONException",
293:       "com.alibaba.fastjson.parser.JSONToken",
294:       "com.alibaba.fastjson.serializer.PascalNameFilter",
295:       "com.alibaba.fastjson.parser.ParseContext",
296:       "com.alibaba.fastjson.serializer.MapSerializer",
297:       "com.alibaba.fastjson.serializer.SerialContext",
298:       "com.alibaba.fastjson.serializer.ListSerializer",
299:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
300:       "com.alibaba.fastjson.asm.ClassWriter",
301:       "com.alibaba.fastjson.asm.ByteVector",
302:       "com.alibaba.fastjson.asm.Item",
303:       "com.alibaba.fastjson.asm.MethodWriter",
304:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
305:       "com.alibaba.fastjson.asm.Label",
306:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
307:       "com.alibaba.fastjson.util.FieldInfo",
308:       "com.alibaba.fastjson.asm.FieldWriter",
309:       "com.alibaba.fastjson.asm.Type",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
315:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
316:       "com.alibaba.fastjson.util.JavaBeanInfo",
317:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
318:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
321:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
322:       "com.alibaba.fastjson.asm.ClassReader",
323:       "com.alibaba.fastjson.asm.TypeCollector$1",
324:       "com.alibaba.fastjson.asm.TypeCollector",
325:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
326:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
327:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
328:       "com.alibaba.fastjson.serializer.ArraySerializer",
329:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
330:       "com.alibaba.fastjson.parser.JSONReaderScanner",
331:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
332:       "com.alibaba.fastjson.asm.MethodCollector",
333:       "com.alibaba.fastjson.serializer.EnumSerializer",
334:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
335:       "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec",
336:       "com.alibaba.fastjson.PropertyNamingStrategy",
337:       "com.alibaba.fastjson.JSONPath$Operator",
338:       "com.alibaba.fastjson.JSONValidator$Type"
339:     );
340:   }
341: }

[MASTER] 11:08:44.953 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Feature[] featureArray0 = new Feature[1];
Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
JSON.parseObject("fastjson.parser.deny.internal", (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) class0, featureArray0);

[MASTER] 11:08:44.975 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_130_1590138524953/com/alibaba/fastjson/JSON_130_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_130_1590138524953/com/alibaba/fastjson/JSON_130_tmp__ESTest_scaffolding.java]]
[MASTER] 11:08:44.975 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:08:44.975 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:08:44.976 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<com.alibaba.fastjson.serializer.JavaBeanSerializer> cannot be converted to java.lang.Class<java.util.AbstractMap.SimpleImmutableEntry<com.alibaba.fastjson.serializer.SimplePropertyPreFilter,java.lang.Enum>>: 28
[MASTER] 11:08:44.976 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_130_1590138524953/com/alibaba/fastjson/JSON_130_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 09:08:44 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.JSON;
12: import com.alibaba.fastjson.parser.Feature;
13: import com.alibaba.fastjson.serializer.JavaBeanSerializer;
14: import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
15: import java.util.AbstractMap;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class JSON_130_tmp__ESTest extends JSON_130_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
26:       Feature[] featureArray0 = new Feature[0];
27:       // Undeclared exception!
28:       JSON.parseObject("@type", (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) class0, featureArray0);
29:   }
30: }
RegularFileObject[/tmp/EvoSuite_130_1590138524953/com/alibaba/fastjson/JSON_130_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 09:08:44 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSON_130_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSON"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
76:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSON_130_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.util.ASMUtils",
84:       "com.alibaba.fastjson.JSONPath",
85:       "com.alibaba.fastjson.parser.JSONScanner",
86:       "com.alibaba.fastjson.parser.JSONLexerBase",
87:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
88:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
89:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
90:       "com.alibaba.fastjson.serializer.JSONSerializable",
91:       "com.alibaba.fastjson.serializer.SerializeWriter",
92:       "com.alibaba.fastjson.serializer.ReferenceCodec",
93:       "com.alibaba.fastjson.JSONException",
94:       "com.alibaba.fastjson.asm.TypeCollector$1",
95:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
96:       "com.alibaba.fastjson.serializer.ToStringSerializer",
97:       "com.alibaba.fastjson.serializer.SerialContext",
98:       "com.alibaba.fastjson.JSONPath$FilterGroup",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.JSONValidator$Type",
103:       "com.alibaba.fastjson.serializer.ObjectSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.serializer.MapSerializer",
106:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
107:       "com.alibaba.fastjson.serializer.DateCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.JSONPath$Filter",
114:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
115:       "com.alibaba.fastjson.util.FieldInfo",
116:       "com.alibaba.fastjson.JSONValidator$UTF16Validator",
117:       "com.alibaba.fastjson.annotation.JSONField",
118:       "com.alibaba.fastjson.serializer.PropertyFilter",
119:       "com.alibaba.fastjson.parser.SymbolTable",
120:       "com.alibaba.fastjson.serializer.NameFilter",
121:       "com.alibaba.fastjson.serializer.ListSerializer",
122:       "com.alibaba.fastjson.JSONArray",
123:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
124:       "com.alibaba.fastjson.JSONAware",
125:       "com.alibaba.fastjson.serializer.LongCodec",
126:       "com.alibaba.fastjson.serializer.EnumSerializer",
127:       "com.alibaba.fastjson.util.ASMClassLoader",
128:       "com.alibaba.fastjson.PropertyNamingStrategy",
129:       "com.alibaba.fastjson.parser.JSONToken",
130:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
131:       "com.alibaba.fastjson.serializer.AppendableSerializer",
132:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
133:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
134:       "com.alibaba.fastjson.serializer.ContextValueFilter",
135:       "com.alibaba.fastjson.util.ServiceLoader",
136:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
137:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
138:       "com.alibaba.fastjson.JSONPath$FilterSegment",
139:       "com.alibaba.fastjson.parser.DefaultJSONParser",
140:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
141:       "com.alibaba.fastjson.JSONValidator$ReaderValidator",
142:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
143:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
144:       "com.alibaba.fastjson.serializer.BeanContext",
145:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
146:       "com.alibaba.fastjson.util.IdentityHashMap",
147:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
148:       "com.alibaba.fastjson.JSON",
149:       "com.alibaba.fastjson.serializer.StringCodec",
150:       "com.alibaba.fastjson.serializer.SerializeFilterable",
151:       "com.alibaba.fastjson.JSONWriter",
152:       "com.alibaba.fastjson.asm.Opcodes",
153:       "com.alibaba.fastjson.JSONReader",
154:       "com.alibaba.fastjson.JSONStreamAware",
155:       "com.alibaba.fastjson.asm.MethodWriter",
156:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
157:       "com.alibaba.fastjson.serializer.SerializerFeature",
158:       "com.alibaba.fastjson.JSONPath$Operator",
159:       "com.alibaba.fastjson.TypeReference$1",
160:       "com.alibaba.fastjson.serializer.CalendarCodec",
161:       "com.alibaba.fastjson.util.IOUtils",
162:       "com.alibaba.fastjson.util.TypeUtils",
163:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
164:       "com.alibaba.fastjson.asm.ClassReader",
165:       "com.alibaba.fastjson.JSONPath$Segment",
166:       "com.alibaba.fastjson.spi.Module",
167:       "com.alibaba.fastjson.JSONValidator",
168:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
169:       "com.alibaba.fastjson.serializer.MiscCodec",
170:       "com.alibaba.fastjson.util.IOUtils$1",
171:       "com.alibaba.fastjson.serializer.IntegerCodec",
172:       "com.alibaba.fastjson.serializer.SerializeFilter",
173:       "com.alibaba.fastjson.JSONPObject",
174:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
175:       "com.alibaba.fastjson.serializer.PascalNameFilter",
176:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
177:       "com.alibaba.fastjson.serializer.BeforeFilter",
178:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
179:       "com.alibaba.fastjson.serializer.ArraySerializer",
180:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
181:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
182:       "com.alibaba.fastjson.JSONObject",
183:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
184:       "com.alibaba.fastjson.serializer.CharacterCodec",
185:       "com.alibaba.fastjson.asm.TypeCollector",
186:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
187:       "com.alibaba.fastjson.asm.ByteVector",
188:       "com.alibaba.fastjson.parser.JSONLexer",
189:       "com.alibaba.fastjson.util.ASMClassLoader$1",
190:       "com.alibaba.fastjson.asm.Label",
191:       "com.alibaba.fastjson.JSONValidator$UTF8Validator",
192:       "com.alibaba.fastjson.asm.FieldWriter",
193:       "com.alibaba.fastjson.serializer.JSONSerializer",
194:       "com.alibaba.fastjson.util.JavaBeanInfo",
195:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
196:       "com.alibaba.fastjson.serializer.SerializeConfig",
197:       "com.alibaba.fastjson.serializer.AtomicCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
199:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
200:       "com.alibaba.fastjson.asm.Type",
201:       "com.alibaba.fastjson.serializer.FieldSerializer",
202:       "com.alibaba.fastjson.serializer.FloatCodec",
203:       "com.alibaba.fastjson.parser.JSONReaderScanner",
204:       "com.alibaba.fastjson.serializer.ValueFilter",
205:       "com.alibaba.fastjson.JSONPathException",
206:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
207:       "com.alibaba.fastjson.serializer.Labels",
208:       "com.alibaba.fastjson.serializer.CollectionCodec",
209:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
210:       "com.alibaba.fastjson.serializer.CharArrayCodec",
211:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
212:       "com.alibaba.fastjson.asm.MethodVisitor",
213:       "com.alibaba.fastjson.annotation.JSONCreator",
214:       "com.alibaba.fastjson.asm.MethodCollector",
215:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
216:       "com.alibaba.fastjson.annotation.JSONType",
217:       "com.alibaba.fastjson.serializer.LabelFilter",
218:       "com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator",
219:       "com.alibaba.fastjson.util.UTF8Decoder",
220:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
221:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
222:       "com.alibaba.fastjson.serializer.DoubleSerializer",
223:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
224:       "com.alibaba.fastjson.serializer.BooleanCodec",
225:       "com.alibaba.fastjson.parser.Feature",
226:       "com.alibaba.fastjson.parser.ParserConfig",
227:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
228:       "com.alibaba.fastjson.parser.ParseContext"
229:     );
230:   } 
231: 
232:   private static void resetClasses() {
233:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSON_130_tmp__ESTest_scaffolding.class.getClassLoader()); 
234: 
235:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
236:       "com.alibaba.fastjson.parser.Feature",
237:       "com.alibaba.fastjson.serializer.SerializerFeature",
238:       "com.alibaba.fastjson.util.IOUtils$1",
239:       "com.alibaba.fastjson.util.IOUtils",
240:       "com.alibaba.fastjson.JSON",
241:       "com.alibaba.fastjson.util.IdentityHashMap",
242:       "com.alibaba.fastjson.util.ASMUtils",
243:       "com.alibaba.fastjson.parser.SymbolTable",
244:       "com.alibaba.fastjson.util.TypeUtils",
245:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
246:       "com.alibaba.fastjson.util.ASMClassLoader$1",
247:       "com.alibaba.fastjson.util.ASMClassLoader",
248:       "com.alibaba.fastjson.serializer.MiscCodec",
249:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
250:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
251:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
252:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
253:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
254:       "com.alibaba.fastjson.serializer.DateCodec",
255:       "com.alibaba.fastjson.serializer.CalendarCodec",
256:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
257:       "com.alibaba.fastjson.serializer.CollectionCodec",
258:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
259:       "com.alibaba.fastjson.serializer.StringCodec",
260:       "com.alibaba.fastjson.serializer.CharacterCodec",
261:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
262:       "com.alibaba.fastjson.serializer.IntegerCodec",
263:       "com.alibaba.fastjson.serializer.LongCodec",
264:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
265:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
266:       "com.alibaba.fastjson.serializer.FloatCodec",
267:       "com.alibaba.fastjson.serializer.BooleanCodec",
268:       "com.alibaba.fastjson.serializer.CharArrayCodec",
269:       "com.alibaba.fastjson.serializer.ReferenceCodec",
270:       "com.alibaba.fastjson.serializer.AtomicCodec",
271:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
272:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
273:       "com.alibaba.fastjson.parser.ParserConfig",
274:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
275:       "com.alibaba.fastjson.serializer.DoubleSerializer",
276:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
277:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
278:       "com.alibaba.fastjson.serializer.AppendableSerializer",
279:       "com.alibaba.fastjson.serializer.ToStringSerializer",
280:       "com.alibaba.fastjson.serializer.SerializeConfig",
281:       "com.alibaba.fastjson.JSONPObject",
282:       "com.alibaba.fastjson.serializer.SerializeFilterable",
283:       "com.alibaba.fastjson.serializer.JSONSerializer",
284:       "com.alibaba.fastjson.serializer.SerializeWriter",
285:       "com.alibaba.fastjson.util.ServiceLoader",
286:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
287:       "com.alibaba.fastjson.parser.DefaultJSONParser",
288:       "com.alibaba.fastjson.parser.JSONLexerBase",
289:       "com.alibaba.fastjson.parser.JSONScanner",
290:       "com.alibaba.fastjson.JSONObject",
291:       "com.alibaba.fastjson.JSONArray",
292:       "com.alibaba.fastjson.JSONException",
293:       "com.alibaba.fastjson.parser.JSONToken",
294:       "com.alibaba.fastjson.serializer.PascalNameFilter",
295:       "com.alibaba.fastjson.parser.ParseContext",
296:       "com.alibaba.fastjson.serializer.MapSerializer",
297:       "com.alibaba.fastjson.serializer.SerialContext",
298:       "com.alibaba.fastjson.serializer.ListSerializer",
299:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
300:       "com.alibaba.fastjson.asm.ClassWriter",
301:       "com.alibaba.fastjson.asm.ByteVector",
302:       "com.alibaba.fastjson.asm.Item",
303:       "com.alibaba.fastjson.asm.MethodWriter",
304:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
305:       "com.alibaba.fastjson.asm.Label",
306:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
307:       "com.alibaba.fastjson.util.FieldInfo",
308:       "com.alibaba.fastjson.asm.FieldWriter",
309:       "com.alibaba.fastjson.asm.Type",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
315:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
316:       "com.alibaba.fastjson.util.JavaBeanInfo",
317:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
318:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
321:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
322:       "com.alibaba.fastjson.asm.ClassReader",
323:       "com.alibaba.fastjson.asm.TypeCollector$1",
324:       "com.alibaba.fastjson.asm.TypeCollector",
325:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
326:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
327:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
328:       "com.alibaba.fastjson.serializer.ArraySerializer",
329:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
330:       "com.alibaba.fastjson.parser.JSONReaderScanner",
331:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
332:       "com.alibaba.fastjson.asm.MethodCollector",
333:       "com.alibaba.fastjson.serializer.EnumSerializer",
334:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
335:       "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec",
336:       "com.alibaba.fastjson.PropertyNamingStrategy",
337:       "com.alibaba.fastjson.JSONPath$Operator",
338:       "com.alibaba.fastjson.JSONValidator$Type"
339:     );
340:   }
341: }

[MASTER] 11:08:44.976 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
Feature[] featureArray0 = new Feature[0];
JSON.parseObject("@type", (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) class0, featureArray0);

[MASTER] 11:08:44.996 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_131_1590138524977/com/alibaba/fastjson/JSON_131_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_131_1590138524977/com/alibaba/fastjson/JSON_131_tmp__ESTest_scaffolding.java]]
[MASTER] 11:08:44.996 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:08:44.996 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 11:08:44.996 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.io.InputStream> cannot be converted to java.lang.Class<java.util.AbstractMap.SimpleImmutableEntry<com.alibaba.fastjson.serializer.SimplePropertyPreFilter,java.lang.Enum>>: 28
[MASTER] 11:08:44.997 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_131_1590138524977/com/alibaba/fastjson/JSON_131_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 09:08:44 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.JSON;
12: import com.alibaba.fastjson.parser.Feature;
13: import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
14: import java.io.InputStream;
15: import java.util.AbstractMap;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class JSON_131_tmp__ESTest extends JSON_131_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Class<InputStream> class0 = InputStream.class;
26:       // Undeclared exception!
27:       try { 
28:         JSON.parseObject("q", (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) class0, (Feature[]) null);
29:         fail("Expecting exception: RuntimeException");
30:       
31:       } catch(RuntimeException e) {
32:          //
33:          // syntax error,except start with { or [,but actually start with error
34:          //
35:          verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
36:       }
37:   }
38: }
RegularFileObject[/tmp/EvoSuite_131_1590138524977/com/alibaba/fastjson/JSON_131_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 09:08:44 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSON_131_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSON"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
76:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSON_131_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.util.ASMUtils",
84:       "com.alibaba.fastjson.JSONPath",
85:       "com.alibaba.fastjson.parser.JSONScanner",
86:       "com.alibaba.fastjson.parser.JSONLexerBase",
87:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
88:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
89:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
90:       "com.alibaba.fastjson.serializer.JSONSerializable",
91:       "com.alibaba.fastjson.serializer.SerializeWriter",
92:       "com.alibaba.fastjson.serializer.ReferenceCodec",
93:       "com.alibaba.fastjson.JSONException",
94:       "com.alibaba.fastjson.asm.TypeCollector$1",
95:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
96:       "com.alibaba.fastjson.serializer.ToStringSerializer",
97:       "com.alibaba.fastjson.serializer.SerialContext",
98:       "com.alibaba.fastjson.JSONPath$FilterGroup",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.JSONValidator$Type",
103:       "com.alibaba.fastjson.serializer.ObjectSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.serializer.MapSerializer",
106:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
107:       "com.alibaba.fastjson.serializer.DateCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.JSONPath$Filter",
114:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
115:       "com.alibaba.fastjson.util.FieldInfo",
116:       "com.alibaba.fastjson.JSONValidator$UTF16Validator",
117:       "com.alibaba.fastjson.annotation.JSONField",
118:       "com.alibaba.fastjson.serializer.PropertyFilter",
119:       "com.alibaba.fastjson.parser.SymbolTable",
120:       "com.alibaba.fastjson.serializer.NameFilter",
121:       "com.alibaba.fastjson.serializer.ListSerializer",
122:       "com.alibaba.fastjson.JSONArray",
123:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
124:       "com.alibaba.fastjson.JSONAware",
125:       "com.alibaba.fastjson.serializer.LongCodec",
126:       "com.alibaba.fastjson.serializer.EnumSerializer",
127:       "com.alibaba.fastjson.util.ASMClassLoader",
128:       "com.alibaba.fastjson.PropertyNamingStrategy",
129:       "com.alibaba.fastjson.parser.JSONToken",
130:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
131:       "com.alibaba.fastjson.serializer.AppendableSerializer",
132:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
133:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
134:       "com.alibaba.fastjson.serializer.ContextValueFilter",
135:       "com.alibaba.fastjson.util.ServiceLoader",
136:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
137:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
138:       "com.alibaba.fastjson.JSONPath$FilterSegment",
139:       "com.alibaba.fastjson.parser.DefaultJSONParser",
140:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
141:       "com.alibaba.fastjson.JSONValidator$ReaderValidator",
142:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
143:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
144:       "com.alibaba.fastjson.serializer.BeanContext",
145:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
146:       "com.alibaba.fastjson.util.IdentityHashMap",
147:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
148:       "com.alibaba.fastjson.JSON",
149:       "com.alibaba.fastjson.serializer.StringCodec",
150:       "com.alibaba.fastjson.serializer.SerializeFilterable",
151:       "com.alibaba.fastjson.JSONWriter",
152:       "com.alibaba.fastjson.asm.Opcodes",
153:       "com.alibaba.fastjson.JSONReader",
154:       "com.alibaba.fastjson.JSONStreamAware",
155:       "com.alibaba.fastjson.asm.MethodWriter",
156:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
157:       "com.alibaba.fastjson.serializer.SerializerFeature",
158:       "com.alibaba.fastjson.JSONPath$Operator",
159:       "com.alibaba.fastjson.TypeReference$1",
160:       "com.alibaba.fastjson.serializer.CalendarCodec",
161:       "com.alibaba.fastjson.util.IOUtils",
162:       "com.alibaba.fastjson.util.TypeUtils",
163:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
164:       "com.alibaba.fastjson.asm.ClassReader",
165:       "com.alibaba.fastjson.JSONPath$Segment",
166:       "com.alibaba.fastjson.spi.Module",
167:       "com.alibaba.fastjson.JSONValidator",
168:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
169:       "com.alibaba.fastjson.serializer.MiscCodec",
170:       "com.alibaba.fastjson.util.IOUtils$1",
171:       "com.alibaba.fastjson.serializer.IntegerCodec",
172:       "com.alibaba.fastjson.serializer.SerializeFilter",
173:       "com.alibaba.fastjson.JSONPObject",
174:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
175:       "com.alibaba.fastjson.serializer.PascalNameFilter",
176:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
177:       "com.alibaba.fastjson.serializer.BeforeFilter",
178:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
179:       "com.alibaba.fastjson.serializer.ArraySerializer",
180:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
181:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
182:       "com.alibaba.fastjson.JSONObject",
183:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
184:       "com.alibaba.fastjson.serializer.CharacterCodec",
185:       "com.alibaba.fastjson.asm.TypeCollector",
186:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
187:       "com.alibaba.fastjson.asm.ByteVector",
188:       "com.alibaba.fastjson.parser.JSONLexer",
189:       "com.alibaba.fastjson.util.ASMClassLoader$1",
190:       "com.alibaba.fastjson.asm.Label",
191:       "com.alibaba.fastjson.JSONValidator$UTF8Validator",
192:       "com.alibaba.fastjson.asm.FieldWriter",
193:       "com.alibaba.fastjson.serializer.JSONSerializer",
194:       "com.alibaba.fastjson.util.JavaBeanInfo",
195:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
196:       "com.alibaba.fastjson.serializer.SerializeConfig",
197:       "com.alibaba.fastjson.serializer.AtomicCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
199:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
200:       "com.alibaba.fastjson.asm.Type",
201:       "com.alibaba.fastjson.serializer.FieldSerializer",
202:       "com.alibaba.fastjson.serializer.FloatCodec",
203:       "com.alibaba.fastjson.parser.JSONReaderScanner",
204:       "com.alibaba.fastjson.serializer.ValueFilter",
205:       "com.alibaba.fastjson.JSONPathException",
206:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
207:       "com.alibaba.fastjson.serializer.Labels",
208:       "com.alibaba.fastjson.serializer.CollectionCodec",
209:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
210:       "com.alibaba.fastjson.serializer.CharArrayCodec",
211:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
212:       "com.alibaba.fastjson.asm.MethodVisitor",
213:       "com.alibaba.fastjson.annotation.JSONCreator",
214:       "com.alibaba.fastjson.asm.MethodCollector",
215:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
216:       "com.alibaba.fastjson.annotation.JSONType",
217:       "com.alibaba.fastjson.serializer.LabelFilter",
218:       "com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator",
219:       "com.alibaba.fastjson.util.UTF8Decoder",
220:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
221:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
222:       "com.alibaba.fastjson.serializer.DoubleSerializer",
223:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
224:       "com.alibaba.fastjson.serializer.BooleanCodec",
225:       "com.alibaba.fastjson.parser.Feature",
226:       "com.alibaba.fastjson.parser.ParserConfig",
227:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
228:       "com.alibaba.fastjson.parser.ParseContext"
229:     );
230:   } 
231: 
232:   private static void resetClasses() {
233:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSON_131_tmp__ESTest_scaffolding.class.getClassLoader()); 
234: 
235:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
236:       "com.alibaba.fastjson.parser.Feature",
237:       "com.alibaba.fastjson.serializer.SerializerFeature",
238:       "com.alibaba.fastjson.util.IOUtils$1",
239:       "com.alibaba.fastjson.util.IOUtils",
240:       "com.alibaba.fastjson.JSON",
241:       "com.alibaba.fastjson.util.IdentityHashMap",
242:       "com.alibaba.fastjson.util.ASMUtils",
243:       "com.alibaba.fastjson.parser.SymbolTable",
244:       "com.alibaba.fastjson.util.TypeUtils",
245:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
246:       "com.alibaba.fastjson.util.ASMClassLoader$1",
247:       "com.alibaba.fastjson.util.ASMClassLoader",
248:       "com.alibaba.fastjson.serializer.MiscCodec",
249:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
250:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
251:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
252:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
253:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
254:       "com.alibaba.fastjson.serializer.DateCodec",
255:       "com.alibaba.fastjson.serializer.CalendarCodec",
256:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
257:       "com.alibaba.fastjson.serializer.CollectionCodec",
258:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
259:       "com.alibaba.fastjson.serializer.StringCodec",
260:       "com.alibaba.fastjson.serializer.CharacterCodec",
261:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
262:       "com.alibaba.fastjson.serializer.IntegerCodec",
263:       "com.alibaba.fastjson.serializer.LongCodec",
264:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
265:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
266:       "com.alibaba.fastjson.serializer.FloatCodec",
267:       "com.alibaba.fastjson.serializer.BooleanCodec",
268:       "com.alibaba.fastjson.serializer.CharArrayCodec",
269:       "com.alibaba.fastjson.serializer.ReferenceCodec",
270:       "com.alibaba.fastjson.serializer.AtomicCodec",
271:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
272:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
273:       "com.alibaba.fastjson.parser.ParserConfig",
274:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
275:       "com.alibaba.fastjson.serializer.DoubleSerializer",
276:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
277:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
278:       "com.alibaba.fastjson.serializer.AppendableSerializer",
279:       "com.alibaba.fastjson.serializer.ToStringSerializer",
280:       "com.alibaba.fastjson.serializer.SerializeConfig",
281:       "com.alibaba.fastjson.JSONPObject",
282:       "com.alibaba.fastjson.serializer.SerializeFilterable",
283:       "com.alibaba.fastjson.serializer.JSONSerializer",
284:       "com.alibaba.fastjson.serializer.SerializeWriter",
285:       "com.alibaba.fastjson.util.ServiceLoader",
286:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
287:       "com.alibaba.fastjson.parser.DefaultJSONParser",
288:       "com.alibaba.fastjson.parser.JSONLexerBase",
289:       "com.alibaba.fastjson.parser.JSONScanner",
290:       "com.alibaba.fastjson.JSONObject",
291:       "com.alibaba.fastjson.JSONArray",
292:       "com.alibaba.fastjson.JSONException",
293:       "com.alibaba.fastjson.parser.JSONToken",
294:       "com.alibaba.fastjson.serializer.PascalNameFilter",
295:       "com.alibaba.fastjson.parser.ParseContext",
296:       "com.alibaba.fastjson.serializer.MapSerializer",
297:       "com.alibaba.fastjson.serializer.SerialContext",
298:       "com.alibaba.fastjson.serializer.ListSerializer",
299:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
300:       "com.alibaba.fastjson.asm.ClassWriter",
301:       "com.alibaba.fastjson.asm.ByteVector",
302:       "com.alibaba.fastjson.asm.Item",
303:       "com.alibaba.fastjson.asm.MethodWriter",
304:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
305:       "com.alibaba.fastjson.asm.Label",
306:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
307:       "com.alibaba.fastjson.util.FieldInfo",
308:       "com.alibaba.fastjson.asm.FieldWriter",
309:       "com.alibaba.fastjson.asm.Type",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
315:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
316:       "com.alibaba.fastjson.util.JavaBeanInfo",
317:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
318:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
321:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
322:       "com.alibaba.fastjson.asm.ClassReader",
323:       "com.alibaba.fastjson.asm.TypeCollector$1",
324:       "com.alibaba.fastjson.asm.TypeCollector",
325:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
326:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
327:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
328:       "com.alibaba.fastjson.serializer.ArraySerializer",
329:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
330:       "com.alibaba.fastjson.parser.JSONReaderScanner",
331:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
332:       "com.alibaba.fastjson.asm.MethodCollector",
333:       "com.alibaba.fastjson.serializer.EnumSerializer",
334:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
335:       "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec",
336:       "com.alibaba.fastjson.PropertyNamingStrategy",
337:       "com.alibaba.fastjson.JSONPath$Operator",
338:       "com.alibaba.fastjson.JSONValidator$Type"
339:     );
340:   }
341: }

[MASTER] 11:08:44.997 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Class<InputStream> class0 = InputStream.class;
JSON.parseObject("q", (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) class0, (Feature[]) null);

[MASTER] 11:09:10.484 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: com.alibaba.fastjson.JSONObject cannot be cast to java.util.LinkedHashMap
[MASTER] 11:09:10.485 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SerializeConfig serializeConfig0 = new SerializeConfig(true);
LinkedHashMap<PascalNameFilter, Integer> linkedHashMap0 = new LinkedHashMap<PascalNameFilter, Integer>();
LinkedHashMap linkedHashMap1 = (LinkedHashMap)JSON.toJSON((Object) linkedHashMap0, serializeConfig0);
assertEquals(0, linkedHashMap1.size());


[MASTER] 11:09:10.884 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: com.alibaba.fastjson.JSONObject cannot be cast to java.util.TreeMap
[MASTER] 11:09:10.884 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SerializeConfig serializeConfig0 = new SerializeConfig(false);
TreeMap<Object, JSON> treeMap0 = new TreeMap<Object, JSON>();
TreeMap treeMap1 = (TreeMap)JSON.toJSON((Object) treeMap0, serializeConfig0);
assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);


[MASTER] 11:09:14.437 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 11:09:14.437 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONArray jSONArray0 = new JSONArray(536870912);

[MASTER] 11:09:21.731 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: com.alibaba.fastjson.JSONObject cannot be cast to java.util.AbstractMap$SimpleImmutableEntry
[MASTER] 11:09:21.732 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Feature[] featureArray0 = new Feature[1];
Feature feature0 = Feature.UseBigDecimal;
featureArray0[0] = feature0;
AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum> abstractMap_SimpleImmutableEntry0 = JSON.parseObject("{\"toJSON error\":{},\"\":false,\"fastjson.serializerFeatures.MapSortField\":{\"\":false,\"\u0000\":{}}}", (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) null, featureArray0);
assertNotNull(abstractMap_SimpleImmutableEntry0);


* Writing tests to file
* Writing JUnit test case 'JSONArray_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 11:09:37.730 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'JSON_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONValidator
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.parser.JSONScanner
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONWriter
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.parser.DefaultJSONParser
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONPath
* Starting Client-0
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 12809
* Connecting to master process on port 12808
* Connecting to master process on port 12810
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 12813
* Connecting to master process on port 12811
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 429
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 130 / 429
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONValidator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1127
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 268 / 1127
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.JSONScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 11:09:51.241 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 11:09:51.242 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Total number of test goals for DYNAMOSA: 5652
* Using seed 7
* Starting evolution
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONPath
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 11:09:51.900 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 11:09:51.903 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Initial Number of Goals in DynaMOSA = 470 / 5652
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.DefaultJSONParser
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 11:09:52.522 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 11:09:52.524 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Total number of test goals for DYNAMOSA: 7058
* Using seed 7
* Starting evolution
* Total number of test goals for DYNAMOSA: 3512
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 865 / 7058
* Initial Number of Goals in DynaMOSA = 650 / 3512
[MASTER] 11:09:53.119 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 11:09:53.127 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 11:09:53.127 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 11:09:53.127 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 11:09:53.127 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 11:09:53.127 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 11:09:53.128 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 11:09:53.128 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 11:09:53.128 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 11:09:53.128 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 11:09:53.129 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 11:09:53.130 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 11:09:53.136 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Enum<E> : Type points to itself
[MASTER] 11:09:53.141 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 11:09:53.141 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 11:09:53.512 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 11:09:53.514 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 11:09:53.532 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 11:09:53.535 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 11:09:53.537 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumMap<K, V> : Type points to itself
[MASTER] 11:09:53.537 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 11:09:53.539 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 11:09:53.545 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Hashtable<K, V> : Type points to itself
[MASTER] 11:09:53.546 [logback-2] ERROR TestCluster - Failed to check cache for java.util.IdentityHashMap<K, V> : Type points to itself
[MASTER] 11:09:53.546 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashMap<K, V> : Type points to itself
[MASTER] 11:09:53.547 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 11:09:53.549 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 11:09:53.551 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeMap<K, V> : Type points to itself
[MASTER] 11:09:53.552 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 11:09:53.553 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 11:10:01.386 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 11:10:29.721 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.BeanContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.FieldInfo due to org.evosuite.ga.ConstructionFailedException: No generators of type java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>
[MASTER] 11:10:32.702 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for java.lang.reflect.Constructor<java.text.NumberFormat> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 11:10:33.425 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: No generators of type java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>
* Search finished after 61s and 607 generations, 206153 statements, best individual has fitness: 30.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 97
* Number of covered goals: 97
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 76
* Number of covered goals: 71
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 148
* Number of covered goals: 146
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 76
* Number of covered goals: 71
* Generated 30 tests with total length 103
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 19%
* Compiling and checking tests
[MASTER] 11:10:48.883 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.ParameterizedTypeImpl due to org.evosuite.ga.ConstructionFailedException: Have no generator for java.lang.reflect.Constructor<java.text.NumberFormat> canUseFunctionalMocks=false, canBeMocked: false
* Search finished after 71s and 12 generations, 7042 statements, best individual has fitness: 242.0
[MASTER] 11:10:55.331 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 11 seconds more than allowed.
* Search finished after 63s and 40 generations, 24205 statements, best individual has fitness: 1531.0
* Search finished after 65s and 59 generations, 53969 statements, best individual has fitness: 4028.0
* Search finished after 66s and 124 generations, 81167 statements, best individual has fitness: 3371.0
* Minimizing test suite
[MASTER] 11:10:59.049 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_13_BigInteger.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsListener.lambda$new$0(StatisticsListener.java:69) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_13_BigInteger.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	... 1 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_13_BigInteger.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor15.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_13_BigInteger.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
* Minimizing test suite
[MASTER] 11:10:59.626 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 7 seconds more than allowed.
* Minimizing test suite
[MASTER] 11:11:02.306 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_13_BigInteger.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.executedAndThenSendIndividualToMaster(StatisticsSender.java:98) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTests(TestSuiteGenerator.java:687) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:245) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_13_BigInteger.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	... 3 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_13_BigInteger.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor15.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_13_BigInteger.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
[MASTER] 11:11:02.449 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 9 seconds more than allowed.
* Writing tests to file
* Writing JUnit test case 'JSONWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 11:11:03.037 [main] ERROR RuntimeVariable - Obtained invalid goal count: covered 437 out of 429
[MASTER] 11:11:03.038 [main] ERROR SearchStatistics - Not going to write down statistics data, as some data is invalid
[MASTER] 11:11:03.139 [main] ERROR TestGeneration - failed to write statistics data
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 56%
* Total number of goals: 973
* Number of covered goals: 548
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 52%
* Total number of goals: 707
* Number of covered goals: 371
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 50
* Number of covered goals: 50
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 70%
* Total number of goals: 897
* Number of covered goals: 630
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 102
* Number of covered goals: 44
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 63
* Number of covered goals: 62
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 83%
* Total number of goals: 63
* Number of covered goals: 52
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 48%
* Total number of goals: 707
* Number of covered goals: 336
* Generated 136 tests with total length 525
* Resulting test suite's coverage: 62% (average coverage for all fitness functions)
* Generating assertions
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 80%
* Total number of goals: 266
* Number of covered goals: 213
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 73%
* Total number of goals: 212
* Number of covered goals: 155
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 375
* Number of covered goals: 349
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 96%
* Total number of goals: 24
* Number of covered goals: 23
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 83%
* Total number of goals: 24
* Number of covered goals: 20
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 212
* Number of covered goals: 155
* Generated 42 tests with total length 127
* Resulting test suite's coverage: 66% (average coverage for all fitness functions)
* Generating assertions
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 40%
* Total number of goals: 1857
* Number of covered goals: 745
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 38%
* Total number of goals: 1519
* Number of covered goals: 577
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 59
* Number of covered goals: 59
* Coverage analysis for criterion WEAKMUTATION
* Resulting test suite's mutation score: 21%
* Coverage of criterion WEAKMUTATION: 53%
* Total number of goals: 567
* Number of covered goals: 302
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 94
* Number of covered goals: 53
* Coverage analysis for criterion METHOD
* Compiling and checking tests
* Coverage of criterion METHOD: 100%
* Total number of goals: 48
* Number of covered goals: 48
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 48
* Number of covered goals: 44
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 35%
* Total number of goals: 1519
* Number of covered goals: 528
* Generated 197 tests with total length 537
* Resulting test suite's coverage: 59% (average coverage for all fitness functions)
* Generating assertions
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 49%
* Total number of goals: 2079
* Number of covered goals: 1026
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 38%
* Total number of goals: 1850
* Number of covered goals: 704
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 87
* Number of covered goals: 84
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 55%
* Total number of goals: 913
* Number of covered goals: 503
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 60%
* Total number of goals: 114
* Number of covered goals: 68
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 126
* Number of covered goals: 125
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 126
* Number of covered goals: 115
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 36%
* Total number of goals: 1850
* Number of covered goals: 661
* Generated 265 tests with total length 986
* Resulting test suite's coverage: 47% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 36%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONValidator_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'DefaultJSONParser_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 25%
* Compiling and checking tests
[MASTER] 11:12:56.820 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.alibaba.fastjson.JSONPath but in com.alibaba.fastjson.JSONPath$JSONPathParser.readName(JSONPath.java:1683): org.evosuite.runtime.mock.java.lang.MockThrowable: illeal jsonpath syntax. 1}Kt>mJ[X
[MASTER] 11:12:56.820 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(8, (-2887), 123);
Object[] objectArray0 = new Object[7];
JSONPath.arrayAdd((Object) jSONPath_RangeSegment0, "1}Kt>mJ[X", objectArray0);

[MASTER] 11:12:57.243 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.alibaba.fastjson.parser.DefaultJSONParser but in com.alibaba.fastjson.JSONPath$JSONPathParser.readSegement(JSONPath.java:845): org.evosuite.runtime.mock.java.lang.MockThrowable: not support jsonpath : parse error : 
[MASTER] 11:12:57.243 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.extract(")>C;']X>m/;", "parse error : ");

[MASTER] 11:13:14.501 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: StringIndexOutOfBoundsException
[MASTER] 11:13:14.501 [logback-1] WARN  JUnitAnalyzer - Failing test:
 char[] charArray0 = new char[2];
JSONScanner jSONScanner0 = new JSONScanner(charArray0, 2, 2);
Class<Object> class0 = Object.class;
jSONScanner0.scanFieldStringArray(charArray0, class0);

[MASTER] 11:13:14.771 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: not support jsonpath : yZsQg0R-g<
[MASTER] 11:13:14.771 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("8", "8", 3689);
Map<String, Object> map0 = JSONPath.paths((Object) sQLSyntaxErrorException0);
JSONPath jSONPath0 = JSONPath.compile("yZsQg0R-g<");
jSONPath0.remove((Object) map0);

[MASTER] 11:13:15.161 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<167> but was:<169>
[MASTER] 11:13:15.161 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int[] intArray0 = new int[0];
SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[", "/stackTrace/0");
BatchUpdateException batchUpdateException0 = new BatchUpdateException("/stackTrace/11", intArray0, sQLFeatureNotSupportedException0);
batchUpdateException0.setNextException(sQLFeatureNotSupportedException0);
SerializeConfig serializeConfig0 = new SerializeConfig();
Map<String, Object> map0 = JSONPath.paths((Object) batchUpdateException0, serializeConfig0);
assertEquals(167, map0.size());


[MASTER] 11:13:16.579 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: illeal jsonpath syntax. $*`
[MASTER] 11:13:16.579 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("p*pxyAUJf1WF.@ajb9", true);
JSONPath jSONPath0 = JSONPath.compile("$*`");
jSONPath0.size((Object) jSONPath_PropertySegment0);

[MASTER] 11:13:16.886 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StringIndexOutOfBoundsException: String index out of range: 2
[MASTER] 11:13:16.886 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.set((Object) "/stackTrace/0", "..", (Object) "LIKE");

* Writing tests to file
* Writing JUnit test case 'JSONScanner_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'JSONPath_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
