/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 14:35:16 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.UUID;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer(0);
      boolean boolean0 = JSONPath.eqNotNull((-1580386065683472715L), integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      int int0 = jSONPath0.size((Object) batchUpdateException0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("/StackTrace/0");
      boolean boolean0 = jSONPath0.set((Object) serializeConfig0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("g4}G2fZ");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1592), (-361), (-361));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("tmZ=nK4%KQa,dW^1y@", sQLTransactionRollbackException0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2637);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("write clob error", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "i2]>)wp>", "i2]>)wp>");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("false");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('?');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '?, but 'f'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7ml%");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 7ml%
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("org.springframework.security.core.authority.SimpleGrantedAuthority");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" o9xUeqE(:~mW(y");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" -_IqO[6fMI|");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7ml%");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7cGAii6(V");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("%Inz;dBt3dm", 1L, jSONPath_Operator0);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, "/stackTrace/10", jSONPath0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/8jjCWy{C)O54q");
      jSONPath0.init();
      assertEquals("/8jjCWy{C)O54q", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(":[Rm^");
      Byte byte0 = new Byte((byte) (-71));
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepGetPropertyValues(byte0, arrayList0);
      assertEquals(":[Rm^", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Q+=i>fj{N_R{|I&");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3f/.X:\"*gJ9e");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('u');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('V');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'V, but '*'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[] longArray0 = new long[4];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("i2]>)wp>", longArray0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("write clob error", serializeConfig0, parserConfig0);
      Class<Short> class0 = Short.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, javaBeanDeserializer0, parserConfig0, "write clob error");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/12", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(3);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, "/cause/stackTrace/12", jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("VYvxcH");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("VYvxcH", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long[] longArray0 = new long[9];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("com.alibaba.fastjson.JSONPath$1", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntInSegement0, jSONPath_IntInSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("Array");
      Class<String> class0 = String.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply(jSONPath0, javaBeanSerializer0, jSONPath0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      String string0 = " ";
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      String string1 = "a7J(.dE>N@MD";
      JSONPath jSONPath0 = new JSONPath("a7J(.dE>N@MD");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" ", (String) null, 13);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("a7J(.dE>N@MD", " ", 13, (int[]) null, sQLNonTransientException0);
      jSONPath0.deepSet(parserConfig0, "a7J(.dE>N@MD", 5614464919154503228L, batchUpdateException0);
      String string2 = "\\^I.c+";
      // Undeclared exception!
      try { 
        JSONPath.set((Object) string1, string2, (Object) string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/12", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Short short0 = new Short((short)880);
      int int0 = JSONPath.size((Object) short0, "*");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) javaBeanSerializer0, "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      SQLDataException sQLDataException0 = new SQLDataException("toA", "u");
      BigDecimal bigDecimal0 = new BigDecimal(1725);
      boolean boolean0 = jSONPath0.setPropertyValue(sQLDataException0, "u", (-3765L), bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("gxi[&03KHg&9", "{q,");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      JSONPath jSONPath0 = JSONPath.compile("scanFieldDecimal");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath0.set((Object) sQLNonTransientConnectionException0, (Object) jSONPath_WildCardSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("g4}G2fZ", serializeConfig0, parserConfig0);
      Float float0 = new Float((float) (short)2);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "[S");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("write clob error", serializeConfig0, parserConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer", "in", 31186);
      DataTruncation dataTruncation0 = new DataTruncation(1236, false, false, 1236, (-2896), sQLSyntaxErrorException0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(dataTruncation0);
      assertFalse(collection0.contains(31186));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = jSONPath0.getPropertyValue(bigInteger0, "false", (-715L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1500);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("unclosed.str", serializeConfig0, parserConfig0);
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("|_N][");
      Class<Object> class0 = Object.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      Object object0 = jSONPath0.getArrayItem((Object) null, 1725);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fied_ser");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      Object object0 = jSONPath0.getArrayItem(propertyNamingStrategy0, 0);
      assertSame(object0, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("W");
      Short short0 = new Short((short) (-844));
      int int0 = jSONPath0.evalSize(short0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("wq/K8Eby.6QOwV1v", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "EV", (-2522));
      SQLDataException sQLDataException0 = new SQLDataException("tq%[6Kss6L'GUf,2V", sQLTimeoutException0);
      int int0 = jSONPath0.evalSize(sQLDataException0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      int int0 = jSONPath0.evalSize((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("g4}G2fZ");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_WildCardSegment0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1024);
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, set0, map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("a7J(.dE>N@MD");
      Set<?> set0 = jSONPath0.evalKeySet("q(]H");
      assertFalse(set0.contains("a7J(.dE>N@MD"));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ArrayList arrayList0 = (ArrayList)JSONPath.eval((Object) sQLTransientConnectionException0, "*");
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      int int0 = JSONPath.size((Object) jSONPath_WildCardSegment0, "b");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath.size((Object) "illegal json : ", "illegal json : ");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[S");
      int int0 = jSONPath0.size((Object) "[S");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      jSONPath0.setPropertyValue(bigInteger0, "false", 4794L, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" -_IqO[6fMI|");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 116, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      JSONPath.set((Object) bigInteger0, "com.alibaba.fastjson.JSONPath$RegMatchSegement", (Object) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("bo'[( NM", "bo'[( NM", 1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONPath.set((Object) sQLIntegrityConstraintViolationException0, ", fieldName ", (Object) propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$FilterGroup");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-32), (-32), 57, 57, 73);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) class0, (Object) date0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) class0, (Object) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("wq/K8Eby.6QOwV1v", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2522), (-2522), (-322));
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_RangeSegment0, (Object) "wq/K8Eby.6QOwV1v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(">m:e.$3>sv.>tsCj");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(4122, 4122, 83);
      jSONPath0.set((Object) jSONPath_RangeSegment0, (Object) jSONPath_RangeSegment0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLSyntaxErrorException0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "wr#";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLTimeoutException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("/");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k";
      stringArray0[1] = "k";
      stringArray0[2] = "k";
      stringArray0[3] = "/";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLDataException0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2598), 90, 90);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      int[] intArray0 = new int[3];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable("/cause/stackTrace/10");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" M?]$8zt", hashMap0, mockThrowable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLClientInfoException0);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, batchUpdateException0, hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/cause/stackTrace/10";
      stringArray0[1] = "/stackTrace/8";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(object0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("g4}G2fZ");
      // Undeclared exception!
      jSONPath0.removePropertyValue(jSONPath0, "fastjson.parser.safeMode", false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("comCalibaba.fastjsonuparser.deserializer.AbstractDateDeserializer");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "comCalibaba.fastjsonuparser.deserializer.AbstractDateDeserializer", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1841207068));
      JSONPath jSONPath0 = new JSONPath(";");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("-", "-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<SQLWarning> class0 = SQLWarning.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONPath.keySet((Object) bigInteger0, "tN-1VGC;J9RmnD");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".9");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("a7J(.dE>N@MD");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : a7J(.dE>N@MD
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      MockDate mockDate0 = new MockDate(785L);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(mockDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("DisableASM");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("*", 62);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("xir", "_Co1Bx9P4a?!0", parserConfig0, (-1991), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[9];
      // Undeclared exception!
      try { 
        JSONPath.extract("like", "like", parserConfig0, 90, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null, parserConfig0, 9999, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "([C)Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("TEe", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("lY &`L", "lY &`L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2lY &`L
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32, 1843);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("in");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      JSONPath jSONPath0 = JSONPath.compile("in");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g4}G2fZ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(33);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("writeFieldNameDirect", serializeConfig0, parserConfig0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(61, 79, 79);
      JSONPath jSONPath0 = JSONPath.compile("A~|,G~7ad>LGIS./");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_RangeSegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      JSONPath.eval((Object) jSONPath0, "N#%\"7Jk%dFSF6yY+");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("D|mpwqPs", serializeConfig0, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("D|mpwqPs", "fastjson.parser.autoTypeAccept", 13);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : D|mpwqPs
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("g4}G2fZ");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_WildCardSegment0, "fastjson.compatibleWithFieldName", (-1L), "]wW1w(5*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("g#lq|WofqI4Dr7%]`Tbe");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("ll/`$(iRwQd%i", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g4}G2fZ");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("like");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("g4}G2fZ", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLTransactionRollbackException0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      JSONPath.containsValue((Object) sQLTransientConnectionException0, "can not create ASMParser", (Object) "between");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[B");
      MockDate mockDate0 = new MockDate(114, (-1841207068), (-1599), 2611, 114);
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONPath0.containsValue((Object) mockDate0, (Object) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("x");
      boolean boolean0 = jSONPath0.containsValue((Object) "~E.pEVQ,5", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) "in", "yggq0A/8ro&#{jVRK?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(";h+9(x=aDLm");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLTransactionRollbackException0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".*");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1841207068));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("]NEtO;fb", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ]NEtO;fb
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        JSONPath.compare(byteArray0[5], (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ReferenceCodec");
      Class<Calendar> class0 = Calendar.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) javaBeanSerializer0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "rlike", "rlike", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path rlike
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(339);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "m", (Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("unclosed.str", serializeConfig0, parserConfig0);
      int[] intArray0 = new int[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "fastjson.parser.safeMode", 342);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLFeatureNotSupportedException0);
      jSONPath0.deepSet("unclosed.str", "byo+xi\",-3>@N7L", 59775428743665658L, batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLFeatureNotSupportedException: fastjson.parser.autoTypeSupport", batchUpdateException0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("Y87m#S1y9F]kF#Z", 92, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_FilterSegment0, (Object) null, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("`]mKW");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("`68P)h", "false");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, sQLSyntaxErrorException0, 2190);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("gEXz", "9Gn)4Ws", 57);
      Object object0 = jSONPath0.eval((Object) sQLTransactionRollbackException0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, object0, 1042, bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1042, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long[] longArray0 = new long[9];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("com.alibaba.fastjson.JSONPath$1", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntInSegement0, jSONPath_IntInSegement0, true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$1");
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.JSONPath$1", "/StackTrace/3");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLDataException0, sQLFeatureNotSupportedException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("R Y5t");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(")A:ct=r'HhTY+2}D _,", "415j");
      Byte byte0 = new Byte((byte)49);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, sQLTransientConnectionException0, byte0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g4}G2fZ");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("com.alibaba.fastjson.JSONPath$WildCardSegment", 1797.15, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Gc)f3#iZy,!ygt", false);
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_DoubleOpSegement0, serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("wq/K8Eby.6QOwV1v", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("\\.", false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("gxi[&03KHg&9", "{q,");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException("scanFieldDecimal", "m,Eg?xN&_)BF=!GDUb[", sQLNonTransientConnectionException0);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, sQLDataException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/11");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" o9xUeqE(:~mW(y");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("BETEEN");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("K", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) serializeConfig0, (Object) serializeConfig0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/StackTrace/11");
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      boolean boolean0 = jSONPath0.set((Object) "/StackTrace/11", (Object) batchUpdateException0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wq/K8Eby.6QOwV1v");
      Double double0 = new Double(3187.465541441076);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("scanDouble", "5VcxH|NHi#(=", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("5VcxH|NHi#(=", "wq/K8Eby.6QOwV1v", 12, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) double0, (Object) sQLIntegrityConstraintViolationException0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      Byte byte0 = new Byte((byte) (-61));
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) byte0, (Object) jSONPath_JSONPathParser0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("0Csy(]uj-,:xY@6O");
      JSONPath jSONPath0 = JSONPath.compile("0Csy(]uj-,:xY@6O");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      jSONPath0.set((Object) "-", (Object) jSONPath_FilterSegment0, true);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("-", (SerializeConfig) null, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("-");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLDataException0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      MockDate mockDate0 = new MockDate((-1850), (-1426), (-1357));
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) mockDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("parser");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      jSONPath0.remove((Object) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1500);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("unclosed.str", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation(1946, false, false, 1500, (byte)0);
      boolean boolean0 = jSONPath0.remove((Object) dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("I");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g4}G2fZ");
      jSONPath0.remove((Object) "yyyy-MM-dd HH:mm:ss");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1841207068));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("]NEtO;fb", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) jSONPath_ArrayAccessSegment0, (Object[]) null);
      assertEquals("]NEtO;fb", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g4}G2fZ");
      String[] stringArray0 = new String[0];
      Long long0 = Long.getLong("fastjson.parser.autoTypeSupport", (long) (byte)0);
      jSONPath0.arrayAdd((Object) long0, (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("g#lq|WofqI4Dr7%]`Tbe");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("w=8p", false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath jSONPath0 = new JSONPath("w=8p");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, jSONPath_PropertySegment0, jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$PropertySegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("/");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLDataException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-74));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/stackTrace/9";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(byte0, stringArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2568, 2568, 2568, 2396, 2568);
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject(mockGregorianCalendar0, stringArray0);
      assertSame(mockGregorianCalendar0, object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$FilterGroup", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$FilterGroup";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_PropertySegment0, stringArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath0, stringArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g4}G2fZ");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2568, 2568, 2568, 2396, 2568);
      Set<?> set0 = jSONPath0.evalKeySet(mockGregorianCalendar0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      Map<String, Object> map0 = JSONPath.paths((Object) "*");
      Set<?> set0 = jSONPath0.evalKeySet(map0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(33);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("writeFieldNameDirect", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(33, 46, 182);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, serializeConfig0, jSONPath0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath(" yk", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(" yk", "fastjson.parser.deny", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      boolean boolean0 = jSONPath0.removePropertyValue("false", " o9xUeqE(:~mW(y", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("|jke~D~s6_GZ]");
      boolean boolean0 = jSONPath0.removePropertyValue("illegal json : ", "*", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      jSONPath0.deepScan(vector0, "FBaqqovte${bS5b", vector0);
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      TreeSet<SQLIntegrityConstraintViolationException> treeSet0 = new TreeSet<SQLIntegrityConstraintViolationException>();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>(treeSet0);
      Vector<Object> vector0 = new Vector<Object>(arrayDeque0);
      jSONPath0.deepScan(sQLClientInfoException0, "*", vector0);
      assertEquals(0, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("N");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("N", "N", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path N, segement N
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("cLjCQRoyV", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = jSONPath0.contains((Object) mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) "*");
      boolean boolean0 = JSONPath.contains((Object) map0, "in");
      assertEquals(1, map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Short short0 = new Short((short)25);
      boolean boolean0 = JSONPath.eqNotNull(short0, (-1580386065683472715L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Float float0 = new Float(1848.202F);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Double double0 = new Double((-400.99352));
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Float float0 = new Float(0.0);
      boolean boolean0 = JSONPath.eqNotNull(float0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Double double0 = new Double((-1353.43801744791));
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Byte byte0 = new Byte((byte)121);
      boolean boolean0 = JSONPath.eqNotNull(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1));
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((long) 938);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".*");
      Byte byte0 = new Byte((byte) (-70));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("#{X", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("#{X", sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(".*", ".*", 16384, sQLIntegrityConstraintViolationException0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLTransientConnectionException0, (Object) byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("3bc'iNa+");
      JSONPath jSONPath1 = JSONPath.compile("GT");
      boolean boolean0 = JSONPath.eq(jSONPath1, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("BETEEN", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONPath jSONPath0 = new JSONPath("a7J(.dE>N@MD");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Np9O:WZH~XcFi?B", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLNonTransientConnectionException0, arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*";
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("g4}G2fZ");
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, "g4}G2fZ", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("3bc'iNa+");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(339);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath_ArrayAccessSegment0, (-1166), propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$ArrayAccessSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2598), 90, 90);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      int[] intArray0 = new int[3];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable("/cause/stackTrace/10");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" M?]$8zt", hashMap0, mockThrowable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLClientInfoException0);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, batchUpdateException0, hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/cause/stackTrace/10";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(object0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/11");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/cause/stackTrace/11", "/cause/stackTrace/11", (-1609));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLInvalidAuthorizationSpecException0);
      StackTraceElement stackTraceElement0 = (StackTraceElement)jSONPath0.eval((Object) sQLNonTransientConnectionException0);
      //  // Unstable assertion: assertEquals("java.util.concurrent.ThreadPoolExecutor$Worker", stackTraceElement0.getClassName());
      //  // Unstable assertion: assertNotNull(stackTraceElement0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("g4}G2fZ", 386.0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("z.A1");
      SQLWarning sQLWarning0 = new SQLWarning("z.A1");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("g4}G2fZ", "{6h,*i", hashMap0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLWarning0, sQLClientInfoException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1500);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("unclosed.str", serializeConfig0, parserConfig0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_NotNullSegement0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("g4}G2fZ", 386.0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("g4}G2fZ");
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_MultiPropertySegment0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("il&>legal jsn : ");
      JSONPath jSONPath0 = JSONPath.compile("an");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, bigDecimal0, "il&>legal jsn : ");
      assertEquals("il&>legal jsn : ", object0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ll", "com.alibaba.fastjson.JSONPath$PropertySegment", 79, (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("6QOwV1v", ")/", sQLNonTransientConnectionException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.eval((JSONPath) null, sQLTransactionRollbackException0, sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$FilterSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      Object object0 = jSONPath_FilterSegment0.eval((JSONPath) null, "CZ%x_cXv&^\"9XL W?", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("sZ^");
      Pattern pattern0 = Pattern.compile("h:E+D>l3@");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("h:E+D>l3@", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/stackTrace/1", sQLTransientException0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLSyntaxErrorException0, "h:E+D>l3@");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("unclosed.str", "(Ljava/util/Collection;C)V", true);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, "*", "*", "unclosed.str");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ah=Q!>.nY#v.@";
      stringArray0[1] = "Ah=Q!>.nY#v.@";
      stringArray0[2] = "^-0DSP&s]$^*p#F";
      stringArray0[3] = "'T'";
      stringArray0[4] = "6QOwV1v";
      stringArray0[5] = "6QOwV1v";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("6QOwV1v", "Ah=Q!>.nY#v.@", "cast", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("Ah=Q!>.nY#v.@");
      DataTruncation dataTruncation0 = new DataTruncation((-3600), false, true, (-3600), (-3600));
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "^-0DSP&s]$^*p#F", "6QOwV1v", dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("AyHF5/UyU(RGwR;,K@", "el##*r:k", "el##*r:k", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("*", jSONPath_KeySetSegment0, jSONPath_Operator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      Object object0 = JSONPath.reserveToArray(sQLNonTransientConnectionException0, (String[]) null);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, object0, ".", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("fastjson.parser.deny.internal", (-1027), jSONPath_Operator0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, (Object) null, "Vv_Vya8CL0zGI", arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("il&>legal js.n : ");
      JSONPath jSONPath0 = JSONPath.compile("*");
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("yaf= )MB+r8@jk", stringArray0, true);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "yaf= )MB+r8@jk", jSONPath_SizeSegment0, jSONPath_NullSegement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("*", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("9R8k*%\"ejM[P%J~)");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      MockDate mockDate0 = new MockDate(97, 101, 101, 97, 1024, 101);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath_SizeSegment0, mockDate0, "u");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0Csy(]uj-,:xY@6O";
      stringArray0[1] = "0Csy(]uj-,:xY@6O";
      stringArray0[2] = "0Csy(]uj-,:xY@6O";
      stringArray0[3] = "0Csy(]uj-,:xY@6O";
      stringArray0[4] = "0Csy(]uj-,:xY@6O";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("0Csy(]uj-,:xY@6O", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("u");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath0, jSONPath0, "0Csy(]uj-,:xY@6O");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("3bc'iNa+");
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-909L));
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = longArray0[1];
      longArray0[3] = longArray0[1];
      longArray0[4] = longArray0[2];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("P5jJ51)'s)0r", longArray0, false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(290, 3795, 290);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Nf0.`t>U", "fastjson.parser.autoTypeSupport", 43);
      Short short0 = new Short((short)12218);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_RangeSegment0, sQLFeatureNotSupportedException0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("3bc'iNa+");
      Long[] longArray0 = new Long[5];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("P5jJ51)'s)0r", longArray0, false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(290, 3795, 290);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Nf0.`t>U", "fastjson.parser.autoTypeSupport", 43);
      Short short0 = new Short((short)12218);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_RangeSegment0, sQLFeatureNotSupportedException0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("rlike", (-1136L), (-2233L), true);
      JSONPath jSONPath0 = new JSONPath("rlike");
      Float float0 = new Float((float) (-2233L));
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "rlike", float0, "rlike");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[] longArray0 = new long[2];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("g4}G2fZ", longArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntInSegement0, jSONPath_IntInSegement0, false);
      JSONPath jSONPath0 = new JSONPath("g4}G2fZ");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("L", "L");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLFeatureNotSupportedException0, "g4}G2fZ", sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("TQ:h_1rK!0f hl:}S~", "ig9[7}w(", false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*1;xH%@|7A|B");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ig9[7}w(", sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "/stackTrace/9", sQLNonTransientConnectionException0, sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("*");
      Float float0 = new Float((double) (short)42);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("*", (String) null);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, float0, float0, sQLNonTransientException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("DisableASM");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-274), (-274), (-937));
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, "BETEEN");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1612, (-1912), 1612);
      JSONPath jSONPath0 = new JSONPath(">FCuFN0ywfoDiFrxGj");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, ">FCuFN0ywfoDiFrxGj", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("g4}G2fZ");
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, "g4}G2fZ");
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" -_IqO[6fMI|");
      String[] stringArray0 = new String[2];
      stringArray0[0] = " -_IqO[6fMI|";
      stringArray0[1] = "writeNormal";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("getFieldValue error.", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("1.2.68", true);
      jSONPath_PropertySegment0.setValue(jSONPath0, serializeConfig0, jSONPath0);
      assertEquals("@type", serializeConfig0.getTypeKey());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[S", "fastjson.parser.safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[S
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" -_IqO[6fMI|");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("writeNormal", true);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, "writeNormal", (Object) null);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      int int0 = JSONPath.compare(uUID0, uUID0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      SQLDataException sQLDataException0 = new SQLDataException("V)1O+'U");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*", "*", (-39), sQLDataException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLInvalidAuthorizationSpecException0, jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("n");
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(44, 44, 2265);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath_RangeSegment0, bigInteger0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"=r");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("\"=r");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3f/.X:\"*gJ9e");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("3f/.X:\"*gJ9e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3f/.X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("byo+xi\",-3>@7L");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("byo+xi\",-3>@7L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"byo+xi\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/StackTrace/2");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("StackTrace", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("g4}G2fZ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'g, but 'Z'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Ljava/lang/Object;");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(3, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JSONPath.size((Object) sQLTransientConnectionException0, "\\-");
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("`$(1@|S%]^!76jk", (SerializeConfig) null, parserConfig0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      hashMap0.remove((Object) jSONPath0, (Object) bigInteger0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(javaBeanSerializer0, "fastjson.parser.safeMode", (-1930L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      JSONPath.Operator jSONPath_Operator0 = jSONPath_JSONPathParser0.readOp();
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      int[] intArray0 = new int[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("v(zM\"e`h", "max", 2626, intArray0, sQLDataException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("between", "can not create ASMParser", 2626, batchUpdateException0);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval((JSONPath) null, jSONPath_Operator0, sQLTransientException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'s*,s*'");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("s*,s*'", object0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("json-path can not be null or empty");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+0Ne][SRB");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(1L);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("q(]H");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1580386065683472715L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5-L^EqH:z");
      jSONPath_JSONPathParser0.readValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(Ljava/lang/Class;)Ljava/util/Collection;");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3f/.X:\"*gJ9e");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("can not cast oracle.sqlDATE to Date");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".*");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Set<?> set0 = jSONPath0.keySet((Object) serializeConfig0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$#A={`");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $#A={`
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) hashMap0, serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLIntegrityConstraintViolationException0, serializeConfig0);
      //  // Unstable assertion: assertEquals(162, map0.size());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("<q0qiZ(7h/;?@jJ1INC", (String) null, parserConfig0, 7, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "h^8.Ow[8%[P^=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Double double0 = new Double(54);
      boolean boolean0 = JSONPath.set((Object) double0, ";", (Object) "5be[Y+pQ.9I>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      boolean boolean0 = JSONPath.set((Object) batchUpdateException0, ".O", (Object) serializeConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "*", (Object) "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("i");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "i");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      boolean boolean0 = JSONPath.remove((Object) throwableDeserializer0, "fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "/stackTrace/9", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path /stackTrace/9
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("!{K", serializeConfig0, parserConfig0);
      Object[] objectArray0 = new Object[1];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g4}G2fZ");
      Object[] objectArray0 = new Object[0];
      JSONPath.arrayAdd((Object) jSONPath0, "g4}G2fZ", objectArray0);
      assertEquals("g4}G2fZ", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONPath jSONPath0 = new JSONPath("*");
      jSONPath0.arrayAdd((Object) "*", (Object[]) stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      Byte byte0 = new Byte((byte) (-74));
      int int0 = jSONPath0.size((Object) byte0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(";");
      int int0 = jSONPath0.size((Object) ";");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("HxN-=B$gEM2U,5gg|", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : HxN-=B$gEM2U,5gg|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~E.pEVQ,5", sQLTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(2916, false, false, (-429), 34, sQLTransientConnectionException0);
      boolean boolean0 = jSONPath0.containsValue((Object) dataTruncation0, (Object) sQLTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1841207068));
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath_ArrayAccessSegment0, ";", (Object) ";");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*");
      boolean boolean0 = jSONPath0.containsValue((Object) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      Integer integer0 = new Integer(40);
      boolean boolean0 = jSONPath0.contains((Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("W");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("rlike", "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("Ah=Q!>.nY#v.@", "\u0000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2Ah=Q!>.nY#v.@
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("u");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/5");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      Float float0 = new Float((double) 1816L);
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, float0, "BFtS");
      assertFalse(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("0!I'XGf)ku", "!+OMWl", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("H4Nn9&Z#)p~.}&", serializeConfig0, parserConfig0);
      Float float0 = new Float(633.0F);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, float0, "fastjson.parser.autoTypeAccept", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("g4}G2fZ");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1841207068));
      JSONPath jSONPath0 = JSONPath.compile("[S");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, "[S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~E.pEVQ,5", sQLTransientException0);
      boolean boolean0 = jSONPath0.containsValue((Object) "/stackTrace/9", (Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("writeFieldNameDirect");
      SerializeConfig serializeConfig0 = new SerializeConfig(33);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("writeFieldNameDirect", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, serializeConfig0, (Object) null, parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short) (-701), (-2246), (-1));
      JSONPath jSONPath0 = new JSONPath("~u&\"0e@ytJ eTOcO");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "org.springframewcrk.secu^ity.core.authority.SimpleGrantedAuthority", "str");
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer", "m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "/stackTrace/10", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      String string0 = jSONPath0.getPath();
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Integer integer0 = new Integer(124);
      Object object0 = JSONPath.eval((Object) integer0, "xx6T]");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(">FCuFN0ywfoDiFrxGj");
      Set<?> set0 = JSONPath.keySet((Object) jSONPath0, "rlike");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) "*");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "*";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(map0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(")q[*+C(u({BSlrXimrG", true);
      JSONPath jSONPath0 = new JSONPath("(I)Ljava/lang/Integer;");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.google.common.collect.TreeMultimap", (-1014497654951707614L), 613L, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }
}
