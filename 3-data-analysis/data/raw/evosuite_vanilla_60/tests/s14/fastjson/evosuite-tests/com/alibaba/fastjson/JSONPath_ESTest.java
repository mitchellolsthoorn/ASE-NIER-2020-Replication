/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 15:29:05 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float(0.0F);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(":aunWJd$XI");
      JSONPath jSONPath0 = JSONPath.compile("*w^:*Y@o_h");
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, float0, ":aunWJd$XI", hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Long long0 = new Long(1967);
      Long long1 = new Long(8963398325558730460L);
      boolean boolean0 = JSONPath.eqNotNull(long0, long1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Mn<-#");
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Mn<-#");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("Mn", string0);
      
      JSONPath.Operator jSONPath_Operator0 = jSONPath_JSONPathParser0.readOp();
      int[] intArray0 = new int[3];
      intArray0[0] = 112;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_Operator0, linkedList0);
      assertEquals(3, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Or");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("in");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("size");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 's'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("am PQZTD[d);W<+3");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.contains((Object) "g=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("true");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!O#W)b~<7:fy)l8S3");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/10");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(254);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9C^o*fYT");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(9L, object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("P)n[vu=[q*\"KTu");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("J8.,YW!I]BRJ6?H#i'?");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "J8.,YW!I]BRJ6?H#i'?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. J8.,YW!I]BRJ6?H#i'?
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract("yB[7B\"y3VsZK*<", "zP`9\"hOBk", parserConfig0, (-1726), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("g=");
      jSONPath_JSONPathParser0.readName();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      jSONPath0.init();
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("between", serializeConfig0, parserConfig0);
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, parserConfig0, jSONPath_MultiIndexSegment0);
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("fastjson.parser.autoTypeAccept");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("fastjson.parser.deny", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      UUID uUID0 = MockUUID.fromString("fastjson.parser.deny");
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath_Operator0, uUID0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("g=");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('q');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9C^o*fYT");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('o');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'o, but '9'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("piBv8KErpQ0gLF");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1460));
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double double0 = Double.valueOf((double) (-2135L));
      JSONPath jSONPath0 = new JSONPath("like");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, (Object) null, double0);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5iOZ>");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(65536);
      assertEquals(65541.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("1", "1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig1 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("E_8ATCH", "E_8ATCH");
      int int0 = JSONPath.size((Object) sQLFeatureNotSupportedException0, "`");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      int int0 = jSONPath0.size((Object) "zP`9\"hOBk");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g=");
      StringReader stringReader0 = new StringReader("g=");
      boolean boolean0 = jSONPath0.setPropertyValue(stringReader0, "org.hibernate.Hibernate", (-6586085717218287427L), "g=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) null, "deserialze", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("piBv8KErpQ0gLF");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1273), 831, (-1273));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = jSONPath0.set((Object) mockGregorianCalendar0, (Object) bigDecimal0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Set<?> set0 = JSONPath.keySet((Object) serializeConfig0, "astjson");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("g=");
      Set<?> set0 = jSONPath0.keySet((Object) sQLTransientConnectionException0);
      assertEquals(5, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<JSONPath.MultiPropertySegment> class0 = JSONPath.MultiPropertySegment.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.getPropertyValue(parserConfig0, "/stackTrace/10", 5641L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nin");
      SQLDataException sQLDataException0 = new SQLDataException("T4K Isuq^U;7|gW_s0", "}Ud9hH;", 47);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("N", true);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path nin, segement N
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g=");
      Class<SQLWarning> class0 = SQLWarning.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.getArrayItem((Object) null, 4);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%?Cclq#'E ttt)J");
      DataTruncation dataTruncation0 = new DataTruncation((-89), true, true, 34, 0);
      DataTruncation dataTruncation1 = (DataTruncation)jSONPath0.getArrayItem(dataTruncation0, 0);
      assertEquals("01004", dataTruncation1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[2];
      Object object0 = JSONPath.extract("", "JSONPath$KeySetSegment", parserConfig0, 15, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nin");
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      int int0 = jSONPath0.evalSize(bigDecimal0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      int int0 = jSONPath0.evalSize(parserConfig0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("cMx");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(64, (-1641), 92, 153, 153);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      int int0 = jSONPath0.evalSize(date0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("J8.,YW!I]BRJ6?H#i'?");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(41, 181, 181);
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_RangeSegment0);
      assertFalse(set0.contains("J8.,YW!I]BRJ6?H#i'?"));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" ");
      Set<?> set0 = jSONPath0.evalKeySet("-");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)jSONPath0.eval((Object) sQLNonTransientException0);
      assertNull(sQLNonTransientException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "fastjson.parser.safeMode", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSONPath$PropertySegment", "JSONPath$PropertySegment");
      boolean boolean0 = JSONPath.containsValue((Object) sQLNonTransientConnectionException0, "JSONPath$PropertySegment", (Object) sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.deny", (String[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath.size((Object) jSONPath_FilterSegment0, "Ul{ch!");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" X[Nd");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("s8%@zP", "%?Cclq#'E ttt)J");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/2");
      int int0 = jSONPath0.size((Object) "/cause/stackTrace/2");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("YD_cEJY?8#W");
      JSONPath jSONPath0 = JSONPath.compile("YD_cEJY?8#W");
      jSONPath0.size((Object) sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(131072);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("P%YgD", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)33);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(short0, "java.nio.HeapByteBuffer", 467L, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("S?\"7s%67ruqo*;hxQ");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("*");
      JSONPath jSONPath0 = JSONPath.compile("*");
      Class<Short> class0 = Short.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Segment0, "com.alibaba.fastjson.JSONPath$MultiPropertySegment", (Object) javaBeanSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) class0, (Object) class0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Mn<-#");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("in", true);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "in", (Object) jSONPath_PropertySegment0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Mn<-#
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      BigDecimal bigDecimal0 = new BigDecimal(1593);
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) parserConfig0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "E_8ATCH";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("E_8ATCH");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("E_8ATCH", "E_8ATCH");
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, "E_8ATCH", sQLFeatureNotSupportedException0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath1.set((Object) jSONPath_MultiPropertySegment0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("AV4m}TP?Ys5N&i(bmO");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "`Ao", (Object) "`Ao");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : AV4m}TP?Ys5N&i(bmO
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "B";
      stringArray0[1] = "B";
      stringArray0[2] = "rlike";
      stringArray0[3] = "rlike";
      stringArray0[4] = "J8.,YW!I]BRJ6?H#i'?";
      stringArray0[5] = "J8.,YW!I]BRJ6?H#i'?";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_MultiPropertySegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. J8.,YW!I]BRJ6?H#i'?
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("/", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(C)Ljava/math/BigDecimal;");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_WildCardSegment0, "caT[@$+?sE'", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("R%y3dUl:/", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigDecimal0, "/", true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("autoTypeAccept", "autoTypeAccept", true);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(110);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("autoTypeAccept", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(serializeConfig0, "fastjson.parser.deny", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "fastjson.parser.deny", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) class0, "fastjson.parser.deny.internal");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("V-LK;5P[", "");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTimeoutException0, "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      DataTruncation dataTruncation0 = new DataTruncation((-631), false, false, (-1436698610), (-214748364));
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) dataTruncation0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(1/5");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "(1/5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. (1/5
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("rlike", "rlike");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2rlike
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("fastjson.parser.autoTypeSupport", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<SQLException> class0 = SQLException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("gGK`", "evalSize error : ", (Throwable) null);
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) sQLInvalidAuthorizationSpecException0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("V-LK;5P[");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("\"R<R4T3aG\"F6=");
      JSONPath jSONPath0 = new JSONPath("\"R<R4T3aG\"F6=");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath_Segment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"R<R4T3aG\"F6=
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Oi@0'E0Va");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Oi@0'E0Va
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("q|]8");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : q|]8
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Il5\"zzL,SYn!Wh75|%S");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("g=");
      Object object0 = jSONPath0.getPropertyValue(sQLTransactionRollbackException0, (String) null, (-4270347329889690746L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%?Cclq#'E ttt)J");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%?Cclq#'E ttt)J");
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeSupport", parserConfig0, 39, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("%", "JSONPath$KeySetSegment", parserConfig0, 15, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "VfFbP]GUlL[t}@'~k7u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("80c", "80c");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // int
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(110);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("0z$n1O({b{ah", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ulug");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 0z$n1O({b{ah
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) bigInteger0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float((float) (-2135L));
      Object object0 = JSONPath.eval((Object) float0, "scanEnum");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "am PQZTD[d);W<+3", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("6tTVx%&");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeSupport", "/stackTrace/10");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 6tTVx%&
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(bigDecimal0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = new SerializeConfig(4);
      JSONPath jSONPath0 = new JSONPath("ub3O)<.f", serializeConfig0, parserConfig0);
      Byte byte0 = Byte.valueOf((byte)5);
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "`RhJ~g_[t!&WMll}", (short)97, byte0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%?Cclq#'E ttt)J");
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      jSONPath0.deepSet(javaBeanSerializer0, "_zE[./t[ tfx`{+", 8L, jSONPath_SizeSegment0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Class<Short> class0 = Short.class;
      ObjectSerializer objectSerializer0 = serializeConfig0.createJavaBeanSerializer(class0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(objectSerializer0, "fastjson.parser.deny", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      jSONPath0.getPath();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(parserConfig0, "B", linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("g=");
      JSONPath jSONPath0 = JSONPath.compile("g");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepScan(jSONPath_JSONPathParser0, "6:C+y{uZbUB#4H~", arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("E_8ATCH");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "E_8ATCH");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLRecoverableException0, vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("P)n[vu=[q*\"KTu");
      Integer integer0 = new Integer(36);
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepGetPropertyValues(integer0, stack0);
      assertFalse(stack0.contains("P)n[vu=[q*\"KTu"));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.EnumSerializer");
      boolean boolean0 = jSONPath0.containsValue((Object) "com.alibaba.fastjson.serializer.EnumSerializer", (Object) "com.alibaba.fastjson.serializer.EnumSerializer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%?Cclq#'E ttt)J");
      boolean boolean0 = JSONPath.contains((Object) jSONPath0, "n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.contains((Object) jSONPath_SizeSegment0, ",Y1I^/-J0U(RL");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("0'J<#$-W");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "0'J<#$-W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 0'J<#$-W
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("N~SIgqCG0ZiM!~&AwFc", "N~SIgqCG0ZiM!~&AwFc");
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("V", "<='mKu4%PB7~c5cC(", 194, intArray0, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath0, "c", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path c
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLWarning0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLFeatureNotSupportedException0, "writeAsArray", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept");
      jSONPath0.deepSet((Object) null, "parser", (-2436L), sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjson.parser.autoTypeAccept", sQLNonTransientConnectionException0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j]1I?u?");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("j]1I?u?", (List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("=");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, hashMap0, (-9));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.util.HashMap
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j]1I?u?");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny", "j]1I?u?", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, sQLFeatureNotSupportedException0, 52429, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("2)'(G", false);
      JSONPath jSONPath0 = JSONPath.compile("2)'(G");
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Byte byte0 = new Byte((byte)0);
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_MultiIndexSegment0, byte0);
      assertEquals("2)'(G", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("3K'EAw{r!Ts)|\":", false);
      JSONPath jSONPath0 = new JSONPath("3K'EAw{r!Ts)|\":");
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%%");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$V1fY.v9");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TimeZone.getDefault();
      String[] stringArray0 = new String[0];
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("toJSON error", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("^RU&ah|Ux=9xfwN/.'");
      jSONPath_IntObjInSegement0.apply(jSONPath0, "^RU&ah|Ux=9xfwN/.'", "^RU&ah|Ux=9xfwN/.'", "toJSON error");
      Float float0 = new Float(1000000.0);
      Integer integer0 = new Integer(784);
      JSONPath.containsValue((Object) float0, "^RU&ah|Ux=9xfwN/.'", (Object) integer0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("am PQZTD[d);W<+3", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":aunWJd$XI");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode");
      jSONPath0.arrayAdd((Object) sQLTransientConnectionException0, (Object[]) null);
      assertEquals(":aunWJd$XI", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("zP`9\"hOBk", "illeal jsonpath syntax. ", 47);
      boolean boolean0 = jSONPath0.contains((Object) sQLSyntaxErrorException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("_asm_list_item_deser__", (SerializeConfig) null, parserConfig0);
      Short short0 = new Short((short)1793);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("jL");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jL");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com", parserConfig0, 822);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2com
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      JSONScanner jSONScanner0 = new JSONScanner("!O#W)b~<7:fy)l8S3");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      Object object0 = jSONPath0.eval((Object) serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("eSY`xrr5k", true);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, "eSY`xrr5k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("piBv8KErpQ0gLF", ")", (ParserConfig) null, 128, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("g=", "g=");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g=";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!om`q h1i ", sQLTimeoutException0);
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(sQLIntegrityConstraintViolationException0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      String[] stringArray0 = new String[0];
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)JSONPath.reserveToObject(mockGregorianCalendar0, stringArray0);
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "E_8ATCH";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer", stringArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("fastjson.parser.deny", (String[]) null);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("x8", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLSyntaxErrorException0, "a]q1_^:wD,XWg;U0", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("J8.,YW!I]BRJ6?H#i'?");
      jSONPath0.removePropertyValue("J8.,YW!I]BRJ6?H#i'?", "am PQZTD[d);W<+3", true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<SQLFeatureNotSupportedException> linkedList1 = new LinkedList<SQLFeatureNotSupportedException>();
      linkedList0.containsAll(linkedList1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1);
      jSONPath_RangeSegment0.eval(jSONPath0, sQLSyntaxErrorException0, (Object) null);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("am PQZTD[d);W<+3", (String) null, (String) null, (String[]) null, true);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertEquals(0, sQLNonTransientException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("J8.,YW!I]BRJ6?H#i'?");
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(linkedList0, "J8.,YW!I]BRJ6?H#i'?", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(47);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("pqztd", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONPath0.deepSet(bigDecimal0, "6Te~:1", 9007397400878834145L, serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j]1I?u?");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      jSONPath0.deepSet(hashMap0, "\\.", (-650378586184600901L), sQLNonTransientException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      UUID uUID0 = MockUUID.fromString("6Uwlds2K?YC");
      jSONPath0.deepSet(serializeConfig0, "_zE[./t[ tfx`{+", (-3552L), uUID0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepScan(arrayList0, "fastjson.parser.safeMode", arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("3K'EAw{r!Ts)|\":");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("t5nQFG%]Z}7E``QfMQ", "3K'EAw{r!Ts)|\":", (-358));
      SQLWarning sQLWarning0 = new SQLWarning("", "between", (-358), sQLTransientConnectionException0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLWarning0, "TODO", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 3K'EAw{r!Ts)|\":, segement TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[7];
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      boolean boolean0 = JSONPath.set((Object) mockGregorianCalendar0, "z", (Object) stringArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) arrayList0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Double double0 = new Double(0.0);
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (byte)8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Integer integer0 = new Integer(2707);
      boolean boolean0 = JSONPath.eqNotNull(integer0, (-1580386065683472715L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Double double0 = new Double(0.0);
      boolean boolean0 = JSONPath.eqNotNull((-318L), double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Short short0 = new Short((short)1928);
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(float0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.alibaba.fastjson.JSONPath$KeySetSegment", "=");
      Short short0 = new Short((short)0);
      SQLWarning sQLWarning0 = new SQLWarning("9C^o*fYT", "0", 116, sQLNonTransientConnectionException0);
      boolean boolean0 = JSONPath.eq(short0, sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("C/", "com.alibaba.fastjson.JSONPath$SizeSegment");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("J8.,YW!I]BRJ6KH#iEd");
      boolean boolean0 = JSONPath.eq(jSONPath0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = JSONPath.eq((Object) null, sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(110, false, false, (short)42, 37);
      boolean boolean0 = JSONPath.eq(dataTruncation0, dataTruncation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Long long0 = Long.valueOf(2866L);
      boolean boolean0 = JSONPath.eq("com.alibaba.fastjson.JSONPath$MaxSegment", long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j]1I?u?");
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepGetPropertyValues(vector0, vector0);
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("cMx");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath jSONPath0 = new JSONPath("x");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(91, 91, 91);
      Float float0 = new Float(1866.5274456201);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, float0, jSONPath_Operator0);
      boolean boolean0 = jSONPath0.removeArrayItem(jSONPath0, object0, 91);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%?Cclq#'ES:tt)J");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("%?Cclq#'ES:tt)J", 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Set<?> set0 = JSONPath.keySet((Object) sQLDataException0, "/stackTrace/7");
      assertNotNull(set0);
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("kotlin.ranges.ClosedDoubleRange");
      DataTruncation dataTruncation0 = new DataTruncation((-626), true, false, 1967, 1967);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("kotlin.ranges.ClosedDoubleRange", "kotlin.ranges.ClosedDoubleRange", jSONPath_Operator0);
      Long[] longArray0 = new Long[6];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("kotlin.ranges.ClosedDoubleRange", longArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_IntObjInSegement0, false);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("kotlin.ranges.ClosedDoubleRange", true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(dataTruncation0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_PropertySegment0, longArray0[5], sQLTransactionRollbackException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8'zr8o9/c8'Hhk}";
      stringArray0[1] = "Z.ld-3Mu>piQ!U";
      stringArray0[2] = "BHaG\"8hq [RwmcaO";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("r't", "Z.ld-3Mu>piQ!U", "8'zr8o9/c8'Hhk}", stringArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(60);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("BHaG\"8hq [RwmcaO", serializeConfig0, parserConfig0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_MatchSegement0, false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "Z.ld-3Mu>piQ!U", "r't", "8'zr8o9/c8'Hhk}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_WildCardSegment0, sQLDataException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("*");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "*", jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g=");
      StringReader stringReader0 = new StringReader("g=");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_MultiIndexSegment0, stringReader0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONArray0, (Object) null);
      assertEquals(1, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j]1I?u?");
      Long long0 = new Long(2037L);
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(" 4w", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, longArray0[0], sQLTransactionRollbackException0);
      assertNotNull(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.JodaCodec", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("nin", "nin", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "com.alibaba.fastjson.serializer.JodaCodec", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("pqztd", "fastjson.parser.deny", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, jSONPath_WildCardSegment0);
      assertSame(jSONPath_WildCardSegment0, object0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("stackTrace", "stackTrace", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("1");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, sQLTimeoutException0, (Object) null, jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("J8.,YW!I]BRJ6?H#i'?");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("!om`q h1i ", "Gi", true);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("N'b.S5bA");
      Double double0 = new Double((-1785.0));
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, "!om`q h1i ", sQLNonTransientException0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8'zr8o9/c8'Hhk}";
      stringArray0[1] = "Z.ld-3Mu>piQ!U";
      stringArray0[2] = "BHaG\"8hq [RwmcaO";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("r't", "Z.ld-3Mu>piQ!U", "8'zr8o9/c8'Hhk}", stringArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(60);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("BHaG\"8hq [RwmcaO", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, parserConfig0, serializeConfig0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/10");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("JSONPath$MultiPropertySegment", jSONPath_Segment0, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/10", serializeConfig0, (ParserConfig) null);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, jSONPath_Operator0, jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(87);
      JSONPath jSONPath0 = new JSONPath("like");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("5lH}V~~6n", 2579.4, jSONPath_Operator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("PKt0slI-L[");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("PKt0slI-L[", "x6{[", 87, sQLTransactionRollbackException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, sQLFeatureNotSupportedException0, jSONPath_WildCardSegment0, jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Mn<-#");
      Integer integer0 = new Integer(2707);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("arg", 8963398325558730460L, jSONPath_Operator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("S`#%ZN0[}cU$6,,n");
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath0, integer0, sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("G82po/m-", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("set property error, ");
      Float float0 = new Float((-764.9753909475197));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      BigDecimal bigDecimal0 = new BigDecimal((long) 1004);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLRecoverableException0, float0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "S";
      stringArray0[1] = "S";
      stringArray0[2] = "S";
      stringArray0[3] = "x6{[";
      stringArray0[4] = "like";
      stringArray0[5] = "S";
      stringArray0[6] = "S";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("S", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("S");
      Float float0 = new Float(2579.4);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "S", float0, "x6{[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("kotlin.ranges.ClosedDoubleRange");
      Long[] longArray0 = new Long[6];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("kotlin.ranges.ClosedDoubleRange", longArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, longArray0[2], jSONPath_IntObjInSegement0);
      assertSame(object0, jSONPath_IntObjInSegement0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j]1I?u?");
      Long long0 = new Long(2037L);
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(" 4w", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, (Object) null, sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%?Cclq#'E ttt)J");
      UUID uUID0 = MockUUID.fromString("NOT_IN");
      Collection<Object> collection0 = jSONPath0.getPropertyValues(uUID0);
      assertNotNull(collection0);
      
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("NOT_IN", (Long[]) null, true);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, (Object) null, "%?Cclq#'E ttt)J", collection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("y<#]Bz^O&/L41");
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("y<#]Bz^O&/L41", longArray0, true);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Gm4Lw/} z=VyjdH", true);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_PropertySegment0, jSONPath0, jSONPath_PropertySegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Double double0 = Double.valueOf((double) 87);
      JSONPath jSONPath0 = new JSONPath("%%");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment(")G", "%%", false);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, jSONPath0, double0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%?Cclq#'E ttt)J");
      SQLWarning sQLWarning0 = new SQLWarning("%?Cclq#'E ttt)J", "Il5\"zzw,SYn!Wh75|%H");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("between", sQLWarning0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("between", sQLNonTransientException0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_ValueSegment0, sQLNonTransientException0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("xd8)b6", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%d+.Gv!D=/@\"}!LE", "N");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("stackTrace");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, sQLFeatureNotSupportedException0, sQLIntegrityConstraintViolationException0, sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("J8.,YW!I]BRJ6?H#i'?");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(718, 1, 718);
      DataTruncation dataTruncation0 = new DataTruncation((-1293), false, true, 718, (-393217));
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, dataTruncation0, "J8.,YW!I]BRJ6?H#i'?");
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("cCx");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, (-1450), 1);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "cCx", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1451
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("cMx");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-15), 1592, 12);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeAccept", "true", sQLWarning0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLDataException0, (Object) null);
      assertNotNull(arrayList0);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("J8.,YW!I]BRJ6?H#i'?");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("J8.,YW!I]BRJ6?H#i'?", true);
      // Undeclared exception!
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath0, "FWh");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        JSONPath.compare("%?Cclq#'ES:tt)J", propertyNamingStrategy0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10", serializeConfig0, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, sQLTransientConnectionException0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("V-LK;5P[");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("\"R<R4T3aG\"F6=");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("V-LK;5P[", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) jSONPath_Segment0, (Object) "V-LK;5P[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : V-LK;5P[
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1:Pcx@<1>o#{iH`Nb2");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Pcx@<1>o#{iH`Nb2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("J8.,YW!I]BRJ6?H#i'?");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("J8.,YW!I]BRJ6?H#i'?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"J8.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-2147483648");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("'s*,s*'");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%%");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("S?\"7s%67ruqo*;hxQ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'S, but 'Q'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("sDL/6Uwlds2K?YC");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("DL/6Uwld", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("c>{vfB\"DX+Q");
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.readOp();
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nin
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("i4Cd=jyk");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-3851359326990528739L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" 6@j[_D&+IL9*ZIY.f");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(6L, object0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6U");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("(I)C", 2078113382421334967L, jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntOpSegement0);
      assertSame(jSONPath_Filter0, jSONPath_IntOpSegement0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/7");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("sDL/6Uwlds2K?YC");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Mn<-#");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("y<#]Bz^O&/L41");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) class0, " X[Nd");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Map<String, Object> map0 = JSONPath.paths((Object) arrayList0, serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("s");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Uzp U-z=ZRph<)", "Im", sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLRecoverableException0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransientConnectionException0);
      //  // Unstable assertion: assertEquals(261, map0.size());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(mockGregorianCalendar0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "wMt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("zee", "com.alibaba.fastjson.JSONPath$KeySetSegment");
      boolean boolean0 = jSONPath0.set((Object) "/", (Object) sQLNonTransientConnectionException0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("6Uwlds2K?YC", (-3552L), (-3552L), false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) serializeConfig0, (Object) jSONPath_FilterSegment0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) bigDecimal0, false);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("g=", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) "g=", (Object) serializeConfig0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%?Cclq#'ES:tt)J");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) "fastjson.parser.deny");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("=");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_WildCardSegment0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SerializeConfig serializeConfig0 = new SerializeConfig(86);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("g=");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLNonTransientException0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      Object[] objectArray0 = new Object[2];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("cMx");
      Set<?> set0 = jSONPath0.keySet((Object) serializeConfig0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(783, false);
      JSONPath jSONPath0 = new JSONPath(">_CLwpTJRc", serializeConfig0, (ParserConfig) null);
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      boolean boolean0 = jSONPath0.containsValue((Object) "true", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("kotlin.ranges.ClosedDoubleRange");
      DataTruncation dataTruncation0 = new DataTruncation((-626), true, false, 1967, 1967);
      boolean boolean0 = jSONPath0.containsValue((Object) "kotlin.ranges.ClosedDoubleRange", (Object) dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/";
      stringArray0[1] = "6Te~:1";
      stringArray0[2] = "nin";
      stringArray0[3] = "{pvz@Eg`@]r";
      stringArray0[4] = "pqztd";
      stringArray0[5] = "C";
      stringArray0[6] = "2Bv]?llLzfnOu0A@";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = JSONPath.contains((Object) jSONPath_MultiPropertySegment0, "/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Object object0 = JSONPath.extract("{", "fastjson.parser.deny.internal");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[_5Rlf?TD9", "=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[_5Rlf?TD9
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/2", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "/", (Object) "zee", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("=", false);
      SerializeConfig serializeConfig0 = new SerializeConfig(119);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("9C^o*fYT", serializeConfig0, parserConfig0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, (Object) null, jSONPath_PropertySegment0);
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("fastjson.parser.autoTypeAccept");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("fastjson.parser.deny", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_RegMatchSegement0, jSONPath_SizeSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("J8.,YW!I]BRJ6?H#i'?");
      JSONPath jSONPath0 = new JSONPath("p");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("p", "J8.,YW!I]BRJ6?H#i'?", (-1));
      boolean boolean0 = jSONPath0.set((Object) jSONPath_NullSegement0, (Object) sQLSyntaxErrorException0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("KNeU7p=MM#rO");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('N', char0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("-");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, parserConfig0, jSONPath_Segment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.parser.ParserConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(110);
      JSONPath jSONPath0 = JSONPath.compile("S?\"7s%67ruqo*;hxQ");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, "S?\"7s%67ruqo*;hxQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("unsupported set operation.");
      JSONPath jSONPath0 = new JSONPath("zJ'*)L9-}%#Sqs/T");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException0, "unsupported set operation.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement(" 4w", 2037L, (-650378586184600901L), true);
      JSONPath jSONPath0 = new JSONPath("j]1I?u?");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" 4w", hashMap0, (Throwable) null);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, sQLClientInfoException0, sQLClientInfoException0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_MultiIndexSegment0, "vL");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_SizeSegment0, jSONPath_SizeSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$SizeSegment cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.!astjsonJSONPath$WildCardSegment");
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, "", "com.alibaba.!astjsonJSONPath$WildCardSegment");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Object object0 = JSONPath.read("", "build object error");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Double double0 = new Double((-3230));
      int int0 = JSONPath.size((Object) double0, "fastjson.parser.autoTypeAccept");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%?Cclq#ES:tt)J");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) null, "&o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) "com.alibaba.fastjson.JSONPath$KeySetSegment", "fastjson.parser.autoTypeAccept");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.arrayAdd((Object) null, "fastjson.parser.safeMode", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nin");
      jSONPath0.remove((Object) "nin");
  }
}
