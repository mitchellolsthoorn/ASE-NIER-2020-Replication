/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 14:04:34 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.MultipleGradientPaint;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.smartcardio.CardTerminals;
import javax.swing.DropMode;
import javax.swing.GroupLayout;
import javax.tools.JavaFileObject;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0Q?<8TG6MG[*J");
      assertEquals("0Q?<8TG6MG[*J", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(",+=&><Ng([iok");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [,+=&><Ng([iok] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("71{L3Jb,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, (-724));
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = new Locale("lo");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JSONObject jSONObject0 = new JSONObject(set0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      try { 
        jSONObject1.getBigInteger("l@r;U9/&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<ByteArrayOutputStream, Character> hashMap0 = new HashMap<ByteArrayOutputStream, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      PipedReader pipedReader0 = new PipedReader(57);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Writer writer0 = jSONObject0.write((Writer) pipedWriter0);
      assertSame(pipedWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", (-169.0F));
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("true", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.optString("int", "");
      assertEquals("", string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Short short0 = new Short((short)33);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Number number0 = jSONObject0.optNumber("CGTAtG]8&`}U}0Rsa)", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-52);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = jSONObject0.optNumber("+=0<)[f!MiJMBea,", (Number) bigInteger0);
      assertEquals((short) (-13312), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONObject0.optNumber("\r", (Number) bigInteger0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Duplicate key \"");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optNumber("Duplicate key \"", (Number) bigDecimal0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-104);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = jSONObject0.optNumber("+=0<)[f!MiJMBea,", (Number) bigInteger0);
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(459);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JSONObject jSONObject0 = new JSONObject(mockPrintStream0);
      long long0 = jSONObject0.optLong("has", (long) 459);
      assertEquals(459L, long0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(pipedOutputStream0, stringArray0);
      int int0 = jSONObject0.optInt("sho", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("org.json.JSONException", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Short, GroupLayout.Alignment> hashMap0 = new HashMap<Short, GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat((String) null, (-2039.107F));
      assertEquals((-2039.107F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<MultipleGradientPaint.ColorSpaceType, Locale.Category> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("RH6-%E9![^", (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("% ~@mW;X", (-1019.61));
      assertEquals((-1019.61), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("#i!", (-714.2389924));
      double double0 = jSONObject0.optDouble("#i!");
      assertEquals((-714.2389924), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("p(@KUIr", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(16);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("Q", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("#i!", (-714.2389924));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("#i!", bigInteger0);
      assertEquals((short) (-714), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("getgetGenericSuperclass", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("#i!", (-714.2389924));
      boolean boolean0 = jSONObject1.isNull("#i!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("$;z{3pKQRzX@|z>;r0[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      jSONObject0.put("tri", (-586L));
      double double0 = jSONObject0.getDouble("tri");
      assertEquals((-586.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 8, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      File file0 = MockFile.createTempFile("getentrySet", "key");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      mockFileWriter0.close();
      try { 
        jSONObject0.write((Writer) mockFileWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stream closed
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote(":9smS0Vqtm9eV$s$|+", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-2293L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(113);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (int) (byte) (-72));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<KeyRep.Type, JavaFileObject.Kind> hashMap0 = new HashMap<KeyRep.Type, JavaFileObject.Kind>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (double) 4088);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("E6`N+3X%OW}V5{K/*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getBoolean("8/%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, jSONObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("ha");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JSONTokener jSONTokener0 = new JSONTokener(mockFileReader0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Duplicate key \"", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name Duplicate key \", locale zh
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("SZtd'SZZ<[=2", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -17
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      jSONObject0.write((Writer) mockPrintWriter0, 93, 93);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, 10, 13);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("71DL3Jb,");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Cdz 3duq^TwX]Or&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Writer writer0 = jSONObject1.write((Writer) mockPrintWriter0, 1286, 2081);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("eNdp45pB6pf&HIml", (-1643.4947));
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write((Writer) stringWriter0, (-2058), (-724));
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = JSONObject.wrap(pipedOutputStream0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("istoString");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockPrintWriter0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = JSONObject.wrap("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("q<I8&}f-kjLA'|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Writer writer0 = JSONObject.quote("q<I8&}f-kjLA'|", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("token cannot be null");
      Writer writer0 = JSONObject.quote((String) null, (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("java.lang.Integer@0000000007", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("8|_+^Ek3[Du", hashMap0);
      long long0 = jSONObject0.optLong("8|_+^Ek3[Du", (-3501L));
      assertEquals((-3501L), long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2);
      long long0 = jSONObject0.optLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("8|_+oEk3[Du", hashMap0);
      int int0 = jSONObject1.optInt("8|_+oEk3[Du", 107);
      assertEquals(107, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("org.json.JSONException", 2630.619F);
      assertEquals(2630.619F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("gethashCode", (double) 2630.619F);
      assertEquals(2630.618896484375, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(459);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JSONObject jSONObject0 = new JSONObject(mockPrintStream0);
      JSONObject jSONObject1 = jSONObject0.append("has", hashMap0);
      boolean boolean0 = jSONObject1.optBoolean("has", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      Class<CryptoPrimitive> class0 = CryptoPrimitive.class;
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.PUBLIC_KEY_ENCRYPTION;
      jSONObject0.optEnum(class0, "r'4E>n,i//+2Rs!221", cryptoPrimitive0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.opt("W5#n'PxWr");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = new Double((-754.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.opt((String) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      Collection<CardTerminals.State> collection0 = hashMap0.values();
      jSONObject0.append("8|_+^Ek3[Du", collection0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      Object object0 = jSONObject1.get("l@r;U9/&");
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      try { 
        jSONObject0.get("Error reading value at index position ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.quote("pFA[?)-tiJ-qrj");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("~1", 29);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("] is not a long.", "] is not a long.");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a long.");
      HashMap<String, Dialog.ModalityType> hashMap0 = new HashMap<String, Dialog.ModalityType>();
      jSONObject0.put("] is not a long.", (Map<?, ?>) hashMap0);
      jSONObject0.toMap();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a long.");
      jSONObject0.toString(93);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      JSONObject jSONObject1 = jSONObject0.put("V(86\":K,IZ", (Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write((Writer) stringWriter0, (-724), 123);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("8|_+^Ek3[Du", hashMap0);
      String string0 = jSONObject1.toString(44);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      StringWriter stringWriter0 = new StringWriter((short)20);
      JSONObject.writeValue(stringWriter0, jSONObject0, (-1006), (short)20);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter((short)435);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Writer writer0 = JSONObject.writeValue(stringWriter0, locale_Category0, 295, (short)435);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a long.");
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("+-$Jx`Zp-1");
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, "org.json.JSONException", 1877, 1877);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 693, 693);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Locale locale0 = new Locale("!Zm");
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(bigInteger0, object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Long long0 = new Long(0L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Short short0 = new Short((short)257);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)257, object0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Character character0 = new Character('b');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('b', object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)JSONObject.wrap(jSONArray0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<FilterOutputStream, Thread.State> hashMap0 = new HashMap<FilterOutputStream, Thread.State>();
      jSONArray0.put(138, (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(113);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Float float0 = new Float(5.8112F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("token cannot be null", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9");
      assertEquals(9, object0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-!!W}t-B=");
      assertEquals("-!!W}t-B=", object0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("] could not convert toB!gInteger.");
      assertEquals("] could not convert toB!gInteger.", object0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("$");
      assertEquals("$", object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-1");
      assertEquals((-1), number0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("41;+p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0.00");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-778.074612520119");
      assertEquals((short) (-778), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("6W44C^-[EvRpz?9");
      assertEquals("6W44C^-[EvRpz?9", object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("eNdp4&$B6pfI&HIml");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3);
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      JSONObject jSONObject1 = jSONObject0.append("org.json.JSONException", pushbackReader0);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(pipedOutputStream0, stringArray0);
      boolean boolean0 = jSONObject0.similar("M?Ckb!U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getFloat("]/3\"jN.uh3q[|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<Thread.State> class0 = Thread.State.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("la", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "l@r;U9/&";
      stringArray0[1] = "l@r;U9/&";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("NE+>|F x!yycN", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Thread.State> class0 = Thread.State.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("true", "true");
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("[2![Qu/?PRNiu", false);
      jSONObject0.optString("[2![Qu/?PRNiu", "gettoUpperCase");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\"\"", 0L);
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      Number number0 = jSONObject1.optNumber("\"\"", (Number) bigDecimal0);
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("{5I1", true);
      jSONObject0.optNumber("{5I1", (Number) double0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("#i!", (-714.2389924));
      long long0 = jSONObject1.optLong("#i!", (-1453L));
      assertEquals((-714L), long0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Duplicate key \"");
      jSONObject0.put("JSON does not allow non-finite numbers.", false);
      jSONObject0.optLong("JSON does not allow non-finite numbers.");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("k:ZAO^/$");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("1_BrBRi3=GWL-$=A");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      jSONObject0.put("tri", (-586L));
      int int0 = jSONObject0.optInt("tri", 2921);
      assertEquals((-586), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("[2![Qu/?PRNiu", true);
      int int0 = jSONObject0.optInt("[2![Qu/?PRNiu");
      assertEquals(3, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("", (double) 2387);
      double double0 = jSONObject0.optDouble("", 6131.770883495995);
      assertEquals(2387.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "get");
      Object object0 = new Object();
      jSONObject0.append("get", object0);
      jSONObject0.optDouble("get", 2767.68352594074);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("8|_+oEk3[Du", hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("8|_+oEk3[Du", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      Integer integer0 = new Integer(2387);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONObjectgt`xt must begin with '{'", (Object) integer0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("A JSONObjectgt`xt must begin with '{'", bigInteger0);
      assertEquals((byte)83, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.accumulate("l@r;U9/&", "l@r;U9/&");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optBigDecimal("l@r;U9/&", bigDecimal0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.increment("l@r;U9/&");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("l@r;U9/&", bigDecimal0);
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("bDM?2-K\u0002E{LZrSmGEL", (-1L));
      BigDecimal bigDecimal0 = jSONObject1.optBigDecimal("bDM?2-K\u0002E{LZrSmGEL", (BigDecimal) null);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("-`$7E/TPfv", false);
      boolean boolean0 = jSONObject0.optBoolean("-`$7E/TPfv", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("", (double) 4088);
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.INSERT;
      DropMode dropMode1 = jSONObject0.optEnum(class0, "", dropMode0);
      assertSame(dropMode1, dropMode0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONPointer jSONPointer1 = new JSONPointer(linkedList0);
      jSONObject0.optQuery(jSONPointer0);
      jSONObject0.append("#ujl8fbG*JG%2}", jSONPointer1);
      Short short0 = new Short((short)435);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Integer integer0 = new Integer(14);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("l@r;U9/&", false);
      try { 
        jSONObject0.increment("l@r;U9/&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      JSONObject jSONObject2 = jSONObject1.increment("l@r;U9/&");
      assertSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject0.putOpt("m},E%w:/rJX3", jSONArray0);
      boolean boolean0 = jSONObject0.has("m},E%w:/rJX3");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("keySet");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("q%;0Qzzgw ", true);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      jSONObject0.increment("q%;0Qzzgw ");
      try { 
        jSONObject0.getString("q%;0Qzzgw ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000024] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<Dialog.ModalExclusionType, StandardLocation> hashMap0 = new HashMap<Dialog.ModalExclusionType, StandardLocation>();
      jSONObject0.put("", (Map<?, ?>) hashMap0);
      jSONObject0.getJSONObject("");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("", double0);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("8|_+^Ek3[Du", hashMap0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("8|_+^Ek3[Du");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\"\"", 0L);
      try { 
        jSONObject1.getJSONArray("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      int int0 = jSONObject1.getInt("l@r;U9/&");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("l@r;U9/&", "l@r;U9/&");
      try { 
        jSONObject1.getInt("l@r;U9/&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      Number number0 = jSONObject1.getNumber("l@r;U9/&");
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("", double0);
      try { 
        jSONObject1.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 4088);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject1.getDouble("");
      assertEquals(4088.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("getspliterator", (double) 4088);
      boolean boolean0 = jSONObject0.optBoolean("getspliterator");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject1 = jSONObject0.putOnce("jrgBee*m\"6t_:M", bigInteger0);
      try { 
        jSONObject1.getBigDecimal("jrgBee*m\"6t_:M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getFloat((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = JSONObject.doubleToString((short) (-1553));
      assertEquals("-1553", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-671.609));
      assertEquals("-671.609", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 13, (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      JSONObject jSONObject1 = jSONObject0.append("Bad value from toJSONString: ", "Bad value from toJSONString: ");
      Map<String, Object> map0 = jSONObject0.toMap();
      jSONObject1.append("Bad value from toJSONString: ", map0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.increment("l@r;U9/&");
      MockFile mockFile0 = new MockFile("l@r;U9/&");
      try { 
        jSONObject0.append("l@r;U9/&", mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[l@r;U9/&] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("tri", jSONArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      MockFile mockFile0 = new MockFile("k:ZAO^/$");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JSONObject jSONObject1 = jSONObject0.accumulate("B]m#-3('A3WgNO%", dataOutputStream0);
      Object object0 = jSONObject1.remove("B]m#-3('A3WgNO%");
      assertSame(dataOutputStream0, object0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      jSONObject1.accumulate("l@r;U9/&", "l@r;U9/&");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      Integer integer0 = new Integer(4088);
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_INSERTION;
      hashMap0.put(integer0, cardTerminals_State0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.TOOLKIT_EXCLUDE;
      hashMap0.put((PushbackReader) null, dialog_ModalExclusionType0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{5I1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 4 [character 5 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = JSONObject.valueToString("k:ZAO^/$");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Object object0 = jSONObject0.remove("B]m#-3('A3WgNO%");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("O+fyw!>{&>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(223);
      HashMap<Component.BaselineResizeBehavior, SequenceInputStream> hashMap0 = new HashMap<Component.BaselineResizeBehavior, SequenceInputStream>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      JSONObject jSONObject1 = jSONObject0.put("V(86\":K,IZ", (Collection<?>) linkedList0);
      jSONObject1.accumulate("V(86\":K,IZ", linkedList0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Thread.State> class0 = Thread.State.class;
      jSONObject0.optEnum(class0, "ZAyBgt;6}eOnNh,x/^/");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(223);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("isintern");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("a JSON pointer should start with '/' or '#/'", 9L);
      float float0 = jSONObject0.optFloat("a JSON pointer should start with '/' or '#/'", 0.0F);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(9.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1333), 2382);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      try { 
        jSONObject0.put("p;u", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull("] is not a valid number.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("bDM?2-K\u0002E{LZrSmGEL", 0.0);
      jSONObject1.optBigDecimal("bDM?2-K\u0002E{LZrSmGEL", (BigDecimal) null);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("8|_+^Ek3[Du");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Number number0 = jSONObject0.optNumber("k:ZAO^/$");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      JSONObject.getNames(jSONObject1);
      assertEquals(1, jSONObject0.length());
  }
}
