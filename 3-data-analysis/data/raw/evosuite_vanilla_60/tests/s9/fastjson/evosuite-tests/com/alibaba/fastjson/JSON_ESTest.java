/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 14:01:50 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.EnumerationSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.GenericArrayTypeImpl;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamClass;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSON_ESTest extends JSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray0 = new JSONArray();
      String string1 = "J\"+-e)@wcE$I";
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.SupportNonPublicField;
      // Undeclared exception!
      try { 
        JSON.parseObject("J\"+-e)@wcE$I", (Type) class0, 249, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      File file0 = MockFile.createTempFile(", actual ", "?w%7Dy:V");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ", actual ";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) ", actual ";
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) ", actual ";
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) "?w%7Dy:V";
      PrintWriter printWriter0 = mockPrintWriter0.format(">MnnuY6lT5YzX\">", objectArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.MapSortField;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.writeJSONString((Writer) printWriter0, (Object) printWriter0, (-1), serializerFeatureArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      serializeConfig0.setPropertyNamingStrategy(propertyNamingStrategy0);
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, false);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray0 = new JSONArray();
      JSON.isValidArray("@type");
      JSONObject jSONObject0 = new JSONObject(false);
      ConcurrentSkipListMap<String, JSONArray> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, JSONArray>();
      jSONObject0.putAll(concurrentSkipListMap0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.SafeMode;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableFieldSmartMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InternFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableFieldSmartMatch;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.NonStringKeyAsString;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.SortFeidFastMatch;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.SupportArrayToBean;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.ErrorOnEnumNotMatch;
      featureArray0[8] = feature8;
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, charset0, (Type) class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Feature feature0 = Feature.UseBigDecimal;
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      JSONObject jSONObject0 = JSON.parseObject("", featureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      uTF8Decoder1.malformedInputAction();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[0] = feature0;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSON.parse("", parserConfig0, featureArray0);
      jSONArray1.toString();
      JSON.setDefaultTypeKey("+(I\"[gMec#K]=F.ZD");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(781);
      jSONObject0.getInteger("_Hg^*WAzpxju(7F");
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      jSONObject0.getObject("_Hg^*WAzpxju(7F", class0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      jSONObject0.put("_Hg^*WAzpxju(7F", (Object) parameterizedTypeImpl0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_Hg^*WAzpxju(7F");
      JSON.toJSON((Object) null, (SerializeConfig) null);
      JSON.isValidArray("xgHj\"6U72d");
      JSONArray jSONArray0 = new JSONArray(989);
      Class<JSONArray> class1 = JSONArray.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("_Hg^*WAzpxju(7F", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2_Hg^*WAzpxju(7F
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = null;
      Class<JSONPObject> class0 = JSONPObject.class;
      EnumerationSerializer enumerationSerializer0 = new EnumerationSerializer();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.addMixInAnnotations(class0, class0);
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)22;
      JSON.isValidObject("fastjson.asmEnable");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONArray jSONArray0 = new JSONArray((byte)14);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getString(278);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 278, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3);
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[3] = (byte)64;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)3;
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject(byteArray0, (Type) null, featureArray0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", (Type) null, parserConfig0, (int) 3, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      SerializeWriter serializeWriter0 = new SerializeWriter(13);
      SerializeWriter serializeWriter1 = new SerializeWriter(13);
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<InputStream, GenericArrayTypeImpl> treeMap0 = new TreeMap<InputStream, GenericArrayTypeImpl>();
      JSON.toJSON((Object) serializeWriter1);
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("fastjson.parser.deny.internal", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.removeMixInAnnotations((Type) null);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableASM;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowISO8601DateFormat;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableASM;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportNonPublicField;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.OrderedField;
      featureArray0[5] = feature5;
      JSON.parseObject((String) null, (Type) null, parserConfig0, 158, featureArray0);
      pascalNameFilter0.process("fastjson.parser.features.ErrorOnEnumNotMatch", "", "");
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONObject0, serializeConfig0, (SerializeFilter) pascalNameFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Annotation> class0 = Annotation.class;
      parserConfig0.createJavaBeanDeserializer(class0, class0);
      // Undeclared exception!
      try { 
        JSON.parse("Q5TQsn/6^oHdrBfx&B: ", parserConfig0, 1907);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2Q5TQsn/6^oHdrBfx&B: 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      SerializeWriter serializeWriter0 = new SerializeWriter(13);
      SerializeWriter serializeWriter1 = new SerializeWriter(13);
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<InputStream, GenericArrayTypeImpl> treeMap0 = new TreeMap<InputStream, GenericArrayTypeImpl>();
      JSON.toJSON((Object) treeMap0);
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.68", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but float, pos 3, line 1, column 41.2.68
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, false);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray0 = new JSONArray();
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONArray0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONArray jSONArray0 = new JSONArray();
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      JSON.parseArray("", class0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = '$';
      charArray0[2] = '+';
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseObjectArray;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableASM;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableCircularReferenceDetect;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowSingleQuotes;
      featureArray0[6] = feature6;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 989, (Type) class0, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      Feature[] featureArray0 = new Feature[0];
      Object object0 = JSON.parse(byteArray0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AutoCloseSource;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SafeMode;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSON.parse((byte[]) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Feature[] featureArray0 = new Feature[0];
      Object object0 = JSON.parse("", parserConfig0, featureArray0);
      assertNull(object0);
      
      boolean boolean0 = JSON.isValid("fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[2] = serializerFeature2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SerializerFeature serializerFeature3 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONString((Object) null, serializerFeatureArray0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("#paP<");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSON.handleResovleTask(defaultJSONParser0, jSONPath_Operator0);
      JSONObject jSONObject0 = new JSONObject(12);
      jSONObject0.getFloatValue("null");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      serializeConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      JSON.toJSONStringZ(serializerFeature1, serializeConfig0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1556;
      SerializeConfig serializeConfig0 = new SerializeConfig(1556, true);
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      serializeConfig0.getObjectWriter(class0, false);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.clearDeserializers();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1556);
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, charset0, (Type) class0, parserConfig0, (Feature[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)61;
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      // Undeclared exception!
      JSON.parseObject(byteArray0, type0, featureArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.parseObject((String) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        Charset.forName("com.alibaba.fastjson.serializer.SerializerFeature");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // com.alibaba.fastjson.serializer.SerializerFeature
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556, true);
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      serializeConfig0.getObjectWriter(class0, false);
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSON.parse(byteArray0, 1556, 1556, (CharsetDecoder) uTF8Decoder0, featureArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Object object0 = JSON.parse((String) null, parserConfig0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray(989);
      JSON.isValidObject("NG6h$7_U");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JSONArray jSONArray1 = new JSONArray(0);
      LinkedList<GenericArrayTypeImpl> linkedList0 = new LinkedList<GenericArrayTypeImpl>();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Object object0 = JSON.parse("", parserConfig0, 989);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, false);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray0 = new JSONArray();
      JSON.isValid("1.2.68");
      // Undeclared exception!
      try { 
        jSONArray0.remove(984);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 984, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<JSONPObject> class0 = JSONPObject.class;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray0 = new JSONArray();
      JSON.isValid("5Am&`&}AWB1NyQR-$j}");
      LinkedHashMap<Field, JSONPObject> linkedHashMap0 = new LinkedHashMap<Field, JSONPObject>();
      LinkedHashMap<Field, JSONPObject> linkedHashMap1 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AutoCloseSource;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.ErrorOnEnumNotMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowSingleQuotes;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SupportAutoType;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.NonStringKeyAsString;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.AllowISO8601DateFormat;
      featureArray0[7] = feature7;
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, (Type) class0, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(781);
      jSONObject0.getInteger("_Hg^*WAzpxju(7F");
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      jSONObject0.getObject("_Hg^*WAzpxju(7F", class0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      jSONObject0.put("_Hg^*WAzpxju(7F", (Object) parameterizedTypeImpl0);
      JSON.toJSON((Object) null, (SerializeConfig) null);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject("xgHj\"6U72d", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. g
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Type type0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      ParserConfig parserConfig1 = new ParserConfig(false);
      Feature[] featureArray0 = null;
      StringWriter stringWriter0 = new StringWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONString((Object) null, serializerFeatureArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "null");
      StringWriter stringWriter2 = stringWriter1.append('\'');
      JSON.writeJSONStringTo((Object) null, stringWriter2, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.autoTypeSupport", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray(989);
      JSON.isValidObject("NG6h$7_U");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      serializeConfig0.setAsmEnable(false);
      JSONArray jSONArray1 = new JSONArray(0);
      LinkedList<GenericArrayTypeImpl> linkedList0 = new LinkedList<GenericArrayTypeImpl>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializeWriter serializeWriter0 = new SerializeWriter(13);
      SerializeWriter serializeWriter1 = new SerializeWriter(serializeWriter0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONStringTo((Object) null, serializeWriter1, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3);
      JSON.isValidArray("1.2.68");
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.removeMixInAnnotations((Type) null);
      JSON.addMixInAnnotations((Type) null, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<JSONPObject> class0 = JSONPObject.class;
      EnumerationSerializer enumerationSerializer0 = new EnumerationSerializer();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.addMixInAnnotations(class0, class0);
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isSafeMode());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "", 4051, serializerFeatureArray0);
      Feature feature0 = Feature.SupportNonPublicField;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-101);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)1;
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AutoCloseSource;
      featureArray0[2] = feature2;
      JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      JSON.parseArray("null");
      JSON.addMixInAnnotations(class0, class0);
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "", 4051, serializerFeatureArray0);
      Feature feature0 = Feature.SupportNonPublicField;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-101);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)1;
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AutoCloseSource;
      featureArray0[2] = feature2;
      JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      JSON.parseArray("null");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      EnumerationSerializer enumerationSerializer0 = new EnumerationSerializer();
      serializeConfig0.getObjectWriter(class0, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "", 4051, serializerFeatureArray0);
      Feature feature0 = Feature.SupportNonPublicField;
      serializeConfig0.getObjectWriter(class0, true);
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature0;
      JSON.parseArray("null");
      JSON.addMixInAnnotations(class0, class0);
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isJacksonCompatible());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray(989);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteDefaultValue;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature2;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[3] = serializerFeature4;
      serializerFeatureArray0[4] = serializerFeature1;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[5] = serializerFeature5;
      serializerFeatureArray0[6] = serializerFeature2;
      byte[] byteArray0 = JSON.toJSONBytes((Object) serializerFeature0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals(24, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSON.isValidArray(")Uyo5:eb");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")Uyo5:eb");
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.isValid("1.2.68");
      JSON.toJSONString((Object) jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Type type0 = jSONArray1.getComponentType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<JSONPObject> class0 = JSONPObject.class;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray0 = new JSONArray();
      JSON.isValid("5Am&`&}AWB1NyQR-$j}");
      LinkedHashMap<Field, JSONPObject> linkedHashMap0 = new LinkedHashMap<Field, JSONPObject>();
      JSON.toJSONString((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.remove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556, true);
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Feature feature0 = Feature.UseObjectArray;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-31);
      Feature[] featureArray0 = new Feature[1];
      Feature feature1 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature1;
      JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      Object object0 = JSON.toJSON((Object) feature0);
      assertEquals("UseObjectArray", object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, false);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray0 = new JSONArray();
      JSON.isValid("");
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray0 = new JSONArray();
      JSON.isValid("");
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<JSONObject> class0 = JSONObject.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      JSON.getMixInAnnotations(class1);
      jSONObject0.put("millis", (Object) "millis");
      // Undeclared exception!
      try { 
        jSONObject0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray(989);
      JSON.isValidObject("NG6h$7_U");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      serializeConfig0.setAsmEnable(false);
      JSONArray jSONArray1 = new JSONArray();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ConcurrentSkipListMap<String, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, concurrentSkipListMap0);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) javaBeanSerializer0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      JSON.toJSONString((Object) pascalNameFilter0, false);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 999;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[4] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializeWriter serializeWriter0 = null;
      try {
        serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Feature[] featureArray0 = new Feature[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)6;
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)1;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray1, (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 2\u0001
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      byte[] byteArray0 = new byte[0];
      JSON.parse(byteArray0, 2, 2, (CharsetDecoder) uTF8Decoder0, featureArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      Class<Object> class0 = Object.class;
      int int0 = 52429;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[3] = serializerFeature3;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) uTF8Decoder0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.util.UTF8Decoder, method : isCharsetDetected
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1139);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      stringWriter0.append((CharSequence) "");
      SerializerFeature serializerFeature3 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.SortField;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONStringWithDateFormat(stringWriter0, "", serializerFeatureArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[0];
      JSON.parse("", parserConfig0, featureArray0);
      JSON.DEFFAULT_DATE_FORMAT = "1.2.68";
      boolean boolean0 = jSONArray1.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.setTypeKey((String) null);
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      String string0 = null;
      serializeConfig0.setTypeKey((String) null);
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseObjectArray;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.CustomMapDeserializer;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.IgnoreNotMatch;
      featureArray0[3] = feature3;
      JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = ")Uyo5:eb";
      JSON.isValidArray(")Uyo5:eb");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Feature[] featureArray0 = null;
      // Undeclared exception!
      try { 
        JSON.parse(")Uyo5:eb", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSON.isValidArray((String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("toJSON error", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSON.isValidArray((String) null);
      // Undeclared exception!
      try { 
        JSON.parseArray("'v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      ParserConfig parserConfig1 = new ParserConfig(false);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      int int0 = 20;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "{}", serializeConfig0, (SerializeFilter[]) null, "q'c[=E|#aR", 20, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556, true);
      Class<JSONPObject> class0 = JSONPObject.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSON.parse("9TQsn[6^odrBfx&B: ", parserConfig0, 1556);
      // Undeclared exception!
      try { 
        JSON.toJSONString(object0, 2, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 3;
      JSONArray jSONArray0 = new JSONArray(3);
      JSON.isValidObject("");
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSON.isValid("*Tj+J}-j/");
      JSON.parseArray("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[6] = serializerFeature6;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) classLoader0, serializeConfig0, (SerializeFilter[]) null, "yyyy-MM-dd HH:mm:ss", 989, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class sun.misc.Launcher$AppClassLoader, write javaBean error, fastjson version 1.2.68, class java.net.URL, fieldName : 0, write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "true";
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SupportNonPublicField;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.ErrorOnEnumNotMatch;
      featureArray0[4] = feature4;
      // Undeclared exception!
      try { 
        JSON.parseObject("true", featureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Feature feature0 = Feature.NonStringKeyAsString;
      Feature feature1 = Feature.UseObjectArray;
      Feature feature2 = Feature.IgnoreNotMatch;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      Feature[] featureArray0 = new Feature[8];
      Feature feature3 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature3;
      featureArray0[1] = feature1;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature1;
      featureArray0[5] = feature2;
      featureArray0[6] = feature1;
      featureArray0[7] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 3, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSON.removeMixInAnnotations(parameterizedTypeImpl0);
      String string0 = "Tm6DxtK>9<Uo";
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      typeArray0[2] = (Type) null;
      typeArray0[4] = (Type) parameterizedTypeImpl0;
      typeArray0[5] = (Type) parameterizedTypeImpl0;
      typeArray0[6] = (Type) parameterizedTypeImpl0;
      typeArray0[7] = (Type) parameterizedTypeImpl0;
      Type[] typeArray1 = new Type[8];
      // Undeclared exception!
      try { 
        JSON.parseArray("Tm6DxtK>9/U:", typeArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3);
      JSON.isValidObject("");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      serializeConfig0.setAsmEnable(false);
      Class<JSONObject> class0 = JSONObject.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookup(class0);
      objectStreamClass0.forClass();
      JSON.removeMixInAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(319, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[8];
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[2] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[3] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[4] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[5] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[6] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[7] = (SerializeFilter) pascalNameFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[8] = serializerFeature8;
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, serializeFilterArray0, "L6w", 319, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSON.parse("5TQsn/6^oHdrBfx&B: ", parserConfig0, 1556);
      Integer integer0 = new Integer(25);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[5] = serializerFeature5;
      String string0 = JSON.toJSONString((Object) integer0, serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
      assertEquals("25", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Integer> class0 = Integer.class;
      Class<String> class1 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)3;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      JSON.parseObject(byteArray0, (Type) class2, featureArray0);
      int int0 = (-1112);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (-1112), 18, charsetDecoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializeWriter serializeWriter0 = new SerializeWriter(13);
      serializeWriter0.writeFieldName("fastjson.parser.autoTypeSupport");
      SerializeWriter serializeWriter1 = new SerializeWriter(serializeWriter0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      LinkedList<GenericArrayTypeImpl> linkedList0 = new LinkedList<GenericArrayTypeImpl>();
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.deny.internal");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      jSONObject1.getString("yyyy-MM-dd HH:mm:ss");
      jSONObject0.getJSONArray("1.2.68");
      jSONObject0.getIntValue("_");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        JSON.parse("1N+.'pR4u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("6xjZ%&|2OCSDq9n", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but int, pos 1, line 1, column 26xjZ%&|2OCSDq9n
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      Type type0 = null;
      JSON.removeMixInAnnotations((Type) null);
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializerFeature[] serializerFeatureArray0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, charset0, (Type) null, parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556, true);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "D|.", 4051, serializerFeatureArray0);
      Feature feature0 = Feature.SupportNonPublicField;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)58;
      Feature[] featureArray0 = new Feature[7];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      HashMap<JavaBeanSerializer, AbstractMap.SimpleEntry> hashMap0 = JSON.parseObject(byteArray0, (Type) null, featureArray0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556, true);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "hD)tsLZFn&", 4051, serializerFeatureArray0);
      JSONArray jSONArray0 = new JSONArray();
      Class<PascalNameFilter> class1 = PascalNameFilter.class;
      List<PascalNameFilter> list0 = jSONArray0.toJavaList(class1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(989, (Object) null);
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      JSON.parseArray("", class0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.clone();
      //  // Unstable assertion: assertEquals(989, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = JSONObject.SecureObjectInputStream.fields_error;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      List<GenericArrayTypeImpl> list0 = JSON.parseArray("", class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      JSON.parseObject("", class0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      Class<JSONPath.Operator> class1 = JSONPath.Operator.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      Feature feature0 = Feature.SupportNonPublicField;
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      HashMap<JavaBeanSerializer, AbstractMap.SimpleEntry> hashMap0 = JSON.parseObject(byteArray0, (Type) class1, featureArray0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.isValid("*Tj+J}-j/");
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.isValid("");
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray0 = new JSONArray();
      JSON.isValid((String) null);
      LinkedHashMap<Field, JSONPObject> linkedHashMap0 = new LinkedHashMap<Field, JSONPObject>();
      JSON.toJSONString((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.remove(123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 123, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSON.isValid("*vj+J}$U-ju");
      JSON.parseArray("");
      int int0 = 16;
      LinkedHashSet<JSONValidator.Type> linkedHashSet0 = new LinkedHashSet<JSONValidator.Type>();
      // Undeclared exception!
      try { 
        linkedHashSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.removeMixInAnnotations((Type) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      InputStream inputStream0 = null;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      // Undeclared exception!
      try { 
        JSON.parseArray(":q9e3F@pA5", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but :, pos 1, line 1, column 2:q9e3F@pA5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Feature feature0 = Feature.SupportNonPublicField;
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      HashMap<JavaBeanSerializer, AbstractMap.SimpleEntry> hashMap0 = JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556, true);
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      serializeConfig0.getObjectWriter(class0, false);
      Class<PascalNameFilter> class1 = PascalNameFilter.class;
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject(byteArray0, (Type) class1, featureArray0);
      String[] stringArray0 = new String[0];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, stringArray0);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      ParserConfig parserConfig1 = new ParserConfig(false);
      Feature feature0 = Feature.IgnoreNotMatch;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-46);
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      JSON.parseObject(byteArray0, (Type) null, featureArray0);
      Object object0 = JSON.toJSON((Object) classLoader1);
      assertFalse(object0.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      ParserConfig parserConfig1 = new ParserConfig(false);
      int int0 = (-89);
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.autoTypeSupport", parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556, true);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "", 4051, serializerFeatureArray0);
      Feature feature0 = Feature.SupportNonPublicField;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)58;
      Feature[] featureArray0 = new Feature[7];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      JSONObject jSONObject0 = new JSONObject();
      JSON.toJSON((Object) "");
      JSON.toJSON((Object) serializeConfig0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556, true);
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      serializeConfig0.getObjectWriter(class0, false);
      Class<PascalNameFilter> class1 = PascalNameFilter.class;
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject(byteArray0, (Type) class1, featureArray0);
      String[] stringArray0 = new String[0];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, stringArray0);
      JSONArray jSONArray0 = new JSONArray(1556);
      LinkedList<GenericArrayTypeImpl> linkedList0 = new LinkedList<GenericArrayTypeImpl>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      JSON.parseObject(byteArray0, (Type) class1, featureArray0);
      JSONObject jSONObject0 = new JSONObject();
      JSON.toJSON((Object) null);
      Object object0 = JSON.toJSON((Object) jSONObject0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      JSON.parseObject(byteArray0, (Type) class1, featureArray0);
      JSONObject jSONObject0 = new JSONObject();
      JSON.toJSON((Object) null);
      Object object0 = JSON.toJSON((Object) jSONObject0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      JSON.parseObject(byteArray0, (Type) class1, featureArray0);
      JSONObject jSONObject0 = new JSONObject();
      LinkedHashMap<String, SimplePropertyPreFilter> linkedHashMap0 = new LinkedHashMap<String, SimplePropertyPreFilter>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(linkedHashMap0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject2.getSqlDate("p{bxd0GduS");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[6] = serializerFeature6;
      byte[] byteArray1 = JSON.toJSONBytes((Object) feature0, (-610), serializerFeatureArray0);
      assertEquals(21, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      Feature feature0 = Feature.IgnoreAutoType;
      Feature feature1 = Feature.AutoCloseSource;
      byte[] byteArray0 = null;
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[4];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature1;
      featureArray0[3] = feature1;
      JSON.parse((byte[]) null, 450, (int) (byte) (-1), (CharsetDecoder) uTF8Decoder1, featureArray0);
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = new JSONArray();
      List<Object> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(list0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove((-441));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      int int0 = 2567;
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      JSON.parse((byte[]) null, 2567, 65536, (CharsetDecoder) uTF8Decoder0, featureArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(180);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 180, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      featureArray0[1] = feature1;
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<GenericArrayTypeImpl> linkedList0 = new LinkedList<GenericArrayTypeImpl>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray2.fluentRemoveAll(linkedList0);
      jSONArray0.parallelStream();
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(feature1, (SerializeConfig) null, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.getJSONArray("");
      int int0 = 5;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[6] = serializerFeature6;
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ("", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-65);
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte) (-65), 15, charsetDecoder0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      byte[] byteArray0 = new byte[0];
      JSON.parse(byteArray0, 2, 2, charsetDecoder0, featureArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Feature[] featureArray0 = new Feature[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)6;
      int int0 = 936;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 936, 52429, charsetDecoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      JSON.parseObject(byteArray0, (Type) null, featureArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (-1112), 18, charsetDecoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.malformedInputAction();
      byte[] byteArray0 = new byte[0];
      JSON.parse(byteArray0, 2, 2, (CharsetDecoder) uTF8Decoder0, featureArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        JSON.parse("@type", parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.removeMixInAnnotations((Type) null);
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.68");
      defaultJSONParser0.getFieldTypeResolver();
      Feature feature0 = Feature.OrderedField;
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("com.alibaba.fastjson.TypeReference", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.removeMixInAnnotations((Type) null);
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.68");
      defaultJSONParser0.getFieldTypeResolver();
      Feature feature0 = Feature.AllowISO8601DateFormat;
      Feature feature1 = Feature.OrderedField;
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("com.alibaba.fastjson.TypeReference", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        JSON.parse((String) null, parserConfig0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.removeMixInAnnotations((Type) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Feature[] featureArray0 = new Feature[0];
      JSON.parse("", featureArray0);
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.removeMixInAnnotations((Type) null);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONObject0, serializeConfig0, (SerializeFilter) pascalNameFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<JSONPObject> class0 = JSONPObject.class;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray0 = new JSONArray();
      JSON.isValid("5Am&`&}AWB1NyQR-$j}");
      LinkedHashMap<Field, JSONPObject> linkedHashMap0 = new LinkedHashMap<Field, JSONPObject>();
      JSON.toJSONString((Object) null);
      int int0 = (-1);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) javaBeanSerializer0, serializeConfig0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "", 4051, serializerFeatureArray0);
      SerializeConfig serializeConfig1 = new SerializeConfig(4051, true);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(class0);
      String string1 = JSON.toJSONString((Object) null, serializeConfig1, serializeFilterArray0, serializerFeatureArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556, true);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "", 4051, serializerFeatureArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSON.toJSONString((Object) class0, serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.remove(1003);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1003, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AutoCloseSource;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse("@type", parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.ErrorOnEnumNotMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowISO8601DateFormat;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.IgnoreNotMatch;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowISO8601DateFormat;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.DisableASM;
      featureArray0[7] = feature7;
      Object object0 = JSON.parse("", parserConfig0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, (Type) class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[2] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse("i wbs]=fs3xFGe+<", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONObject jSONObject0 = new JSONObject();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSON.toJSON((Object) null, parserConfig0);
      jSONObject0.getJSONArray("cm");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((List<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list is null.
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Type type0 = null;
      JSON.removeMixInAnnotations((Type) null);
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializerFeature[] serializerFeatureArray0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, charset0, (Type) null, parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[25];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[6] = serializerFeature6;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) genericArrayTypeImpl0, (SerializeFilter[]) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSON.parseObject("");
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2147483645);
      // Undeclared exception!
      try { 
        Charset.forName("q JqTn3j!.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // q JqTn3j!.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSON.parseObject("");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "");
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      int int0 = (-2147483645);
      // Undeclared exception!
      try { 
        Charset.forName("q JqTn3j!.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // q JqTn3j!.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ParserConfig parserConfig1 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, charset0, (Type) null, parserConfig1, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.removeMixInAnnotations((Type) null);
      JSONArray jSONArray0 = new JSONArray();
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      List<GenericArrayTypeImpl> list0 = JSON.parseArray((String) null, class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.68", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but float, pos 3, line 1, column 41.2.68
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("yyyy-MM-dd HH:mm:ss", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)99;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)46;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 4051, 4051, (CharsetDecoder) uTF8Decoder0, (-2360));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)3;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 4051, 4051, charsetDecoder0, (-2360));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.UseBigDecimal;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parse("i wbs]=fs3xFGe+<", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2i wbs]=fs3xFGe+<
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowArbitraryCommas;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parse("Ja'(D5J", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2Ja'(D5J
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<JSONObject> class0 = JSONObject.class;
      parserConfig0.checkAutoType(class0);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse("<_C%&x>h}fc&Im\"9nk", (-1100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2<_C%&x>h}fc&Im\"9nk
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3871);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      jSONObject0.remove((Object) pascalNameFilter0);
      Integer integer0 = new Integer(46);
      JSONObject jSONObject1 = jSONObject0.fluentRemove(integer0);
      jSONObject1.values();
      JSONArray jSONArray0 = new JSONArray(989);
      LinkedHashMap<Integer, Annotation> linkedHashMap0 = new LinkedHashMap<Integer, Annotation>();
      jSONArray0.fluentRemove((Object) linkedHashMap0);
      String string0 = "s!-C";
      // Undeclared exception!
      try { 
        JSON.parse("s!-C", 1389);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2s!-C
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "u}+";
      // Undeclared exception!
      try { 
        JSON.parseObject("u}+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2u}+
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<JSONObject> class0 = JSONObject.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("pTy", parserConfig0, (-2240));
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("-7KzG(PV5P)%dk$$8", (Type) class1, parserConfig0, (ParseProcess) null, 328, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 2, line 1, column 3-7KzG(PV5P)%dk$$8
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getJSONArray("cm");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((List<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list is null.
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 3;
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "X1f^~Bpta@";
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      int int1 = (-1909);
      serializeConfig0.setAsmEnable(true);
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONArray0, serializeConfig0, (-1909), (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TreeMap<Integer, String> treeMap0 = new TreeMap<Integer, String>();
      Integer integer0 = new Integer((-1803));
      treeMap0.ceilingEntry(integer0);
      String string0 = "Z7ZA7<.Z)PXfIYSA/ ";
      treeMap0.put(integer0, "Z7ZA7<.Z)PXfIYSA/ ");
      SerializerFeature[] serializerFeatureArray0 = null;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) treeMap0, (-1803), (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONArray jSONArray0 = new JSONArray();
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      JSON.parseArray("", class0);
      jSONObject0.getBytes("");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[4] = serializerFeature4;
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONObject0, serializerFeatureArray0);
      assertEquals(43, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      HashMap<JavaBeanSerializer, AbstractMap.SimpleEntry> hashMap0 = JSON.parseObject(byteArray0, (Type) null, featureArray0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      charset0.newDecoder();
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse((byte[]) null, (int) (byte)3, 63, (CharsetDecoder) uTF8Decoder1, (int) (byte)3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.removeMixInAnnotations((Type) null);
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        JSON.parseArray("@type", typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("b_YDm{m)", (Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = JSONObject.SecureObjectInputStream.fields_error;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)24;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)12;
      JSON.parseObject(byteArray0, (Type) class0, (Feature[]) null);
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'd';
      charArray0[2] = 'X';
      charArray0[3] = '{';
      charArray0[4] = '=';
      charArray0[5] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 25);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      Integer integer0 = JSON.parseObject(byteArray0, (int) 0, 5, charset0, (Type) class0, parserConfig0, (ParseProcess) null, (int) 0, (Feature[]) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556);
      Class<JSONPObject> class0 = JSONPObject.class;
      Class<PascalNameFilter> class1 = PascalNameFilter.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)0;
      JSON.parseObject(byteArray0, (Type) class0, (Feature[]) null);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)1;
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SafeMode;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowArbitraryCommas;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowISO8601DateFormat;
      featureArray0[3] = feature3;
      JSON.parseObject(byteArray0, (Type) null, featureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      Class<JSONPath.Operator> class1 = JSONPath.Operator.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = ")Z";
      stringArray0[2] = "8qT1oN.*^}i|";
      stringArray0[3] = ":|!HW,tQQG&";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, serializeConfig0, serializeFilterArray0, "Y'x;8IsmskI`6{", (-2147483645), (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Feature feature0 = Feature.SupportAutoType;
      Feature feature1 = Feature.UseBigDecimal;
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature1;
      featureArray0[1] = feature0;
      featureArray0[2] = feature1;
      Object object0 = JSON.parse("", featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("java.util.Collection", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ConcurrentHashMap<String, SimplePropertyPreFilter> concurrentHashMap0 = new ConcurrentHashMap<String, SimplePropertyPreFilter>();
      // Undeclared exception!
      try { 
        JSON.parseObject("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowArbitraryCommas;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowArbitraryCommas;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowComment;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.InitStringFieldAsEmpty;
      featureArray0[5] = feature5;
      // Undeclared exception!
      try { 
        JSON.parseObject("java.util.Collection", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSON.parse("5TQsn/6^oHdrBfx&B: ", parserConfig0, 1556);
      assertEquals(5, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = JSONObject.SecureObjectInputStream.fields_error;
      JSONArray jSONArray0 = new JSONArray(1);
      JSON.isValidObject("@type");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      // Undeclared exception!
      try { 
        jSONArray0.getString(64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3);
      JSON.isValidObject("");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      // Undeclared exception!
      try { 
        jSONArray0.getString(3446);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3446, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSON.isValidObject((String) null);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertEquals("@type", serializeConfig0.getTypeKey());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3);
      String string0 = "X1f^~Bpta@";
      JSON.isValidObject("X1f^~Bpta@");
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ConcurrentHashMap<String, SimplePropertyPreFilter> concurrentHashMap0 = new ConcurrentHashMap<String, SimplePropertyPreFilter>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(concurrentHashMap0);
      jSONObject1.values();
      jSONObject0.keySet();
      jSONObject1.size();
      Class<Integer> class0 = Integer.class;
      Class<PascalNameFilter> class1 = PascalNameFilter.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("')*qmn~0Kw", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("toJSON error", class0, class1, class0, (Field) null, 989, 0, 989);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class2 = beanContext0.getFieldClass();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", (Type) class2, parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with float
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "It";
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("It", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556, true);
      Class<JSONPObject> class0 = JSONPObject.class;
      serializeConfig0.get(class0);
      serializeConfig0.getObjectWriter(class0, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "", 4051, serializerFeatureArray0);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(1003);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1003, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONPObject jSONPObject0 = new JSONPObject("1.2.68");
      jSONArray0.set(16, jSONPObject0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      TreeMap<Integer, GenericArrayTypeImpl> treeMap0 = new TreeMap<Integer, GenericArrayTypeImpl>();
      pascalNameFilter0.process(serializerFeature0, "U.+V:'L#Osl&3lv3", treeMap0);
      jSONArray0.add((Object) pascalNameFilter0);
      SerializerFeature serializerFeature2 = SerializerFeature.MapSortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[3] = serializerFeature3;
      String string0 = jSONPObject0.toJSONString();
      SerializerFeature serializerFeature4 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[4] = serializerFeature4;
      String string1 = JSON.toJSONString((Object) jSONPObject0, 16, serializerFeatureArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONArray jSONArray0 = new JSONArray();
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      JSON.parseArray("", class0);
      Class<PascalNameFilter> class1 = PascalNameFilter.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("2L?om`jCWx|zH<", parserConfig0, 989);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.OrderedField;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.IgnoreAutoType;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseBigDecimal;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SupportNonPublicField;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowISO8601DateFormat;
      featureArray0[6] = feature6;
      JSON.parseObject((String) null, class1, (ParseProcess) null, featureArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString((Object) null, 989, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSON.parseObject("", class0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.putIfAbsent((String) null, (Object) null);
      jSONObject0.getLong("");
      JSONObject jSONObject1 = jSONObject0.fluentRemove((Object) null);
      JSON.defaultLocale = jSONObject1.defaultLocale;
      jSONObject1.getBigInteger("");
      JSON.DEFAULT_GENERATE_FEATURE = 989;
      jSONObject1.equals(jSONObject0);
      jSONObject1.remove((Object) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, (Object) null);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      JSONArray jSONArray3 = jSONArray2.fluentAdd(989, (Object) genericArrayTypeImpl0);
      JSONArray jSONArray4 = jSONArray3.fluentAdd((Object) null);
      jSONArray4.getComponentType();
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AutoCloseSource;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.ErrorOnEnumNotMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.NonStringKeyAsString;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.UseBigDecimal;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.ErrorOnEnumNotMatch;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.NonStringKeyAsString;
      featureArray0[7] = feature7;
      Object object0 = JSON.parseObject("", (Type) null, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer integer0 = new Integer((-2294));
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[8] = serializerFeature8;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) integer0, (SerializeConfig) null, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EnumerationSerializer enumerationSerializer0 = new EnumerationSerializer();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[6] = serializerFeature6;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) genericArrayTypeImpl0, (SerializeFilter[]) null, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.util.GenericArrayTypeImpl, method : getTypeName, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, write javaBean error, fastjson version 1.2.68, class java.lang.String, Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "(I)Z";
      // Undeclared exception!
      try { 
        JSON.parseArray("(I)Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual (, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("'v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSON.clearMixInAnnotations();
      String string0 = "";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getJSONArray("cm");
      JSON.clearMixInAnnotations();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((List<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list is null.
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject("");
      String string0 = JSON.toJSONString((Object) jSONPObject0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "@type");
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) stringWriter1);
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.GenericArrayTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1556, false);
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSON.parse("9TQsn[6^odrBfx&B: ", parserConfig0, 1556);
      // Undeclared exception!
      try { 
        JSON.toJSONString(object0, 2, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSON.removeMixInAnnotations((Type) null);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Ja'(D5J";
      JSON.removeMixInAnnotations((Type) null);
      Feature[] featureArray0 = new Feature[3];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) propertyNamingStrategy0, 989, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        JSON.parseArray("{O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual {, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
