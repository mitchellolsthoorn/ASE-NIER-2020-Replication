/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 13:16:39 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$DoubleOpSegement";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("^", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/cause/stackTrace/1";
      stringArray0[1] = "fastjson";
      stringArray0[2] = "/cause/stackTrace/1";
      stringArray0[3] = "value";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(hashMap0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "j-nI";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("", "!W\"JG\"ZQA<", "j-nI", stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("r");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1612, 148, 42);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "NOT_BETWEEN", jSONPath0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -33
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~;y?V%");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, '\u0000', '\u0000');
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~;y?V%", ".");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLTransactionRollbackException0, "6kw3w$F(h\"E,5V1");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath(".A-B\"\"L|tG!v_B'", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-252), (-252), (-252));
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, parserConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/9");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(3, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/5");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%@p}~j}*T\"N>?dn j2S");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("%@p}~j}*T\"N>?dn j2S", 0L, 0L, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntBetweenSegement0);
      assertSame(jSONPath_IntBetweenSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$U");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract("", ")G@k:1AKi{(`g<a]m", parserConfig0, (-2021558146), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. )G@k:1AKi{(`g<a]m
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=(% `P.  r5*");
      Class<Short> class0 = Short.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("VecT", false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Y", "VecT", (-833), sQLClientInfoException0);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLInvalidAuthorizationSpecException0, javaBeanSerializer0);
      assertEquals("=(% `P.  r5*", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer");
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, (Object) null, "*", "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~;y?V%");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("jh.L2");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('h', char0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%@p}~j}*T\"N>?dn j2S");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("%@p}~j}*T\"N>?dn j2S");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(193);
      BigDecimal bigDecimal0 = new BigDecimal((double) 193);
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, bigDecimal0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".4}=f");
      jSONPath0.init();
      assertEquals(".4}=f", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%@p}~j}*T\"N>?dn j2S");
      UUID uUID0 = MockUUID.fromString("],=093X7V/}|7\u0004n");
      Vector<Object> vector0 = new Vector<Object>(93, (-1725));
      jSONPath0.deepGetPropertyValues(uUID0, vector0);
      assertEquals("[-9079256848728588288, 16793600]", vector0.toString());
      assertEquals(2, vector0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%@p}~j}*T\"N>?dn j2S");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pD=A/WJZFgg&");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~;y?V%");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('K');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'K, but '~'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~;y?V%");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 756, 756);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~;y?V%", ".");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLTransactionRollbackException0, "6kw3w$F(h\"E,5V1");
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("H36dWXg6.=$<Vpi`", serializeConfig0, parserConfig0);
      Double double0 = new Double(100.0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2582);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) double0, (Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. H36dWXg6.=$<Vpi`
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("#`81;7;u{y:R");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("VLrmR25dN+", "jh.L2", false);
      // Undeclared exception!
      try { 
        jSONPath_RlikeSegement0.apply(jSONPath0, "jh.L2", jSONPath0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(5, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("Money", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~;y?V%", 0);
      int int0 = JSONPath.size((Object) jSONReaderScanner0, "^");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = JSONPath.size((Object) "5$O!YpFLP*s|", "com.alibaba.fastjson.JSONPath$RefOpSegement");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      DataTruncation dataTruncation0 = new DataTruncation(6, false, true, 6, 32);
      int int0 = jSONPath0.size((Object) dataTruncation0);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("4gc");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      boolean boolean0 = jSONPath0.setPropertyValue("B5 l&<thL", "com.alibaba.fastjson.JSONPath$ValueSegment", 536L, propertyNamingStrategy0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("r");
      SQLDataException sQLDataException0 = new SQLDataException("r", "r", 757);
      boolean boolean0 = jSONPath0.set((Object) "r", (Object) sQLDataException0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("&p~0Ge^<");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("A5SZ7");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("NP<J>s>U(LeFW$k_g", "NP<J>s>U(LeFW$k_g", (-95));
      int[] intArray0 = new int[4];
      intArray0[0] = (-95);
      intArray0[1] = (-95);
      jSONPath0.removePropertyValue("NP<J>s>U(LeFW$k_g", "A5SZ7", true);
      intArray0[2] = (-95);
      intArray0[3] = (-95);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      Set<?> set0 = jSONPath0.keySet((Object) "^");
      assertFalse(set0.contains("^"));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("EEIRgI", serializeConfig0, parserConfig0);
      Double double0 = new Double(3285.47284461145);
      Object object0 = jSONPath0.getPropertyValue(double0, "fastjson.parser.deny.internal", (-2913L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      Class<Calendar> class0 = Calendar.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("\"", (SerializeConfig) null, parserConfig0);
      Class<Date> class0 = Date.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":{z%gK%sY}6#Dq2Ua?!");
      Object object0 = jSONPath0.getArrayItem((Object) null, 973);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("REG_MATCH");
      int int0 = jSONPath0.evalSize("scanEnum");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("#`81;7;u{y:R");
      Set<?> set0 = jSONPath0.evalKeySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~;y?V%");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~;y?V%", 0);
      Set<?> set0 = jSONPath0.evalKeySet(jSONReaderScanner0.matchStat);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("cyNq#Q`yp1G");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Set<?> set0 = jSONPath0.evalKeySet(throwableDeserializer0);
      assertFalse(set0.contains("cyNq#Q`yp1G"));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      Object object0 = jSONPath0.eval((Object) jSONPath_Operator0);
      assertSame(jSONPath_Operator0, object0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Byte byte0 = new Byte((byte)72);
      boolean boolean0 = JSONPath.containsValue((Object) null, "/stackTrace/12", (Object) byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5$rOIY<pFy[LP*s|~");
      Byte byte0 = new Byte((byte)17);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 5$rOIY<pFy[LP*s|~
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("7-");
      SQLDataException sQLDataException0 = new SQLDataException("k#s1>C1b!1JT*_kN^b", "k#s1>C1b!1JT*_kN^b", (-2119227281));
      BigInteger bigInteger0 = BigInteger.TEN;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("SnakeCase", "cm.alibaba.fastjson.JSONPath$IntInSegement", sQLDataException0);
      // Undeclared exception!
      jSONPath0.setPropertyValue(bigInteger0, "k#s1>C1b!1JT*_kN^b", (-4270347329889690746L), sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("^", false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_Operator0, "<%tnwS-yg\"Bgut\"q#Y<", (-528L), jSONPath_PropertySegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("LtkFwPr]");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("unsupported array put operation. ", 2271L, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "in", 1024, jSONPath_FilterSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j-nI");
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, (-118), jSONPath_MultiIndexSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_SizeSegment0, "dq>GB6-@]`05HtIL", (Object) jSONPath_SizeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : dq>GB6-@]`05HtIL
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", (SerializeConfig) null, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) bigDecimal0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5$rOIY<pFy[LP*s|~");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "5$rOIY<pFy[LP*s|~", (Object) "k)6TYYrcG0H0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 5$rOIY<pFy[LP*s|~
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JSONPath jSONPath0 = JSONPath.compile("REG_MATCH");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) class0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%@p}~j}*T\"N>?dn j2S");
      JSONPath jSONPath0 = JSONPath.compile("%@p}~j}*T\"N>?dn j2S");
      boolean boolean0 = jSONPath0.set((Object) "%@p}~j}*T\"N>?dn j2S", (Object) jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "REG_MATCH";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "*";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(5, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("Money", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(parserConfig0, "Money", true);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "BRpZXs$<9rr", "\"");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONPath jSONPath0 = JSONPath.compile("DU");
      // Undeclared exception!
      jSONPath0.remove((Object) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":{z%gK%sY}6#Dq2Ua?!");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "(I)Ljava/lang/reflect/Type;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. :{z%gK%sY}6#Dq2Ua?!
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("r", "r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2r
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("not");
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) sQLTransientConnectionException0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~;y?V%");
      JSONPath jSONPath1 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath1.keySet((Object) jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%@p}~j}*T\"N>?dn j2S");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. %@p}~j}*T\"N>?dn j2S
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j-nI");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : j-nI
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", (SerializeConfig) null, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("%@p}~j}*T\"N>?dn j2S", (SerializeConfig) null, parserConfig0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(jSONPath_WildCardSegment0, (-510));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("not", "not", parserConfig0, 39, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSONPath.extract("(I)Z", "com.alibaba.fastjson.util.JavaBeanInfo", parserConfig0, 2669, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // (
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, " nuj5#60I>;R}79Ha_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("z{!");
      StringReader stringReader0 = new StringReader("z{!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 17);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : z{!
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("z{!");
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : z{!
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Long long0 = new Long((-3596));
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(long0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("\"");
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(classLoader0, "BRpZXs$<9rr", 5144L, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".4}=f");
      JSONPath jSONPath1 = JSONPath.compile("7cBvi+ZA");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      // Undeclared exception!
      jSONPath1.deepSet(javaBeanSerializer0, "h*_", 1698504441317515818L, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("-$U0USf5Z8Z.OiUU", (SerializeConfig) null, parserConfig0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      String[] stringArray0 = new String[7];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(jSONPath_WildCardSegment0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(parserConfig0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("#Wf7Ya[%1i|8%W!!Q");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("D?nF");
      jSONPath0.containsValue((Object) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer((-3553));
      JSONPath.contains((Object) integer0, "A5SZ7|r3#6uy");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        JSONPath.compare(uUID0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$KeySetSegment");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("com.alibaba.fastjson.JSONPath$KeySetSegment");
      jSONPath0.deepSet(collection0, "com.alibaba.fastjson.JSONPath$KeySetSegment", 5614464919154503228L, collection0);
      assertEquals("com.alibaba.fastjson.JSONPath$KeySetSegment", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%@p}~j}*T\"N>?dn j2S");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, bigInteger0, (-1479));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float(100.0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("unsupported array put operation. ", false);
      JSONPath jSONPath0 = new JSONPath("LtkFwPr]");
      DataTruncation dataTruncation0 = new DataTruncation(1024, false, false, 1024, 12);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, float0, dataTruncation0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("YBk!", serializeConfig0, parserConfig0);
      Byte byte0 = new Byte((byte)127);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      boolean boolean0 = jSONPath0.containsValue((Object) byte0, (Object) sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%@p}~j}*T\"N>?dn j2S");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u");
      JSONPath.keySet((Object) stringReader0, ".gC|_fDc(L4");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("L");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      jSONPath_JSONPathParser0.readName();
      JSONPath.compile("?1HGoBLZf)Di]>|k[W");
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath jSONPath1 = JSONPath.compile("?1HGoBLZf)Di]>|k[W");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Locale locale0 = Locale.PRC;
      MockCalendar.getInstance(locale0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(756, 756, 756);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".", "com.alibaba.fastjson.JSONPath$RlikeSegement");
      JSONPath.RangeSegment jSONPath_RangeSegment1 = new JSONPath.RangeSegment((-1988), (-1988), 4814);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment1.eval(jSONPath0, jSONPath1, jSONPath_RangeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%@p}~j}*T\"N>?dn j2S");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) "cqlHj};", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      jSONPath0.arrayAdd((Object) aSMDeserializerFactory0, (Object[]) null);
      assertEquals("/stackTrace/5", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) "com.alibaba.fastjson.JSONPath$StringInSegement", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      SQLException sQLException0 = new SQLException("^");
      MockThrowable mockThrowable0 = new MockThrowable("<%tnwS-yg\"Bgut\"q#Y<", sQLException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("~;y?V%", "^", 0, mockThrowable0);
      boolean boolean0 = jSONPath0.contains((Object) sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("r");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/13");
      Object object0 = jSONPath0.eval((Object) jSONPath_JSONPathParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("4gc");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wqK";
      stringArray0[1] = "wqK";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("wqK", stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject("uw R!3^+=[a;0", stringArray0);
      assertEquals("uw R!3^+=[a;0", object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MaxSegment", serializeConfig0, parserConfig0);
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      Object object0 = JSONPath.reserveToObject(javaBeanDeserializer0, (String[]) null);
      assertSame(object0, javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "value";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(stringReader0, stringArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLIntegrityConstraintViolationException0, stringArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("com.alibaba.fastjson.JSONPath$1", (String[]) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("6J", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, bigDecimal0, bigDecimal0);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("keySet", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "keySet");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~;y?V%");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$StringInSegement", true);
      SQLDataException sQLDataException0 = new SQLDataException("~;y?V%", "com.alibaba.fastjson.JSONPath$StringInSegement", 116);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%@p}~j}*T\"N>?dn j2S");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      JSONPath jSONPath0 = JSONPath.compile("RBq");
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, "RBq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(5, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("Money", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath0, (Object) serializeConfig0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.autoTypeSupport", parserConfig0.DENYS, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(parserConfig0, "gzip,base64", 5, jSONPath_FilterSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path fastjson.parser.autoTypeAccept, segement gzip,base64
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("*VW&i}gppLR}Ls", serializeConfig0, parserConfig0);
      jSONPath0.deepSet(hashMap0, "fastjson.parser.deny.internal", (-1982), parserConfig0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("min");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-835), (-1046), (-835), (-835), 101);
      jSONPath0.deepSet((Object) null, "min", (-5457318238606900369L), mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j-nI");
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1794, 1869, 116);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(jSONPath_RangeSegment0);
      jSONPath0.deepScan(list0, "+yHOY*X>o:bs4g", list0);
      assertEquals("j-nI", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5$rOIY<pFy[LP*s|~");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLIntegrityConstraintViolationException0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLInvalidAuthorizationSpecException0, "", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 5$rOIY<pFy[LP*s|~, segement 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5$O!YpFLP*s|");
      Pattern pattern0 = Pattern.compile("t", 92);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("/O&Dd]", pattern0, jSONPath_Operator0);
      Float float0 = new Float(0.0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, float0, jSONPath_Operator0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("hzy3culv9BpdI", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.size((Object) stack0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Short short0 = new Short((short)102);
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Float float0 = new Float((double) 5614464919154503228L);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Float float0 = new Float((double) 5614464919154503228L);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(993, 61);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((double) 193);
      boolean boolean0 = JSONPath.eqNotNull((-1580386065683472715L), bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, 5614464919154503228L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(6807120576613638602L);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short short0 = new Short((short)34);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<JSONPath.MultiPropertySegment> class0 = JSONPath.MultiPropertySegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      boolean boolean0 = JSONPath.eq(short0, javaBeanDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, "o5$7KNGrt8i;:47>Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NE";
      stringArray0[1] = "*`nTCh:V?";
      stringArray0[2] = "writeFloat";
      stringArray0[3] = "*";
      stringArray0[4] = "k4ySet";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = JSONPath.eq(jSONPath_MultiPropertySegment0, jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("java/util/ArrayList", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, "java/util/ArrayList");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("java/util/ArrayList", serializeConfig0, parserConfig0);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, parserConfig0, serializeConfig0);
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("YBk!", serializeConfig0, parserConfig0);
      UUID uUID0 = MockUUID.randomUUID();
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(uUID0, vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // java.util.UUID
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5$O!YpFLP*s|");
      Stack<Object> stack0 = new Stack<Object>();
      Collection<Object> collection0 = jSONPath0.getPropertyValues(stack0);
      assertFalse(collection0.contains("5$O!YpFLP*s|"));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("Money", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues("Money");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~;y?V%");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("4gc");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath0, 4607, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("zIu66c");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)jSONPath0.getArrayItem(sQLIntegrityConstraintViolationException0, 0);
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Jb4\"\"G~|-\"R:", sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("M.XCd=5bXwcecQ>a", sQLFeatureNotSupportedException0);
      Set<?> set0 = JSONPath.keySet((Object) sQLNonTransientConnectionException0, "/cause/stackTrace/0");
      assertNotNull(set0);
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      String[] stringArray0 = new String[8];
      SQLDataException sQLDataException0 = new SQLDataException("min", stringArray0[1], (-788));
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("", stringArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLDataException0, "", "*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("t(8", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("Mjul,51%", 1406.44, jSONPath_Operator0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(10);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, serializeConfig0, jSONPath_DoubleOpSegement0, calendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("REG_MATCH");
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-788));
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("REG_MATCH", "@\"", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("REG_MATCH");
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-788));
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("REG_MATCH", "@\"", sQLClientInfoException0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, sQLFeatureNotSupportedException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("z2[c1x9Zt8Do");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("5'kQ");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, propertyNamingStrategy0, jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("value not found in path ", "(I)Ljava/lang/reflect/Type;", true);
      JSONPath jSONPath0 = JSONPath.compile(":{z%gK%sY}6#Dq2Ua?!");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      Double double0 = new Double(2588.128738928);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, double0, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      long[] longArray0 = new long[9];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.parser.safeMode", longArray0, false);
      SQLWarning sQLWarning0 = new SQLWarning("unclosed", "0$k\"CG", (short)53);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeSupport", sQLWarning0);
      Locale locale0 = Locale.CHINESE;
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, locale0, sQLTransientConnectionException0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("parser");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.safeMode", (Map<String, ClientInfoStatus>) null);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLSyntaxErrorException0, sQLClientInfoException0);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("^", false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("IgnoreErrorGetter", "like", (-2017), hashMap0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("like", jSONPath_PropertySegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLClientInfoException0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~;y?V%");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("~;y?V%", "nACbMOk|7Or1r", jSONPath_Operator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("nACbMOk|7Or1r", "A5SZ7|r3#6uy", 2675);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, sQLFeatureNotSupportedException0, "A5SZ7|r3#6uy", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("zIu66c");
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("uw R!3^+=[a;0", "uw R!3^+=[a;0", "I;bg<D,p`a.", stringArray0, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("uw R!3^+=[a;0");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "I;bg<D,p`a.", jSONPath0, sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny", "O'|x}KiK^,]N[", "fastjson.parser.autoTypeSupport", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("M]phtsEPK79Uc h:c9", (String) null, "wqe", stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("", false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("M]phtsEPK79Uc h:c9", jSONPath_PropertySegment0, jSONPath_Operator0);
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("M]phtsEPK79Uc h:c9", "wqK", intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, batchUpdateException0, sQLRecoverableException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Money");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("com.alibaba.fastjson.JSONPath$1", 0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("%@p}~j}*T\"N>?dn j2S");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(93);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, jSONPath_FilterSegment0, jSONReaderScanner0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("$P^qj", (-254670111376247151L), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("$P^qj");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("reflect", "reflect");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(")*5?}$Y,a", "$P^qj", 743, sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.JSONPath$MaxSegment", ")*5?}$Y,a", (-1305), sQLNonTransientConnectionException0);
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, mockGregorianCalendar0, sQLTransactionRollbackException0);
      assertNotNull(object0);
      
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, "$P^qj", object0, sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("zIu66c");
      String[] stringArray0 = new String[8];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("like", stringArray0, true);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-788));
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "like", jSONPath_ArrayAccessSegment0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(2394L);
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONPath$DoubleOpSegement", longArray0, false);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, longArray0[0], jSONPath0, sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Long[] longArray0 = new Long[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONPath$DoubleOpSegement", longArray0, false);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, longArray0[0], jSONPath0, sQLTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("cause", (-2258L), (-2258L), false);
      JSONPath jSONPath0 = new JSONPath("cause");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "cause", "cause", jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[6];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.runtime.testdata", longArray0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.runtime.testdata", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_SizeSegment0, (Object) null, "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.runtime.testdata");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j-nI");
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("SupportAutoType", jSONPath_MultiIndexSegment0, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("j-nI", "*");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*", "j-nI", sQLRecoverableException0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLRecoverableException0, sQLInvalidAuthorizationSpecException0, jSONPath_MultiIndexSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<%tnwS-yg\"Bgut\"q#Y<", "<%tnwS-yg\"Bgut\"q#Y<", 92);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("<%tnwS-yg\"Bgut\"q#Y<", sQLSyntaxErrorException0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      JSONPath jSONPath0 = JSONPath.compile("<%tnwS-yg\"Bgut\"q#Y<");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "<%tnwS-yg\"Bgut\"q#Y<", "<%tnwS-yg\"Bgut\"q#Y<", "<%tnwS-yg\"Bgut\"q#Y<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("r");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("/stackTrace");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "r", "NdV`ea}e!TAe");
      assertEquals("NdV`ea}e!TAe", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j-nI");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2023, 993, 993);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/cause/cause/stackTrace/12", "j-nI");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, sQLNonTransientConnectionException0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(67, 22, 22);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$DoubleOpSegement", bigDecimal0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("zIu66c");
      int[] intArray0 = new int[5];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, javaBeanDeserializer0, (Object) null);
      assertEquals(5, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("r");
      SQLDataException sQLDataException0 = new SQLDataException("r", "r", 757);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "r";
      stringArray0[1] = "r";
      stringArray0[2] = "r";
      stringArray0[3] = "r";
      stringArray0[4] = "r";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLDataException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "r", sQLRecoverableException0);
      assertEquals(5, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%@p}~j}*T\"N>?dn j2S");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("%@p}~j}*T\"N>?dn j2S", true);
      UUID uUID0 = MockUUID.randomUUID();
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, uUID0, uUID0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Float float0 = new Float(100.0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("unsupported array put operation. ", false);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, jSONPath_PropertySegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$PropertySegment cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = JSONPath.compare("Mjul,51%", "t(8");
      assertEquals((-39), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SQLException sQLException0 = new SQLException("", "(`2B", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0, sQLException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("prg)", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLRecoverableException0, "prg)");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLRecoverableException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("HJ@4bt/");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath0, jSONPath_SizeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("@-q:.]l0c_rNg**_-L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@-q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[Ho<oBZ'.gcU,uZ+D|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("[Ho<oBZ'.gcU,uZ+D|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[Ho<oBZ'.gcU\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.shaded.org.mockito.creation.instance");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(12, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("`&|k;]jR~(Pp}4aQUI");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '`, but 'I'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/3");
      jSONPath_JSONPathParser0.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1438L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('+');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%@p}~j}*T\"N>?dn j2S");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5$O!YpFLP*s|");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-1580386065683472715L));
      assertEquals((-1.58038606568347264E18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5$O!YpFLP*s|");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(5L, object0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%@p}~j}*T\"N>?dn j2S");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%<piYZO--Hc");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[Ho<oBZ'.gcU,uZ+D|");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("wxwHX>-\"^");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pD=A/WJZFgg&");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/13");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(5, true);
      SerializeConfig serializeConfig1 = new SerializeConfig(1612, true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) serializeConfig0, serializeConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("%@p}~j}*T\"N>?dn j2S", "%@p}~j}*T\"N>?dn j2S", intArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("%@p}~j}*T\"N>?dn j2S", "%@p}~j}*T\"N>?dn j2S", (-523), sQLTransientConnectionException0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransactionRollbackException0);
      //  // Unstable assertion: assertEquals(275, map0.size());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1140, true);
      Map<String, Object> map0 = JSONPath.paths((Object) "throwException", serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "_ik");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      Short short0 = new Short((short)521);
      boolean boolean0 = jSONPath0.set((Object) short0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      SQLException sQLException0 = new SQLException("^");
      MockThrowable mockThrowable0 = new MockThrowable("<%tnwS-yg\"Bgut\"q#Y<", sQLException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("~;y?V%", "^", 0, mockThrowable0);
      boolean boolean0 = JSONPath.set((Object) jSONPath0, "^", (Object) sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) bigInteger0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int[] intArray0 = new int[7];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = JSONPath.remove((Object) jSONPath_MultiIndexSegment0, "/stackTrace/5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("r");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "S");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/com.thoughtworks.xstream.io.path");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(92, true, true, 92, 896);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, dataTruncation0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLTransactionRollbackException0, "kotlin.ranges.IntRange", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path kotlin.ranges.IntRange
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("g");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("g");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLTransactionRollbackException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path g
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      String[] stringArray0 = new String[2];
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      JSONPath.arrayAdd((Object) byte0, "/stackTrace/0", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("HJ@4bt/");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.CharArrayCodec");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("#`81;7;u{y:R");
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath0, "org.javamoney.moneta.Money", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("r");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      boolean boolean0 = jSONPath0.contains((Object) batchUpdateException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~;y?V%", ".");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      boolean boolean0 = JSONPath.contains((Object) sQLFeatureNotSupportedException0, "*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      StringReader stringReader0 = new StringReader("fastjson.parser.safeMode");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner1, parserConfig0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("<", "/stackTrace/7");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("<", "<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2<
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5$O!YpFLP*s|");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~;y?V%", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2~;y?V%
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("throwException");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("throwException");
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath0, sQLTransactionRollbackException0);
      assertFalse(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("value not found in path ", "(I)Ljava/lang/reflect/Type;", true);
      JSONPath jSONPath0 = JSONPath.compile(":{z%gK%sY}6#Dq2Ua?!");
      SQLDataException sQLDataException0 = new SQLDataException(":{z%gK%sY}6#Dq2Ua?!", "Q", 973);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("value not found in path ", "(I)Ljava/lang/reflect/Type;", sQLDataException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, (Object) null, jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com");
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(193);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, stack0, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 193
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5$O!YpFLP*s|");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(193);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, jSONPath_MultiIndexSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$MultiIndexSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/stackTrace/6";
      stringArray0[1] = "/stackTrace/1";
      stringArray0[2] = "7y`6D^\u0007>gy_G$n";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Object object0 = JSONPath.eval((Object) jSONPath_MultiPropertySegment0, "/stackTrace/1");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/stackTrace/5");
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, "/stackTrace/5", "/stackTrace/5", "/stackTrace/5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = JSONPath.compile("Hwz");
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "prg)");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%@p}~j}*T\"N>?dn j2S");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      // Undeclared exception!
      try { 
        JSONPath.containsValue(object0, (String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("q(nwLWu9", "q(nwLWu9", 93);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) sQLTransientConnectionException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(111);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(")f5", serializeConfig0, parserConfig0);
      String string0 = jSONPath0.getPath();
      assertEquals(")f5", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%<piYZO--Hc");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("%@p}~j}*T\"N>?dn j2S", "%@p}~j}*T\"N>?dn j2S");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2%@p}~j}*T\"N>?dn j2S
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("getFieldValue error.");
      Set<?> set0 = JSONPath.keySet((Object) jSONPath0, "cause");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("throZException");
      JSONPath.set((Object) "throZException", "throZException", (Object) jSONPath0);
  }
}
