/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 14:26:28 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.HijrahDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Object object0 = jSONPath0.eval((Object) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull((byte)5, (byte)7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("N$bJ]t_BRF.");
      Short short0 = new Short((short) (-1810));
      Object object0 = JSONPath.reserveToArray(short0, (String[]) null);
      Object object1 = jSONPath0.getArrayItem(object0, 0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Long long0 = new Long(0L);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2535, 1834, 3);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, long0, aSMDeserializerFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -232
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("equals");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unsupported array put operation. ", parserConfig0, 2197);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(77);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("w5*3gGoz");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!U,T");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m99");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0000-00-00T00:00:00");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^EpO0FK");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^cQW6o#4B");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig(1782);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("^cQW6o#4B", serializeConfig0, parserConfig0);
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, jSONPath_JSONPathParser0, serializeConfig0);
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/updateCounts");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("/cause/stackTrace");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("reU", serializeConfig0, (ParserConfig) null);
      jSONPath0.init();
      assertEquals("reU", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("'s*,s*'", true);
      // Undeclared exception!
      try { 
        jSONPath_SizeSegment0.eval((JSONPath) null, jSONPath_PropertySegment0, "'s*,s*'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$SizeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("classLoaderName");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("mZYzl~ePG/_;QB#C\"7|");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('L');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("step must greater than zero : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('~');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '~, but 's'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]>x*7O");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("]>x*7O", (-1843479102), jSONPath_Operator0);
      SQLWarning sQLWarning0 = new SQLWarning("]>x*7O", (String) null);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath_WildCardSegment0, sQLWarning0, sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(867, (-588), (-751));
      JSONPath jSONPath0 = JSONPath.compile(">b\"dwEe:\"tY|+g#");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-751));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Qp|[m|zt[bud)", "!g3vg\"tUA3z%v9jp]", 66);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, sQLSyntaxErrorException0, jSONPath_RangeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("i", serializeConfig0, (ParserConfig) null);
      long long0 = 0L;
      Long[] longArray0 = new Long[3];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("i", longArray0, true);
      // Undeclared exception!
      try { 
        jSONPath_IntObjInSegement0.apply(jSONPath0, long0, serializeConfig0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("ALg");
      SQLTransientException sQLTransientException0 = new SQLTransientException("ALg", "", (byte)102);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "", (byte)42, sQLTransientException0);
      jSONPath0.deepSet("/stackTrace/13", "/stackTrace/13", (-1668L), sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-849), (-849), (-2147483647));
      int int0 = JSONPath.size((Object) jSONPath_RangeSegment0, "toCharArray");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("SmkO`P2^5n8TBi.i", serializeConfig0, parserConfig0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("SmkO`P2^5n8TBi.i", "'1r", 105);
      boolean boolean0 = jSONPath0.setPropertyValue(sQLFeatureNotSupportedException0, "m", 2268L, sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Set<?> set0 = JSONPath.keySet((Object) bigInteger0, "vbx");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("D(");
      Float float0 = new Float((-1.0));
      Object object0 = jSONPath0.getPropertyValue(float0, "D(", 123L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      Class<SQLException> class0 = SQLException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MatchSegement", serializeConfig0, parserConfig0);
      Class<Double> class0 = Double.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("evalKeySet error : ");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("i$Y-LP~O&-U=/", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.getArrayItem((Object) null, (-3048));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xY[f\"&Y,_FNk/o,f O|");
      int int0 = jSONPath0.evalSize("xY[f\"&Y,_FNk/o,f O|");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      int int0 = jSONPath0.evalSize(serializeConfig0.propertyNamingStrategy);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("i", serializeConfig0, (ParserConfig) null);
      Set<?> set0 = jSONPath0.evalKeySet("i");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSONPath.eval((Object) parserConfig0, "fastjson.parser.autoTypeAccept");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayList arrayList0 = (ArrayList)JSONPath.eval((Object) "scan false error", "*");
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("J_y", serializeConfig0, parserConfig0);
      JSONPath.size((Object) jSONPath0, "Mya=ZZ[!]AYiIl");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("l%kW]t<", 2923L, 2923L, false);
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_FilterSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : l%kW]t<
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/3");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      jSONPath0.setPropertyValue(bigDecimal0, "/stackTrace/3", (-3415), "m70$tKt1.u$p&-");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = JSONPath.reserveToObject(linkedList0, (String[]) null);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/4");
      boolean boolean0 = jSONPath0.setPropertyValue("not support jsonpath : ", "fastjson.parser.autoTypeSupport", 6607618197526598121L, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]>x*7O");
      Integer integer0 = new Integer(517);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "]>x*7O", (-698L), integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("REG_MATCH");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("month", "EOF error");
      JSONPath.set((Object) sQLRecoverableException0, "Bp?f", (Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$WildCardSegment");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      jSONPath0.set((Object) bigInteger0, (Object) "com.alibaba.fastjson.JSONPath$WildCardSegment");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("bAmgzHe*fCJs&b3wyt`", "2y^3YO9b@qc");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLSyntaxErrorException0, (Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 5[pBpU]dlnu6#B
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.JSONPath$IntBetweenSegement", "$", sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.JSONPath$IntBetweenSegement", (String) null, 1024, sQLIntegrityConstraintViolationException0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$IntBetweenSegement";
      stringArray0[1] = "$";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLSyntaxErrorException0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("`@ZaNG/Z.D.&v");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_WildCardSegment0, "d^*iC.K7bvbD", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      SerializeConfig serializeConfig0 = new SerializeConfig(90);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("sackTracT/8", serializeConfig0, parserConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      jSONPath0.removePropertyValue(javaBeanSerializer0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1933), 27, (-1505));
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(mockGregorianCalendar0, "vi`5 [}>~w.", true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("m>;b\fPm");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "com.alibaba.fastjson.JSONPath$ArrayAccessSegment", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("i");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-4659));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      JSONPath.remove((Object) bigDecimal0, "writeFieldValueStringWithDoubleQuote");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTimeoutException0, "'");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      JSONPath.remove((Object) sQLTimeoutException0, "illegal ref");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("fastjson.parser.autoTypeSupport", "nM-&Q485r_7cC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-161), 188, 65535);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) jSONPath_RangeSegment0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      JSONPath jSONPath0 = new JSONPath("*");
      Set<?> set0 = jSONPath0.keySet((Object) double0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("q%e+f? w]_xZci&k?m/");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : q%e+f? w]_xZci&k?m/
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(90);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8", serializeConfig0, parserConfig0);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/3");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, (ParserConfig) null);
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeAccept", "/B", parserConfig0, (-751), (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "fastjson.parser.safeMode", parserConfig0, 41, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.extract("T&csQBi~:~u&", "=GpmgL", parserConfig0, 45, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2T&csQBi~:~u&
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("/stackTrace/13", "x:Ubg1x@!k.#SBsSSG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("Lc3quJy", "create");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("zQ:*EC'*LaS]GfMk3_o", 2035L, 2035L, false);
      JSONPath jSONPath0 = new JSONPath("zQ:*EC'*LaS]GfMk3_o", (SerializeConfig) null, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(jSONPath_IntBetweenSegement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("#@Kwiv'4%Z", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xY[f\"&Y,_FNk/o,f O|");
      Object object0 = jSONPath0.eval((Object) "xY[f\"&Y,_FNk/o,f O|");
      assertEquals("xY[f\"&Y,_FNk/o,f O|", object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("i", serializeConfig0, (ParserConfig) null);
      Double double0 = new Double(Double.NaN);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(double0, "`8 (N_$MzDT", (-811277319855450459L), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", (SerializeConfig) null, parserConfig0);
      Byte byte0 = new Byte((byte)107);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(byte0, "fastjson.parser.autoTypeAccept", stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("scan false error", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("i", serializeConfig0, (ParserConfig) null);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLIntegrityConstraintViolationException0);
      JSONPath.containsValue((Object) sQLIntegrityConstraintViolationException0, "f%Q3EkZd", (Object) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("p=Z/_k&3b+)ZnQn%k/");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, (-1137), (-1137));
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "p=Z/_k&3b+)ZnQn%k/", (Object) jSONPath_RangeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : p=Z/_k&3b+)ZnQn%k/
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(">b\"dwEe:\"tY|+g#");
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath0, "UL+M`Pqm/7r}DvYS?", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny", "xY[f\"&Y,_FNk/o,f O|", 4029);
      Set<?> set0 = jSONPath0.evalKeySet(sQLDataException0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/1", serializeConfig0, parserConfig0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Sv9OGBjJ<VX\"", "2c");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")3223", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLInvalidAuthorizationSpecException0, "fastjson.parser.deny.internal", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /cause/stackTrace/1, segement fastjson.parser.deny.internal
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("r<M@j4W{Izz");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "r<M@j4W{Izz", 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xY[f\"&Y,_FNk/o,f O|");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, "evalKeySet error : ", 4023, "xY[f\"&Y,_FNk/o,f O|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$ValueSegment", false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, batchUpdateException0);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLClientInfoException0, (Object) null);
      assertEquals("java.sql.BatchUpdateException", sQLClientInfoException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]#E8$)=");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("]", false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "com", sQLClientInfoException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/13");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(3, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5[pBpU]dlnu6#B");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("T&csQBi~:~u&", (Pattern) null, jSONPath_Operator0);
      String string0 = null;
      JSONPath jSONPath0 = JSONPath.compile("T&csQBi~:~u&");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3478));
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("T&csQBi~:~u&", false);
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(jSONPath_PropertySegment0, (-3478));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]>x*7O");
      jSONPath0.set((Object) "]>x*7O", (Object) "]>x*7O", true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(90);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("sackTracT/8", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 90);
      boolean boolean0 = jSONPath0.remove((Object) bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$FilterSegment");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[TG", "evalKeySet", 52);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[TG", "evalKeySet", hashMap0, sQLNonTransientConnectionException0);
      Float float0 = new Float((double) 7);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLClientInfoException0, (Object) float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(92, false, false, 92, 92);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/2");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("YuFTt{.Q~3R^wDRI", "*", dataTruncation0);
      boolean boolean0 = jSONPath0.contains((Object) sQLSyntaxErrorException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RlikeSegement");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("LIKE", parserConfig0, 2198);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Gv!(y.8/--SU7(W", parserConfig0, 32);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("]>x*7O");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("$Ru", false);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, "]>x*7O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("`<A\u0002Y'#]ZfAP2 ms,", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1000);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/stackTrace/3";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("equals", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "evalKeySet";
      stringArray0[1] = "fastjson.parser.deny.internal";
      stringArray0[2] = "evalKeySet";
      stringArray0[3] = "fastjson.parser.deny.internal";
      stringArray0[4] = "fastjson.parser.safeMode";
      stringArray0[5] = "fastjson.parser.deny.internal";
      stringArray0[6] = "fastjson.parser.autoTypeAccept";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("nM-&Q485r_7cC", stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vi`5 [}>~w.", "iKd", (Throwable) null);
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLFeatureNotSupportedException0, stringArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int int0 = jSONPath0.evalSize(hashMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny");
      boolean boolean0 = JSONPath.remove((Object) sQLTimeoutException0, "v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("in");
      DataTruncation dataTruncation0 = new DataTruncation((-1933), false, false, (-1933), (-1933));
      boolean boolean0 = jSONPath0.removePropertyValue(dataTruncation0, "vi`5 [}>~w.", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal", "fastjson.parser.autoTypeSupport", 276);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.sql.SQLTransactionRollbackException#stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("MPAbi\"(9F)EU/Y", "- -f.=pS");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLIntegrityConstraintViolationException0, "/stackTrace/10", (Object) "/stackTrace/10");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("AV", true);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("]>x*7O", serializeConfig0, parserConfig0);
      jSONPath_PropertySegment0.setValue(jSONPath0, serializeConfig0, jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5[pBpU]dlnu6#B");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("2c", "com.alibaba.fastjson.JSONPath$StringOpSegement", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 5[pBpU]dlnu6#B, segement com.alibaba.fastjson.JSONPath$StringOpSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("in");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(75);
      jSONPath0.deepScan(integer0, "fastjson.parser.deny.internal", linkedList0);
      assertFalse(linkedList0.contains("in"));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xY[f\"&Y,_FNk/o,f O|");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan(linkedList0, "fastjson.parser.autoTypeSupport", linkedList0);
      assertEquals("xY[f\"&Y,_FNk/o,f O|", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("]>x*7O");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("qHd7?v~YmmdM0H!", clientInfoStatus0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan(hashMap0, "fastjson.parser.autoTypeAccept", linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Object object0 = jSONPath0.eval((Object) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      Integer integer0 = new Integer(75);
      boolean boolean0 = JSONPath.eqNotNull(integer0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (byte)47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((byte)47, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull((byte)0, (byte) (-102));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Short short0 = new Short((short) (-1113));
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, (byte)7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((double) 90);
      Float float0 = new Float((float) 90);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eq(bigInteger0, "vbx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("/stackTrace/2", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, ".)\"Pa>>ZD^s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("equals", "rlike");
      boolean boolean0 = JSONPath.eq(sQLNonTransientConnectionException0, sQLNonTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("in");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, aSMDeserializerFactory0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = JSONPath.remove((Object) linkedList0, "/stackTrace/3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      MockThrowable mockThrowable0 = new MockThrowable("internal");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Kln~A", "fastjson.parser.safeMode", 90, mockThrowable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      int int0 = jSONPath0.size((Object) sQLInvalidAuthorizationSpecException0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("com.alibaba.fastjson.JSONPath$FilterSegment");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      UUID uUID0 = MockUUID.fromString(":Kd1\"iwdqVq};Qm.*w");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("yyyy-MM-dd HH:mm:ss", "com.alibaba.fastjson.JSONPath$FilterSegment");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, uUID0, jSONPath_Operator0, sQLTransactionRollbackException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("in");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("IN", 392L, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny.internal", "fastjson.parser.autoTypeSupport");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_FilterSegment0, sQLDataException0, jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$StringOpSegement", serializeConfig0, (ParserConfig) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("yB36Q6xf/~$", (-1014497654951707614L), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "yB36Q6xf/~$", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      SQLWarning sQLWarning0 = new SQLWarning("On", "u]I!V2?)6");
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("C", "5_w(QSwtda$9:u~kz", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath jSONPath0 = new JSONPath("C");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(4);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, sQLWarning0);
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("_", 1989L, 1989L, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      JSONPath jSONPath0 = new JSONPath("|");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("hcC", false);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_PropertySegment0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("REG_MATCH", (Pattern) null, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("REG_MATCH");
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, (Object) null, "REG_MATCH", jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("QuoteFieldNames", "QuoteFieldNames", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(133);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("QuoteFieldNames", serializeConfig0, parserConfig0);
      Short short0 = new Short((short) (-21844));
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, short0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(90);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("sackTracT/8", serializeConfig0, parserConfig0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("setter not found, class ", "fastjson.parser.autoTypeAccept", true);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("sackTracT/8", false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.safeMode", "m70$tKt1.u$p&-", 0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath_PropertySegment0, (Object) null, sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(90);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("/stackTrace/0", "/stackTrace", (String) null, (String[]) null, false);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "/stackTrace", jSONPath_WildCardSegment0, parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "N";
      stringArray0[1] = "N";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("", "", "N", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      JSONPath jSONPath0 = JSONPath.compile("N");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("reU", serializeConfig0, (ParserConfig) null);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("reU", jSONPath_SizeSegment0, jSONPath_Operator0);
      BigInteger bigInteger0 = BigInteger.TEN;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("reU", "reU", 0, (Throwable) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-249), (-75), (-1840), 57);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, bigInteger0, sQLTransientConnectionException0, mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("5[pBpU]dlnu6#B", 0L, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, true);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2358), 14, 122);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_RangeSegment0, "5[pBpU]dlnu6#B", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5[pBpU]dlnu6#B";
      stringArray0[1] = "5[pBpU]dlnu6#B";
      stringArray0[2] = "5[pBpU]dlnu6#B";
      stringArray0[3] = "5[pBpU]dlnu6#B";
      stringArray0[4] = "5[pBpU]dlnu6#B";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("5[pBpU]dlnu6#B", stringArray0, false);
      Float float0 = new Float((-2011.98F));
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, float0, "5[pBpU]dlnu6#B", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5[pBpU]dlnu6#B");
      Long[] longArray0 = new Long[2];
      long long0 = 0L;
      Long long1 = new Long(0L);
      longArray0[0] = long1;
      longArray0[1] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("", longArray0, true);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, "", long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5[pBpU]dlnu6#B");
      Long[] longArray0 = new Long[2];
      long long0 = 0L;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("", longArray0, true);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, "", long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("l%kW]t<", 2923L, 2923L, false);
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, (Object) null, sQLTransientConnectionException0, "l%kW]t<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("scan false error", longArray0, true);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, (Object) null, jSONPath_Operator0, "scan false error");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xY[f\"&Y,_FNk/o,f O|");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.autoTypeAccept", parserConfig0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, (Object) null, "xY[f\"&Y,_FNk/o,f O|", jSONPath_Operator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("evalKeySet error : ", "evalKeySet error : ", true);
      JSONPath jSONPath0 = new JSONPath("evalKeySet error : ");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "parser", jSONPath_FilterSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("D*QYJaW3@V#", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("l%kW]t<", 2923L, 2923L, false);
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(33, 33, (-2359));
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_IntBetweenSegement0, (Object) null);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("p=Z/_k&3b+)ZnQn%k/");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, (-1137), (-1137));
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, "p=Z/_k&3b+)ZnQn%k/");
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("EQ", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, (-1550));
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "EQ", parserConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[9];
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$FilterSegment");
      Clock clock0 = MockClock.systemDefaultZone();
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, hijrahDate0);
      assertEquals(9, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.JSONPath$1", parserConfig0, 110);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2com.alibaba.fastjson.JSONPath$1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("o!F2;.hC(i^");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("AcALv");
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, hashMap0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("JSONPath$NullSegement");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "JSONPath$NullSegement";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "JSONPath$NullSegement", "JSONPath$NullSegement");
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/3");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("#'0^>&1", true);
      Integer integer0 = new Integer(6);
      jSONPath_PropertySegment0.setValue(jSONPath0, integer0, integer0);
      assertEquals("/stackTrace/3", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Feature feature0 = Feature.NonStringKeyAsString;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, feature0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.parser.Feature cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = JSONPath.compare("(@|ec2:/kyThEWt", "(@|ec2:/kyThEWt");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("e86~Dl", "TODO : ", 12, hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("nin", "#b{\"v%g~9.ZZ}ChI]\"", sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("TODO : ", "TODO : ", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLSyntaxErrorException0, sQLNonTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLSyntaxErrorException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("REG_MATCH");
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, (Object) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("WT^#=U41^]Y ");
      Class<Integer> class0 = Integer.class;
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      Double double0 = new Double((-1.0));
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, class0, double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" 03vKr");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("_Eo@vroDb}Wm:kr2bF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_Eo@vroDb}Wm\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("toJSON error");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("&4?|,?\nIHRKFl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&4?|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8O\"\"<-'{");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '8, but '{'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/13");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("cause", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("zWZvGF@r*Y");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : zWZvGF@r*Y
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("AV;Yf3+ei9D2(3rC^", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : AV;Yf3+ei9D2(3rC^
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">S~ =*");
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2430);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7TvdF!c5r");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(7L, object0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Z2w1;");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1014497654951707614L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("E#q\"bRwT~qxjH");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("2c", "7Hk", jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      assertSame(jSONPath_StringOpSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".hcC.5^");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5[pBpU]dlnu6#B");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5[pBpU]dlnu6#B");
      jSONPath_JSONPathParser0.readDoubleValue((-11L));
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '), but 'd'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xY[f\"&Y,_FNk/o,f O|");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("andIncrement");
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("evalKeySet error : ");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "evalKeySet error : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : evalKeySet error : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/-Lc%~C!a", intArray0, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("i$Y-LP~O&-U=/", batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("[!HJ?{/9vCSJL", "[!HJ?{/9vCSJL", sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[!HJ?{/9vCSJL", "[!HJ?{/9vCSJL", 1843, sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[!HJ?{/9vCSJL", "[!HJ?{/9vCSJL", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLInvalidAuthorizationSpecException0, "[!HJ?{/9vCSJL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("$mHn#[:]j}!e9", "$mHn#[:]j}!e9");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2$mHn#[:]j}!e9
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "5[pBpU]dlnu6#B";
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jyUo<";
      stringArray0[1] = "5[pBpU]dlnu6#B";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.compile("jyUo<");
      String string1 = "/cause/stackTrace/8";
      String string2 = "\\-";
      // Undeclared exception!
      try { 
        JSONPath.extract("5[pBpU]dlnu6#B", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("]>x*7O", clientInfoStatus0);
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("]>x*7O", "u]I!V2?)6", intArray0, sQLClientInfoException0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) batchUpdateException0, serializeConfig0);
      //  // Unstable assertion: assertEquals(169, map0.size());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "kU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) "_", "_", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "Kln~A", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) "Kln~A", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Float float0 = new Float(1.0E7F);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "N$bJ]t_BRF.", "fastjson.parser.autoTypeSupport", (Object) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) "5[pBpU]dlnu6#B", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, (ParserConfig) null);
      Float float0 = new Float((float) 5614464919154503228L);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$ValueSegment";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$ValueSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$ValueSegment";
      Object object0 = JSONPath.reserveToArray(jSONPath0, stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("Y |[[[xQQ>8Ftmz", serializeConfig0, (ParserConfig) null);
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$ValueSegment", true);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      String[] stringArray0 = new String[3];
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$ValueSegment", jSONPath0);
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd(object0, (Object[]) stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      StackTraceElement[] stackTraceElementArray0 = sQLClientInfoException0.getStackTrace();
      JSONPath jSONPath0 = JSONPath.compile("IN");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "]>x*7O", (Object[]) stackTraceElementArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path IN
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("between");
      Object[] objectArray0 = new Object[2];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("between");
      jSONPath0.arrayAdd((Object) null, (Object[]) null);
      assertEquals("between", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_(");
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("_(", "_(", "~{r?rQp/imHAw2Ay<", (String[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_FilterSegment0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("U", serializeConfig0, (ParserConfig) null);
      int int0 = jSONPath0.size((Object) "U");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("]>x*7O");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("hDm", "/stackTrace/3");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      boolean boolean0 = JSONPath.containsValue((Object) sQLDataException0, "/stackTrace/3", (Object) batchUpdateException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "org.joda.time.LocalTime", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      boolean boolean0 = jSONPath0.contains((Object) "between");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        JSONPath.extract("GF7U7|>_W*+pYf", "fastjson.parser.deny.internal", parserConfig0, (-235), (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("i", serializeConfig0, (ParserConfig) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.JSONPath$ValueSegment", parserConfig0, 2186);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("null,");
      int[] intArray0 = new int[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("null,", (String) null, 896);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("evalKeySet", "1;Hn", (-2729), intArray0, sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, batchUpdateException0, sQLInvalidAuthorizationSpecException0);
      assertEquals(2, hashSet0.size());
      assertNotNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("J_y", (-581.118), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("J_y", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath0, parserConfig0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, (JSONPath.Filter) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      JSONPath jSONPath0 = JSONPath.compile("vbx*73");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$FilterGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("equals");
      JSONPath jSONPath0 = new JSONPath("equals");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, bigDecimal0, sQLNonTransientConnectionException0, bigDecimal0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("**q77VoJ*8P!0P1FVi");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('*', char0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2300);
      JSONPath jSONPath0 = JSONPath.compile("syntax error,except start with { or [,but actually start with ");
      UUID uUID0 = MockUUID.fromString("Vw");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("syntax error,except start with { or [,but actually start with ", "syntax error,except start with { or [,but actually start with ");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, uUID0, sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.util.UUID
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(90);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8", serializeConfig0, parserConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.safeMode", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/3");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/stackTrace/3", "}-CSr86%2d*s:t^");
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLNonTransientConnectionException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("-9\"");
      JSONPath jSONPath0 = JSONPath.compile("between");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(105, 105, 1384);
      DataTruncation dataTruncation0 = new DataTruncation(1384, true, true, 1384, 105);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, (Object) null, jSONPath_RangeSegment0, dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3280), 2686, 2686);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("isNotWriteDefaultValue", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3280), (-2034877679), 2686, 1241579778, (-2034877679));
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "b1XP~f1n+$u");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*", hashMap0, sQLTimeoutException0);
      int int0 = JSONPath.size((Object) sQLClientInfoException0, "*");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$StringOpSegement", serializeConfig0, (ParserConfig) null);
      String string0 = jSONPath0.getPath();
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Vha^fOUhm/9");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-2338));
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) localDate0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Object[] objectArray0 = new Object[0];
      JSONPath.arrayAdd((Object) serializeConfig0, "i", objectArray0);
      assertTrue(serializeConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_JSONPathParser0, "*", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      JSONPath jSONPath0 = new JSONPath("equals", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_JSONPathParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }
}
