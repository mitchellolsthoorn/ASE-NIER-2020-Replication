/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 14:16:13 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.MultipleGradientPaint;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.sql.ClientInfoStatus;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.function.BiConsumer;
import javax.annotation.Resource;
import javax.swing.LayoutStyle;
import javax.swing.SortOrder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("#");
      assertEquals("#", object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|3Oo*EIyV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("getnot");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      JSONObject.indent(mockPrintWriter0, 69);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("Unable to preserve stream position", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBigInteger("Unable to preserve stream position");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1511);
      MockFile mockFile0 = new MockFile("isnextProbablePrime", "isnextProbablePrime");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-659.73857525403");
      assertEquals((byte)109, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("2708.0263236820006");
      assertEquals((byte) (-108), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.remove("X8O\":Kf");
      assertSame(object0, proxy_Type0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("#");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getnot", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, StandardProtocolFamily> hashMap0 = new HashMap<String, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-46);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = jSONObject0.optNumber("[", (Number) bigInteger0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.optNumber((String) null, (Number) bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1501.92);
      String[] stringArray0 = new String[16];
      JSONObject jSONObject0 = new JSONObject(bigDecimal0, stringArray0);
      Number number0 = jSONObject0.optNumber("0N#nW+i", (Number) bigDecimal0);
      assertEquals((short)1501, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1511);
      long long0 = jSONObject0.optLong("isnegate", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      int int0 = jSONObject0.optInt((String) null, (-947));
      assertEquals((-947), int0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      float float0 = jSONObject0.optFloat((String) null, (float) (byte)0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      float float0 = jSONObject0.optFloat((String) null, (-2284.8699F));
      assertEquals(1, jSONObject0.length());
      assertEquals((-2284.8699F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      double double0 = jSONObject0.optDouble("k%~", (double) (byte)0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8448);
      double double0 = jSONObject0.optDouble((String) null, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("istoLowerCase", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = jSONObject0.optBigInteger("] is not a JSONObject.", bigInteger1);
      assertSame(bigInteger1, bigInteger2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<PipedInputStream, Resource.AuthenticationType> hashMap0 = new HashMap<PipedInputStream, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("sig", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull("EQ T");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Unable to preserve stream position", (-1091));
      double double0 = jSONObject1.getDouble("Unable to preserve stream position");
      assertEquals((-1091.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, stringArray0[2], (short)0, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, (-9), 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" at ", 1.0F);
      jSONObject0.increment("Kqc`^l=#?}#vYS(@");
      // Undeclared exception!
      jSONObject0.toString(8201);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("2!qo(8sdfWmFi~2{m&K", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("java.io.StringWriter@0000000032", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<DayOfWeek, Byte> hashMap0 = new HashMap<DayOfWeek, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 936.017F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        jSONObject0.put(stringArray0[3], 466.2784000369);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<PipedInputStream, Resource.AuthenticationType> hashMap0 = new HashMap<PipedInputStream, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("[F$Jz2;3B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "|3Oo*EIyV");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.US;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("isnegate", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name isnegate, locale en_US
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("JSONObject[", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("-1722.8781763638742", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1230));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1230
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(44);
      jSONObject0.write((Writer) stringWriter0, 4493, 399);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("Unable to preserve stream position", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(44);
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, (-1091), 8);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("longValue");
      Locale locale0 = Locale.ITALIAN;
      JSONObject jSONObject0 = new JSONObject(locale0);
      // Undeclared exception!
      jSONObject0.write((Writer) mockFileWriter0, 3734, 3734);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("getnot", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(101);
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, 8, 97);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = JSONObject.wrap(charArrayWriter0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer(45);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(45, object0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = JSONObject.wrap("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      Object object0 = JSONObject.wrap(roundingMode0);
      assertEquals(RoundingMode.FLOOR, object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1576, (-1.0F));
      assertEquals(1577, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = new Double(1267.15169306);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Long, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<Long, MultipleGradientPaint.CycleMethod>();
      JSONObject.testValidity(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("IB");
      assertEquals("IB", object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("longValue");
      Writer writer0 = JSONObject.quote("\"\"", (Writer) mockFileWriter0);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("length", "length");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      Writer writer0 = JSONObject.quote("]jJ?vjLp)L/XX.q", (Writer) outputStreamWriter0);
      assertSame(outputStreamWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.putOnce("]( \"(? ", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, "get");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Proxy.Type, BigDecimal> hashMap0 = new HashMap<Proxy.Type, BigDecimal>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("toString", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("isnegate", "isnegate");
      assertEquals("isnegate", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("EQ T", (Number) bigInteger0);
      assertEquals((byte)10, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber((String) null, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("Kqc`^l=#?}#vYS(@");
      BigInteger bigInteger0 = BigInteger.TEN;
      Number number0 = jSONObject0.optNumber("Kqc`^l=#?}#vYS(@", (Number) bigInteger0);
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("EQ T", 315L);
      assertEquals(315L, long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<PipedInputStream, Resource.AuthenticationType> hashMap0 = new HashMap<PipedInputStream, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("kd", (long) (-168));
      assertEquals((-168L), long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      int int0 = jSONObject0.optInt(" P::<s[5#A,1&XNP", 13);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("*Ev@z_}Ud`qSobMg/q", (float) 8192);
      assertEquals(8192.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (-602.61816417086));
      assertEquals((-602.61816417086), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<PipedInputStream, Resource.AuthenticationType> hashMap0 = new HashMap<PipedInputStream, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("sig", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("getnot", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = jSONObject0.optEnum(class0, "getnot", locale_FilteringMode0);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      Class<RoundingMode> class0 = RoundingMode.class;
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      jSONObject0.optEnum(class0, "java.io.StringWriter@0000000019", roundingMode0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.opt("gettoString");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 2);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(4734.05031);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(7);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "EQ T");
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.get("EQ T");
      assertSame(object0, proxy_Type0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("~0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<SortOrder> class0 = SortOrder.class;
      jSONObject0.optEnum(class0, "X8O\":Kf");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.quote("Kqc`^l=#?}#vYS(@");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<MockFileWriter, ClientInfoStatus> hashMap0 = new HashMap<MockFileWriter, ClientInfoStatus>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BiConsumer<Object, Proxy.Type> biConsumer0 = (BiConsumer<Object, Proxy.Type>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject(biConsumer0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("Cs)LzOPqrF");
      Map<String, Object> map0 = jSONObject1.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "|3Oo*EIyV");
      jSONObject0.toString(16);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p+J$/(-DYBu)z");
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, linkedList0, (-1034), 32);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      HashMap<Desktop.Action, PipedWriter> hashMap1 = new HashMap<Desktop.Action, PipedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap1);
      jSONObject0.putOnce("1261.9728", hashMap0);
      jSONObject0.toString((-1548));
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("longValue");
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, "longValue", (-168), (-168));
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Cs)LzOPqrF");
      jSONObject0.toString((-2161));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(59);
      JSONObject.writeValue(stringWriter0, jSONObject0, 55, 59);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      JSONObject jSONObject0 = new JSONObject(locale0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(14, map0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)73);
      linkedList0.push(short0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Desktop.Action, PipedWriter> hashMap0 = new HashMap<Desktop.Action, PipedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("rKw", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-qYST");
      assertEquals("-qYST", object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("2708.0263236820006");
      assertEquals(2708.0263236820006, object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("2710.1");
      assertEquals(2710.1, number0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("-1722.8781763638742.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9N|r%1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9N|r%1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(" at ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [ at ] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("\\");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("istoLanguageTag");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("EQ T");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<String, BigInteger> hashMap0 = new HashMap<String, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.similar(":QPb>]pY/ w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\n", 0.0);
      String string0 = jSONObject0.toString((-2161));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote((String) null, (Writer) charArrayWriter0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("getnot", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("T9C^2'BI4", "getstripExtensions");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "#eGf6R#T->,A");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("E%{m<>u/");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "E%{m<>u/";
      stringArray0[3] = "E%{m<>u/";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      JSONObject jSONObject1 = jSONObject0.accumulate("DS/uxI;GXMwUHTm(:~", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("(c0+x_pSTNqZ", true);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileInputStream0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("getnot", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optString("getnot", "-805.51454528.");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", 0.0);
      Number number0 = jSONObject1.optNumber("java.io.StringWriter@0000000002");
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("KI'>J$6T:_CtGB\"`jr4", false);
      Number number0 = jSONObject0.optNumber("KI'>J$6T:_CtGB\"`jr4");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("X8O\":Kf", 0L);
      long long0 = jSONObject0.optLong("X8O\":Kf");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("] is not a JSONObject.", (Object) null);
      long long0 = jSONObject1.optLong("] is not a JSONObject.");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("IB");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("9XOgW");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("EQ T", 97);
      assertEquals(97, int0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("get", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      MockFile mockFile0 = new MockFile("Qi&7PMv,9sC${");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      jSONObject0.put("getgetBytes", (Object) mockPrintStream0);
      jSONObject0.optBigInteger("getgetBytes", bigInteger0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("Unableto increment [", bigInteger0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.optBigDecimal("Unableto increment [", bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<MockFileWriter, ClientInfoStatus> hashMap0 = new HashMap<MockFileWriter, ClientInfoStatus>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("]( \"(? ", "]( \"(? ");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject1.optBigDecimal("]( \"(? ", bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      try { 
        jSONObject0.getEnum(class0, "X8O\":Kf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] is not an enum of type java.io.StringWriter@0000000004.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Long long0 = new Long((-168));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.has("EQ T");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("~#\"\"qy;) 2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<DayOfWeek, Byte> hashMap0 = new HashMap<DayOfWeek, Byte>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "ayBse'I=/OT#");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8448);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getLong("EQ T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<ClientInfoStatus, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<ClientInfoStatus, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Nh?oZVtK3/*yD__qF", 0.0F);
      try { 
        jSONObject1.getJSONObject("Nh?oZVtK3/*yD__qF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONObject jSONObject1 = jSONObject0.append("java.io.StringWriter@0000000004", "java.io.StringWriter@0000000004");
      jSONObject1.getJSONArray("java.io.StringWriter@0000000004");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getJSONArray("EQ T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getInt("EQ T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1501.92);
      String[] stringArray0 = new String[16];
      JSONObject jSONObject0 = new JSONObject(bigDecimal0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("sho", 565L);
      Number number0 = jSONObject1.getNumber("sho");
      assertEquals(565L, number0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getNumber("X8O\":Kf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("getnot", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getFloat("getnot");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("rZj0Wix=Z5wY", 44);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject1.getDouble("rZj0Wix=Z5wY");
      assertEquals(44.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBigDecimal("EQ T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("EQ T", false);
      assertFalse(boolean0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getString("EQ T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1784.4);
      assertEquals("1784.4", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("Unable to preserve stream position", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.append("Unable to preserve stream position", "Unable to preserve stream position");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Unable to preserve stream position] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      jSONObject0.accumulate("XKOU:Kf", bufferedInputStream0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("XKOU:Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      jSONObject0.accumulate("XKOU:Kf", bufferedInputStream0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      hashMap0.put("Unable to preserve stream position", (Proxy.Type) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      hashMap0.put((String) null, proxy_Type0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{aIo0lQ9=_AWtN");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 9 [character 10 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.remove("not");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HashMap<PipedInputStream, Resource.AuthenticationType> hashMap0 = new HashMap<PipedInputStream, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("u");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      jSONObject0.put("-Q$^G?v)/3.#K5O0R1", (Collection<?>) linkedList0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(7);
      double double0 = jSONObject0.optDouble("R\"F.h1=dyjp%.m!");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("isabs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("abs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull("EQ T");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("java.io.StringWriter@0000000004");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put("EQ T", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "EQ T");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }
}
