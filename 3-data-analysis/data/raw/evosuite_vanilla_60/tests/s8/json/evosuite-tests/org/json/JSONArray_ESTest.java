/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 13:52:54 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.MultipleGradientPaint;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.StandardProtocolFamily;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.sql.JDBCType;
import java.sql.PseudoColumnUsage;
import java.sql.RowIdLifetime;
import java.text.Normalizer;
import java.time.Month;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.annotation.Resource;
import javax.jws.WebParam;
import javax.swing.GroupLayout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1003, (-683L));
      JSONArray jSONArray1 = new JSONArray();
      HashMap<PseudoColumnUsage, PseudoColumnUsage> hashMap0 = new HashMap<PseudoColumnUsage, PseudoColumnUsage>();
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      try { 
        jSONArray2.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.put(true);
      boolean boolean0 = jSONArray1.similar(jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove(0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1, (long) 1);
      try { 
        jSONArray0.getBigInteger(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(1.0F);
      JSONArray jSONArray1 = jSONArray0.put(74, (Object) float0);
      try { 
        jSONArray1.getBigDecimal(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";?,\" GB9zCt5qr\"P$o");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0, 0, 1999);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(496);
      jSONArray0.write((Writer) stringWriter0);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(1.0F);
      jSONArray0.put(74, (Object) float0);
      jSONArray0.remove(0);
      assertEquals(74, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query("");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      jSONArray0.put(14, (Collection<?>) linkedList0);
      assertEquals(15, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(91, (float) 91);
      assertEquals(92, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Resource.AuthenticationType> linkedList0 = new LinkedList<Resource.AuthenticationType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.optString(91, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(0.0F);
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) float0);
      String string0 = jSONArray1.optString(0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList1 = new LinkedList<String>(set0);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(398, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONArray0.optNumber(44, (Number) bigInteger0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put(3014, (-911.81517));
      int int0 = jSONArray1.optInt(3014);
      assertEquals(3015, jSONArray0.length());
      assertEquals((-911), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(491, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(0.0F);
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) float0);
      float float1 = jSONArray1.optFloat(0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(2200.0F);
      float float0 = jSONArray1.optFloat(0);
      assertEquals(2200.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(496, (-685L));
      float float0 = jSONArray0.optFloat(496);
      assertEquals((-685.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble((-1853), (double) (-1853));
      assertEquals((-1853.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (long) 0);
      double double0 = jSONArray1.optDouble(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean((-3360), true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<KeyRep.Type> linkedList0 = new LinkedList<KeyRep.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = jSONArray0.optBigInteger(1538, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-57);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(34, bigInteger0);
      assertEquals((short)199, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = jSONArray0.optBigDecimal(44, (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((double) (-683L));
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(496, bigDecimal0);
      assertEquals((byte)85, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1003, (-683L));
      Object object0 = jSONArray0.opt(0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-460L));
      int int0 = jSONArray0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1003, (-683L));
      boolean boolean0 = jSONArray0.isNull(1003);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(496, (long) 496);
      long long0 = jSONArray0.getLong(496);
      assertEquals(496L, long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(456);
      jSONArray0.put(3377, (Object) integer0);
      int int0 = jSONArray0.getInt(3377);
      assertEquals(456, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(496, (-685L));
      double double0 = jSONArray0.getDouble(496);
      assertEquals((-685.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 371, 371);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2991, (long) 2991);
      StringWriter stringWriter0 = new StringWriter(91);
      // Undeclared exception!
      jSONArray1.write((Writer) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(496, (Object) jSONArray0);
      // Undeclared exception!
      jSONArray0.toList();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("org.json.JSONArray");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1071), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1071] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONArray0.put(1000000, true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put((-1), (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-913), (-913));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-913] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("*1`$,vY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.getLong(605);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[605] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getEnum((Class<WebParam.Mode>) null, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (long) 0);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1, (long) 1);
      StringWriter stringWriter0 = new StringWriter(92);
      Writer writer0 = JSONObject.writeValue(stringWriter0, jSONArray0, 10, (-782));
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(496, 948L);
      StringWriter stringWriter0 = new StringWriter(496);
      Writer writer0 = JSONObject.writeValue(stringWriter0, jSONArray1, (-1853), 496);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      RoundingMode roundingMode0 = RoundingMode.UP;
      jSONArray0.put((Object) roundingMode0);
      Writer writer0 = JSONObject.writeValue(stringWriter0, jSONArray0, (-1853), 496);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(496, (-715L));
      JSONArray jSONArray2 = jSONArray0.put(496, (Object) jSONArray1);
      assertEquals(497, jSONArray2.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(1.0F);
      try { 
        jSONArray0.put((-106), (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-106] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(1999, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-2085L));
      Number number0 = jSONArray0.optNumber(371, (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(496, 948L);
      RoundingMode roundingMode0 = RoundingMode.UP;
      JSONArray jSONArray2 = jSONArray1.put((Object) roundingMode0);
      jSONArray2.remove(496);
      long long0 = jSONArray1.optLong(496, (long) 0);
      assertEquals(497, jSONArray1.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong((-2008), (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.ROWID;
      JDBCType jDBCType1 = jSONArray0.optEnum(class0, (-2176), jDBCType0);
      assertSame(jDBCType1, jDBCType0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(398, false);
      int int0 = jSONArray0.optInt(398, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(0, 1518);
      assertEquals(1518, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Month> linkedList0 = new LinkedList<Month>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      float float0 = jSONArray0.optFloat(10, (-2524.2F));
      assertEquals((-2524.2F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(4238, (double) 4238);
      assertEquals(4238.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Month> linkedList0 = new LinkedList<Month>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.opt(605);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt((-1309));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(496, (-683L));
      try { 
        jSONArray0.getString(16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[16] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(398, false);
      assertEquals(399, jSONArray0.length());
      
      boolean boolean0 = jSONArray1.getBoolean(398);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get((-750));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-750] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      jSONArray0.put(1309, (Object) dataInputStream0);
      Object object0 = jSONArray0.get(93);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<GroupLayout.Alignment> class0 = GroupLayout.Alignment.class;
      jSONArray0.optEnum(class0, 361);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<PseudoColumnUsage, RowIdLifetime> hashMap0 = new HashMap<PseudoColumnUsage, RowIdLifetime>();
      jSONArray0.put(453, (Map<?, ?>) hashMap0);
      jSONArray0.toList();
      assertEquals(454, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Month> linkedList0 = new LinkedList<Month>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((Collection<?>) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(398, false);
      jSONArray1.toList();
      assertEquals(399, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(496, (long) 496);
      String string0 = jSONArray1.toString((int) (byte)1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(417, (long) 417);
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(540, (Object) "l?");
      // Undeclared exception!
      jSONArray1.toString(105);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.put(1360, 0.0);
      jSONArray0.toJSONObject(jSONArray1);
      assertEquals(1361, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Resource.AuthenticationType> linkedList0 = new LinkedList<Resource.AuthenticationType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-1396.6));
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONArray1.put(true);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (long) 0);
      boolean boolean0 = jSONArray1.similar(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray1.put(true);
      boolean boolean0 = jSONArray0.similar(jSONArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = jSONArray0.similar(bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(45);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove((-1));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (long) 0);
      jSONArray1.put(0, 1);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(341.990468588138);
      jSONArray0.put((Object) double0);
      String string0 = jSONArray0.optString(0, "] not a string.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(307, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray1.optNumber(307, (Number) bigDecimal0);
      assertEquals(308, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (long) 0);
      Number number0 = jSONArray0.optNumber(0, (Number) null);
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(722, (long) 722);
      long long0 = jSONArray0.optLong(722, (-1L));
      assertEquals(722L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(307, true);
      long long0 = jSONArray1.optLong(307);
      assertEquals(308, jSONArray0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(1979);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(307);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (long) 0);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(3139, roundingMode0);
      BigDecimal bigDecimal0 = new BigDecimal(0, mathContext0);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(398, (double) 398);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONArray0.optBigDecimal(398, bigDecimal0);
      assertEquals(399, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(69, true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONArray1.optBigDecimal(69, bigDecimal0);
      assertEquals(70, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray1 = jSONArray0.put(1, (-683L));
      BigInteger bigInteger1 = jSONArray1.optBigInteger(1, bigInteger0);
      assertEquals((byte)85, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<PseudoColumnUsage, RowIdLifetime> hashMap0 = new HashMap<PseudoColumnUsage, RowIdLifetime>();
      JSONArray jSONArray1 = jSONArray0.put(1, (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray1.optBigInteger(1, bigInteger0);
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(398, false);
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      jSONArray1.optEnum(class0, 398, authenticator_RequestorType0);
      assertEquals(399, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(398, false);
      int int0 = jSONArray1.optInt(398);
      assertEquals(399, jSONArray0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((-1965.7729704));
      jSONArray0.put(91, (Object) double0);
      int int0 = jSONArray0.optInt(91, 91);
      assertEquals((-1965), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(434, false);
      float float0 = jSONArray0.optFloat(434);
      assertEquals(435, jSONArray0.length());
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(398, (double) 398);
      float float0 = jSONArray0.optFloat(398, (float) (-1));
      assertEquals(399, jSONArray0.length());
      assertEquals(398.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (long) 0);
      double double0 = jSONArray0.optDouble(0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(398, false);
      double double0 = jSONArray1.optDouble(398, (double) 398);
      assertEquals(399, jSONArray0.length());
      assertEquals(398.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(398, false);
      jSONArray1.join("\"");
      assertEquals(399, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(496, (-685L));
      long long0 = jSONArray0.getLong(496);
      assertEquals((-685L), long0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (long) 0);
      try { 
        jSONArray1.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (long) 0);
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(496, (-3316L));
      int int0 = jSONArray0.getInt(496);
      assertEquals((-3316), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(496, (-3316L));
      try { 
        jSONArray0.getInt(473);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[473] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(496, (-685L));
      assertEquals(497, jSONArray0.length());
      
      Number number0 = jSONArray0.getNumber(496);
      assertEquals((-685L), number0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(398, false);
      try { 
        jSONArray1.getNumber(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<PseudoColumnUsage, RowIdLifetime> hashMap0 = new HashMap<PseudoColumnUsage, RowIdLifetime>();
      JSONArray jSONArray1 = jSONArray0.put(1, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONArray0.put(0, (Object) bigDecimal0);
      double double0 = jSONArray0.getDouble(0);
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<PseudoColumnUsage, RowIdLifetime> hashMap0 = new HashMap<PseudoColumnUsage, RowIdLifetime>();
      jSONArray0.put(1, (Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(398, false);
      boolean boolean0 = jSONArray1.optBoolean(398, false);
      assertEquals(399, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";?,\" GB9zCt5qr\"P$o");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Resource.AuthenticationType> linkedList0 = new LinkedList<Resource.AuthenticationType>();
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      linkedList0.add(resource_AuthenticationType0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[wE,pS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 7 [character 8 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<WebParam.Mode> class0 = WebParam.Mode.class;
      try { 
        jSONArray0.getEnum(class0, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[57] is not an enum of type java.io.StringWriter@0000000002.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery("");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Resource.AuthenticationType> linkedList0 = new LinkedList<Resource.AuthenticationType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<MultipleGradientPaint.CycleMethod, Character.UnicodeScript> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, Character.UnicodeScript>();
      try { 
        jSONArray0.put((-1174), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1174] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isNull(467);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("val [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<StandardProtocolFamily, StandardProtocolFamily> hashMap0 = new HashMap<StandardProtocolFamily, StandardProtocolFamily>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(386);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(493);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (long) 0);
      float float0 = jSONArray1.getFloat(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1413), (Collection<?>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1413] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-3545), (double) (-3545));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3545] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-1535L));
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1), (-2971.0F));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean((-442));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(44);
      assertEquals("", string0);
  }
}
