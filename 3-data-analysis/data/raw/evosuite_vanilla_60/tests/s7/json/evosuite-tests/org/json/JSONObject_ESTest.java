/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 13:39:57 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.LineNumberReader;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.StandardProtocolFamily;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.sql.PseudoColumnUsage;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.swing.SortOrder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      try { 
        jSONObject0.getNumber("0l/D#JS)fEZGf<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 92);
      assertEquals("                                                                                            ", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("6;_(q");
      assertEquals("6;_(q", object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<StandardProtocolFamily> linkedList0 = new LinkedList<StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.increment("+*>fQNXA%\u0002");
      try { 
        jSONObject0.getBigInteger("+*>fQNXA%\u0002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2342);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1245);
      JSONObject.writeValue(charArrayWriter0, byteArrayOutputStream0, 0, 34);
      assertEquals(42, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0);
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("-0", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = (JSONObject)jSONObject1.remove("-0");
      assertTrue(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("#");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("] not found.", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = jSONObject0.optString("}`K", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("/");
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = jSONObject0.optNumber("is", (Number) bigDecimal0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("0", (long) 1106);
      assertEquals(1106L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("org.json.JSONObject@0000000001", (-3164L));
      assertEquals((-3164L), long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Short short0 = new Short((short)790);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.put("", (int) (short)790);
      long long0 = jSONObject0.optLong("");
      assertEquals(790L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.READ;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CENTER_OFFSET;
      hashMap0.put(processBuilder_Redirect_Type0, component_BaselineResizeBehavior0);
      jSONObject0.put("-0", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("-0");
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.increment("+*>fQNXA%\u0002");
      int int0 = jSONObject1.optInt("+*>fQNXA%\u0002");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      float float0 = jSONObject0.optFloat("Nesting too deep.", (-1772.4F));
      assertEquals((-1772.4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Value outof equence.", 5.0019054392505815);
      assertEquals(5.0019054392505815, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      double double0 = jSONObject0.optDouble(";#ICXDI V25:J", (-4601.381113932558));
      assertEquals((-4601.381113932558), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      jSONObject0.put("", 0.0F);
      double double0 = jSONObject0.optDouble("");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(19);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.optBigInteger("81y8##Z! S\"b#}GfFZb", (BigInteger) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(115);
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("2lXL4;l!", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 11);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 11);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(lineNumberReader0, stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-1033.0));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("", bigDecimal0);
      assertEquals((byte) (-9), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      JSONObject jSONObject1 = jSONObject0.put("9", (Map<?, ?>) null);
      JSONObject jSONObject2 = (JSONObject)jSONObject1.opt("9");
      assertEquals(0, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("/", 2327.0);
      float float0 = jSONObject1.getFloat("/");
      assertEquals(2327.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      jSONObject0.put("+Hm 0=0]", (-10));
      float float0 = jSONObject0.getFloat("+Hm 0=0]");
      assertEquals((-10.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("1h", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<DayOfWeek, JSONObject> hashMap0 = new HashMap<DayOfWeek, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 2840, 2840);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8192);
      StringWriter stringWriter0 = new StringWriter(8192);
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject1 = jSONObject0.put("/", (Map<?, ?>) hashMap0);
      jSONObject1.put("Dg5Lby,HX4xcbU0cB", 1L);
      // Undeclared exception!
      jSONObject1.write((Writer) stringWriter0, 1378, 8192);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 102, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(12);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      Float float0 = new Float(Float.NaN);
      try { 
        jSONObject0.putOnce("MhF8JYv:@n,HRcn", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<ClientInfoStatus, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<ClientInfoStatus, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-511));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (float) 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("#SO2$BF.}pLUBD6Z5", stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 3260);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      try { 
        jSONObject0.getInt("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      Character character0 = Character.valueOf('6');
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Short short0 = new Short((short)16);
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("m");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("toC[", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name toC[, locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("U6`j-cVF=", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(14);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(pipedReader0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-754));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -754
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<CryptoPrimitive, SortOrder> hashMap0 = new HashMap<CryptoPrimitive, SortOrder>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, 123, 8);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<PseudoColumnUsage, BufferedOutputStream> hashMap0 = new HashMap<PseudoColumnUsage, BufferedOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("keySet", false);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, (-1443192281), 8);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.UK;
      JSONObject jSONObject0 = new JSONObject(locale0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      jSONObject0.write((Writer) mockPrintWriter0, (-1849609663), 125);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8192);
      StringWriter stringWriter0 = new StringWriter(8192);
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.READ;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_DESCENT;
      hashMap0.put(processBuilder_Redirect_Type0, component_BaselineResizeBehavior0);
      JSONObject jSONObject1 = jSONObject0.put("/", (Map<?, ?>) hashMap0);
      Writer writer0 = jSONObject1.write((Writer) stringWriter0, 1378, 8192);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      Object object0 = JSONObject.wrap(charArrayReader0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = JSONObject.wrap("^a6jvQ[?,=LX3c");
      assertEquals("^a6jvQ[?,=LX3c", object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<KeyRep.Type> linkedList0 = new LinkedList<KeyRep.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(3473, (float) 3473);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double double0 = new Double(9);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("GPn>\")", (Writer) charArrayWriter0);
      assertEquals("\"GPn>\\\")\"", charArrayWriter0.toString());
      assertEquals(9, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1872);
      JSONObject.quote("/q|;l}_*aYF]", (Writer) stringWriter0);
      assertEquals("\"/q|;l}_*aYF]\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("s#2mwS/XNX:=~w", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(19);
      JSONObject.quote((String) null, (Writer) stringWriter0);
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("org.ev", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(14);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(pipedReader0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-62));
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("QJI&=+R>[(:txRtZ", (Object) "Vu");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Short short0 = new Short((short) (-2438));
      JSONObject jSONObject0 = new JSONObject((Object) "Value out of sequence.");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("Misplaced key.", "gettoUpperCase");
      assertEquals("gettoUpperCase", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/", 703L);
      BigDecimal bigDecimal0 = new BigDecimal((-3336));
      Number number0 = jSONObject0.optNumber("/", (Number) bigDecimal0);
      assertEquals(703L, number0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optNumber("size", (Number) bigDecimal0);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject1 = jSONObject0.put("/", (Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((-3336));
      Number number0 = jSONObject1.optNumber("/", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      jSONObject0.optLong((String) null, 0L);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      int int0 = jSONObject0.optInt("Unable to preserve stream position", 92);
      assertEquals(92, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      float float0 = jSONObject0.optFloat("#=Sc9V_", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Value out of sequence.", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(323);
      boolean boolean0 = jSONObject0.optBoolean("P/H%jX", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/", 2327.0);
      Class<Formatter.BigDecimalLayoutForm> class0 = Formatter.BigDecimalLayoutForm.class;
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm1 = jSONObject0.optEnum(class0, "/", formatter_BigDecimalLayoutForm0);
      assertSame(formatter_BigDecimalLayoutForm1, formatter_BigDecimalLayoutForm0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "t+o");
      Class<MultipleGradientPaint.ColorSpaceType> class0 = MultipleGradientPaint.ColorSpaceType.class;
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.SRGB;
      jSONObject0.optEnum(class0, "t+o", multipleGradientPaint_ColorSpaceType0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<DayOfWeek, JSONObject> hashMap0 = new HashMap<DayOfWeek, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt("``");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float(3156.288872104079);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      boolean boolean0 = jSONObject1.isEmpty();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.increment("hashCode");
      try { 
        jSONObject1.getBoolean("hashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      try { 
        jSONObject0.get("C#C3,//r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Object> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Object>();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_DESCENT;
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 99);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      hashMap0.put(component_BaselineResizeBehavior0, bufferedInputStream0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("] not a string.", stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("eT FB%#V.sl$7", (Map<?, ?>) null);
      Map<String, Object> map0 = jSONObject1.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<PushbackInputStream> linkedList0 = new LinkedList<PushbackInputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("eT FB%#V.sl$7", (Map<?, ?>) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("eT FB%#V.sl$7");
      jSONObject0.append("istoUpperCase", mockFileWriter0);
      String string0 = jSONObject1.toString((int) (short) (-1916));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Float float0 = new Float(3156.288872104079);
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.write((Writer) stringWriter0, 62, (int) (short)55);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 76, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float((double) (byte) (-120));
      Object object0 = JSONObject.wrap(float0);
      assertEquals((-120.0F), object0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Long long0 = new Long(4552L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(4552L, object0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Short short0 = new Short((short)10);
      hashMap0.put("isN", short0);
      JSONObject jSONObject1 = jSONObject0.put("\"", (Map<?, ?>) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Character character0 = new Character('=');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('=', object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-113));
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte) (-113), object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)JSONObject.wrap(jSONArray0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      KeyRep.Type keyRep_Type0 = KeyRep.Type.PRIVATE;
      LinkedList<KeyRep.Type> linkedList0 = new LinkedList<KeyRep.Type>();
      linkedList0.add(keyRep_Type0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      LinkedList<KeyRep.Type> linkedList0 = new LinkedList<KeyRep.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("(sffh/J]11goIJR");
      assertEquals("(sffh/J]11goIJR", object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("t+o");
      assertEquals("t+o", object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("9");
      assertEquals(9, number0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("(hfN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [(hfN] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("@(9)B_uGE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("l`=w)}r<Be3W");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("?_3>8)s;_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("N&GQa", (double) 3556);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = jSONObject0.similar(pipedOutputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.quote("=Rvi'*@Y&yYf");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "java.io.StringWriter@0000000001");
      JSONObject jSONObject0 = new JSONObject("(sffh/J]11goIJR", stringArray0);
      try { 
        jSONObject0.getLong("z\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("null", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.increment("+*>fQNXA%\u0002");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "+*>fQNXA%\u0002";
      stringArray0[2] = "+*>fQNXA%\u0002";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ICCU", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+*>fQNXA%\u0002");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<MultipleGradientPaint.ColorSpaceType> class0 = MultipleGradientPaint.ColorSpaceType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<PushbackInputStream> linkedList0 = new LinkedList<PushbackInputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      try { 
        jSONObject0.put("issize", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/", 2327.0);
      String string0 = jSONObject0.optString("/", "2J'G'V]");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/", 2327.0);
      Number number0 = jSONObject0.optNumber("/");
      assertEquals(2327.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2343);
      JSONObject jSONObject1 = jSONObject0.put("pO8)azH7Jtn,aTj#>)", true);
      long long0 = jSONObject1.optLong("pO8)azH7Jtn,aTj#>)");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-0", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("-0");
      assertNotSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.optJSONObject("java.lang.Long@00000000040");
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("VsfVi");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Character character0 = Character.valueOf('8');
      jSONObject0.append("h", character0);
      int int0 = jSONObject0.optInt("h", (int) (short) (-1898));
      assertEquals((-1898), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<DayOfWeek, JSONObject> hashMap0 = new HashMap<DayOfWeek, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("``", 0L);
      int int0 = jSONObject1.optInt("``", 76);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<JSONArray, FilterInputStream> hashMap0 = new HashMap<JSONArray, FilterInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("~1", (Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("~1");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.increment("+*>fQNXA%\u0002");
      float float0 = jSONObject1.optFloat("+*>fQNXA%\u0002", (-0.47851393F));
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Character character0 = new Character('2');
      jSONObject0.accumulate("org.json.JSONObject@0000000001", character0);
      double double0 = jSONObject0.optDouble("org.json.JSONObject@0000000001");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("org.json.JSONObject@0000000001", "org.json.JSONObject@0000000001");
      double double0 = jSONObject1.optDouble("org.json.JSONObject@0000000001");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.increment("+*>fQNXA%\u0002");
      double double0 = jSONObject0.optDouble("+*>fQNXA%\u0002");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<PseudoColumnUsage, RoundingMode> hashMap0 = new HashMap<PseudoColumnUsage, RoundingMode>();
      jSONObject0.putOnce("2768.1181715", hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("2768.1181715", bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("M", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<DayOfWeek, JSONObject> hashMap0 = new HashMap<DayOfWeek, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("``", 703L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("``", bigInteger0);
      assertEquals((short)703, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("org.json.JSONObject@0000000001", "org.json.JSONObject@0000000001");
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONObject0.optBigDecimal("org.json.JSONObject@0000000001", bigDecimal0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(716L);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("_y#FDqfS^*", bigDecimal0);
      assertEquals((byte) (-52), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.increment("+*>fQNXA%\u0002");
      BigDecimal bigDecimal0 = jSONObject1.optBigDecimal("+*>fQNXA%\u0002", (BigDecimal) null);
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<DayOfWeek, JSONObject> hashMap0 = new HashMap<DayOfWeek, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("``", 0L);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject1.optEnum(class0, "``");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Byte byte0 = new Byte((byte)119);
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, byte0, (byte)119, (byte)119);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("eT FB%#V.sl$7", 1L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j4rtmjT&&!<");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("j4rtmjT&&!<", true);
      try { 
        jSONObject1.increment("j4rtmjT&&!<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/", 2327.0);
      JSONObject jSONObject1 = jSONObject0.increment("/");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("pO8)azH7Jtn,aTj#>)", true);
      boolean boolean0 = jSONObject1.has("pO8)azH7Jtn,aTj#>)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      boolean boolean0 = jSONObject0.has("9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/", 2327.0);
      try { 
        jSONObject0.getString("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1106);
      String[] stringArray0 = JSONObject.getNames((Object) charArrayWriter0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.put("eT FB%#V.sl$7", 1L);
      JSONObject.getNames(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(charArrayReader0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("j4rtmjT&&!<", (double) 57);
      long long0 = jSONObject1.getLong("j4rtmjT&&!<");
      assertEquals(57L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Character character0 = Character.valueOf('8');
      jSONObject0.append("h", character0);
      try { 
        jSONObject0.getLong("h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      jSONObject0.put("9", (Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("9");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("b", "b");
      try { 
        jSONObject0.getJSONObject("b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("eT FB%#V.sl$7", 1L);
      try { 
        jSONObject1.getJSONArray("eT FB%#V.sl$7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("eT FB%#V.sl$7", 1L);
      Number number0 = jSONObject1.getNumber("eT FB%#V.sl$7");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringReader stringReader0 = new StringReader("org.json.JSONObject@0000000001");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JSONObject jSONObject1 = jSONObject0.putOnce("", pushbackReader0);
      try { 
        jSONObject1.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HashMap<DayOfWeek, JSONObject> hashMap0 = new HashMap<DayOfWeek, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("``", 0L);
      float float0 = jSONObject0.getFloat("``");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("[%O:'", "[%O:'");
      try { 
        jSONObject0.getFloat("[%O:'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<MockPrintStream, FilterOutputStream> hashMap0 = new HashMap<MockPrintStream, FilterOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("getFD", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getDouble("getFD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("org.json.JSONObject@0000000001", "org.json.JSONObject@0000000001");
      try { 
        jSONObject1.getBigDecimal("org.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.increment("+*>fQNXA%\u0002");
      boolean boolean0 = jSONObject0.optBoolean("+*>fQNXA%\u0002", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("#SO2$BF.}pLUBD6Z5", stringArray0);
      jSONObject0.put("#SO2$BF.}pLUBD6Z5", false);
      boolean boolean0 = jSONObject0.getBoolean("#SO2$BF.}pLUBD6Z5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      Class<MultipleGradientPaint.ColorSpaceType> class0 = MultipleGradientPaint.ColorSpaceType.class;
      try { 
        jSONObject0.getEnum(class0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("/", 2327.0);
      assertEquals(1, jSONObject0.length());
      
      Object object0 = jSONObject1.get("/");
      assertEquals(2327.0, object0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = JSONObject.doubleToString(9);
      assertEquals("9", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = JSONObject.doubleToString(396.595223191967);
      assertEquals("396.595223191967", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("eT FB%#V.sl$7", 1L);
      try { 
        jSONObject0.append("eT FB%#V.sl$7", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[eT FB%#V.sl$7] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("org.json.JSONObject@0000000001", "org.json.JSONObject@0000000001");
      JSONObject jSONObject1 = jSONObject0.accumulate("org.json.JSONObject@0000000001", "org.json.JSONObject@0000000001");
      jSONObject1.optJSONArray("org.json.JSONObject@0000000001");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.READ;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_DESCENT;
      hashMap0.put(processBuilder_Redirect_Type0, component_BaselineResizeBehavior0);
      jSONObject0.put("/", (Map<?, ?>) hashMap0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      Object object0 = jSONObject0.remove("t+o");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("Nullmpointer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      jSONObject0.put("v.z2w.i*", (Collection<?>) linkedList0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("eT$aB%#V.sl$7", 26L);
      String string0 = jSONObject0.toString((-485));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Locale locale0 = Locale.UK;
      JSONObject jSONObject0 = new JSONObject(locale0);
      boolean boolean0 = jSONObject0.optBoolean("n8-J");
      assertEquals(14, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      boolean boolean0 = jSONObject0.isNull("9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      Number number0 = jSONObject0.optNumber("] not found.");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3220);
      int int0 = jSONObject0.optInt("V^{en");
      assertEquals(0, int0);
  }
}
