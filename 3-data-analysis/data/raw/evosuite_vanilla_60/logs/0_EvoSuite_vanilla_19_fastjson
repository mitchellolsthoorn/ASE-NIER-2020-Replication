* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSONReader
* Starting Client-0
* Connecting to master process on port 13825
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:27:57.333 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:27:57.335 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 740
* Using seed 19
* Starting evolution
* Initial Number of Goals in DynaMOSA = 232 / 740
[MASTER] 18:27:58.253 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
* Search finished after 68s and 1 generations, 1114 statements, best individual has fitness: 633.0
[MASTER] 18:29:05.148 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 7 seconds more than allowed.
* Minimizing test suite
[MASTER] 18:31:05.825 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 19%
* Total number of goals: 157
* Number of covered goals: 30
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 15%
* Total number of goals: 115
* Number of covered goals: 17
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 13%
* Total number of goals: 266
* Number of covered goals: 35
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 0%
* Total number of goals: 37
* Number of covered goals: 0
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 60%
* Total number of goals: 25
* Number of covered goals: 15
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 24%
* Total number of goals: 25
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 14%
* Total number of goals: 115
* Number of covered goals: 16
* Generated 18 tests with total length 363
* Resulting test suite's coverage: 26% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s19/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSONValidator
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSONArray
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.parser.JSONReaderScanner
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 13823
* Connecting to master process on port 13824
* Starting Client-0
* Connecting to master process on port 13825
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONValidator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1127
* Using seed 19
* Starting evolution
* Initial Number of Goals in DynaMOSA = 268 / 1127
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.JSONReaderScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 18:31:22.951 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:31:22.952 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Total number of test goals for DYNAMOSA: 1110
* Using seed 19
* Starting evolution
* Initial Number of Goals in DynaMOSA = 338 / 1110
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONArray
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1055
* Using seed 19
* Starting evolution
* Initial Number of Goals in DynaMOSA = 674 / 1055
[MASTER] 18:31:24.058 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 18:31:24.058 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 18:31:24.417 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:31:24.418 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
[MASTER] 18:31:25.535 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 18:31:25.682 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 18:31:37.750 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 18:32:03.644 [logback-1] WARN  ClassResetter - class java.lang.reflect.InvocationTargetException thrown during execution of method  __STATIC_RESET() for class com.alibaba.fastjson.parser.ParserConfig, java.lang.NullPointerException
* Search finished after 62s and 35 generations, 23011 statements, best individual has fitness: 366.0
* Search finished after 62s and 21 generations, 12691 statements, best individual has fitness: 204.0
* Minimizing test suite
* Search finished after 62s and 55 generations, 16770 statements, best individual has fitness: 347.0
* Minimizing test suite
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 81%
* Total number of goals: 156
* Number of covered goals: 127
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 72%
* Total number of goals: 104
* Number of covered goals: 75
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 662
* Number of covered goals: 594
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 72%
* Total number of goals: 40
* Number of covered goals: 29
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 71%
* Total number of goals: 104
* Number of covered goals: 74
* Generated 70 tests with total length 217
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 78%
* Total number of goals: 173
* Number of covered goals: 135
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 75%
* Total number of goals: 101
* Number of covered goals: 76
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 88%
* Total number of goals: 81
* Number of covered goals: 71
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 83%
* Total number of goals: 325
* Number of covered goals: 270
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 37%
* Total number of goals: 219
* Number of covered goals: 81
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 68
* Number of covered goals: 68
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 84%
* Total number of goals: 68
* Number of covered goals: 57
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 75%
* Total number of goals: 101
* Number of covered goals: 76
* Generated 137 tests with total length 379
* Resulting test suite's coverage: 74% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 45%
* Compiling and checking tests
[MASTER] 18:32:56.788 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 18:32:56.790 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONArray jSONArray0 = new JSONArray();
jSONArray0.fluentAdd((Object) jSONArray0);
jSONArray0.fluentRetainAll(jSONArray0);
assertEquals(1, jSONArray0.size());


* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 60%
* Total number of goals: 266
* Number of covered goals: 160
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 56%
* Total number of goals: 212
* Number of covered goals: 118
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 375
* Number of covered goals: 338
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 88%
* Total number of goals: 24
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 55%
* Total number of goals: 212
* Number of covered goals: 117
* Generated 53 tests with total length 196
* Resulting test suite's coverage: 60% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 27%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'JSONArray_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s19/fastjson/evosuite-tests
* Done!

* Computation finished
* Writing tests to file
* Writing JUnit test case 'JSONReaderScanner_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s19/fastjson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 29%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONValidator_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s19/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSONObject
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.parser.DefaultJSONParser
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSONPath
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 13824
* Connecting to master process on port 13822
* Starting Client-0
* Connecting to master process on port 13825
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:34:20.550 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:34:20.553 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONObject
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1211
* Using seed 19
* Starting evolution
* Initial Number of Goals in DynaMOSA = 496 / 1211
[MASTER] 18:34:21.845 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 18:34:21.845 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 18:34:21.845 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 18:34:21.846 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:34:25.980 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:34:25.981 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
[MASTER] 18:34:26.022 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:34:26.023 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.DefaultJSONParser
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONPath
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3512
* Using seed 19
* Starting evolution
* Initial Number of Goals in DynaMOSA = 650 / 3512
* Total number of test goals for DYNAMOSA: 7058
* Using seed 19
* Starting evolution
[MASTER] 18:34:27.806 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 18:34:27.808 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 18:34:27.819 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 18:34:27.819 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 18:34:27.820 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumMap<K, V> : Type points to itself
[MASTER] 18:34:27.820 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 18:34:27.824 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 18:34:27.824 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Hashtable<K, V> : Type points to itself
[MASTER] 18:34:27.825 [logback-2] ERROR TestCluster - Failed to check cache for java.util.IdentityHashMap<K, V> : Type points to itself
[MASTER] 18:34:27.825 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashMap<K, V> : Type points to itself
[MASTER] 18:34:27.825 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 18:34:27.827 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 18:34:27.829 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeMap<K, V> : Type points to itself
[MASTER] 18:34:27.829 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 18:34:27.830 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
* Initial Number of Goals in DynaMOSA = 865 / 7058
[MASTER] 18:34:28.068 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 18:34:28.103 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 18:34:28.103 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 18:34:28.104 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 18:34:28.104 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 18:34:28.104 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 18:34:28.104 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 18:34:28.104 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 18:34:28.104 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 18:34:28.104 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 18:34:28.105 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 18:34:28.106 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 18:34:28.112 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Enum<E> : Type points to itself
[MASTER] 18:34:28.117 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 18:34:28.118 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 18:34:35.560 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 18:34:39.338 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 18:34:43.200 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 18:35:05.699 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 18:35:19.247 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 62s and 30 generations, 13014 statements, best individual has fitness: 543.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 59%
* Total number of goals: 254
* Number of covered goals: 150
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 49%
* Total number of goals: 172
* Number of covered goals: 84
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 90%
* Total number of goals: 10
* Number of covered goals: 9
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 57%
* Total number of goals: 333
* Number of covered goals: 191
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 36%
* Total number of goals: 162
* Number of covered goals: 58
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 95%
* Total number of goals: 59
* Number of covered goals: 56
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 59
* Number of covered goals: 54
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 48%
* Total number of goals: 172
* Number of covered goals: 83
* Generated 69 tests with total length 165
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
* Search finished after 63s and 43 generations, 21618 statements, best individual has fitness: 2282.0
* Minimizing test suite
* Search finished after 65s and 60 generations, 47124 statements, best individual has fitness: 4158.0
[MASTER] 18:35:35.395 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 7 seconds more than allowed.
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 27%
* Total number of goals: 973
* Number of covered goals: 264
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 27%
* Total number of goals: 707
* Number of covered goals: 194
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 44
* Number of covered goals: 44
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 59%
* Total number of goals: 897
* Number of covered goals: 529
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 102
* Number of covered goals: 34
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 97%
* Total number of goals: 63
* Number of covered goals: 61
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 73%
* Total number of goals: 63
* Number of covered goals: 46
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 21%
* Total number of goals: 707
* Number of covered goals: 145
* Generated 109 tests with total length 354
* Resulting test suite's coverage: 48% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'JSONObject_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s19/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 18:36:05.980 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: java.lang.Integer cannot be cast to java.util.Hashtable
[MASTER] 18:36:05.980 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("8pSh$aze~lE");
DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
assertNotNull(dateFormat0);

Hashtable<LinkedList, Class<ImageCapabilities>> hashtable0 = defaultJSONParser0.parseObject((Type) null, (Object) dateFormat0);
assertEquals(0, defaultJSONParser0.resolveStatus);
assertNotNull(hashtable0);


* Writing tests to file
* Writing JUnit test case 'DefaultJSONParser_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s19/fastjson/evosuite-tests
* Done!

* Computation finished
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 49%
* Total number of goals: 2079
* Number of covered goals: 1019
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 36%
* Total number of goals: 1850
* Number of covered goals: 663
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 88
* Number of covered goals: 85
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 52%
* Total number of goals: 913
* Number of covered goals: 477
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 61%
* Total number of goals: 114
* Number of covered goals: 69
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 126
* Number of covered goals: 125
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 90%
* Total number of goals: 126
* Number of covered goals: 113
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 33%
* Total number of goals: 1850
* Number of covered goals: 617
* Generated 264 tests with total length 889
* Resulting test suite's coverage: 47% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 22%
* Compiling and checking tests
[MASTER] 18:38:06.988 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.alibaba.fastjson.JSONPath but in com.alibaba.fastjson.JSONPath$JSONPathParser.readSegement(JSONPath.java:845): org.evosuite.runtime.mock.java.lang.MockThrowable: not support jsonpath : n!~W4>K
[MASTER] 18:38:06.988 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Object[] objectArray0 = new Object[1];
JSONPath.arrayAdd((Object) "n!~W4>K", "n!~W4>K", objectArray0);

[MASTER] 18:38:07.973 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.alibaba.fastjson.parser.DefaultJSONParser but in com.alibaba.fastjson.JSONPath$JSONPathParser.readSegement(JSONPath.java:845): org.evosuite.runtime.mock.java.lang.MockThrowable: not support jsonpath : w3K7EXBUtB/O|fGIrwJ
[MASTER] 18:38:07.973 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.extract(":rV`", "w3K7EXBUtB/O|fGIrwJ");

[MASTER] 18:38:09.671 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: not support jsonpath : jsonpath can not be null
[MASTER] 18:38:09.672 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/2");
JSONPath.containsValue((Object) jSONPath0, "jsonpath can not be null", (Object) jSONPath0);

[MASTER] 18:38:23.772 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<184> but was:<172>
[MASTER] 18:38:23.773 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SerializeConfig serializeConfig0 = new SerializeConfig(31, false);
DataTruncation dataTruncation0 = new DataTruncation(1820, false, false, 1820, 31);
SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.deny.internal", dataTruncation0);
Map<String, Object> map0 = JSONPath.paths((Object) sQLTransientConnectionException0, serializeConfig0);
assertEquals(184, map0.size());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'JSONPath_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s19/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSONWriter
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.parser.JSONScanner
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 13824
* Connecting to master process on port 13827
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 429
* Using seed 19
* Starting evolution
* Initial Number of Goals in DynaMOSA = 130 / 429
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.JSONScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 5652
* Using seed 19
* Starting evolution
* Initial Number of Goals in DynaMOSA = 470 / 5652
[MASTER] 18:39:05.282 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:39:05.282 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Search finished after 61s and 726 generations, 262319 statements, best individual has fitness: 30.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 97
* Number of covered goals: 97
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 76
* Number of covered goals: 71
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 148
* Number of covered goals: 146
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 76
* Number of covered goals: 71
* Generated 30 tests with total length 134
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 23%
* Compiling and checking tests
[MASTER] 18:40:04.244 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 64s and 177 generations, 103074 statements, best individual has fitness: 3719.0
[MASTER] 18:40:11.146 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 6 seconds more than allowed.
* Minimizing test suite
* Writing tests to file
* Writing JUnit test case 'JSONWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s19/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 18:40:18.309 [main] ERROR RuntimeVariable - Obtained invalid goal count: covered 437 out of 429
[MASTER] 18:40:18.310 [main] ERROR SearchStatistics - Not going to write down statistics data, as some data is invalid
[MASTER] 18:40:18.410 [main] ERROR TestGeneration - failed to write statistics data
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 35%
* Total number of goals: 1857
* Number of covered goals: 647
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 30%
* Total number of goals: 1519
* Number of covered goals: 462
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 57
* Number of covered goals: 57
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 53%
* Total number of goals: 567
* Number of covered goals: 303
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 94
* Number of covered goals: 51
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 48
* Number of covered goals: 48
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 94%
* Total number of goals: 48
* Number of covered goals: 45
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 27%
* Total number of goals: 1519
* Number of covered goals: 408
* Generated 205 tests with total length 526
* Resulting test suite's coverage: 56% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 18:42:24.906 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: StringIndexOutOfBoundsException
[MASTER] 18:42:24.907 [logback-1] WARN  JUnitAnalyzer - Failing test:
 char[] charArray0 = new char[0];
JSONScanner jSONScanner0 = new JSONScanner("", 973);
Class<Object> class0 = Object.class;
jSONScanner0.scanFieldStringArray(charArray0, class0);

[MASTER] 18:42:26.200 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: StringIndexOutOfBoundsException
[MASTER] 18:42:26.200 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig0 = new ParserConfig(false);
JSONScanner jSONScanner0 = new JSONScanner("\"@ty}e~\":u");
jSONScanner0.bp = (-1417);
jSONScanner0.scanTypeName(parserConfig0.symbolTable);

[MASTER] 18:42:27.318 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: StringIndexOutOfBoundsException
[MASTER] 18:42:27.318 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONScanner jSONScanner0 = new JSONScanner("&p`");
jSONScanner0.isBlankInput();
char[] charArray0 = new char[8];
charArray0[0] = '5';
charArray0[1] = '5';
charArray0[2] = '5';
JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
jSONScanner1.scanFieldInt(charArray0);
ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
jSONScanner1.scanFieldDouble(charArray0);
DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-2));
ParserConfig parserConfig1 = defaultJSONParser0.getConfig();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner1, parserConfig1);
SymbolTable symbolTable0 = defaultJSONParser1.symbolTable;
jSONScanner1.addSymbol((-540), 0, (-281), symbolTable0);

* Writing tests to file
* Writing JUnit test case 'JSONScanner_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s19/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSON
* Starting Client-0
* Connecting to master process on port 13823
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:42:36.194 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:42:36.195 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSON
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2080
* Using seed 19
* Starting evolution
* Initial Number of Goals in DynaMOSA = 747 / 2080
[MASTER] 18:42:36.779 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 18:42:36.780 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 18:42:36.783 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Enum<E> : Type points to itself
[MASTER] 18:42:36.784 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 18:42:36.784 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 18:42:37.614 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 18:42:41.790 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 18:42:47.462 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 18:43:30.043 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 64s and 78 generations, 41661 statements, best individual has fitness: 662.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 80%
* Total number of goals: 435
* Number of covered goals: 347
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 76%
* Total number of goals: 283
* Number of covered goals: 214
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 96%
* Total number of goals: 100
* Number of covered goals: 96
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 72%
* Total number of goals: 716
* Number of covered goals: 518
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 31%
* Total number of goals: 197
* Number of covered goals: 62
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 86%
* Total number of goals: 83
* Number of covered goals: 71
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 78%
* Total number of goals: 83
* Number of covered goals: 65
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 283
* Number of covered goals: 195
* Generated 202 tests with total length 872
* Resulting test suite's coverage: 70% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 27%
* Compiling and checking tests
[MASTER] 18:44:15.777 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_62_1589993055752/com/alibaba/fastjson/JSON_62_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_62_1589993055752/com/alibaba/fastjson/JSON_62_tmp__ESTest_scaffolding.java]]
[MASTER] 18:44:15.778 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:44:15.778 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:44:15.781 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.TreeMap cannot be converted to com.alibaba.fastjson.JSON: 28
[MASTER] 18:44:15.782 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_62_1589993055752/com/alibaba/fastjson/JSON_62_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed May 20 16:44:15 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.JSON;
11: import com.alibaba.fastjson.JSONObject;
12: import com.alibaba.fastjson.serializer.SerializeConfig;
13: import com.alibaba.fastjson.util.ParameterizedTypeImpl;
14: import java.util.TreeMap;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class JSON_62_tmp__ESTest extends JSON_62_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       SerializeConfig serializeConfig0 = new SerializeConfig();
25:       TreeMap<ParameterizedTypeImpl, String> treeMap0 = new TreeMap<ParameterizedTypeImpl, String>();
26:       TreeMap treeMap1 = (TreeMap)JSON.toJSON((Object) treeMap0, serializeConfig0);
27:       Class<JSON> class0 = JSON.class;
28:       JSONObject jSONObject0 = (JSONObject)((JSON) treeMap1).toJavaObject(class0);
29:       assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
30:   }
31: }
RegularFileObject[/tmp/EvoSuite_62_1589993055752/com/alibaba/fastjson/JSON_62_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed May 20 16:44:15 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSON_62_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSON"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSON_62_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.util.ASMUtils",
84:       "com.alibaba.fastjson.JSONPath",
85:       "com.alibaba.fastjson.parser.JSONScanner",
86:       "com.alibaba.fastjson.parser.JSONLexerBase",
87:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
88:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
89:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
90:       "com.alibaba.fastjson.serializer.JSONSerializable",
91:       "com.alibaba.fastjson.serializer.SerializeWriter",
92:       "com.alibaba.fastjson.serializer.ReferenceCodec",
93:       "com.alibaba.fastjson.JSONException",
94:       "com.alibaba.fastjson.asm.TypeCollector$1",
95:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
96:       "com.alibaba.fastjson.serializer.ToStringSerializer",
97:       "com.alibaba.fastjson.serializer.SerialContext",
98:       "com.alibaba.fastjson.JSONPath$FilterGroup",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.serializer.ObjectSerializer",
102:       "com.alibaba.fastjson.TypeReference",
103:       "com.alibaba.fastjson.JSONValidator$Type",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.serializer.MapSerializer",
106:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
107:       "com.alibaba.fastjson.serializer.DateCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
111:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.JSONPath$Filter",
114:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
115:       "com.alibaba.fastjson.util.FieldInfo",
116:       "com.alibaba.fastjson.JSONValidator$UTF16Validator",
117:       "com.alibaba.fastjson.annotation.JSONField",
118:       "com.alibaba.fastjson.serializer.PropertyFilter",
119:       "com.alibaba.fastjson.parser.SymbolTable",
120:       "com.alibaba.fastjson.serializer.NameFilter",
121:       "com.alibaba.fastjson.serializer.ListSerializer",
122:       "com.alibaba.fastjson.JSONArray",
123:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
124:       "com.alibaba.fastjson.JSONAware",
125:       "com.alibaba.fastjson.serializer.LongCodec",
126:       "com.alibaba.fastjson.serializer.EnumSerializer",
127:       "com.alibaba.fastjson.util.ASMClassLoader",
128:       "com.alibaba.fastjson.PropertyNamingStrategy",
129:       "com.alibaba.fastjson.parser.JSONToken",
130:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
131:       "com.alibaba.fastjson.serializer.AppendableSerializer",
132:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
133:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
134:       "com.alibaba.fastjson.serializer.ContextValueFilter",
135:       "com.alibaba.fastjson.util.ServiceLoader",
136:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
137:       "com.alibaba.fastjson.JSONPath$FilterSegment",
138:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
139:       "com.alibaba.fastjson.parser.DefaultJSONParser",
140:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
141:       "com.alibaba.fastjson.JSONValidator$ReaderValidator",
142:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
143:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
144:       "com.alibaba.fastjson.serializer.BeanContext",
145:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
146:       "com.alibaba.fastjson.util.IdentityHashMap",
147:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
148:       "com.alibaba.fastjson.JSON",
149:       "com.alibaba.fastjson.serializer.StringCodec",
150:       "com.alibaba.fastjson.serializer.SerializeFilterable",
151:       "com.alibaba.fastjson.JSONWriter",
152:       "com.alibaba.fastjson.asm.Opcodes",
153:       "com.alibaba.fastjson.JSONReader",
154:       "com.alibaba.fastjson.JSONStreamAware",
155:       "com.alibaba.fastjson.asm.MethodWriter",
156:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
157:       "com.alibaba.fastjson.serializer.SerializerFeature",
158:       "com.alibaba.fastjson.JSONPath$Operator",
159:       "com.alibaba.fastjson.serializer.CalendarCodec",
160:       "com.alibaba.fastjson.util.IOUtils",
161:       "com.alibaba.fastjson.util.TypeUtils",
162:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
163:       "com.alibaba.fastjson.asm.ClassReader",
164:       "com.alibaba.fastjson.JSONPath$Segment",
165:       "com.alibaba.fastjson.spi.Module",
166:       "com.alibaba.fastjson.JSONValidator",
167:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
168:       "com.alibaba.fastjson.serializer.MiscCodec",
169:       "com.alibaba.fastjson.util.IOUtils$1",
170:       "com.alibaba.fastjson.serializer.IntegerCodec",
171:       "com.alibaba.fastjson.serializer.SerializeFilter",
172:       "com.alibaba.fastjson.JSONPObject",
173:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
174:       "com.alibaba.fastjson.serializer.PascalNameFilter",
175:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
176:       "com.alibaba.fastjson.serializer.BeforeFilter",
177:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
178:       "com.alibaba.fastjson.serializer.ArraySerializer",
179:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
180:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
181:       "com.alibaba.fastjson.JSONObject",
182:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
183:       "com.alibaba.fastjson.serializer.CharacterCodec",
184:       "com.alibaba.fastjson.asm.TypeCollector",
185:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
186:       "com.alibaba.fastjson.asm.ByteVector",
187:       "com.alibaba.fastjson.parser.JSONLexer",
188:       "com.alibaba.fastjson.util.ASMClassLoader$1",
189:       "com.alibaba.fastjson.asm.Label",
190:       "com.alibaba.fastjson.JSONValidator$UTF8Validator",
191:       "com.alibaba.fastjson.asm.FieldWriter",
192:       "com.alibaba.fastjson.serializer.JSONSerializer",
193:       "com.alibaba.fastjson.util.JavaBeanInfo",
194:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
195:       "com.alibaba.fastjson.serializer.SerializeConfig",
196:       "com.alibaba.fastjson.serializer.AtomicCodec",
197:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
198:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
199:       "com.alibaba.fastjson.asm.Type",
200:       "com.alibaba.fastjson.serializer.FieldSerializer",
201:       "com.alibaba.fastjson.serializer.FloatCodec",
202:       "com.alibaba.fastjson.parser.JSONReaderScanner",
203:       "com.alibaba.fastjson.serializer.ValueFilter",
204:       "com.alibaba.fastjson.JSONPathException",
205:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
206:       "com.alibaba.fastjson.serializer.Labels",
207:       "com.alibaba.fastjson.serializer.CollectionCodec",
208:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
209:       "com.alibaba.fastjson.serializer.CharArrayCodec",
210:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
211:       "com.alibaba.fastjson.asm.MethodVisitor",
212:       "com.alibaba.fastjson.annotation.JSONCreator",
213:       "com.alibaba.fastjson.asm.MethodCollector",
214:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
215:       "com.alibaba.fastjson.annotation.JSONType",
216:       "com.alibaba.fastjson.serializer.LabelFilter",
217:       "com.alibaba.fastjson.util.UTF8Decoder",
218:       "com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator",
219:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
220:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
221:       "com.alibaba.fastjson.serializer.DoubleSerializer",
222:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
223:       "com.alibaba.fastjson.serializer.BooleanCodec",
224:       "com.alibaba.fastjson.parser.Feature",
225:       "com.alibaba.fastjson.parser.ParserConfig",
226:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
227:       "com.alibaba.fastjson.parser.ParseContext"
228:     );
229:   } 
230: 
231:   private static void resetClasses() {
232:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSON_62_tmp__ESTest_scaffolding.class.getClassLoader()); 
233: 
234:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
235:       "com.alibaba.fastjson.parser.Feature",
236:       "com.alibaba.fastjson.serializer.SerializerFeature",
237:       "com.alibaba.fastjson.util.IOUtils$1",
238:       "com.alibaba.fastjson.util.IOUtils",
239:       "com.alibaba.fastjson.JSON",
240:       "com.alibaba.fastjson.util.IdentityHashMap",
241:       "com.alibaba.fastjson.util.ASMUtils",
242:       "com.alibaba.fastjson.parser.SymbolTable",
243:       "com.alibaba.fastjson.util.TypeUtils",
244:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
245:       "com.alibaba.fastjson.util.ASMClassLoader$1",
246:       "com.alibaba.fastjson.util.ASMClassLoader",
247:       "com.alibaba.fastjson.serializer.MiscCodec",
248:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
249:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
250:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
251:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
252:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
253:       "com.alibaba.fastjson.serializer.DateCodec",
254:       "com.alibaba.fastjson.serializer.CalendarCodec",
255:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
256:       "com.alibaba.fastjson.serializer.CollectionCodec",
257:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
258:       "com.alibaba.fastjson.serializer.StringCodec",
259:       "com.alibaba.fastjson.serializer.CharacterCodec",
260:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
261:       "com.alibaba.fastjson.serializer.IntegerCodec",
262:       "com.alibaba.fastjson.serializer.LongCodec",
263:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
264:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
265:       "com.alibaba.fastjson.serializer.FloatCodec",
266:       "com.alibaba.fastjson.serializer.BooleanCodec",
267:       "com.alibaba.fastjson.serializer.CharArrayCodec",
268:       "com.alibaba.fastjson.serializer.ReferenceCodec",
269:       "com.alibaba.fastjson.serializer.AtomicCodec",
270:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
271:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
272:       "com.alibaba.fastjson.parser.ParserConfig",
273:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
274:       "com.alibaba.fastjson.serializer.DoubleSerializer",
275:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
276:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
277:       "com.alibaba.fastjson.serializer.AppendableSerializer",
278:       "com.alibaba.fastjson.serializer.ToStringSerializer",
279:       "com.alibaba.fastjson.serializer.SerializeConfig",
280:       "com.alibaba.fastjson.JSONArray",
281:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
282:       "com.alibaba.fastjson.serializer.SerializeWriter",
283:       "com.alibaba.fastjson.serializer.SerializeFilterable",
284:       "com.alibaba.fastjson.serializer.JSONSerializer",
285:       "com.alibaba.fastjson.util.ServiceLoader",
286:       "com.alibaba.fastjson.serializer.ListSerializer",
287:       "com.alibaba.fastjson.parser.JSONLexerBase",
288:       "com.alibaba.fastjson.parser.JSONReaderScanner",
289:       "com.alibaba.fastjson.parser.DefaultJSONParser",
290:       "com.alibaba.fastjson.JSONObject",
291:       "com.alibaba.fastjson.JSONException",
292:       "com.alibaba.fastjson.parser.JSONToken",
293:       "com.alibaba.fastjson.parser.JSONScanner",
294:       "com.alibaba.fastjson.serializer.MapSerializer",
295:       "com.alibaba.fastjson.serializer.SerialContext",
296:       "com.alibaba.fastjson.serializer.PascalNameFilter",
297:       "com.alibaba.fastjson.serializer.EnumSerializer",
298:       "com.alibaba.fastjson.PropertyNamingStrategy",
299:       "com.alibaba.fastjson.util.JavaBeanInfo",
300:       "com.alibaba.fastjson.util.UTF8Decoder",
301:       "com.alibaba.fastjson.TypeReference$1",
302:       "com.alibaba.fastjson.TypeReference",
303:       "com.alibaba.fastjson.util.FieldInfo",
304:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
305:       "com.alibaba.fastjson.asm.ClassWriter",
306:       "com.alibaba.fastjson.asm.ByteVector",
307:       "com.alibaba.fastjson.asm.Item",
308:       "com.alibaba.fastjson.asm.FieldWriter",
309:       "com.alibaba.fastjson.asm.MethodWriter",
310:       "com.alibaba.fastjson.asm.Type",
311:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
312:       "com.alibaba.fastjson.asm.Label",
313:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
314:       "com.alibaba.fastjson.serializer.FieldSerializer",
315:       "com.alibaba.fastjson.serializer.BeanContext",
316:       "com.alibaba.fastjson.JSONPObject",
317:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
318:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
319:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
320:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
321:       "com.alibaba.fastjson.asm.ClassReader",
322:       "com.alibaba.fastjson.asm.TypeCollector$1",
323:       "com.alibaba.fastjson.asm.TypeCollector",
324:       "com.alibaba.fastjson.asm.MethodCollector",
325:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
326:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
327:       "com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer",
328:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
329:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
330:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
331:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
332:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
333:       "com.alibaba.fastjson.parser.ParseContext",
334:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
335:       "com.alibaba.fastjson.serializer.ArraySerializer"
336:     );
337:   }
338: }

[MASTER] 18:44:15.782 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SerializeConfig serializeConfig0 = new SerializeConfig();
TreeMap<ParameterizedTypeImpl, String> treeMap0 = new TreeMap<ParameterizedTypeImpl, String>();
TreeMap treeMap1 = (TreeMap)JSON.toJSON((Object) treeMap0, serializeConfig0);
Class<JSON> class0 = JSON.class;
JSONObject jSONObject0 = (JSONObject)((JSON) treeMap1).toJavaObject(class0);
assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'JSON_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s19/fastjson/evosuite-tests
* Done!

* Computation finished
