/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 17:08:17 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.NameFilter;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.time.chrono.HijrahDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.UUID;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$NullSegement";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject((Object) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(2, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[6];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/stackTrace/0", batchUpdateException0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(96, "/stackTrace/0");
      Locale locale0 = Locale.PRC;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLInvalidAuthorizationSpecException0, "/stackTrace/0", (Object) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("LdV4");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      String[] stringArray0 = new String[1];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<NameFilter> list0 = javaBeanSerializer0.getNameFilters();
      Object object0 = jSONPath0.getArrayItem(list0, 10);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(879, 124, 6);
      JSONPath jSONPath0 = new JSONPath("60DHhHxXNM");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "60DHhHxXNM", "applyLabel");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -124
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(16, 0, 16);
      JSONPath jSONPath0 = new JSONPath("serializer");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("! !<D..");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("! !<D..");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, (-1859), (-2291));
      JSONPath jSONPath0 = JSONPath.compile("json-path can not be null or empty");
      Integer integer0 = new Integer(15);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, integer0, jSONPath_Segment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">zm!z_F|)'3Ky4l4W");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=(wK!S");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8{Xr@?Snf2X}r#E `");
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("! !<D..");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",9Nst");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-2192804397019347313L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("51o*]O:7");
      jSONPath_JSONPathParser0.readValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-4270347329889690746L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'3('qTu!PQ");
      jSONPath_JSONPathParser0.next();
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(3L, object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long[] longArray0 = new long[0];
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~{p");
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("~{p", longArray0, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      assertSame(jSONPath_IntInSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[0];
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("! !<D..");
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("! !<D..", longArray0, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      assertSame(jSONPath_Filter0, jSONPath_IntInSegement0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        JSONPath.set((Object) bigDecimal0, "H.\"q,", (Object) uUID0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. H.\"q,
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("A");
      Float float0 = new Float(0.7767394F);
      int int0 = jSONPath0.size((Object) float0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("z", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.keySet((Object) aSMDeserializerFactory0.classLoader);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Ml$BR0`B>");
      jSONPath_JSONPathParser0.readName();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("u5d4w`");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("'(WepEDnS");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)jSONPath_ArrayAccessSegment0.eval(jSONPath0, (Object) null, sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("?'KhPU]r9O", serializeConfig0, parserConfig0);
      MockDate mockDate0 = new MockDate(583871493773362608L);
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, mockDate0, mockDate0);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IlFw");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("f5loat overflow : ");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("f5loat", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("expect '[', but ");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('X');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'X, but '''
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("LEa");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1), 5, 90);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "LEa", (Object) null);
      assertEquals(1, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".000000", "*", 2066);
      Spliterator<Throwable> spliterator0 = sQLTransactionRollbackException0.spliterator();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2066);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) spliterator0, (Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path *
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("t<QI}", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      String[] stringArray0 = new String[1];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<NameFilter> list0 = javaBeanSerializer0.getNameFilters();
      int int0 = JSONPath.size((Object) list0, "fastjson.parser.deny.internal");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int int0 = JSONPath.size((Object) hashMap0, "nuGsS");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      int int0 = jSONPath0.size((Object) bigDecimal0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IlFw");
      JSONPath jSONPath0 = new JSONPath("IlFw");
      Class<Long> class0 = Long.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(jSONPath_JSONPathParser0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("between", "between");
      boolean boolean0 = jSONPath0.setPropertyValue(list0, "IlFw", 1203232727967308606L, sQLTransactionRollbackException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "=\\(wK!S";
      JSONPath jSONPath0 = JSONPath.compile("=(wK!S");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=(wK!S");
      long long0 = (-6495864775381194937L);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      boolean boolean0 = jSONPath0.setPropertyValue(jSONPath_JSONPathParser0, string0, long0, sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("si_ze");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("si_ze", (-4270347329889690746L), (-4270347329889690746L), false);
      boolean boolean0 = JSONPath.set((Object) jSONPath_IntBetweenSegement0, "si_ze", (Object) jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("size");
      boolean boolean0 = jSONPath0.set((Object) "size", (Object) "size");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = JSONPath.read("", "between");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(93, false);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/3");
      SQLDataException sQLDataException0 = new SQLDataException();
      Set<?> set0 = jSONPath0.keySet((Object) sQLDataException0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("stack", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.getPropertyValue(serializeConfig0, "fastjson.parser.autoTypeSupport", (-4270347329889690746L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{k");
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntBetweenSegement", serializeConfig0, parserConfig0);
      Class<BigInteger> class0 = BigInteger.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(L|q>'Kdllud'B1&");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stack-trace/7");
      Object object0 = jSONPath0.getArrayItem(jSONPath0, 0);
      assertSame(jSONPath0, object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stack-trace/4");
      BigDecimal bigDecimal0 = new BigDecimal(3430L);
      int int0 = jSONPath0.evalSize(bigDecimal0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("YC@X7z:be9[<dkps");
      int int0 = jSONPath0.evalSize("YC@X7z:be9[<dkps");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("jTd8");
      int int0 = jSONPath0.evalSize(jSONPath0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("C");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("address");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_JSONPathParser0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stack-trace/7");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Set<?> set0 = jSONPath0.evalKeySet(bigInteger0);
      assertFalse(set0.contains("/stack-trace/7"));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      ArrayList arrayList0 = (ArrayList)JSONPath.eval((Object) sQLSyntaxErrorException0, "*");
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("'");
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, "'", "'");
      Object object1 = jSONPath0.eval(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      boolean boolean0 = JSONPath.contains((Object) byte0, ":");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = JSONPath.compare("-", "-");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = JSONPath.compare("/stack-trace/7", "Z");
      assertEquals((-43), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("google");
      Class<JSONPath.MultiPropertySegment> class0 = JSONPath.MultiPropertySegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("H.3\"q,");
      JSONPath jSONPath0 = new JSONPath("H.3\"q,");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_NotNullSegement0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3\"q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("null");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(class0, "like", 9166532985682478010L, "like");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("X[");
      MockDate mockDate0 = new MockDate((-694L));
      // Undeclared exception!
      jSONPath0.setPropertyValue(jSONPath0, "like", 250, mockDate0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("size");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(propertyNamingStrategy0, "size", 1502845958873959152L, propertyNamingStrategy0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(33);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "=%<v<Ynbuu/eUr#aT", 33, jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("dVI4");
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "dVI4", (Object) jSONPath_MaxSegment0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "faOtjs/n", (Object) jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/parent/packages/sun.util.resources.it");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "/asmFactory/classLoader/parent/classLoader/parent/packages/sun.util.resources.it", "/asmFactory/classLoader/parent/classLoader/parent/packages/sun.util.resources.it", (Object) jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("f~[");
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath0, "f~[", (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : f~[
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      String[] stringArray0 = new String[1];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<NameFilter> list0 = javaBeanSerializer0.getNameFilters();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) javaBeanSerializer0, (Object) list0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder");
      BigDecimal bigDecimal0 = new BigDecimal((long) 2947);
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) "org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder", true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("=%<v<Ynbuu/eUr#aT");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("=%<v<Ynbuu/eUr#aT", "=%<v<Ynbuu/eUr#aT", 59);
      SQLDataException sQLDataException0 = new SQLDataException("=%<v<Ynbuu/eUr#aT", "eGdGQmg,|dB_55'3db|", (-6254807), sQLFeatureNotSupportedException0);
      Short short0 = new Short((short) (-734));
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLDataException0, (Object) short0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. =%<v<Ynbuu/eUr#aT
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("C");
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) "C");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("xxJNP .");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "xxJNP .", (Object) javaBeanDeserializer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("H.3\"q,");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.deny", "fastjson.parser.deny.internal");
      UUID uUID0 = MockUUID.fromString("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLRecoverableException0, (Object) uUID0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3\"q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "like";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[[MY&*$9;A>>}nOiA.";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("$?Py\"lM@nYuXY\"d", stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("H.3\"q,");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "H.3\"q,";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      jSONPath0.removePropertyValue(serializeConfig0, "fastjson.parser.deny.internal", true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("C");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigInteger0, "Vlp}CkhOGSLl", false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = new SerializeConfig(3);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.joda.time.", "Inc");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(sQLTransientConnectionException0, "", true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("I?Fw");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem((JSONPath) null, (Object) null, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Tl");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "Tl");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_Operator0, "security");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("IlFw");
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.time.chrono.HijrahDate
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(29L);
      JSONPath jSONPath0 = JSONPath.compile("F");
      // Undeclared exception!
      jSONPath0.remove((Object) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("=");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "=");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("3", "3");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("-$j&TWI=O}n2e}oI|", "oZ*@_S'O");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("org.joda.time.Duration", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fTstjsonJSONPath$NullSegement");
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) jSONPath0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) float0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float(2469.139F);
      JSONPath.keySet((Object) float0, "PW/~\"~Hqp@");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("3");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("1f6Jl(!WL@}yXVwlr3", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 1f6Jl(!WL@}yXVwlr3
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("H.3\"q,");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3\"q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("si+Rze");
      jSONPath0.isRef();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stack-trace/4");
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(propertyNamingStrategy0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" ");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(" ", " ", (-1580386065683472715L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NullSegement");
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("size");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(jSONPath_SizeSegment0, (-803));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.deny.internal", "/stackTrace/2", parserConfig0, 1930, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("'", "'", (ParserConfig) null, 10, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("(Q)O", "-", parserConfig0, (-324), featureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSONPath.extract(">-{Iy", ">-{Iy", parserConfig0, (-2154), (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2>-{Iy
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "stringDefaultValue");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("9u=tW(", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("_bLL8V=9/w<DF", "_bLL8V=9/w<DF");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("H.3\"q,");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com", parserConfig0, 108);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3\"q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("gI1hFK:8k{Nu2~Z4");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("arg", parserConfig0, 161);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2arg
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("size");
      Class<SerializeFilter> class0 = SerializeFilter.class;
      String[] stringArray0 = new String[7];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("value");
      Class<SerializeFilter> class0 = SerializeFilter.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) javaBeanSerializer0, "value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("C", "yyyy-MM-dd HH:mm:ss", 989, sQLTransientException0);
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) sQLTransactionRollbackException0, "cP[(H!R9+~p,/7t~*i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(H!R9+~p\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Object> class0 = Object.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) throwableDeserializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("H.3\"q,");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(62);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3\"q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(bigDecimal0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONPath jSONPath0 = new JSONPath("_V2S");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*", false);
      // Undeclared exception!
      jSONPath0.deepSet(bigInteger0, "*", 8409640769019589119L, jSONPath_PropertySegment0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("JSONValidator$UTF8InputStreamValidator", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(989, 2, 3018);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(mockGregorianCalendar0, "fastjson.parser.autoTypeAccept", 2, mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path JSONValidator$UTF8InputStreamValidator, segement fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONPath jSONPath0 = new JSONPath("rlike");
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("fastjson.parser.deny", "ooR9|g<(X8]8/lx}fo", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path rlike, segement ooR9|g<(X8]8/lx}fo
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("3");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("3", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Long> class0 = Long.TYPE;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Double> class1 = Double.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, map0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) class0, "not", (Object) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("'imy^;qaAEOG6JjD");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment(")2)\"J{_w>+FWHlrLNS", jSONPath_NullSegement0, true);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) "'imy^;qaAEOG6JjD", "-", (Object) jSONPath_ValueSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("cP[(H!R9+~p,/7t~*i", intArray0);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) batchUpdateException0, "cP[(H!R9+~p,/7t~*i", (Object) batchUpdateException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(H!R9+~p\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath jSONPath1 = new JSONPath("3");
      Byte byte0 = new Byte((byte) (-110));
      // Undeclared exception!
      try { 
        jSONPath1.containsValue((Object) byte0, (Object) jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("H.3\"q,");
      boolean boolean0 = jSONPath0.containsValue((Object) "H.3\"q,", (Object) "dSGqy&xtb /_\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("month", (SerializeConfig) null, parserConfig0);
      Byte byte0 = new Byte((byte) (-46));
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) byte0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) javaBeanSerializer0, "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) ",y", "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Ld,THX6tZ");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Ld,THX6tZ", "Ld,THX6tZ", sQLSyntaxErrorException0);
      JSONPath.contains((Object) sQLTransientConnectionException0, "Ld,THX6tZ");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("IlFw");
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("3");
      DataTruncation dataTruncation0 = new DataTruncation(101, false, false, 98, 1736);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) dataTruncation0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("51o*]O:7");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("time", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_JSONPathParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stack-trace/7");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(192, (-391), 47);
      jSONPath0.contains((Object) jSONPath_RangeSegment0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "3", "3", (Object[]) stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      JSONPath jSONPath0 = new JSONPath("H.3\"q,");
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath0, "H.3\"q,", (Object[]) jSONPath_OperatorArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path H.3\"q,
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(">uWnF$~>_%`j>JE ");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">uWnF$~>_%`j>JE ");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("./v_b-", sQLFeatureNotSupportedException0);
      jSONPath0.deepSet(">uWnF$~>_%`j>JE ", "%PHV;=)7\"d-:.\":Xj", (-1589194880214235129L), sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NullSegement");
      jSONPath0.deepSet((Object) null, "L(s~V8?/q)LMIgXAs02", (-1487L), (Object) null);
      assertEquals("com.alibaba.fastjson.JSONPath$NullSegement", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[17];
      JSONPath jSONPath0 = new JSONPath("=(wK!S");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("=(wK!S", true);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, stringArray0[1], jSONPath0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("f~[");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, jSONPath0, 49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(">uWnF$~>_%`j>JE ");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("./v_b-", hashMap0);
      Object object0 = new Object();
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLClientInfoException0, object0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[boolean");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.deny", "_asm_flag_", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("_asm_flag_", "[boolean", sQLTransientConnectionException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("childContext", false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, sQLClientInfoException0, sQLInvalidAuthorizationSpecException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/asmFactory/classLoader/parent/classLoader/parent/packages/sun.text.resources.ko");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(10, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "LEa";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LEa");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Ea";
      stringArray0[1] = "LEa";
      stringArray0[2] = "Ea";
      stringArray0[3] = "Ea";
      stringArray0[4] = "Ea";
      stringArray0[5] = "Ea";
      stringArray0[6] = "LEa";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      String string1 = "fastjson.parser.deny.internal";
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      jSONPath0.deepSet("fastjson.parser.deny.internal", "com.alibaba.fastjson.JSONPath$RefOpSegement", 2240L, "Ea");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JSONPath.containsValue((Object) sQLTransactionRollbackException0, "\\.", (Object) jSONPath_JSONPathParser0);
      String string2 = null;
      Throwable throwable0 = null;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("XfEm.V!zeAW<", (Throwable) null);
      JSONPath jSONPath1 = JSONPath.compile("P'ImNiEM9>@ix");
      int[] intArray0 = new int[6];
      intArray0[0] = 605;
      intArray0[1] = 1303;
      intArray0[2] = (-1372);
      intArray0[3] = 916;
      intArray0[4] = 46;
      intArray0[5] = (-1010);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath1.set((Object) jSONPath_JSONPathParser0, (Object) jSONPath_MultiIndexSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : P'ImNiEM9>@ix
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Et*J4+x");
      jSONPath0.init();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".4FE|OR&(k+%,PO");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4FE|OR&(k+%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" Dg+))_");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("p");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      boolean boolean0 = jSONPath0.set((Object) jSONPath_Operator0, (Object) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.ga.populationlimit", serializeConfig0, parserConfig0);
      Float float0 = new Float(0.75F);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) float0, (Object) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.AfterFilter");
      Double double0 = new Double(29.0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(36, 651, 69);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) double0, (Object) jSONPath_RangeSegment0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("UdV4");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLNonTransientConnectionException0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      boolean boolean0 = jSONPath0.remove((Object) parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) "com", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/parent/packages/sun.util.resources.it");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1076, (-2532), (-391));
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/StackTrace/5");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("B`MsbKx5,gSBBan+][D");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("can not cast to : ", parserConfig0, 92);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      char[] charArray0 = new char[7];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 961);
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("@");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2@
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.ZonedDateTime");
      Object object0 = jSONPath0.eval((Object) "java.time.ZonedDateTime");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("51o*]O:7");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 51o*]O:7
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$NullSegement", true);
      JSONPath jSONPath0 = JSONPath.compile("/stack-trace/4");
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, "com.alibaba.fastjson.JSONPath$NullSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[3];
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("8#u jQQlp0mSK65K", serializeConfig0, parserConfig0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.parser.JSONScanner", "", 3179, intArray0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(">uWnF$~>_%`j>JE ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%PHV;=)7\"d-:.\":Xj");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-162));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, jSONReaderScanner0.matchStat, "WriteTabAsSpecial");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3";
      Byte byte0 = Byte.valueOf((byte)106);
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(byte0, stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_Operator0, stringArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8hVfT{_|&{'pZ");
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_JSONPathParser0, (String[]) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/ch.qos.logback.core.joran");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[6 NhM{0=aJzN]qkt");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("[6 NhM{0=aJzN]qkt");
      Set<?> set0 = jSONPath0.evalKeySet(collection0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      int int0 = jSONPath0.size((Object) sQLNonTransientException0);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = JSONPath.size((Object) "l^", "*");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("faOtjs/n");
      SerializeConfig serializeConfig0 = new SerializeConfig(937, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("|~h", "fastjson.parser.deny.internal");
      Map<String, Object> map0 = JSONPath.paths((Object) sQLNonTransientConnectionException0, serializeConfig0);
      jSONPath0.removePropertyValue(map0, "\\-", true);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("g]9[:Y[/UI", serializeConfig0, parserConfig0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLInvalidAuthorizationSpecException0, serializeConfig0);
      boolean boolean0 = jSONPath0.removePropertyValue(map0, "[I", false);
      assertEquals(87, map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%)%p}");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, (Object) null);
      jSONPath0.deepScan(arrayList0, "YPLlGzS+:Ya[9", linkedList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("C");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "C";
      Object object0 = JSONPath.reserveToArray((Object) null, stringArray0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("LT", true);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, jSONPath_PropertySegment0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]e&wt`yy*Cg'-#&,1WX", "]e&wt`yy*Cg'-#&,1WX", sQLClientInfoException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("EQ", true);
      JSONPath jSONPath0 = new JSONPath("EQ");
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, "co9.alibaba.fastjson.JSONPath$NullSegement", sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path EQ, segement EQ
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("_bLL8V=9/w<DF");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("_bLL8V=9/w<DF", true);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, jSONPath_KeySetSegment0, jSONPath_KeySetSegment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("C");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "C";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray((Object) null, stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, jSONArray0);
      assertEquals(1, jSONArray0.size());
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IlFw");
      JSONPath jSONPath0 = JSONPath.compile("IlFw");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("IlFw", "qBCKa+MMbk", jSONPath_Operator0);
      Float float0 = new Float((float) (-1));
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, float0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Float float0 = new Float(0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Float float0 = new Float((double) 5);
      boolean boolean0 = JSONPath.eqNotNull(float0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Float float0 = new Float(1000000.0F);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Float float0 = new Float(0.0);
      Long long0 = new Long(29L);
      boolean boolean0 = JSONPath.eqNotNull(float0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Short short0 = new Short((short)45);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Double double0 = new Double(1);
      boolean boolean0 = JSONPath.eqNotNull(0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(989, 3089);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Byte byte0 = new Byte((byte)45);
      boolean boolean0 = JSONPath.eqNotNull(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("&d", "|z_XscmZ9", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("&d", "|z_XscmZ9", 59, (Throwable) null);
      boolean boolean0 = JSONPath.eq(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("size", (-4270347329889690746L), (-4270347329889690746L), false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      boolean boolean0 = JSONPath.eq(jSONPath_FilterSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Float float0 = new Float((-1967.988F));
      boolean boolean0 = JSONPath.eq((Object) null, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("like", "like");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("g]9[:Y[/UI", serializeConfig0, parserConfig0);
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      Float float0 = new Float(100000.0F);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(float0);
      jSONPath0.deepGetPropertyValues(list0, list0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("TODO");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      List<Object> list0 = javaBeanSerializer0.getFieldValues(mockGregorianCalendar0);
      jSONPath0.deepGetPropertyValues(map0, list0);
      assertEquals(28, list0.size());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IlFw");
      JSONPath jSONPath0 = JSONPath.compile("IlFw");
      Class<Long> class0 = Long.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(jSONPath_JSONPathParser0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLNonTransientConnectionException0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("C");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "C";
      Object object0 = JSONPath.reserveToArray((Object) null, stringArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONArray jSONArray0 = (JSONArray)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, object0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("size");
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) jSONPath0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      JSONPath jSONPath0 = new JSONPath("Z", serializeConfig0, parserConfig0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("H.\"q,");
      SQLDataException sQLDataException0 = new SQLDataException("dUu", "H.\"q,");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/stackTrace/6", "/stackTrace/10", 1806, sQLDataException0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLTransactionRollbackException0, "/stackTrace/6", (Object) jSONPath0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("IlFw");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("iW=poY;J+x|zdUb~", 999999);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, jSONReaderScanner0, 0, jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.parser.JSONReaderScanner
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("iW=poY;J+x|zdUb~", (-214748364));
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, (Object) null, 7, jSONReaderScanner0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[6 NhM{0=aJzN]qkt");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object object0 = jSONPath0.getArrayItem(linkedHashSet0, 2675);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("IlFw");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Object object0 = jSONPath0.getArrayItem(map0, (-1));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      String[] stringArray0 = new String[1];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<NameFilter> list0 = javaBeanSerializer0.getNameFilters();
      Object object0 = jSONPath0.getArrayItem(list0, (-7));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      Object object0 = JSONPath.eval((Object) jSONPath_Operator0, "/stackTrace/12");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("u-njAXBsuJ*<4kwOZ2", "u-njAXBsuJ*<4kwOZ2", false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-301), (-301), 5);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, object0, jSONPath_RangeSegment0, bigInteger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("LdV4");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(48, 63, 63);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("LdV4", jSONPath_RangeSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      SQLWarning sQLWarning0 = new SQLWarning("LdV4", "LdV4");
      SQLTransientException sQLTransientException0 = new SQLTransientException("LdV4", "LdV4");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLWarning0, sQLTransientException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      JSONPath jSONPath0 = new JSONPath("alibaba");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("LEa", "LEa", true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath jSONPath0 = new JSONPath("LEa");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_ValueSegment0, jSONPath_ValueSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("t");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(", method : ");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, batchUpdateException0);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(L|q>'Kdllud'B1&");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("(L|q>'Kdllud'B1&");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("unsupported set operation.", "J=G", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$StringOpSegement");
      Double double0 = new Double(11);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, double0, jSONPath_MinSegment0);
      assertSame(jSONPath_MinSegment0, object0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[6 NhM{0=aJzN]qkt");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("[6 NhM{0=aJzN]qkt", "[6 NhM{0=aJzN]qkt", false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[6 NhM{0=aJzN]qkt", "[6 NhM{0=aJzN]qkt", (-2107), batchUpdateException0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, sQLSyntaxErrorException0, batchUpdateException0, "[6 NhM{0=aJzN]qkt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 5, 90);
      JSONPath jSONPath0 = new JSONPath("b,9N4t");
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("oy(p?", "6K\"FLemQdn'nf)V", "ro", (String[]) null, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_MatchSegement0, true);
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, jSONPath_RangeSegment0, uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.ZonedDateTime");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("java.time.ZonedDateTime", 0L, (-81L), false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_IntBetweenSegement0, sQLRecoverableException0);
      assertNotNull(jSONArray0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(41, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.time.ZonedDateTime";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("HP=p^/", "Er(@;G<", "Er(@;G<", stringArray0, false);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("java.time.ZonedDateTime", true);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath_PropertySegment0, serializeConfig0, jSONArray0);
      assertFalse(boolean0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("pN`", (String) null, "wo}", stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("size");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(57);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("size", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_Operator0, "size", jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(",m+|]aj/K^7R?sxz3Z", 80, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath(",m+|]aj/K^7R?sxz3Z");
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_Operator0, "nin", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("L~!}7pV:dU|U}Au(", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.autoTypeSupport", (-1580386065683472715L), jSONPath_Operator0);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, "L~!}7pV:dU|U}Au(", parserConfig0, "L~!}7pV:dU|U}Au(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String[] stringArray0 = new String[17];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("=(wK!S", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("=(wK!S");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("=(wK!S", (Pattern) null, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_RegMatchSegement0, false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, "=(wK!S", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JSONPath jSONPath0 = JSONPath.compile("IlFw");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org", "org", sQLNonTransientConnectionException0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("", stringArray0, true);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, (Object) null, sQLNonTransientConnectionException0, sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("f~[");
      Long[] longArray0 = new Long[10];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("o", longArray0, true);
      Short short0 = new Short((short)14);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, "o", short0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3089L);
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.autoTypeAccept", longArray0, false);
      Float float0 = new Float((float) 3089L);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, (Object) null, jSONPath0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("I?F7");
      Long[] longArray0 = new Long[3];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(">-{Iy", longArray0, false);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, longArray0[2], ">-{Iy", longArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder");
      Long[] longArray0 = new Long[6];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("stackTrace", longArray0, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder", "(Ljava/lang/Object;Ljava/lang/Object;)");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, "org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder", longArray0[0], sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("", 941L, 1511L, false);
      JSONPath jSONPath0 = JSONPath.compile("flZ(v|");
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, pascalNameFilter0, "", pascalNameFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("=%<v<Ynbuu/eUr#aT", jSONPath_Operator0, false);
      JSONPath jSONPath0 = JSONPath.compile("=%<v<Ynbuu/eUr#aT");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("=%<v<Ynbuu/eUr#aT");
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException0, sQLFeatureNotSupportedException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("jA7OJ");
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, (Object) null, "jA7OJ", parserConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("-sc!`/!9");
      JSONPath jSONPath0 = new JSONPath("safeMode");
      UUID uUID0 = MockUUID.fromString("unsupported array put operation. ");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(62);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, uUID0, jSONPath_ArrayAccessSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2144), 2834, (-2144));
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, bigInteger0, "L?Fn=NSD}SS~buo2}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("[6 NhM{0=aJzN]qkt", serializeConfig0, parserConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1), (-5), 1329);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("writeFieldValueStringWithDoubleQuote", "fastjson.parser.autoTypeSupport", sQLIntegrityConstraintViolationException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONPath0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      ParserConfig parserConfig0 = ParserConfig.global;
      char[] charArray0 = new char[3];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-2794));
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$NullSegement");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(62);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, "java.time.ZonedDateTime", jSONPath_ArrayAccessSegment0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("rlike");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("H.\"q,", true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("LT");
      jSONPath_PropertySegment0.setValue(jSONPath0, "H.\"q,", sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[6 NhM{0=aJzN]qkt", "/stackTrace/8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 6, line 1, column 7[6 NhM{0=aJzN]qkt
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.compare(bigInteger0, "p@mIK");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.math.BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("f~[");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("BETWEEN");
      DataTruncation dataTruncation0 = new DataTruncation(92, false, true, 111, 92, sQLTransactionRollbackException0);
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, "WVS9;20=BCF$*;+4", dataTruncation0);
      assertNotNull(object0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      Integer integer0 = new Integer(111);
      Object object1 = jSONPath_MinSegment0.eval(jSONPath0, integer0, object0);
      assertEquals("cause", object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("r}Sd");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-4126));
      Locale locale0 = Locale.KOREAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, mockGregorianCalendar0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("f~[");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("c-7J1-7i#zWwgdM", true);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "c-7J1-7i#zWwgdM", (Object) null);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      Object object1 = jSONPath_MaxSegment0.eval(jSONPath0, (Object) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_bLL8V=9/w<DF");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("_bLL8V=9/w<DF", true);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath_PropertySegment0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" :");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("'Fi9}^kqn}s");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, false);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) class0, (Object) jSONPath_FilterGroup0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("f5loat overflow : ");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("5loat over", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".\"q,");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but ','
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("D:");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("IlFw");
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) jSONPath0, "f.L`E#pK/G&K:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : f.L`E#pK/G&K:
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">-{Iy");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("![!|D..");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '['
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\":\"");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(":\"", object0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[6 NhM{0=aJzN]qkt");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(5751393439502795295L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9'cz}X[%");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(19L);
      assertEquals(28.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+*ZDno");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stack-trace/7");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.JSONPathParser.isDigitFirst('N');
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("$U[=7K.M(D}pWjkkMs_");
      JSONPath jSONPath0 = new JSONPath("$U[=7K.M(D}pWjkkMs_");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "B!A'6_NnH2!hpo\"S[PQ", 14, sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("$U[=7K.M(D}pWjkkMs_");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.compile("in");
      JSONPath jSONPath1 = JSONPath.compile("k[^LqnrRPt%~MooQ");
      jSONPath1.init();
      BigInteger bigInteger0 = BigInteger.ONE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      BigInteger bigInteger1 = BigInteger.TEN;
      Integer integer0 = new Integer(14);
      Object object0 = JSONPath.eval((Object) integer0, "k[^LqnrRPt%~MooQ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("![!|D..");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[7PAoX/r;0.+,we?PQG");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#JF -WCqnziZE(]9hw");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("xy=ofgn{@`");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@>./Wjc>c");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but '>'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?)j(;To2\"2 e,wXz)}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but ')'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" (LdV4");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  (LdV4
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("}");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializeConfig serializeConfig1 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) serializeConfig0, serializeConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLWarning0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      Double double0 = new Double(3089);
      boolean boolean0 = jSONPath0.set((Object) double0, (Object) double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("size");
      JSONPath jSONPath1 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/javax.ejb");
      // Undeclared exception!
      try { 
        jSONPath1.set((Object) "size", (Object) jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      String[] stringArray0 = new String[1];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<NameFilter> list0 = javaBeanSerializer0.getNameFilters();
      boolean boolean0 = jSONPath0.set((Object) list0, (Object) javaBeanSerializer0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IlFw");
      JSONPath jSONPath0 = JSONPath.compile("IlFw");
      Class<Long> class0 = Long.TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(jSONPath_JSONPathParser0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("like", "fastjson.parser.deny.internal", 250);
      SQLDataException sQLDataException0 = new SQLDataException("$N=L<Y)?", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("size");
      boolean boolean0 = JSONPath.remove((Object) jSONPath0, "/stackTrace/10");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLClientInfoException0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONPath jSONPath0 = JSONPath.compile("G4ULm");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path G4ULm
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("C");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      JSONPath jSONPath0 = JSONPath.compile("(S_l:-");
      jSONPath0.arrayAdd((Object) null, (Object[]) jSONPath_SegmentArray0);
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "com.alibaba.fastjson.JSONPath$NullSegement", "4t}{!+I0%oTs/NQCWU:", (Object[]) stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("[6 NhM{0=aJzN]qkt", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) ";vR,`&(a^sw;b)_E", (Object[]) null);
      assertEquals("[6 NhM{0=aJzN]qkt", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("t<QI}", serializeConfig0, (ParserConfig) null);
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "@type", 3089);
      boolean boolean0 = JSONPath.containsValue((Object) uUID0, "/", (Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("size");
      Class<SerializeFilter> class0 = SerializeFilter.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) javaBeanSerializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("expect '[', but ");
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.containsValue((Object) "2^", (Object) "*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("f~[");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("c-7J1-7i#zWwgdM", true);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "c-7J1-7i#zWwgdM", (Object) null);
      JSONPath jSONPath1 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.ga.populationlimit");
      boolean boolean0 = jSONPath1.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.contains((Object) "internal");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("I?Fw");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1841455478), 1995, 1995);
      boolean boolean0 = JSONPath.contains((Object) mockGregorianCalendar0, "com.alibaba.fastjson.serializer.DateCodec");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract("}#C_[P5HW <", "com.alibaba.fastjson.parser.SymbolTable", parserConfig0, 1930, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("3", "/stackTrace/12");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // int
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Object object0 = JSONPath.extract("/**/", "X", parserConfig0, 1930, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Object object0 = JSONPath.extract("0000-00-00T00:00:00", "'");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("=%<v<Ynbuu/eUr#aT");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("size");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("n");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "2^");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      JSONPath jSONPath0 = new JSONPath("alibaba");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "alibaba", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(".", (-483));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement(".", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("O");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("O");
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, "O", pattern0, sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('l', char0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      boolean boolean0 = jSONPath0.set((Object) "/stackTrace/0", (Object) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath0, "-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("'");
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "'", "'");
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(130, 130, 130);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("IlFw", serializeConfig0, parserConfig0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "IlFw", serializeConfig0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("/stackTrace/12", "/stackTrace/12");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      String string0 = jSONPath0.getPath();
      assertEquals("com.alibaba.fastjson.JSONPath$RefOpSegement", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("time");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      JSONPath.arrayAdd((Object) simplePropertyPreFilter0, "4t}{!+I0%oTs/NQCWU:", (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) "H$9so0", "H$9so0");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("size");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertEquals(1, map0.size());
      
      boolean boolean0 = jSONPath0.remove((Object) "size");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/parent/packages/sun.util.resources.it");
      boolean boolean0 = JSONPath.set((Object) null, "/asmFactory/classLoader/parent/classLoader/parent/packages/sun.util.resources.it", (Object) jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("![!|D..", longArray0, true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntInSegement0, jSONPath_IntInSegement0, false);
      JSONPath jSONPath0 = new JSONPath("Q`tL+YCsA=F;8wT");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, jSONPath_Operator0, jSONPath_Operator0);
      assertFalse(boolean0);
  }
}
