/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 16:41:53 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PropertyPreFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.spi.Module;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.JapaneseDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("i3z2q2+ua_,q[m%", intArray0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath jSONPath0 = JSONPath.compile(":fKt-P\"q%4cd\"W");
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("1.2.68", (Long[]) null, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, false);
      Class<DataTruncation> class0 = DataTruncation.class;
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap1);
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply(jSONPath0, javaBeanSerializer0, batchUpdateException0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$IntObjInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer(0);
      boolean boolean0 = JSONPath.eqNotNull(989, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%@p}~j}*T\"N>?dn j2S");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1003, 38, 38);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "%@p}~j}*T\"N>?dn j2S");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLTimeoutException0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -24
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w{GT`cY>_dw&EOA");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2298, 0, 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.safeMode", "com.alibaba.fastjson.JSONPath$StringInSegement");
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("hF\"a)k=E.=@S37u;", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONReaderScanner0, sQLSyntaxErrorException0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~;y?V%");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 756, 756);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~;y?V%", ".");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLTransactionRollbackException0, "6kw3w$F(h\"E,5V1");
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" }");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  }
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. *
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/9");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{jH=aS%<piYZO--Hc");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!>Yg!=vRr,&,GtY");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("FeD4[i)_.(B&pZW");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-811277319855450459L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte)59);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("~;y?V%", byte0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~;y?V%");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_ValueSegment0);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%@p}~j}*T\"N>?dn j2S");
      long[] longArray0 = new long[4];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("A2YI]]R[DNxp)", longArray0, false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      assertSame(jSONPath_Filter0, jSONPath_IntInSegement0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$U");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("lZM");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("92)34$jBgL/^");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(92L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{jH=aS%<piYZO--Hc");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("jh.L2");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('h', char0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%@p}~j}*T\"N>?dn j2S");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("%@p}~j}*T\"N>?dn j2S");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("rmb+");
      jSONPath0.init();
      assertEquals("rmb+", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("K9QTI5i");
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONPath jSONPath0 = new JSONPath("K9QTI5i");
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("K9QTI5i", "K9QTI5i", sQLWarning0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(sQLFeatureNotSupportedException0);
      jSONPath0.deepGetPropertyValues(bigInteger0, list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=(% `P.  r5*");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, "X1", "X1");
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(":TEm9{sp>4%ma");
      JSONPath jSONPath0 = new JSONPath(":TEm9{sp>4%ma");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ur|{-\"u{u5";
      stringArray0[1] = ":TEm9{sp>4%ma";
      stringArray0[2] = "yJ\"N\"P^q+~s7rv,y?F4";
      stringArray0[3] = "yJ\"N\"P^q+~s7rv,y?F4";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("yJ\"N\"P^q+~s7rv,y?F4", ":TEm9{sp>4%ma", "ur|{-\"u{u5", stringArray0, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("yJ\"N\"P^q+~s7rv,y?F4", "com.alibaba.fastjson.JSONPath");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, sQLTransactionRollbackException0, ":TEm9{sp>4%ma", jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("qK");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but '*'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RLIKE");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("K9`mFPH");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('h');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("keybFet");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('p');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'p, but 'k'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3743));
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, uUID0, uUID0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSONPath.size((Object) parserConfig0, "A2YI]]R[DNxp)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : A2YI]]R[DNxp)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-9e+_ePA?t");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-793L));
      assertEquals((-802.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      SerializeConfig serializeConfig0 = new SerializeConfig(19);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("6J", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      int int0 = JSONPath.size((Object) jSONPath_WildCardSegment0, "^");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(4648, 88, (-697));
      int int0 = jSONPath0.size((Object) jSONPath_RangeSegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"");
      int int0 = jSONPath0.size((Object) "\"");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("evalKeySet error : ");
      MockDate mockDate0 = new MockDate((-1793095148), (-1793095148), 165, 93, 3177, 93);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("evalKeySet error : ", mockDate0, false);
      JSONPath jSONPath0 = new JSONPath("error");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      boolean boolean0 = jSONPath0.setPropertyValue(jSONPath_FilterSegment0, "error", (-3851359326990528739L), jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wqK";
      stringArray0[1] = "wqK";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("wqK", stringArray0);
      boolean boolean0 = jSONPath0.set((Object) "wqK", (Object) jSONObject0.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("&p~0Ge^<");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "prg)");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_MultiPropertySegment0, "0");
      assertFalse(set0.contains("0"));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("prg)");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Collection<Object> collection0 = jSONPath0.getPropertyValues(jSONPath_SizeSegment0);
      assertFalse(collection0.contains("prg)"));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{jH=aS%<piYZO--Hc");
      Object object0 = jSONPath0.getPropertyValue("org.javamoney.moneta.Money", "org.javamoney.moneta.Money", 8963398325558730460L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("HmB }_I-");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fu=m'ygM%q5~NHr", serializeConfig0, parserConfig0);
      Class<Byte> class0 = Byte.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NOT_RLIKE");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(595, 595, 34);
      Byte byte0 = new Byte((byte) (-108));
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, serializeConfig0, byte0);
      Object object1 = jSONPath0.getArrayItem(object0, 49);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("zIu66c");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (Throwable) null);
      Object object0 = jSONPath0.getArrayItem(sQLIntegrityConstraintViolationException0, 0);
      assertSame(object0, sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(":TEm9{sp>4%ma");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yJ\"N\"P^q+~s7rv,y?F4");
      int int0 = jSONPath0.evalSize(jSONPath_JSONPathParser0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9\"be[5F:n*I<tmcg");
      int int0 = jSONPath0.evalSize(" }");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j-nI");
      int int0 = jSONPath0.evalSize(jSONPath0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("#`81;7;u{y:R");
      Set<?> set0 = jSONPath0.evalKeySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("", stringArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("step must greater than zero : ");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_FilterGroup0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("keybFet");
      Set<?> set0 = jSONPath0.evalKeySet("keybFet");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("rmb+");
      Object object0 = JSONPath.eval((Object) jSONPath0, ",");
      assertSame(jSONPath0, object0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace");
      SQLTransientException sQLTransientException0 = new SQLTransientException("jpt9&Fm~g", "");
      Object object0 = jSONPath0.eval((Object) sQLTransientException0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("#`81;7;u{y:R");
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath0, "org.javamoney.moneta.Money", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeSupport", "fastjson.parser.deny", 1721);
      boolean boolean0 = JSONPath.contains((Object) sQLSyntaxErrorException0, "%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = JSONPath.compare("(Ljava/lang/Class;", "@!2~OyV2z'[(vd3");
      assertEquals((-24), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("+");
      // Undeclared exception!
      try { 
        JSONPath.size((Object) jSONPath0, "+");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath jSONPath0 = JSONPath.compile("[long");
      jSONPath0.size((Object) jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath jSONPath0 = new JSONPath("G3~E}[4");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_Operator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : G3~E}[4
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1017);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("alibaba", serializeConfig0, parserConfig0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(classLoader0, "like", 1017, sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      JSONPath jSONPath0 = new JSONPath("D0Gmpu[YR@QVzXQ[sX");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("TbK'", "TbK'");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("TbK'", "V{uu&;E[b.O4,*!H@WN", sQLNonTransientException0);
      // Undeclared exception!
      jSONPath0.setPropertyValue(locale0, "D0Gmpu[YR@QVzXQ[sX", 1254L, sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("g", serializeConfig0, parserConfig0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "g", (-434));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("8*w7n^U%@[r8", "/E;&l+SiM~SHR", (-434), sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.safeMode", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(serializerFeature0, (String) null, 1060L, sQLDataException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "^", 165L, sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("?eZ?ap+<(bb=es");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 24, ">*Z?8Q{]~z@42p/W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Integer integer0 = new Integer(2941);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) classLoader0, "ZyS", (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      JSONPath.set((Object) bigInteger0, "nin", (Object) "SupportAutoType");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.set((Object) null, (String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.asm.TypeCollector", parserConfig0, 837);
      // Undeclared exception!
      jSONPath0.set((Object) defaultJSONParser0, (Object) "com.alibaba.fasIjson.JSONPath$Operator", false);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("IWd3A^LQWv1CAM");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "/stackTrace/4", (Object) "com.alibaba.fasIjson.JSONPath$Operator", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$FilterGroup");
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) "com.alibaba.fastjson.JSONPath$FilterGroup");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      DataTruncation dataTruncation0 = new DataTruncation(2, true, true, 756, 756);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) dataTruncation0, (Object) ",  end ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("qWW8CY|r", (Throwable) null);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLInvalidAuthorizationSpecException0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%@p}~j}*\"N>?dn j2S");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "%@p}~j}*\"N>?dn j2S", (Object) "%@p}~j}*\"N>?dn j2S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. %@p}~j}*\"N>?dn j2S
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "AllowUnQuotedFieldNames";
      stringArray0[1] = "AllowUnQuotedFieldNames";
      stringArray0[2] = "AllowUnQuotedFieldNames";
      stringArray0[3] = "AllowUnQuotedFieldNames";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("AllowUnQuotedFieldNames", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "java/util/List";
      stringArray0[3] = "[ong";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_Operator0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "iLA[1";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_SizeSegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_JSONPathParser0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLClientInfoException0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLClientInfoException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("S?jSA3@)HBp");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_WildCardSegment0, "/cause/stackTrace/9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j-nI");
      BigDecimal bigDecimal0 = new BigDecimal((double) 993);
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigDecimal0, "SupportAutoType", false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%@p}~j}*T\"N.?dn j2S");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "%@p}~j}*T\"N.?dn j2S", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5$rOIY<pFy[LP*s|~");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-1479));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) japaneseDate0, "JSONPath$KeySetSegment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.time.chrono.JapaneseDate
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) locale0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      jSONPath0.remove((Object) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("_", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_SizeSegment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("j-nI", "j-nI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2j-nI
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("supportautotype");
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) sQLTimeoutException0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Date> class0 = Date.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(383);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("r=mb+");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : r=mb+
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("&dl<R#:A||");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. &dl<R#:A||
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      serializeConfig0.register((Module) null);
      JSONPath jSONPath0 = new JSONPath("VE(;Bng~+elw}EmD9", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_WildCardSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JSONPath jSONPath0 = JSONPath.compile("REG_MATCH");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(class0, (String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("step must greater than zero : ");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue("", "`]q &P]O`0aAwo'rPV", (-580L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=(% `P.  r5*");
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class short
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("QgH");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("c");
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(65536, true);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/4", serializeConfig0, (ParserConfig) null);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("_asm_ser_", "_asm_ser_", parserConfig0, (-868), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSONPath.extract("FC", "FC", (ParserConfig) null, (-2385), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSONPath.extract("_C= 8.;`5ycDogE3(=", "_C= 8.;`5ycDogE3(=", parserConfig0, 87, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : _C= 8.;`5ycDogE3(=
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-v\"8B", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("9\"be[5F:n*I<tmcg");
      Class<Field> class0 = Field.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLException sQLException0 = new SQLException("(`2uB", "(`2uB", 13);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("@!2~OyV2z'[(vd3", sQLException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("rmb", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "", "GE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) fileSystemHandling0, "\"Jog04^B|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"Jog04^B|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", (SerializeConfig) null, parserConfig0);
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) calendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_WildCardSegment0, ":v", 2638L, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("HmB }_I-");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "", 1837L, jSONPath_WildCardSegment0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("d+hSQuv,T?G5l-");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(62, 3075, 3075, 3857, 8);
      Double double0 = new Double(62);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(mockGregorianCalendar0, "d+hSQuv,T?G5l-", 62, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path d+hSQuv,T?G5l-, segement d+hSQuv,T?G5l-
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(javaBeanSerializer0, "fastjson.parser.deny", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("java/lang/Object", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(propertyNamingStrategy0, vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-493), true, false, (-795), (-795));
      Byte byte0 = new Byte((byte)42);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) byte0, "%@p}~j}*T\"N>?dn j2S", (Object) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. %@p}~j}*T\"N>?dn j2S
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) bigInteger0, "d]`#8a7lJU!iSk]D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : d]`#8a7lJU!iSk]D
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "!YPrg8a2|:rR");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath jSONPath0 = new JSONPath("[/WqlS/");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) hashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("H", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%@p}~j}*T\"N>?dn j2S");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("%@p}~j}*T\"N>?dn j2S", true);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_PropertySegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. %@p}~j}*T\"N>?dn j2S
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        JSONPath.compare(uUID0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath jSONPath0 = new JSONPath("[long");
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_Operator0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5");
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath0, "5", objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("JBX^Zuz./(b", true);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("zN>MGKv7");
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath jSONPath0 = JSONPath.compile("NOT_RLIKE");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("/beanInfo/fields/6/field/genericInfo/genericType", clientInfoStatus0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      jSONPath0.deepSet(hashMap0, "NOT_RLIKE", 2695L, jSONPath_WildCardSegment0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("<");
      jSONPath0.deepSet((Object) null, "prg)", 4, "");
      assertEquals("<", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("dd0(_q$ndnL0");
      DataTruncation dataTruncation0 = new DataTruncation((-2271), false, false, 16, 16);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(dataTruncation0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%@p}~j}*T\"N>?dn j2S");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, bigInteger0, (-1479));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("^", false);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      jSONPath_PropertySegment0.setValue(jSONPath0, javaBeanSerializer0, "_ik");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("-", false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      stringArray0[2] = "-";
      stringArray0[3] = "{.sPb,K=dyf1cZ";
      stringArray0[4] = "-";
      stringArray0[5] = "LE";
      stringArray0[6] = "-";
      stringArray0[7] = "-";
      stringArray0[8] = "-";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval((JSONPath) null, jSONPath_MultiPropertySegment0, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/beanInfo/fields/6/field/genericInfo");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(5, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" ^1#iI\u0003HwS");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("g");
      Double double0 = new Double(993);
      boolean boolean0 = jSONPath0.remove((Object) double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.set((Object) null, "%@p}~j}*T\"N>?dn j2S", (Object) jSONPath0);
      JSONPath.compile("1Ih0CE&8D6=LPpHr");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1Ih0CE&8D6=LPpHr");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(0, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("pYr!er");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONPath1.set((Object) jSONPath_Operator0, (Object) jSONPath0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      Byte byte0 = new Byte((byte) (-37));
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) byte0, (Object) "%", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(57, 101, (-1983155242));
      int[] intArray0 = new int[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockThrowable mockThrowable0 = new MockThrowable("#pQ\"@bo$x~R!oqF", sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, mockThrowable0);
      boolean boolean0 = jSONPath0.set((Object) batchUpdateException0, (Object) jSONPath_RangeSegment0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("prg)");
      boolean boolean0 = jSONPath0.set((Object) "prg)", (Object) "prg)", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(16, false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("(r}", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w{GT`cY>_dw&EOA");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONReaderScanner0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MatchSegement");
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) mockGregorianCalendar0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$MatchSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      Object[] objectArray0 = new Object[2];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals("^", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_3");
      jSONPath0.arrayAdd((Object) "/%KDMsd!}mkby;PT;1", (Object[]) null);
      assertEquals("_3", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("*");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) jSONPath_WildCardSegment0, objectArray0);
      assertEquals("*", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      boolean boolean0 = jSONPath0.containsValue((Object) "h1Ss^t--6", (Object) "M]phtsEPK79Uc h:c9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport");
      JSONPath jSONPath0 = new JSONPath("/stackTrace/11");
      JSONScanner jSONScanner0 = new JSONScanner("C~0{/", 32);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(sQLNonTransientConnectionException0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Type", parserConfig0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Object object0 = jSONPath0.extract(defaultJSONParser1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.asm.TypeCollector", parserConfig0, (-1031));
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2com.alibaba.fastjson.asm.TypeCollector
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%@p}~j}*T\"N>?dn j2S");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("%@p}~j}*T\"N>?dn j2S", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. %@p}~j}*T\"N>?dn j2S
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(147);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("typeName", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.eval((Object) serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("clZp;~");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, "6kw3w$F(h\"E,5V1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/1");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(62);
      Long long0 = new Long(9166532985682478006L);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, "/stackTrace/1", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSONPath.extract("fD|`B", "security", parserConfig0, 9, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      Class<Object> class0 = Object.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) javaBeanDeserializer0, (Object) "#N~kqG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_7_Object
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("+", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("HmB }_I-");
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject(jSONPath0, stringArray0);
      assertSame(object0, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(uUID0, stringArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("J@Dgq,Q5D0tu", (String[]) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) "*", "*");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("k)FT+EgX?'p", true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1), (-398), (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, jSONPath_RangeSegment0, bigInteger0);
      Object object1 = jSONPath_RangeSegment0.eval(jSONPath0, object0, object0);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("stackTrace");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("<uV31$`{.FSpq,s", "fastjson.parser.autoTypeSupport", (-1669));
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.sql.SQLSyntaxErrorException#stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("6jelGy$5!");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("=]mF()$jI", (Map<String, ClientInfoStatus>) null);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLClientInfoException0, "BETWEEN", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Integer integer0 = Integer.getInteger("{jH=aS%<piYZO--Hc");
      JSONPath jSONPath0 = new JSONPath("{jH=aS%<piYZO--Hc");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("org.javamoney.moneta.Money", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("{jH=aS%<piYZO--Hc", hashMap0);
      jSONPath0.deepSet(sQLClientInfoException0, "$", (-3851359326990528739L), integer0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("rmb+");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("rmb+", hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      BiFunction<Object, Object, ClientInfoStatus> biFunction0 = (BiFunction<Object, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("rmb+", clientInfoStatus0, biFunction0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLClientInfoException0, "$", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path rmb+, segement $
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{jH=aS%<piYZO--Hc");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan(hashMap0, "/cause/stackTrace/1", linkedList0);
      assertFalse(linkedList0.contains("{jH=aS%<piYZO--Hc"));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5$rOIY<pFy[LP*s|~");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLIntegrityConstraintViolationException0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLInvalidAuthorizationSpecException0, "", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 5$rOIY<pFy[LP*s|~, segement 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = jSONPath0.remove((Object) mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-18));
      boolean boolean0 = JSONPath.eqNotNull(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Double double0 = new Double(2769.72);
      BigDecimal bigDecimal0 = new BigDecimal(4647432019745535567L);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Float float0 = new Float(1110.955F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(float0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Float float0 = new Float((float) 13);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Float float0 = new Float(3.0);
      Long long0 = new Long(2380202963256720577L);
      boolean boolean0 = JSONPath.eqNotNull(float0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Long long0 = new Long(2993L);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(961, 3089);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Float float0 = new Float(1.0F);
      boolean boolean0 = JSONPath.eqNotNull(0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, 5614464919154503228L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Short short0 = new Short((short)123);
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      boolean boolean0 = JSONPath.eq(float0, ":v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = JSONPath.eq(61, 993);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("FeD4[i)_.(B&pZW", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("lbx", "x]SdWydp4o( ", (-3740));
      boolean boolean0 = JSONPath.eq((Object) null, sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      boolean boolean0 = JSONPath.eq(sQLTimeoutException0, sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w{GT`cY>_dw&EOA");
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, jSONReaderScanner0, jSONReaderScanner0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // sun.util.calendar.ZoneInfo
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("%@p}~j}*T\"N>?dn j2S", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues("%@p}~j}*T\"N>?dn j2S");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("^");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath_WildCardSegment0, (-3251), jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NOT_RLIKE");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "NOT_RLIKE";
      stringArray0[1] = "NOT_RLIKE";
      stringArray0[2] = "NOT_RLIKE";
      stringArray0[3] = "NOT_RLIKE";
      stringArray0[4] = "NOT_RLIKE";
      stringArray0[5] = "NOT_RLIKE";
      stringArray0[6] = "NOT_RLIKE";
      Object object0 = JSONPath.reserveToArray(jSONPath0, stringArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("createCollection", "NOT_RLIKE");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("XM?(=|TJOwj", "XM?(=|TJOwj", (byte) (-1), sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, object0, (-140), sQLFeatureNotSupportedException0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wqK";
      stringArray0[1] = "wqK";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("wqK", stringArray0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1), (-1), 756);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "wqK", jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";tWeKQ<1Sk", "[ZW 8!zW>i>4");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      JSONPath.set((Object) sQLTransientConnectionException0, "/stackTrace/13", (Object) throwableDeserializer0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(r}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("unsupported set operation.", "v}4C-QE$Y5)`H|", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "fu=m'ygM%q5~NHr", jSONPath0, jSONPath_Operator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nI");
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("SupportAutoType", jSONPath_MultiIndexSegment0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "n*", jSONPath_SizeSegment0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("%@p}~j}*T\"N>?dn j2S", (String) null, "%@p}~j}*T\"N>?dn j2S", stringArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_MatchSegement0, false);
      JSONPath jSONPath0 = new JSONPath("%@p}~j}*T\"N>?dn j2S");
      Long long0 = new Long(8963398325558730460L);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, long0, (Object) null, jSONPath_MultiPropertySegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~;y?V%");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("~;y?V%", "*", intArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("Qg,6/yP1Uzl^N`Q:w", jSONPath_WildCardSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_RefOpSegement0, batchUpdateException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(r}");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("unsupported set operation.", "v}4C-QE$Y5)`H|", jSONPath_Operator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(r}", "C`:NHb:Yc", (-1640));
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, parserConfig0, sQLSyntaxErrorException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~;y?V%");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("fastjson.parser.deny.internal", jSONPath_MaxSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_WildCardSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j-nI");
      int[] intArray0 = new int[17];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("SupportAutoType", jSONPath_MultiIndexSegment0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*", false);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, batchUpdateException0, jSONPath_PropertySegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1793095148), (-1793095148), 165, 93, 3177, 93);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("evalKeySet error : ", mockDate0, false);
      JSONPath jSONPath0 = new JSONPath("error");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      Long long0 = new Long(1060L);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, mockDate0, long0);
      assertEquals(1060L, object0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int[] intArray0 = new int[3];
      JSONPath jSONPath0 = new JSONPath("javamoney");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("'s*,s*'", "com.alibaba.fastjson.JSONPath$DoubleOpSegement", false);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "Uo`b{VC1X]", intArray0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("javamoney", batchUpdateException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, batchUpdateException0, sQLTransientConnectionException0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JSONPath jSONPath0 = JSONPath.compile("time");
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny", sQLDataException0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("N?J", sQLInvalidAuthorizationSpecException0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLTransientConnectionException0, sQLTransientConnectionException0);
      assertEquals(1, jSONArray0.size());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = new JSONPath("k)FT+EgX?'p");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("X1", jSONPath_SizeSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_SizeSegment0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=(% `P.  r5*");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("X1", jSONPath_SizeSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, jSONPath_Operator0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("z>\"I1gEio^");
      JSONPath jSONPath0 = JSONPath.compile("z>\"I1gEio^");
      Pattern pattern0 = Pattern.compile("z>\"I1gEio^");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("z>\"I1gEio^", pattern0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, "z>\"I1gEio^", jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("", "jsonpath can not be null", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("v}4C-QE$Y5)`H|", serializeConfig0, parserConfig0);
      Integer integer0 = new Integer(105);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, serializeConfig0, integer0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("value not found in path ", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("bG,c0~", "rlike", jSONPath_Operator0);
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, mockGregorianCalendar0, "value not found in path ", jSONPath_MultiIndexSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("parser");
      JSONPath jSONPath0 = new JSONPath("parser");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("parser", "parser", false);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, (Object) null, jSONPath_NotNullSegement0, jSONPath_NotNullSegement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept", (String) null, (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("%@p}~j}*T\"N>?dn j2S", (String) null, "%@p}~j}*T\"N>?dn j2S", stringArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_MatchSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("%@p}~j}*T\"N>?dn j2S");
      Long long0 = new Long(8963398325558730460L);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, long0, (Object) null, jSONPath_MultiPropertySegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("k)FT+EgX?'p", 1406.44, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(10);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_FilterSegment0, calendar0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      LinkedList<PropertyPreFilter> linkedList0 = new LinkedList<PropertyPreFilter>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("Z(0r", 10.0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, "Z(0r", (Object) null, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.autoTypeSupport", 86400026L, jSONPath_Operator0);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath0, parserConfig0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("", stringArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("step must greater than zero : ");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "", jSONPath_FilterGroup0, "step must greater than zero : ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("rmb+");
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("J!", stringArray0, true);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "J!", jSONPath_MultiPropertySegment0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      int[] intArray0 = new int[3];
      Long[] longArray0 = new Long[8];
      Long long0 = new Long((-3851359326990528739L));
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("(C=(3I?E3HZ", longArray0, true);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, (Object) null);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONArray0, long0, longArray0[1]);
      assertEquals(3, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      Long[] longArray0 = new Long[6];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("Mjul", longArray0, false);
      DataTruncation dataTruncation0 = new DataTruncation((-2129), false, true, (-2129), (-1550));
      Integer integer0 = new Integer(65);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, dataTruncation0, dataTruncation0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(182);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("typeName", serializeConfig0, parserConfig0);
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(36);
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = longArray0[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("czq'hSFPxRw.j", longArray0, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Np", "fastjson.parser.deny", (-2129));
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, (Object) null, sQLIntegrityConstraintViolationException0, "typeName");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("9\"be[5F:n*I<tmcg", 584L, 584L, false);
      JSONPath jSONPath0 = new JSONPath("9\"be[5F:n*I<tmcg");
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, "9\"be[5F:n*I<tmcg", "9\"be[5F:n*I<tmcg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      long[] longArray0 = new long[4];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("*", longArray0, false);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, bigDecimal0, "/stackTrace", bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("(", "(");
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("!\\-", (long[]) null, false);
      JSONPath jSONPath0 = new JSONPath("bG,c0~");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException();
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, "/stackTrace/2", sQLDataException0);
      assertNotNull(arrayList0);
      assertEquals(7, arrayList0.size());
      
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, propertyNamingStrategy0, sQLFeatureNotSupportedException0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("parser");
      JSONPath jSONPath0 = new JSONPath("parser");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("d]`#8a7lJU!iSk]D", "evalSize error : ", true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, (Object) null, jSONPath_NotNullSegement0, jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("RO", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("G");
      JSONPath jSONPath0 = new JSONPath("S?jSA3@)HBp");
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath0, (Object) null, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("parser");
      JSONPath jSONPath0 = new JSONPath("parser");
      SQLDataException sQLDataException0 = new SQLDataException("parser", "d]`#8a7lJU!iSk]D");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLFeatureNotSupportedException0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath0, sQLFeatureNotSupportedException0, sQLClientInfoException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(65, (-1240), (-1240));
      JSONPath jSONPath0 = JSONPath.compile(";.1|#D3qQmkTdEw#K");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, ";.1|#D3qQmkTdEw#K", ";.1|#D3qQmkTdEw#K");
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("+");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3089, 989, 756);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "+", "6kw3w$F(h\"E,5V1");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("5", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("parser");
      Integer integer0 = new Integer(61);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, "parser", integer0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("parser");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "sJ^mTqE5Bx*WOfg,";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "sJ^mTqE5Bx*WOfg,", jSONPath0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("0.P9>aMSLnkE+,@-", true);
      JSONPath jSONPath0 = new JSONPath("[long");
      jSONPath_PropertySegment0.setValue(jSONPath0, "[long", jSONPath_Operator0);
      assertEquals("[long", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[9/.U99<{-Q", "org");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Float float0 = new Float(2769.72);
      Integer integer0 = new Integer(70);
      int int0 = JSONPath.compare(float0, integer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      JSONScanner jSONScanner0 = new JSONScanner(":v", (-1718897919));
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, jSONScanner0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.parser.JSONScanner cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      SQLException sQLException0 = new SQLException("(`2uB", "(`2uB", 13);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("@!2~OyV2z'[(vd3", sQLException0);
      Double double0 = new Double(13);
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, sQLRecoverableException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLRecoverableException cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Float float0 = new Float(10000.0F);
      int int0 = JSONPath.compare(float0, float0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      SQLException sQLException0 = new SQLException("prg)", "prg)", 2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 2, sQLException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("prg)", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLRecoverableException0, "prg)");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLRecoverableException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(569, 2298, 569);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&mS", (String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 3178, sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.JSONPath$KeySetSegment", (String) null);
      JSONPath jSONPath0 = new JSONPath(">%V");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("json-path can not be null or empty", ">%V", (-1057), hashMap0, sQLFeatureNotSupportedException0);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, sQLClientInfoException0, "json-path can not be null or empty");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      Object object1 = jSONPath_MinSegment0.eval((JSONPath) null, sQLTransientConnectionException0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("^");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("^", true);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath_PropertySegment0, jSONPath_PropertySegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("8k", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(34, 34, 935);
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "8k", calendar0);
      Object object1 = jSONPath_MaxSegment0.eval(jSONPath0, serializeConfig0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(935, 935, 183);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, parserConfig0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, object0, "8k");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":false");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"false\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("'B%g\"7VCa:Y@wE[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'B%g\"7VCa\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("array level > 512");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("rr", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RLIKE");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=(% `P.  r5*");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nin
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'lx~u;w{kgGLf&");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but '&'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("qr$T\"K&.w`7oC.");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but '.'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("a1 $Yi5C8");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(717L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"s");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-Ft0p$sh'`@M|$>X}05");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("FeD4[i)_.(B&pZW");
      jSONPath_JSONPathParser0.readName();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("[3'V ]A1O&N.loQ", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : [3'V ]A1O&N.loQ
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rEzMe>l.{:YZ,fKM-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@!2~OyV2z'[(vd3");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but '!'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\u0002UXNS~I-@,x9ht[S/");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0002UXNS~I-@\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?eZ?ap+<(bb=es");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but 'e'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("s>7R693b");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("uB9g\n");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("between", ".Q(mnxG");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2between
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(0, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, true, false);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Map<String, Object> map0 = JSONPath.paths((Object) javaBeanDeserializer0, serializeConfig0);
      //  // Unstable assertion: assertEquals(322, map0.size());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NOT_RLIKE", hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NOT_RLIKE";
      stringArray0[1] = "NOT_RLIKE";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLClientInfoException0, stringArray0);
      Map<String, Object> map0 = JSONPath.paths((Object) jSONArray0);
      assertEquals(2, jSONArray0.size());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NOT_RLIKE", hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ClientInfoStatus clientInfoStatus1 = hashMap0.put("i>)jO", clientInfoStatus0);
      hashMap0.put((String) null, clientInfoStatus1);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      //  // Unstable assertion: assertEquals(91, map0.size());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2133), (-2133), 43);
      Map<String, Object> map0 = JSONPath.paths((Object) mockGregorianCalendar0, serializeConfig0);
      Map<String, Object> map1 = JSONPath.paths((Object) map0, serializeConfig0);
      assertEquals(2, map1.size());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("'8p");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("'8p", (-2034713352));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "&CX^Z_PrXj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLIntegrityConstraintViolationException0, "*", (Object) serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_WildCardSegment0, serializeConfig0);
      boolean boolean0 = JSONPath.set((Object) map0, "/cause/stackrace/11", (Object) "/cause/stackrace/11");
      assertEquals(2, map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "*", "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(":v", false);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, serializeConfig0.propertyNamingStrategy, jSONPath_PropertySegment0);
      // Undeclared exception!
      try { 
        jSONPath0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("autoTypeSupport", "_3", 149);
      boolean boolean0 = JSONPath.remove((Object) sQLDataException0, "fastjson.parser.deny.internal");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) "\"", "D8.po4MX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("j-");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "j-SnI", "/cause/stackTrace/0", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path /cause/stackTrace/0
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      JSONPath.arrayAdd((Object) null, "US", objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) locale0, ",", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.util.Locale
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("rmb+");
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      Set<?> set0 = jSONPath0.keySet((Object) ",");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("?h\"6Q!", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("j-SnI");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("parser");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      int int0 = jSONPath0.size((Object) sQLSyntaxErrorException0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      LinkedList<PropertyPreFilter> linkedList0 = new LinkedList<PropertyPreFilter>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      boolean boolean0 = jSONPath0.containsValue((Object) hashMap0, (Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("parser");
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("0", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.contains((Object) parserConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("expect '");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "5", "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract(":<{:z4", "com.alibaba.fastjson.serializer.MiscCodec");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // :
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Object object0 = JSONPath.extract("", "/stackTrace/4");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("t&8");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(65536, true);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/4", serializeConfig0, (ParserConfig) null);
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("u{ca7'");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, (Object) null, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(",aM#G{,K$d$7K-y}zaS", (-1420.0016), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_FilterSegment0, "\"");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("0");
      Byte byte0 = new Byte((byte)47);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-665), true, true, 2146, 42);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) dataTruncation0, "/stackTrace/6", (Object) "/stackTrace/6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Lu%B)3W&d>E|WC/S");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-216), (-216), (-216));
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%@p}~j}*T\"N>?dn j2S");
      DataTruncation dataTruncation0 = new DataTruncation((-488), true, false, (-795), (-795));
      boolean boolean0 = JSONPath.containsValue((Object) dataTruncation0, "getLastResolveTask", (Object) jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "vw%gHY?E+^s");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("between");
      String string0 = jSONPath0.getPath();
      assertEquals("between", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("HmB }_I-");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "HmB }_I-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) null, "qK");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("rmb+");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "scanFieldUUID");
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("fastjson.parser.safeMode", jSONPath_WildCardSegment0, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, bigInteger0, serializeConfig0, "G3");
      assertFalse(boolean0);
  }
}
