/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 22:25:36 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.StandardProtocolFamily;
import java.net.URI;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.sql.PseudoColumnUsage;
import java.sql.RowIdLifetime;
import java.text.Normalizer;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.stream.Stream;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.swing.SortOrder;
import javax.tools.JavaFileObject;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue(")00");
      assertEquals(")00", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9jiWP(H01");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9jiWP(H01\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("di", 0.0F);
      JSONObject jSONObject2 = jSONObject1.increment("di");
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~0");
      JSONObject.indent(mockPrintWriter0, 0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection<?>) linkedList0);
      try { 
        jSONObject1.getBigInteger("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("7F yi;9>Vx:  %smC", (Collection<?>) linkedList0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7F yi;9>Vx:  %smC";
      stringArray0[1] = "7F yi;9>Vx:  %smC";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(34);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(pipedWriter0, stringArray0);
      Writer writer0 = jSONObject0.write((Writer) pipedWriter0);
      assertSame(pipedWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("197.59530704165");
      assertEquals((byte) (-59), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("7F yi;9>Vx:  %smC", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("7F yi;9>Vx:  %smC");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Character, KeyRep.Type> hashMap0 = new HashMap<Character, KeyRep.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.query("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("s", 1310);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      String string0 = jSONObject0.optString("Y\"VZaGCUf@#Iy</G3uq", "");
      assertEquals("", string0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(101);
      jSONObject0.put("more", (double) 101);
      String string0 = jSONObject0.optString("more");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<StandardLocation, ObjectOutputStream> hashMap0 = new HashMap<StandardLocation, ObjectOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONPointer jSONPointer0 = new JSONPointer("/dMb}vG:AaKM|OE'`Ed");
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject("gt!C:JIfY2HT8#}{ZHT", stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Object object0 = jSONObject0.optQuery("/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.optQuery("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONObject0.optNumber("has", (Number) bigInteger0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "lead5nsignjdShort";
      BigDecimal bigDecimal0 = new BigDecimal((-391));
      Number number0 = jSONObject0.optNumber(string0, (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(2510);
      Number number0 = jSONObject0.optNumber("!", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-1157L));
      assertEquals((-1157L), long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("9^ yj8~+uCWS,<*", 2989.5403);
      long long0 = jSONObject1.optLong("9^ yj8~+uCWS,<*");
      assertEquals(2989L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      int int0 = jSONObject0.optInt("7F yi;9>Vx:  %smC", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isintern", (-1728.3912F));
      int int0 = jSONObject0.optInt("isintern");
      assertEquals((-1728), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Object, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Object, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("94 y", (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Normalizer.Form, Character.UnicodeScript> hashMap0 = new HashMap<Normalizer.Form, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("] could not be converted to BigInteger.", (-2245.95F));
      assertEquals((-2245.95F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      double double0 = jSONObject0.optDouble("di", 4167.73481708);
      assertEquals(4167.73481708, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("9^ yj8~+uCWS,<*", 2989.5403);
      double double0 = jSONObject1.optDouble("9^ yj8~+uCWS,<*");
      assertEquals(2989.5403, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "/<");
      jSONObject0.optBoolean("toU", true);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("!E>42`4J8kq+", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      jSONObject0.put("7F yi;9>Vx:  %smC", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("7F yi;9>Vx:  %smC");
      int int0 = jSONObject1.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer integer0 = new Integer(55);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.put("Missing value", false);
      boolean boolean0 = jSONObject0.isNull("Missing value");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("#ul$aU'W{8jt.F?`");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation(";?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      BigDecimal bigDecimal0 = new BigDecimal(2110.015511748372);
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.WHERE_CLAUSE_ONLY;
      hashMap0.put(bigDecimal0, pseudoColumnUsage0);
      jSONObject0.put("7F yi;9>Vx:  %smC", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("7F yi;9>Vx:  %smC");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.TRAILING;
      linkedList0.add(groupLayout_Alignment0);
      JSONObject jSONObject1 = jSONObject0.put("7F yi;9>Vx:  %smC", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("7F yi;9>Vx:  %smC");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)1961);
      JSONObject jSONObject1 = jSONObject0.putOnce("", short0);
      int int0 = jSONObject1.getInt("");
      assertEquals(1961, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, jSONObject0, 123, 123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Double> hashMap0 = new HashMap<JavaFileObject.Kind, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, (int) (short)1, (int) (short)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("e>m^7EI,81", (-1136.1063027906373));
      JSONArray jSONArray0 = jSONObject1.names();
      jSONArray0.put(567, 0.0F);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("getnames", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Double> hashMap0 = new HashMap<JavaFileObject.Kind, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0, stringArray0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("2438.6939034.", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "00");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<PushbackInputStream, Character.UnicodeScript> hashMap0 = new HashMap<PushbackInputStream, Character.UnicodeScript>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 4L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("94 y8~+uCWeS,<*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("94 y8~+uCWeS,<*");
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      try { 
        jSONObject0.put("94 y8~+uCWeS,<*", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<DayOfWeek, BufferedReader> hashMap0 = new HashMap<DayOfWeek, BufferedReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<LayoutStyle.ComponentPlacement, BigDecimal> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, BigDecimal>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 18);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "getDeclaringClass");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("2438.69390340");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-67), (byte)57);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<DayOfWeek, BufferedReader> hashMap0 = new HashMap<DayOfWeek, BufferedReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("@rTBly/O", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name @rTBly/O, locale fr_FR
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Short, BigInteger> hashMap0 = new HashMap<Short, BigInteger>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(hashMap0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000024", true);
      JSONObject jSONObject2 = jSONObject1.put("] not found.", 1852.55);
      StringWriter stringWriter0 = new StringWriter(1615);
      Writer writer0 = jSONObject2.write((Writer) stringWriter0, 1615, 18);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "2584.9919");
      StringWriter stringWriter0 = new StringWriter(1615);
      try { 
        jSONObject0.write((Writer) stringWriter0, 1615, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isintern", 0.0F);
      JSONObject jSONObject2 = jSONObject1.increment("Null pointer");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      jSONObject2.write((Writer) bufferedWriter0, (-1728), (-1728));
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("9^ yj8~+uCWS,<*");
      HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("9^ yj8~+uCWS,<*", 2989.5403);
      Writer writer0 = jSONObject1.write((Writer) mockFileWriter0, 1993, 1993);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<SortOrder, DayOfWeek> hashMap0 = new HashMap<SortOrder, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0, (-1964), (-1964));
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = JSONObject.wrap(stringWriter0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`Un_x sq\u0001SXRMlnT");
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(jSONTokener0);
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Character character0 = new Character('8');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('8', object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Object object0 = JSONObject.wrap(double0);
      assertEquals((-1.0), object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer(20);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(20, object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Byte byte0 = new Byte((byte)9);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)9, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.wrap("java.io.StringWriter@0000000001");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Short short0 = new Short((short) (-646));
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short) (-646), object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.OTHER;
      Object object0 = JSONObject.wrap(javaFileObject_Kind0);
      assertSame(javaFileObject_Kind0, object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(2388.407F);
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject.testValidity("000");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double((-1.776321819636983));
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("in");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      Writer writer0 = JSONObject.quote("\">yPR6aD", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("0l/g[jeyFA", (Writer) stringWriter0);
      assertEquals("\"0l/g[jeyFA\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote((String) null, (Writer) stringWriter0);
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("Expected '", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, "\"");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "2584.9919");
      JSONObject jSONObject1 = jSONObject0.put("Missing value", (Object) null);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "java.io.StringWriter@0000000006");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("7F yi;9>Vx:  %smC", (Collection<?>) linkedList0);
      Integer integer0 = new Integer(0);
      Number number0 = jSONObject0.optNumber("7F yi;9>Vx:  %smC", (Number) integer0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("java.io.StringWriter@0000000002", stringArray0);
      jSONObject0.increment("java.io.StringWriter@0000000002");
      Number number0 = jSONObject0.getNumber("java.io.StringWriter@0000000002");
      Number number1 = jSONObject0.optNumber("java.io.StringWriter@0000000002", number0);
      assertEquals(1, number1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("org.json.JSONPointer", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("9^ yj8~+uCWS,<*", 2989.5403);
      long long0 = jSONObject1.optLong("9^ yj8~+uCWS,<*", (-609L));
      assertEquals(2989L, long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<SequenceInputStream, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<SequenceInputStream, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("toLowerCse", 1458.51022);
      int int0 = jSONObject1.optInt("toLowerCse", (-3706));
      assertEquals(1458, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject1 = jSONObject0.putOpt("ct)", fileSystemHandling0);
      float float0 = jSONObject1.optFloat("ct)", (float) 1);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("\"");
      float float0 = jSONObject0.optFloat("\"", 297.64032F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] is not a valid number.", "] is not a valid number.");
      double double0 = jSONObject0.optDouble("] is not a valid number.", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("8Fkw", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("9^ yj8~+uCWS,<*", 2989.5403);
      boolean boolean0 = jSONObject1.optBoolean("9^ yj8~+uCWS,<*", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("7F yi;9>Vx:  %smC", (Collection<?>) linkedList0);
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFD;
      Normalizer.Form normalizer_Form1 = jSONObject0.optEnum(class0, "7F yi;9>Vx:  %smC", normalizer_Form0);
      assertEquals(Normalizer.Form.NFD, normalizer_Form1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Desktop.Action> class0 = Desktop.Action.class;
      Desktop.Action desktop_Action0 = Desktop.Action.BROWSE;
      Desktop.Action desktop_Action1 = jSONObject0.optEnum(class0, "q?iSz$cXX5-TV&", desktop_Action0);
      assertSame(desktop_Action0, desktop_Action1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("\"+}Bo`g");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Long long0 = new Long((-1L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((long) (-312));
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<RoundingMode, PseudoColumnUsage> hashMap0 = new HashMap<RoundingMode, PseudoColumnUsage>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("di", (Collection<?>) linkedList0);
      try { 
        jSONObject0.getBoolean("di");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.putOpt("ct)", fileSystemHandling0);
      Object object0 = jSONObject0.get("ct)");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1");
      try { 
        jSONObject0.get(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, "");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject("gt!C:JIfY2HT8#}{ZHT", stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.remove("\">yPR6aD");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("94 y8~+uCWeS,<*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("94 y8~+uCWeS,<*");
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Unable to write JSXNObject valud fur key: ", "Unable to write JSXNObject valud fur key: ");
      Map<String, Object> map0 = jSONObject1.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "i<LoHm3{^ y.|51");
      jSONObject0.toString(34);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "/<");
      try { 
        jSONObject0.toString(8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected a ',' or ']'", set0);
      jSONObject1.write((Writer) charArrayWriter0, (-685), (-685));
      assertEquals(65, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Double> hashMap0 = new HashMap<JavaFileObject.Kind, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("ct)", hashMap0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      JSONObject jSONObject0 = new JSONObject(locale0);
      String string0 = jSONObject0.toString();
      assertEquals(14, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFileWriter mockFileWriter0 = new MockFileWriter("[");
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, jSONObject0, 16, 16);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("i>=Ha8oj4C");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, locale_FilteringMode0, 1365, 1365);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, object0, 70, 75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 1896, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(object0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(bigInteger0, object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float(2388.407F);
      Object object0 = JSONObject.wrap(float0);
      assertEquals(2388.407F, object0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Long long0 = new Long(0L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Character> hashMap0 = new HashMap<TrayIcon.MessageType, Character>();
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.INFO;
      Character character0 = Character.valueOf('M');
      hashMap0.put(trayIcon_MessageType0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)JSONObject.wrap(jSONArray0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("toLowerCse", (-1134.55));
      JSONArray jSONArray0 = jSONObject1.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<StandardProtocolFamily> linkedList0 = new LinkedList<StandardProtocolFamily>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("4");
      assertEquals(4, object0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("000");
      assertEquals("000", object0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("i\"Q]baea{:;^24[L");
      assertEquals("i\"Q]baea{:;^24[L", object0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-3256.342432");
      assertEquals((-3256.342432), number0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("+llrM]N\"=$}1=W$5iw");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [+llrM]N\"=$}1=W$5iw] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("18~1*\"f(#gE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("94 y8~+uCWeS,<*");
      assertEquals("94 y8~+uCWeS,<*", object0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("000");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.ROOT;
      JSONObject jSONObject1 = new JSONObject(locale0);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertFalse(boolean0);
      assertEquals(14, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      boolean boolean0 = jSONObject0.similar(pipedReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Double> hashMap0 = new HashMap<JavaFileObject.Kind, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getNumber(",dYn9k*Wq</dl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = JSONObject.quote("\"");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double double0 = new Double((-474.918162623441));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt(":ls$[yN>E8AJ", (Object) null);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<SequenceInputStream, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<SequenceInputStream, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1953);
      jSONObject0.putOnce("8xM6Bvj`>", bufferedInputStream0);
      try { 
        jSONObject0.putOnce("8xM6Bvj`>", byteArrayInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"8xM6Bvj`>\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("94 y8~+uCWeS,<*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("94 y8~+uCWeS,<*");
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      JSONObject jSONObject1 = new JSONObject(mockFileInputStream0);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertEquals(2, jSONObject1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      JSONObject jSONObject0 = new JSONObject(uRI0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Stream<String> stream0 = linkedList0.stream();
      JSONObject jSONObject0 = new JSONObject(stream0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("di", (Collection<?>) linkedList0);
      String string0 = jSONObject0.optString("di", ";OUDj.,a#kg");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Double> hashMap0 = new HashMap<JavaFileObject.Kind, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("ct)", hashMap0);
      jSONObject1.optNumber("ct)");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a valid number.", 1L);
      Number number0 = jSONObject1.optNumber("] is not a valid number.");
      assertEquals(1L, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("getDeclaringClass", "getDeclaringClass");
      Double double0 = new Double(1.0);
      jSONObject0.optNumber("getDeclaringClass", (Number) double0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("77 yi;9>Vx:  %smC", (-543.3987F));
      long long0 = jSONObject1.optLong("77 yi;9>Vx:  %smC");
      assertEquals((-543L), long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Unable to write JSXNObject valud fur key: ", "Unable to write JSXNObject valud fur key: ");
      long long0 = jSONObject1.optLong("Unable to write JSXNObject valud fur key: ", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "`Un_x sq\u0001SXRMlnT");
      jSONObject0.optJSONObject("`Un_x sq\u0001SXRMlnT");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("7F yi;9>Vx:  %smC", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("7F yi;9>Vx:  %smC");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "@rTBly/O");
      jSONObject0.optJSONArray("@rTBly/O");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("", (Collection<?>) linkedList0);
      int int0 = jSONObject0.optInt("", (-1994091956));
      assertEquals((-1994091956), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("isintern");
      int int0 = jSONObject1.optInt("isintern");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Unable to write JSXNObject valud fur key: ", "Unable to write JSXNObject valud fur key: ");
      float float0 = jSONObject1.optFloat("Unable to write JSXNObject valud fur key: ");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("2438.69390340", (-1.0F));
      float float0 = jSONObject1.optFloat("2438.69390340");
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("di", (Collection<?>) linkedList0);
      double double0 = jSONObject0.optDouble("di", (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("di", 0.0F);
      double double0 = jSONObject0.optDouble("di", 4167.73481708);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      JSONObject jSONObject0 = new JSONObject(mockPrintWriter0);
      JSONObject jSONObject1 = jSONObject0.put("2", 0.0F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject1.optBigInteger("2", bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("toLowerCse", (-1134.55));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("toLowerCse", bigInteger0);
      assertEquals((byte) (-110), bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Double> hashMap0 = new HashMap<JavaFileObject.Kind, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("toArray", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("isintern");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("isintern", bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("' and instead saw '");
      BigDecimal bigDecimal0 = jSONObject1.optBigDecimal("' and instead saw '", (BigDecimal) null);
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("2438.69390340", (-1.0F));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("2438.69390340", bigDecimal0);
      assertEquals((byte) (-1), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("toLowerCse", (-1134.55));
      BigDecimal bigDecimal0 = new BigDecimal((-1134.55));
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("toLowerCse", bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((short) (-1134), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("8$#:O", bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "/<");
      jSONObject0.append("/<", "/<");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optBigDecimal("/<", bigDecimal0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("isintern");
      Class<RoundingMode> class0 = RoundingMode.class;
      try { 
        jSONObject0.getEnum(class0, "isintern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an enum of type java.io.StringWriter@0000000010.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Long long0 = new Long(37L);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Character> hashMap0 = new HashMap<TrayIcon.MessageType, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("2438.69390340", "2438.69390340");
      try { 
        jSONObject0.increment("2438.69390340");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000009].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("9^ yj8~+uCWS,<*", 2989.5403);
      JSONObject jSONObject2 = jSONObject1.increment("9^ yj8~+uCWS,<*");
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("isintern");
      JSONObject jSONObject2 = jSONObject1.increment("isintern");
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("2438.69390340", (-1.0F));
      JSONObject jSONObject1 = jSONObject0.increment("2438.69390340");
      int int0 = jSONObject1.getInt("2438.69390340");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("isintern");
      boolean boolean0 = jSONObject1.has("isintern");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("2438.69390340", "2438.69390340");
      try { 
        jSONObject1.getString("2438.69390340");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject0 = new JSONObject(locale_Category0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.append("Unable to write JSXNObject valud fur key: ", "Unable to write JSXNObject valud fur key: ");
      JSONObject.getNames(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      HashMap<SequenceInputStream, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<SequenceInputStream, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("toLowerCse", 1458.5102);
      long long0 = jSONObject1.getLong("toLowerCse");
      assertEquals(1458L, long0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("2438.69390340", "2438.69390340");
      try { 
        jSONObject1.getLong("2438.69390340");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("toLowerCse", (-1134.55));
      try { 
        jSONObject1.getJSONObject("toLowerCse");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("7F yi;9>Vx:  %smC", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("7F yi;9>Vx:  %smC");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("dfOaH", 1.0F);
      try { 
        jSONObject1.getJSONArray("dfOaH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("2438.69390340", (-1.0F));
      int int0 = jSONObject1.getInt("2438.69390340");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.put("c#~+s", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getInt("c#~+s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Double> hashMap0 = new HashMap<JavaFileObject.Kind, Double>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("ct)", hashMap0);
      try { 
        jSONObject0.getNumber("ct)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("isintern");
      float float0 = jSONObject1.getFloat("isintern");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "/<");
      JSONObject jSONObject1 = jSONObject0.append("/<", "/<");
      try { 
        jSONObject1.getFloat("/<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Normalizer.Form, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("9^ yj8~+uCWS,<*", 2989.5403);
      assertFalse(jSONObject0.isEmpty());
      
      double double0 = jSONObject1.getDouble("9^ yj8~+uCWS,<*");
      assertEquals(2989.5403, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000001", (Object) boolean0);
      try { 
        jSONObject1.getDouble("java.io.StringWriter@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("isintern");
      try { 
        jSONObject1.getBigDecimal("isintern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Unable to write JSXNObject valud fur key: ", "Unable to write JSXNObject valud fur key: ");
      boolean boolean0 = jSONObject0.optBoolean("Unable to write JSXNObject valud fur key: ");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("94 y8~+uCWeS,<*");
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2928.0384);
      assertEquals("2928.0384", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject0.putOpt("istoUpperCase", pipedOutputStream0);
      try { 
        jSONObject0.append("istoUpperCase", pipedOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[istoUpperCase] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Unable to write JSXNObject valud fur key: ", "Unable to write JSXNObject valud fur key: ");
      jSONObject1.append("Unable to write JSXNObject valud fur key: ", "Unable to write JSXNObject valud fur key: ");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("isintern");
      PipedWriter pipedWriter0 = new PipedWriter();
      jSONObject0.accumulate("isintern", pipedWriter0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Unable to write JSXNObject valud fur key: ", "Unable to write JSXNObject valud fur key: ");
      jSONObject1.accumulate("Unable to write JSXNObject valud fur key: ", jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "x@kMXu7");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("x@kMXu7", stringArray0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      JSONObject jSONObject1 = jSONObject0.put("x@kMXu7", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject1.optBigInteger("x@kMXu7", bigInteger0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      hashMap0.put(multipleGradientPaint_CycleMethod0, (TrayIcon.MessageType) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      HashMap<Integer, ClientInfoStatus> hashMap0 = new HashMap<Integer, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put((Integer) null, clientInfoStatus0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getDeclaringClass", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      HashMap<Locale.LanguageRange, Desktop.Action> hashMap0 = new HashMap<Locale.LanguageRange, Desktop.Action>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("A JSONArray text must start with '['");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("U#T:;8");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-7274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -7274
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("] is not a JSONObject.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|&__>2+Vmv_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull("java.io.StringWriter@0000000004");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("a.;wl|xgN zQX ]b[&");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "4");
      int int0 = jSONObject0.optInt("4");
      assertEquals(0, int0);
      assertEquals(2, jSONObject0.length());
  }
}
