/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 21:22:45 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("NotWriteRootClassName");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("NotWriteRootClassName", 8389032537095247355L, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      Class<Double> class0 = Double.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(29, 29);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath_NullSegement0, javaBeanSerializer0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(989, 111);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/stackTrace/10");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/stackTrace/10", "/stackTrace/10", sQLTransientConnectionException0);
      boolean boolean0 = JSONPath.set((Object) sQLIntegrityConstraintViolationException0, "/stackTrace/10", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("+|aYy\"`44Ir~L+9", serializeConfig0, (ParserConfig) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(910, 105, 105);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, "(L~7z|nS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("vpl7!K~'\"");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}92F08R'gFWU=b(");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-3686L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("39n2;kMM?Rj");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(39L, object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("*", stringArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}}Z_1TND%,0@");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      assertSame(jSONPath_Filter0, jSONPath_StringInSegement0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("PsC%");
      jSONPath_JSONPathParser0.explain();
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$:@5");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $:@5
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("R<mlPUvH\u0006_wI-P=*");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer integer0 = new Integer((-2517));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "D6bHJ+";
      stringArray0[1] = "Z";
      stringArray0[2] = "EQWe<!G~";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(integer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("A");
      Integer integer0 = new Integer(64);
      Set<?> set0 = jSONPath0.keySet((Object) integer0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("sun.reflect.annotation.AnnotationType");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Object object0 = jSONPath0.eval((Object) batchUpdateException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("a");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract("~$K&2e7?(IFr1", ".{1<7Tw\"C*,ZUMaHBlM", parserConfig0, 26376, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2~$K&2e7?(IFr1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      boolean boolean0 = jSONPath0.remove((Object) serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("sun.reflect.annotation.AnnotationType");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer", jSONPath0);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2473);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ArraySerializer", serializeConfig0, parserConfig0);
      jSONPath0.init();
      assertEquals("com.alibaba.fastjson.serializer.ArraySerializer", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("!|v_s)$a'M");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath_SizeSegment0.eval(jSONPath0, (Object) null, javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((byte)11);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("C-]@a2^%");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('-', char0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Fi!M>\"`^@3C|b75");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("]q");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("p{ZE5iz~nyH%JB");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('~');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '~, but 'p'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(9);
      JSONPath jSONPath0 = JSONPath.compile("jsonpath error, path ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1266), 15, 15);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = JSONPath.compile("sun.reflect.annotation.AnnotationType");
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, throwableDeserializer0, (Object) null);
      assertNotNull(arrayList0);
      assertEquals(85, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("v");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("sun.reflect.annotation.AnnotationType", true);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, "*0$_M0l{Rl;0oL", jSONPath_SizeSegment0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3M");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(1120L);
      assertEquals(1123.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("#\"dLX(oV^t? s$jL", "7");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("a~4", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "K:wYOA*a");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("(Ljava/lang/Object;Ljava/lang/String;)V");
      JSONPath jSONPath0 = JSONPath.compile("^n<Krn");
      boolean boolean0 = jSONPath0.setPropertyValue(jSONPath_NullSegement0, "F\"F#ueDQVsXd^", (-2627L), jSONPath_NullSegement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("_", "/stackTrace/1", sQLIntegrityConstraintViolationException0);
      Set<?> set0 = JSONPath.keySet((Object) sQLTransactionRollbackException0, ",");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Set<?> set0 = jSONPath0.keySet((Object) sQLTransientException0);
      assertEquals(5, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("a~4", serializeConfig0, parserConfig0);
      Class<Byte> class0 = Byte.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath(".null", serializeConfig0, parserConfig0);
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("eCWq");
      Class<Short> class0 = Short.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("#\"dLX(oV^t? s$jL");
      Object object0 = jSONPath0.getArrayItem((Object) null, 92);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = JSONPath.extract("", "sun.reflect.annotation.AnnotationType");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yx");
      PriorityQueue<JSONPath.SizeSegment> priorityQueue0 = new PriorityQueue<JSONPath.SizeSegment>();
      int int0 = jSONPath0.evalSize(priorityQueue0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      int int0 = jSONPath0.evalSize("between");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("N)n)  X-OG~V|K");
      Set<?> set0 = jSONPath0.evalKeySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("null", serializeConfig0, (ParserConfig) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(4, (-1005), 1193);
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_RangeSegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) "'/.-Yc6d?[$^'>W", "fastjson.parser.deny");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object object0 = jSONPath0.eval((Object) mockPrintWriter0);
      assertSame(mockPrintWriter0, object0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      boolean boolean0 = JSONPath.containsValue((Object) "-}&4?XK?P8", "fastjson.parser.autoTypeSupport", (Object) propertyNamingStrategy0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2369, 2369, (-615));
      boolean boolean0 = JSONPath.contains((Object) jSONPath_RangeSegment0, "*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = JSONPath.compare("/stackTrace/1", "/stackTrace/1");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[double");
      Float float0 = new Float((-1.0F));
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("groovy.lang.MetaClass", (SerializeConfig) null, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-421), (-421), (-421), 33, 5092, 5092);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(class0, "74nX0r", 492L, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("comaliaba.fastjson.p&rs^.eseHializer.ASMDew@rializerFactory");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      jSONPath0.setPropertyValue(javaBeanSerializer0, "F\"F#ueDQVsXd^", (-2627L), map0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("'s*,s*'", (SerializeConfig) null, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_Operator0, "(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z", (-4608341446948126581L), (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "fastjson.parser.deny.internal", 4647432019745535567L, "fastjson.parser.deny.internal");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("qZ0H");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, (Object) null, (-709), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) thaiBuddhistDate0, "zD?", (Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.time.chrono.ThaiBuddhistDate
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      DataTruncation dataTruncation0 = new DataTruncation(61, true, true, (-1), 46);
      // Undeclared exception!
      JSONPath.set((Object) bigInteger0, "java.time.ZoneId", (Object) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("sun.reflect.annotation.AnnotationType");
      int[] intArray0 = new int[8];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("b", "sun.reflect.annotation.AnnotationType", (-1987));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("b", sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("b", "sun.reflect.annotation.AnnotationType", 9999999, intArray0, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) batchUpdateException0, (Object) "b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_,8*?7V");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "vpl7!K~'\"", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : _,8*?7V
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " S5hY2YjC";
      stringArray0[1] = "between";
      stringArray0[2] = "between";
      stringArray0[3] = "between";
      stringArray0[4] = "F";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("F", stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yx");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "com.alibaba.f5stjson.JSONPath$MultiP[operySegment";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject((Object) null, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Q,";
      stringArray0[1] = "Q,";
      stringArray0[2] = "Q,";
      stringArray0[3] = "Q,";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("Q,", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("#");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_WildCardSegment0, "GT", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONPath jSONPath0 = JSONPath.compile("\"9Vc=37I");
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigDecimal0, "/stackTrace/8", true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(904);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("vd+}F=Va[rCpSXU1c", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue("fastjson.parser.autoTypeAccept", "p", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("vd+}F=Va[rCpSXU1c");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/4");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, 72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("qZ0H");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "\\.");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) propertyNamingStrategy0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) thaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.time.chrono.ThaiBuddhistDate
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yx");
      BigDecimal bigDecimal0 = new BigDecimal(533.1340188469);
      // Undeclared exception!
      jSONPath0.remove((Object) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("$:@");
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("[", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) parserConfig0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("dX(oV^_? s$L", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2dX(oV^_? s$L
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException(",i#8o|=+c", "rlike", 839);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",i#8o|=+c", sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",i#8o|=+c", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) sQLNonTransientConnectionException0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) "null", "A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("kqlI 5W>b&)x*");
      JSONPath.keySet((Object) jSONPath0, "kqlI 5W>b&)x*");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      JSONPath jSONPath0 = new JSONPath("A4n");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("2");
      SQLDataException sQLDataException0 = new SQLDataException("v)Q@=MKM<]f", "v)Q@=MKM<]f", 11);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) sQLDataException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("O$*h \"sY*?$SwRW");
      JSONPath jSONPath0 = new JSONPath("rlike", (SerializeConfig) null, (ParserConfig) null);
      DataTruncation dataTruncation0 = new DataTruncation((-1684), true, true, (-2124), (-2124), sQLRecoverableException0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("_,8*~?7V");
      Byte byte0 = new Byte((byte)109);
      jSONPath0.keySet((Object) byte0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.f5stjson.JSONPath$MultiP[operySegment");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("#\"dLX(oV^t? s$jL");
      jSONPath0.init();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("getFieldValue error.");
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3535.7751105);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("\"9Vc=37I", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("new", (SerializeConfig) null, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("98d>h3sq8");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(sQLTransientConnectionException0, "new", 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("3.6][nf");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("between", (SerializeConfig) null, parserConfig0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("h\";\u0006#^");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("value is null");
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(3040);
      JSONPath jSONPath0 = new JSONPath("'WS}+gSUE?Qw9f@x~@&", serializeConfig0, (ParserConfig) null);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("kqlI 5W>b&)x*");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(serializeConfig0, (-3119));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSONPath.extract("EkW", "fastjson.parser.deny", parserConfig0, 47, (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null, parserConfig0, (-1879404333), (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("deserialize inet adress error");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-/BMS.0@i(O}9OW-;.");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : deserialize inet adress error
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rlike");
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$Context", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yx");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/stackTrace/0";
      stringArray0[1] = "yx";
      stringArray0[2] = "yx";
      stringArray0[3] = "yx";
      stringArray0[4] = "yx";
      Object object0 = JSONPath.reserveToArray(jSONPath0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) ((JSON) object0).DEFAULT_PARSER_FEATURE, "7");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "undefined", "/beanInfo/creatorConstructor/annotatedReturnType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2369);
      JSONPath jSONPath0 = new JSONPath("*");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ArrayList arrayList0 = (ArrayList)jSONPath0.eval((Object) bigDecimal0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(")\",\">^d dBDHDb6bt");
      jSONPath0.eval((Object) ")\",\">^d dBDHDb6bt");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("getFieldValue error.");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(92);
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "getFieldValue error.", 673L, jSONPath_ArrayAccessSegment0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath(" .TWb><a", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(parserConfig0, "fastjson.parser.autoTypeAccept", arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("qZ0H");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("qZ0H", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath jSONPath0 = new JSONPath("lr`");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(126);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/4", serializeConfig0, parserConfig0);
      jSONPath0.evalSize("/stackTrace/4");
      jSONPath0.contains((Object) parserConfig0);
      Integer integer0 = new Integer(43);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.stream();
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.autoTypeSupport", "RquZR [+e", 2038);
      SQLWarning sQLWarning1 = new SQLWarning(sQLWarning0);
      JSONPath.set((Object) "/stackTrace/4", "/stackTrace/4", (Object) arrayList0);
      jSONPath0.set((Object) "RquZR [+e", (Object) null, false);
      UUID uUID0 = MockUUID.randomUUID();
      JSONPath.containsValue((Object) "/stackTrace/4", "fastjson.parser.deny.internal", (Object) uUID0);
      String string0 = "scanBoolean";
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) " ", "yx", (Object) jSONPath_MultiPropertySegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/4");
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) class0, (Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!|v_s)$a'M", "!|v_s)$a'M");
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.f5stjson.JSONPath$MultiP[operySegment");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2788), 64, (-2788));
      jSONPath0.containsValue((Object) sQLTransactionRollbackException0, (Object) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+4lM");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("AutoCloseSource", "AutoCloseSource");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) sQLIntegrityConstraintViolationException0, (Object) "AutoCloseSource");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. +4lM
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) class0, "V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[double");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "d!|.~i),,p<+,K");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("comaliaba.fastjson.p&rs^.eseHializer.ASMDew@rializerFactory");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "comaliaba.fastjson.p&rs^.eseHializer.ASMDew@rializerFactory");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : comaliaba.fastjson.p&rs^.eseHializer.ASMDew@rializerFactory
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("V", (String) null, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLTransientConnectionException0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("7", sQLTransientException0);
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLRecoverableException0, "7", (Object[]) jSONPath_OperatorArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Long long0 = new Long(2498);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) long0, "XcBP3[5O4@Ug=}|,oSH", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path XcBP3[5O4@Ug=}|,oSH
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "$:@5", sQLRecoverableException0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLNonTransientConnectionException0, "F", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path F
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BETWEEN");
      BigInteger bigInteger0 = BigInteger.ONE;
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepGetPropertyValues(bigInteger0, vector0);
      assertFalse(vector0.isEmpty());
      assertEquals("[0]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("Jn9J2:W3bg");
      JSONPath jSONPath0 = JSONPath.compile("Jn9J2:W3bg");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, jSONPath_NullSegement0, 3153);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$NullSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("#\"dLX(oV^t? s$jL");
      Byte byte0 = new Byte((byte)11);
      Map<String, Object> map0 = JSONPath.paths((Object) byte0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, map0, 158, "#\"dLX(oV^t? s$jL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.util.HashMap
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("BvOU3o@v=f*", (-2652L), jSONPath_Operator0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("A4n>P", false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("A4n>P", serializeConfig0, parserConfig0);
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_IntOpSegement0, parserConfig0);
      assertEquals("A4n>P", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(")'~");
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("max", false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(37);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, stack0, jSONPath_ArrayAccessSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0TZs4dTv}");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"9Vc=37I");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(126);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("h", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.contains((Object) "h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MatchSegement", serializeConfig0, parserConfig0);
      Float float0 = new Float(0.0F);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) float0, (Object) jSONPath_WildCardSegment0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("sn.reflec.annotation.AnnotationType");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "sn.reflec.annotation.AnnotationType", (Object) "sn.reflec.annotation.AnnotationType", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/0");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("next", "", 587, (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/cause/stackTrace/0", sQLSyntaxErrorException0);
      boolean boolean0 = jSONPath0.set((Object) sQLNonTransientConnectionException0, (Object) null, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yx");
      BigDecimal bigDecimal0 = new BigDecimal((-2054.0));
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) bigInteger0, true);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("78Py0zcz}!jW#Q9");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/6", false);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_PropertySegment0, (Object) jSONPath_PropertySegment0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 78Py0zcz}!jW#Q9
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("N)n)  X-OG~V|K", serializeConfig0, (ParserConfig) null);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("between");
      jSONPath0.arrayAdd((Object) jSONPath0, (Object[]) null);
      assertEquals("between", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.containsValue((Object) parserConfig0.propertyNamingStrategy, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NOT_IN", parserConfig0, 1755);
      JSONPath jSONPath0 = new JSONPath("java.time.OffsetDateTime");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("iAr~9y&YA+Xzg%1sOg", parserConfig0, (-26729013));
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2iAr~9y&YA+Xzg%1sOg
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("sun.reflect.annotation.AnnotationType");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(16);
      JSONPath jSONPath0 = new JSONPath("NQ,+?t=*S;Hla");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath_MaxSegment0, stringArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath jSONPath0 = new JSONPath("o1f#=V#(C4p~ 5K@");
      Set<?> set0 = jSONPath0.evalKeySet("o1f#=V#(C4p~ 5K@");
      HashSet hashSet0 = (HashSet)JSONPath.reserveToObject(set0, stringArray0);
      assertFalse(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath jSONPath0 = new JSONPath("o1f#=V#(C4p~ 5K@");
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath0, stringArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("~/?7^}", (String[]) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/", true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("l(XG|1gs");
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yx");
      boolean boolean0 = jSONPath0.removePropertyValue("yx", "wn88T_oi|0$+Yhk{+", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("PsC%", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "PsC%");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(126);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/4", serializeConfig0, parserConfig0);
      Integer integer0 = new Integer(43);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(arrayList0, "'/.-Yc6d?[$^'>W", (-811277319855450459L), arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /stackTrace/4, segement '/.-Yc6d?[$^'>W
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(126);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/4", serializeConfig0, parserConfig0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepSet(arrayList0, "'/.-Yc6d?[$^'>W", (-811277319855450459L), arrayList0);
      assertEquals("/stackTrace/4", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("I");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      jSONPath0.deepSet((Object) null, "+$L^:d#_s^H", 2987L, jSONPath_WildCardSegment0);
      assertEquals("I", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fstjson");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepScan(jSONPath0, "fstjson", arrayList0);
      assertFalse(arrayList0.contains("fstjson"));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Class<SQLDataException> class0 = SQLDataException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      arrayList0.add((Object) javaBeanSerializer0);
      JSONPath jSONPath0 = JSONPath.compile("value is null");
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(arrayList0, "value is null", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Integer integer0 = new Integer(53);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) integer0);
      JSONPath jSONPath0 = JSONPath.compile("value is null");
      jSONPath0.deepScan(arrayList0, "value is null", arrayList0);
      assertTrue(arrayList0.contains(53));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_,8*?7V");
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 21, 21);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(dataTruncation0, "value ", (List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path _,8*?7V, segement value 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(cz~$@ <Mlh-[GauCj");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Object object0 = jSONPath0.getPropertyValue(mockGregorianCalendar0, ".3t-OkrNEVz", (-6018L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      Collection<Object> collection0 = jSONPath0.getPropertyValues(parserConfig0);
      jSONPath0.size((Object) collection0);
      Byte byte0 = new Byte((byte) (-1));
      boolean boolean0 = JSONPath.remove((Object) byte0, "fastjson.parser.safeMode");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Float float0 = new Float((double) 2987L);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Double double0 = new Double(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-3456.03273854));
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Double double0 = new Double(2369);
      boolean boolean0 = JSONPath.eqNotNull(0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double double0 = new Double(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eqNotNull(double0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Double double0 = new Double((-298));
      boolean boolean0 = JSONPath.eqNotNull(double0, (-1580386065683472715L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(10, 10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(10.0);
      Short short0 = new Short((short) (-198));
      boolean boolean0 = JSONPath.eqNotNull(short0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1052);
      Long long0 = new Long(1052);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Integer integer0 = new Integer(64);
      Long long0 = new Long(38);
      boolean boolean0 = JSONPath.eq(long0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("stackTrace");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      boolean boolean0 = JSONPath.eq(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLException sQLException0 = new SQLException("yim}|yaY8k:3|xIT/_", "%,?9", (-3112));
      SQLWarning sQLWarning0 = new SQLWarning("%,?9", sQLException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      boolean boolean0 = JSONPath.eq(sQLInvalidAuthorizationSpecException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1266), (-4), (-4));
      boolean boolean0 = JSONPath.eq(jSONPath_RangeSegment0, jSONPath_RangeSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("qZ0H");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepGetPropertyValues(arrayList0, arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("qdoubl)");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.deny.internal", hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLClientInfoException0, arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath jSONPath0 = new JSONPath(",");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("o1f#=V#(C4p~ 5K@");
      Set<?> set0 = jSONPath0.evalKeySet("o1f#=V#(C4p~ 5K@");
      Collection<Object> collection0 = jSONPath0.getPropertyValues(set0);
      assertFalse(collection0.contains("o1f#=V#(C4p~ 5K@"));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$VALUES");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = jSONPath0.removeArrayItem(jSONPath0, arrayList0, 9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-298));
      JSONPath jSONPath0 = JSONPath.compile("!|Sv_s)$aM");
      Double double0 = new Double((-298));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, double0, "!|Sv_s)$aM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Double
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[4];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("(cz~$@ <Mlh-[GauCj");
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, 1, "(cz~$@ <Mlh-[GauCj");
      assertEquals(4, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getFieldDeserializer", "yx", 91);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLWarning0, "/stackTrace/0", (Object) "getFieldDeserializer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("Fi!M>\"`^@3C|b75", (byte)116, (-1539L), false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("izZtvw[Kc2'wkQ", sQLClientInfoException0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, sQLTransientConnectionException0, "]q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntOpSegement");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("y]Gc?Oqgjh", "com.alibaba.fastjson.JSONPath$IntOpSegement");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("nin");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, jSONPath0, sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("null", "org.json.JSONObject", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("null");
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/stackTrace/3", "3V{k|DUDss1O>", intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("/cause/stackTrace/6", "tb", 5, batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/cause/stackTrace/6", "security", sQLDataException0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_StringOpSegement0, sQLTimeoutException0, sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_,8*?7V");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("1");
      SQLDataException sQLDataException0 = new SQLDataException("MGTT|ms{m", "5WBEF1>>)", 101);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(54);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLDataException0, "_,8*?7V", jSONPath_ArrayAccessSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("value is null");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("mbt0;v$Q.KSVL");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("mbt0;v$Q.KSVL", "value is null");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("mbt0;v$Q.KSVL", sQLSyntaxErrorException0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLClientInfoException0, jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("jbnA", "stackTCFrace", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("getDeserializer");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "jbnA", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("tn#Cp\"p?G\"zwMj5Bb]", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      SerializeConfig serializeConfig0 = new SerializeConfig(2369);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      Double double0 = new Double(2369);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, double0, serializeConfig0);
      assertSame(serializeConfig0, object0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement(",", ",", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("o;JEgU~!39,w?JH<ggm", serializeConfig0, parserConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(",", "\\-", 296, sQLIntegrityConstraintViolationException0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLRecoverableException0, ",");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("j*7m f3);5W");
      JSONPath jSONPath0 = JSONPath.compile("j*7m f3);5W");
      SQLTransientException sQLTransientException0 = new SQLTransientException("mbt0;v$Q.KSVL", "mbt0;v$Q.KSVL", 8);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(",x\"&9Ei", "mbt0;v$Q.KSVL", 102, sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",x\"&9Ei", ",x\"&9Ei", sQLRecoverableException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException0);
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("sun.reflect.annotation.AnnotationType", (-2255L), (-694L), true);
      JSONPath jSONPath0 = new JSONPath("sun.reflect.annotation.AnnotationType");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("sun.reflect.annotation.AnnotationType", "b");
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_FilterSegment0, sQLNonTransientConnectionException0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("N)n)  X-OG~V|K", serializeConfig0, (ParserConfig) null);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "illegal enum. ", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("J^uD@SiWPcuH]");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("d!|.~i),,p<+,K", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath_Operator0, pattern0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(36);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("undefined", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.safeMode", "", jSONPath_Operator0);
      SQLDataException sQLDataException0 = new SQLDataException("MF*C'z\"0dM17");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "/beanInfo/creatorConstructor/parameterAnnotations", sQLDataException0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, sQLTransientConnectionException0, parserConfig0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      SQLDataException sQLDataException0 = new SQLDataException("MF*C'z\"0dM17");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("nin", "x", sQLDataException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("nin", "nin", jSONPath_Operator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("MF*C'z\"0dM17", "com.aliaba.fastjson.p&rse.eseHializer.ASMDes@rializerFactory", sQLDataException0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, sQLRecoverableException0, "x", sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("iAr~9y&YA+Xzg%1sOg", "IN", "/", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("iAr~9y&YA+Xzg%1sOg");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, (Object) null, (Object) null, "/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("o1f#=V#(C4p~ 5K@", "m<~Zax2sn7", (String) null, (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("QIq+_", (String) null, "\\-", stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("vd+}F=Va[rCpSXU1c", jSONPath_SizeSegment0, jSONPath_Operator0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, parserConfig0, jSONPath_Operator0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("A");
      SQLTransientException sQLTransientException0 = new SQLTransientException("A", "A", 123);
      String[] stringArray0 = new String[7];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("A", stringArray0, false);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLTransientException0, "A", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("GT", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("GT");
      ParserConfig parserConfig0 = new ParserConfig(false);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "GT", parserConfig0, "GT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "value is null";
      stringArray0[1] = "value is null";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("value is null", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("value is null");
      ParserConfig parserConfig0 = new ParserConfig(true);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, (Object) null, (Object) null, parserConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      Long long0 = new Long((-557L));
      Long[] longArray0 = new Long[4];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("between", longArray0, false);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, (Object) null, jSONPath0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      Long long0 = new Long((-592L));
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("between", longArray0, true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/8", "/stackTrace/8", Integer.MIN_VALUE);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, (Object) null, longArray0[0], sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("Iu-", longArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      JSONPath jSONPath0 = JSONPath.compile(",0D&/a-o-w>NW\"&H");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("scanInt");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_IntObjInSegement0, sQLRecoverableException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("Yz 3Kx Tdo+~xf", (-2089L), (-711L), true);
      SerializeConfig serializeConfig0 = new SerializeConfig(2473);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ArraySerializer", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "com.alibaba.fastjson.serializer.ArraySerializer", "com.alibaba.fastjson.serializer.ArraySerializer", "Yz 3Kx Tdo+~xf");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("sun.reflect.annotation.AnnotationType", (-2270L), (-694L), true);
      JSONPath jSONPath0 = JSONPath.compile("sun.reflect.annotation.AnnotationType");
      Collection<Object> collection0 = jSONPath0.getPropertyValues(jSONPath_IntBetweenSegement0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("mb", "sun.reflect.annotation.AnnotationType", (-1987));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("mb", sQLNonTransientException0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, sQLSyntaxErrorException0, collection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("length", "length", false);
      JSONPath jSONPath0 = new JSONPath("r");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("length", "\b-G(J=x/EeFD=s", (-2175));
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("r", "\b-G(J=x/EeFD=s", 38, hashMap0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLTimeoutException0, sQLClientInfoException0, "length");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = JSONPath.compile("xqz7ZHj");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("xqz7ZHj", serializeConfig0, true);
      Integer integer0 = new Integer((-123));
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, (Object) null, integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("=QhxLqb&V(8@F", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("f$C~:euf^9g24b");
      JSONPath jSONPath0 = new JSONPath("f$C~:euf^9g24b");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-10384350), (-10384350), 45, 60, 45, 99999999);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, mockGregorianCalendar0, mockGregorianCalendar0, "f$C~:euf^9g24b");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("Ggv");
      JSONPath jSONPath0 = JSONPath.compile("between");
      Long long0 = new Long(100000000);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, arrayList0, long0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_,8*?7V");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("1");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("1");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(4278, 4278, 4278);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_FilterSegment0, jSONPath_NullSegement0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, "Yu2/|3p[`3H8!X!&?VN", (Object) null, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_,8*?7V");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("1");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$JSONPathParser");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("1", (String) null, 0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, sQLTransactionRollbackException0, jSONPath0, jSONPath_NullSegement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("kqlI 5W>b&)x*");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-32768), (-32768), 63);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("7;", "*", parserConfig0, 62, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yx");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Double double0 = new Double((-757.3548659693));
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, double0, jSONPath_SizeSegment0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath jSONPath0 = new JSONPath("add");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "add";
      stringArray0[1] = "add";
      stringArray0[2] = "add";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "add", jSONPath_Operator0);
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yx");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("yx", true);
      jSONPath_PropertySegment0.setValue(jSONPath0, "yx", "yx");
      assertEquals("yx", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Long long0 = new Long(21);
      Double double0 = new Double((-104));
      int int0 = JSONPath.compare(long0, double0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Long long0 = new Long((-1423L));
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, sQLWarning0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLWarning cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("6~YK tdCb\"g0d7XL", (Map<String, ClientInfoStatus>) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("EY\r$#PR`C-%;_G", "EY\r$#PR`C-%;_G", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, sQLTransientException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransientException cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = JSONPath.compare("fieldDeserializer", "wJ5?dN");
      assertEquals((-17), int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("GT");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("GT", "~)2,`t{`#J,NHqK6>e)", sQLRecoverableException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLRecoverableException0, sQLTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLRecoverableException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("(Ljava/lang/Object;Ljava/lang/String;)V");
      JSONPath jSONPath0 = JSONPath.compile("^n<Krn");
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, jSONPath_NullSegement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":qoyujTwcbP$");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"qoyujTwcbP$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"9Vc=37I");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'!{',Cj0C");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'!{'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#L}?F\"[-QKVpi)#LY@=");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("L}?F\"[-QKVpi)", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("can not cast to double, value : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">Ta[w)_qbeA[sf");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<hq:mZ_IQY");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("vpl7!K~'\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'K'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nin
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"9Vc=37I");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but 'I'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("O$*h \"sY*?$SwRW");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not support jsonpath : ");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0:!@i1V][OO *%h");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+heXe)$7{");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("A", stringArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|:x=:h8m$8+lvK)");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      assertSame(jSONPath_Filter0, jSONPath_StringInSegement0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.aliaba.fastjson.p&rse.eseHializer.ASMDes@rializerFactory");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(I)Ljava/lang/Enum;");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[!-]");
      boolean boolean0 = jSONPath0.contains((Object) "d!|.~i),,p<+,K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("G=W2;o&{");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[iy`>o;#7o&[s+XDaM>");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[iy`>o;#7o&[s+XDaM>";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@R$lwR6H|2cd<QdEn");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 'R'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("K[*");
      Integer integer0 = new Integer(64);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) integer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("F", "$:@5");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2F
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("}", (SerializeConfig) null, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fstjson");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Float float0 = new Float(1546.5);
      Map<String, Object> map0 = JSONPath.paths((Object) float0, (SerializeConfig) null);
      Map<String, Object> map1 = JSONPath.paths((Object) map0);
      assertEquals(2, map1.size());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("/cause/stackTrace/12", "not");
      Map<String, Object> map0 = JSONPath.paths((Object) sQLWarning0);
      //  // Unstable assertion: assertEquals(90, map0.size());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "*", (Object) "nin");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        JSONPath.set((Object) localDate0, "com.alibaba.fstjson.JSONValEdator$UTF8InputStremValidator", (Object) integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 3592);
      JSONPath jSONPath0 = JSONPath.compile("$VALUES");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, jSONPath_Operator0);
      boolean boolean0 = JSONPath.set(object0, "$VALUES", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) "vpl7!K~'\"", ".", (Object) ".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      Integer integer0 = Integer.getInteger("vk:OrQ~,q5eX*|H", (-2558));
      boolean boolean0 = jSONPath0.set((Object) null, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Float float0 = new Float(1546.5);
      Map<String, Object> map0 = JSONPath.paths((Object) float0, (SerializeConfig) null);
      JSONPath.remove((Object) map0, "groovy.lang.MetaClass");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("k;$A|:[+");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("qZ0H", "E9b,PXC9nV`[");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLRecoverableException0, ")", (Object[]) jSONPath_OperatorArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(cz~$@ <Mlh-[GauCj");
      Object[] objectArray0 = new Object[2];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals("(cz~$@ <Mlh-[GauCj", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("between");
      jSONPath0.arrayAdd((Object) jSONPath_MultiPropertySegment0, (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("sn.reflec.annotation.AnnotationType");
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "sn.reflec.annotation.AnnotationType", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path sn.reflec.annotation.AnnotationType
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("IQ!(8%H*`Y@:K\"YXQ");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("qZ0H");
      int int0 = jSONPath0.size((Object) "qZ0H");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(36);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("jbnA", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=#ms&}U8<)J6{z&|U3");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("=#ms&}U8<)J6{z&|U3", false);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_PropertySegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. =#ms&}U8<)J6{z&|U3
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLIntegrityConstraintViolationException0, (Object) javaBeanSerializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("iAr~9y&YA+Xzg%1sOg", "IN", "/", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("/");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath_MatchSegement0, (Object) sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j_Pa.Ulang.");
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath0, "j_Pa.Ulang.", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      boolean boolean0 = jSONPath0.containsValue((Object) "between", (Object) thaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      int[] intArray0 = new int[2];
      JSONPath jSONPath0 = new JSONPath("*");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("*", intArray0);
      boolean boolean0 = jSONPath0.contains((Object) batchUpdateException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("8%|ozU");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("value is null", "/stackTrace/6");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSONPath.extract("", "fastjson.parser.deny.internal", parserConfig0, 156, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("curContext");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("_", "_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("And");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "com.alibaba.fastjson.JSONPath$ArrayAccessSegment");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/4");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      Integer integer0 = new Integer(64);
      Set<?> set0 = jSONPath0.keySet((Object) integer0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = new JSONPath("S5aom z*s.q");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath0, "S5aom z*s.q");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("value ");
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, "#{vD]I7'56_0}^nky", jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("\\.", "\\.", true);
      JSONPath jSONPath0 = new JSONPath("bU&+u-zi`#1?3Wh6");
      Integer integer0 = new Integer(116);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, integer0, "\\.", "\\.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("add", (-1807.041675273), jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("add");
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, mockGregorianCalendar0, locale0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("Iu-", longArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      JSONPath jSONPath0 = JSONPath.compile(",0D&/a-o-w>NW\"&H");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("scanInt");
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_IntObjInSegement0, sQLRecoverableException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("vN/0`JdVl3A'{0", "vN/0`JdVl3A'{0");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&Q");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("$:@");
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      Integer integer0 = new Integer(160);
      boolean boolean0 = jSONPath0.set((Object) integer0, (Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Q,");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2259, (-298), 2259);
      Float float0 = new Float(1.0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, float0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("yyyy-Mk-dd HH:mm:ss", "yyyy-Mk-dd HH:mm:ss");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyy-Mk-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) null, (String) null, (Object) "eCWq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("FA__");
      String string0 = jSONPath0.getPath();
      assertEquals("FA__", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("iAr~9y&YA+Xzg%1sOg");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.arrayAdd((Object) serializeConfig0, "fastjson.parser.safeMode", (Object[]) null);
      assertEquals("@type", serializeConfig0.getTypeKey());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) "(cz~$@ <Mlh-[GauCj", ".3t-OkrNEVz");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" MZt'azO]^");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLTransientConnectionException0, "com.alibaba.fstjson.JSONValEdator$UTF8InputStreamValidator", (Object) " MZt'azO]^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("springframework", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("Ulang");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, "springframework", jSONPath_Operator0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("qZ0H");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "qZ0H");
  }
}
