/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 18:06:47 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[-Gs{DTaw@:");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      boolean boolean0 = jSONPath0.contains((Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Byte byte0 = new Byte((byte)96);
      Long long0 = Long.valueOf(2875L);
      boolean boolean0 = JSONPath.eqNotNull(byte0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("LIKV", "u6M?Z[t(,^1E");
      boolean boolean0 = JSONPath.contains((Object) sQLSyntaxErrorException0, "/stackTrace/0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      JSONPath jSONPath0 = new JSONPath("8Tqxq=XQIh{<J6");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte)0, 90, 90);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, byte0, jSONPath_JSONPathParser0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("g lfkxh[z|?{", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(5, (-1813), 5);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, "N-VWbxZd%\"\"jnPoV-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -362
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      JSONPath jSONPath0 = new JSONPath("8Tqxq=XQIh{<J6");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte)0, (byte)0, 71);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("n", "v=m[Nx#Q'rn 1\"");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, byte0, sQLIntegrityConstraintViolationException0);
      assertEquals(1, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!`90");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("ahVd");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1570L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/0");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!`90");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/2");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~fs");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("like", (-2823.2808850889), jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_DoubleOpSegement0);
      assertSame(jSONPath_Filter0, jSONPath_DoubleOpSegement0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".#6;r;a3z.\"Z");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. .#6;r;a3z.\"Z
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[8];
      // Undeclared exception!
      try { 
        JSONPath.extract("=I=Dx", "'", parserConfig0, (-1868), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2=I=Dx
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9jeJ}zPp?9p>Hr!xz'");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("mark_context");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "xRiS";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan(jSONPath_MultiPropertySegment0, "com.alibaba.fastjson.JSONPath$RangeSegment", linkedList0);
      assertFalse(linkedList0.contains("mark_context"));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("jBD5Db@b", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, (Object) null, parserConfig0);
      assertEquals(9, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4^Mv\"<%y,xQ";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("4^Mv\"<%y,xQ", "4^Mv\"<%y,xQ", "4^Mv\"<%y,xQ", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("4^Mv\"<%y,xQ", serializeConfig0, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONPath0, serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("ZDi");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('V');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@H-<=_V(U/[Mt");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('H', char0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'z, but 'r'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("ku Q0N[!iNwxYe|PW");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ku Q0N[!iNwxYe|PW";
      stringArray0[1] = "between";
      stringArray0[2] = "ku Q0N[!iNwxYe|PW";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath_MultiPropertySegment0, propertyNamingStrategy0);
      assertSame(propertyNamingStrategy0, object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T>4m1dv`;7wda5x^@", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(34);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, parserConfig0, jSONPath_ArrayAccessSegment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LI^KE");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : LI^KE
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("-");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Double> class0 = Double.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Set<?> set0 = JSONPath.keySet((Object) throwableDeserializer0, "enum");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath(":", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fCAg8^=:{*PW\"H&");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      boolean boolean0 = jSONPath0.setPropertyValue(sQLTransientConnectionException0, "rn{O&", 1176, jSONPath_MaxSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Long long0 = Long.getLong("com.alibaba.fastjson.JSONObject", 1972L);
      boolean boolean0 = JSONPath.set((Object) long0, "TreKeSet", (Object) long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[6];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = JSONPath.set((Object) null, "qV*QCi", (Object) jSONPath_MultiIndexSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "7ee}}~y+/<iZx");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("GT");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("GT");
      assertFalse(collection0.contains("GT"));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("|)qA'5c, _?");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Object object0 = jSONPath0.getPropertyValue(sQLClientInfoException0, "|)qA'5c, _?", 3056L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      Class<Long> class0 = Long.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPathException");
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^c4>3");
      Object object0 = jSONPath0.getArrayItem((Object) null, 0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("T/4{1dv`;7wda5x^@", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = (JSONPath)jSONPath0.getArrayItem(jSONPath0, 0);
      assertEquals("T/4{1dv`;7wda5x^@", jSONPath1.getPath());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("ku Q0N[!iNwxYe|PW");
      int int0 = jSONPath0.evalSize("ku Q0N[!iNwxYe|PW");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      int int0 = jSONPath0.evalSize((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("B(15Kfs[+4", false);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_PropertySegment0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~6o:-^cEJ^|z5]4b/_#");
      Set<?> set0 = jSONPath0.evalKeySet("~6o:-^cEJ^|z5]4b/_#");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) class0, "LE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("NOT_IN", "/stackTrace/10", 30);
      StackTraceElement stackTraceElement0 = (StackTraceElement)JSONPath.eval((Object) sQLTransientException0, "/stackTrace/10");
      assertEquals("runWorker", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) "[-Gs{DTaw@:", "[-Gs{DTaw@:", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Short short0 = new Short((short)93);
      boolean boolean0 = JSONPath.containsValue((Object) short0, "N", (Object) "N[]Uja8)ks+qi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = JSONPath.compare("rzYA;Y,Ny'v$", "fastjson.parser.autoTypeSupport");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = JSONPath.compare(")7Cx7}", "D_JUSTge\"bp:fY781");
      assertEquals((-27), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      String[] stringArray0 = new String[0];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) javaBeanSerializer0, "Cmz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      // Undeclared exception!
      try { 
        JSONPath.size((Object) propertyNamingStrategy0, "Wrg.joda.ti.UTCDateTim(e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Wrg.joda.ti.UTCDateTim(e
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[-Gs{DTaw@:");
      Class<Calendar> class0 = Calendar.class;
      String[] stringArray0 = new String[2];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("rPm3W1jUI");
      JSONPath jSONPath1 = JSONPath.compile("\"O\" 'e}|[3K6O[/vR.");
      // Undeclared exception!
      try { 
        jSONPath1.size((Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"O\" 'e}|[3K6O[/vR.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T/4{1dv`;7wda5x^@", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.deny", "IgnoreAutoType", 46);
      BigDecimal bigDecimal0 = new BigDecimal((-811277319855450459L));
      // Undeclared exception!
      jSONPath0.setPropertyValue(bigDecimal0, "nAOs", 1833L, sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("7Fjv. Dg");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "jsonpath error, path ", 1491L, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LT");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, (Object) null, 26376, "LT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("FixedDateTimeZone", serializeConfig0, parserConfig0);
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "RLIKE", (Object) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("R+^Nm<Hrujw&<VtR", pattern0, jSONPath_Operator0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "scanLong", (Object) jSONPath_RegMatchSegement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("parseRest");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "parseRest", "groovy.lang.MetaClass", (Object) jSONPath_JSONPathParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!0");
      JSONPath jSONPath0 = new JSONPath("7IdW*E>");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "\"6R!|g#woM8Y]V0EP", (Object) jSONPath_JSONPathParser0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 7IdW*E>
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/stackTrace/7", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("5X", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLClientInfoException0, (Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("1.");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_SizeSegment0, (Object) mockDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 1.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ObjectSerializer objectSerializer0 = serializeConfig0.getObjectWriter(class0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fastjson.parser.autoTypeAccept";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(objectSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "N[]Uja8)ks+qi";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject((Object) null, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_MultiPropertySegment0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "HtBc[+},sieL>.";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      // Undeclared exception!
      jSONPath0.removePropertyValue(jSONPath0, ", but '", true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "F<22T4?>Vl";
      String string1 = "scan null error";
      SQLWarning sQLWarning0 = new SQLWarning("scan null error");
      JSONPath jSONPath0 = JSONPath.compile("scan null error");
      int[] intArray0 = new int[1];
      intArray0[0] = (-751);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Gy!7k_Hq70s;:P+", intArray0, sQLWarning0);
      sQLWarning0.initCause(batchUpdateException0);
      boolean boolean0 = true;
      // Undeclared exception!
      jSONPath0.removePropertyValue(sQLWarning0, "F<22T4?>Vl", true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[5Xf");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "RF,DkyLJQ72x/", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("scanFieldFloatArray", hashMap0);
      Spliterator<Throwable> spliterator0 = sQLClientInfoException0.spliterator();
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(spliterator0, "LIKE", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path LIKE
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem((JSONPath) null, (Object) null, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_WildCardSegment0, "r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      JSONPath.remove((Object) bigDecimal0, "IN");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("`");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath0, "`");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("java", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("N[]Uja8)ks+qi");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) parserConfig0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(41, false);
      JSONPath jSONPath0 = new JSONPath("$U", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("-", "-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1889, 1889, (-1113));
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) jSONPath_RangeSegment0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MultiIndexSegment", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("N[]Uja8)ks+qi");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("value not found in path ");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : value not found in path 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("HtBc[+},sieL>.");
      jSONPath0.init();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("n:4u5s0pnJ");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("B(15Kfs[+4", (SerializeConfig) null, parserConfig0);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[5Xf");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("N[]Uja8)ks+qi");
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("fQNk:i#:!Z!k@(.", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(aSMDeserializerFactory0, 62);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract("-E:", "ZetZoLTXA4iwb", parserConfig0, 128, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // float
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        JSONPath.extract("F<22T4?>Vl", "getFieldValue error.", parserConfig0, 122, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2F<22T4?>Vl
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("SortFeidFastMatch", "l.6,+R0=LwG");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "/fields");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("+", "+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -5
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("N[]Uj98)ks<ri");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*", parserConfig0, 3940);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("g", (SerializeConfig) null, parserConfig0);
      Integer integer0 = new Integer(2);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("zWSsy5s'ZuWG$#}M", serializeConfig0, parserConfig0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("LIKE");
      sQLWarning0.setNextException(sQLTimeoutException0);
      SerializeConfig serializeConfig0 = new SerializeConfig(5, false);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9", serializeConfig0, ParserConfig.global);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // evalKeySet error : /stackTrace/9
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) class0, "LE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Long long0 = Long.getLong("Nn]Uja8)ks+qi", (long) 1316);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(long0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("fx3", (-3156));
      JSONPath jSONPath0 = new JSONPath("!`90");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "g-N}].", (-3156), hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(pattern0, "fx3", 99999999, sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.regex.Pattern
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Double double0 = new Double(10000.0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/stackTrace/10", "&p{x\"^^s ](0%<");
      jSONPath0.deepSet(double0, "unzip bytes error.", (-509886432100261441L), sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: /stackTrace/10", sQLTransientConnectionException0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/defaultDomain/codesource");
      HashSet<Float> hashSet0 = new HashSet<Float>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(hashSet0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("/asmFactory/classLoader/defaultDomain/codesource", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/defaultDomain/codesource");
      HashSet<Float> hashSet0 = new HashSet<Float>();
      Float float0 = new Float((-752.798838173));
      hashSet0.add(float0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>(hashSet0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(linkedList0, linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("unzip bytes error.");
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10", serializeConfig0, (ParserConfig) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("unzip bytes error.", "com.alibaba.fastjson.JSONPath$FilterGroup", sQLSyntaxErrorException0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLTransientException0, vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("illegal str, ");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("g lfkxh[z|?{", "g lfkxh[z|?{", 2967);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", " error, value : ");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) sQLTransactionRollbackException0, (Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("N[]Uja8)ks+qi");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "N[]Uja8)ks+qi", (Object) "N[]Uja8)ks+qi");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = JSONPath.reserveToArray("LIKE", (String[]) null);
      JSONPath jSONPath0 = JSONPath.compile("%S>Yk@QWOkS;~-");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("LIKE", true);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) jSONPath_PropertySegment0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. %S>Yk@QWOkS;~-
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.Feature");
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) javaBeanSerializer0, "WriteNonStringValueAsString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "com.google.common.collect.LinkedListMultimap", "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) "N[]Uja8)ks+qi", "N[]Uja8)ks+qi");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("N[]Uja8)ks+qi", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) parserConfig0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("JSONPath$PropertySegment", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare("h_[.*j7;P1i", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONPath jSONPath0 = JSONPath.compile("N[]Uja8)ks+qi");
      Integer integer0 = new Integer((-1019));
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) integer0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "", "[-Gs{DTaw@:", (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("GTZ}wys)PI-=@");
      SQLWarning sQLWarning0 = new SQLWarning("GTZ}wys)PI-=@");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.JSONPath$FilterSegment", "GTZ}wys)PI-=@", sQLWarning0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLSyntaxErrorException0, "stringDefaultValue", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1181);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("}-P8Js)", serializeConfig0, parserConfig0);
      Integer integer0 = new Integer(1181);
      jSONPath0.deepSet(integer0, "B8_:CN65xhxre7r", 9140390920032557669L, "passHandle");
      assertEquals("}-P8Js)", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("z]KY.^HV&P.~FV8");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "z]KY.^HV&P.~FV8", 1997);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^L3");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath0, 34, "scan");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^c4>3");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeSupport", false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeAccept", 0);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLTransactionRollbackException0, "^c4>3");
      assertEquals("fastjson.parser.autoTypeAccept", sQLTransactionRollbackException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("jBD5Db@b", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, parserConfig0, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":1mpqn|puBRo1 g\n");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1mpqn|puBRo1 g
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[5Xf");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Z");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      Byte byte0 = new Byte((byte)2);
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) byte0, true);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.PascalNameFilter");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(132);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_ArrayAccessSegment0, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      boolean boolean0 = jSONPath0.set((Object) "/stackTrace/8", (Object) null, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("TreeSet", 98);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("TreeSet", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("EQ");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) jSONPath_RegMatchSegement0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LI^KE");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("LI^KE");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLTransactionRollbackException0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("hOk#");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("`");
      int[] intArray0 = new int[8];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_MultiIndexSegment0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$MultiIndexSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath jSONPath0 = JSONPath.compile("D_JUSTge\"bp:fY781");
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("@EGuVzY6x8uiNim`C");
      SQLDataException sQLDataException0 = new SQLDataException("Y2SGb612", "@EGuVzY6x8uiNim`C");
      jSONPath0.arrayAdd((Object) sQLDataException0, (Object[]) null);
      assertEquals(0, sQLDataException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NOT_IN");
      String[] stringArray0 = new String[0];
      jSONPath0.arrayAdd((Object) "NOT_IN", (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntInSegement");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[hP[A(~A");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[hP[A(~A
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NE");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[5Xf");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("RF,DkyLJQ72x/");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("z]KY.^HV&P.~FV8");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("W(bd:H(JM\"-ih'H");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : z]KY.^HV&P.~FV8
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[5Xf");
      Object object0 = jSONPath0.eval((Object) "[5Xf");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nsA}=SiX");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "nsA}=SiX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : nsA}=SiX
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("g lfkxh[z|?{", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$PropertySegment", true);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, "g lfkxh[z|?{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.deny.internal", "fastjson.parser.deny.internal");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(5);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath(".", serializeConfig0, ParserConfig.global);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLWarning
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("N0-)~s[hSvxj(Im ^m+", "evalKeySet error : ", (ParserConfig) null, 3534, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(671, true, true, 671, (-980));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "stackTrace";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(dataTruncation0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Double double0 = new Double(978.7683400537765);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "stackTrace";
      stringArray0[1] = "/stackTrace/7";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(double0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "LIKE";
      stringArray0[1] = "LIKE";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      Object object0 = JSONPath.reserveToObject(jSONPath_MultiIndexSegment0, (String[]) null);
      assertSame(object0, jSONPath_MultiIndexSegment0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "false";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("false", stringArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_SizeSegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(",,3");
      LocalDate localDate0 = MockLocalDate.now();
      Set<?> set0 = jSONPath0.evalKeySet(localDate0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1889, 57, 1889);
      JSONPath jSONPath0 = JSONPath.compile("-");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      DataTruncation dataTruncation0 = new DataTruncation(65, false, false, (-1721832083), 57);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, bigDecimal0, dataTruncation0);
      Set<?> set0 = JSONPath.keySet(object0, "valueOf");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SerializeConfig serializeConfig0 = new SerializeConfig(11);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("AQEQ", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.evalKeySet(hashMap0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("B[`d.+");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      Short short0 = new Short((short) (-27008));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, short0, bigDecimal0);
      int int0 = jSONPath0.evalSize(object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = JSONPath.compile("_ilV+MKS'$;am>");
      boolean boolean0 = jSONPath0.removePropertyValue("scan null error", "Gc;3'h~L", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(sQLDataException0, "stackTrace", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.sql.SQLDataException#stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[-Gs{DTaw@:");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("andDecrement", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("EQ", hashMap0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLClientInfoException0, "v", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[-Gs{DTaw@:");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(52, 52, 174);
      Map<String, Object> map0 = JSONPath.paths((Object) mockGregorianCalendar0);
      boolean boolean0 = jSONPath0.setPropertyValue(map0, "VS\"|.EMhz&T[+;93_'(", 52, (Object) null);
      assertEquals(2, map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T>4m1dv`;7wda5x^@", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)88);
      jSONPath0.deepSet((Object) null, "scan null error", 8963398325558730460L, short0);
      assertEquals("T>4m1dv`;7wda5x^@", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(1073, false);
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_FilterSegment0, serializeConfig0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      boolean boolean0 = jSONPath0.contains((Object) map0);
      assertFalse(boolean0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Double double0 = new Double(1534);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Double double0 = new Double(1.0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(double0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Float float0 = new Float((double) (-809L));
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(5614464919154503228L, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Short short0 = new Short((byte)0);
      boolean boolean0 = JSONPath.eq(byte0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Long long0 = new Long((-1269L));
      Double double0 = new Double((-811277319855450459L));
      boolean boolean0 = JSONPath.eqNotNull(long0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(3089, 989);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Long long0 = new Long(347L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Double double0 = new Double(978.8350920644356);
      Short short0 = new Short((short)258);
      boolean boolean0 = JSONPath.eq(double0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(91, 4, 4);
      BigDecimal bigDecimal0 = new BigDecimal(184);
      boolean boolean0 = JSONPath.eq(bigDecimal0, mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("N[]Uja8)ks+qi", "J`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("andDecrement", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("false", hashMap0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, "false", sQLClientInfoException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/defaultDomain/codesource");
      HashSet<Float> hashSet0 = new HashSet<Float>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(hashSet0);
      jSONPath0.deepGetPropertyValues(linkedList0, linkedList0);
      assertFalse(linkedList0.contains("/asmFactory/classLoader/defaultDomain/codesource"));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("andDecrement");
      Integer integer0 = new Integer((-634));
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, integer0, hashMap0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("1.2.68");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("@H-<=_V(U/[Mt", "/stackTrace/8", (-218));
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("F<22T4?>Vl", false);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransientConnectionException0, (Object) jSONPath_PropertySegment0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(101, 1889, 101);
      JSONPath jSONPath0 = JSONPath.compile("-");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
      Set<?> set0 = JSONPath.keySet(object0, "-");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "g lfkxh[z|?{";
      stringArray0[1] = "g lfkxh[z|?{";
      stringArray0[2] = "g lfkxh[z|?{";
      stringArray0[3] = "g lfkxh[z|?{";
      stringArray0[4] = "g lfkxh[z|?{";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("g lfkxh[z|?{", "g lfkxh[z|?{", "g lfkxh[z|?{", stringArray0, false);
      Double double0 = new Double(1.0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("N-VWbxZd%\"\"jnPoV-", double0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_ValueSegment0, false);
      JSONPath jSONPath0 = new JSONPath("g lfkxh[z|?{");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("deserialzeArrayMapping", "g lfkxh[z|?{", 46);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, jSONPath0, sQLNonTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, false);
      Long long0 = new Long(1L);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("WcNTK{#\t", "kHV", false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("N-VWbxZd%\"\"jnPoV-", "/cause/stackTrace/9", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(", but '", "qwC", 0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("LIKE", false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLNonTransientConnectionException0, sQLFeatureNotSupportedException0, jSONPath_PropertySegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      JSONPath jSONPath0 = new JSONPath("Wrg.joda.ti.UTCDateTimeZ(e");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("VN_]c@JH&[3YPN{/&q$", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RefOpSegement0, jSONPath_RefOpSegement0, true);
      Long long0 = new Long((-3179L));
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "Wrg.joda.ti.UTCDateTimeZ(e", long0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("writeReference", "4@R30", (-2085));
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("com.alibaba.fastjson.serializer.ObjectArrayCodec");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = new JSONPath("writeReference");
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, uUID0, sQLWarning0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("FX)651,~*lK");
      JSONPath jSONPath0 = new JSONPath("orl.");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("end must greater than or equals start. start ", 46, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLFeatureNotSupportedException0);
      SQLWarning sQLWarning0 = new SQLWarning("", "yLyy\u5E74M\u6708d\u65E5[HU:mm:ss", 115);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, batchUpdateException0, sQLWarning0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath(":", serializeConfig0, parserConfig0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, ":", serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("I=Sw0", "I=Sw0", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath jSONPath1 = (JSONPath)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$PropertySegment", jSONPath1.getPath());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("in");
      JSONPath jSONPath0 = JSONPath.compile("X");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("not");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_NullSegement0, sQLTransientConnectionException0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      String[] stringArray0 = new String[3];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(javaBeanSerializer0, "com.alibaba.fastjson.JSONPath$PropertySegment", jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("1.2.68", 1685L, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("1.2.68");
      SQLWarning sQLWarning0 = new SQLWarning();
      DataTruncation dataTruncation0 = new DataTruncation(62, true, true, 62, 40);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLWarning0, dataTruncation0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[5Xf");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      UUID uUID0 = MockUUID.fromString("[5Xf");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, uUID0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeSupport", jSONPath_Operator0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3464, 1889, 3596);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, mockGregorianCalendar0, aSMDeserializerFactory0, "-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("GT");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.asm.Type", "GT", jSONPath_Operator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.alibaba.fastjson.asm.Type");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, sQLTimeoutException0, "GT", "com.alibaba.fastjson.asm.Type");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/stackTrace/7", "/stackTrace/7", jSONPath_Operator0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, jSONPath_Operator0, classLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("g", "g", true);
      JSONPath jSONPath0 = new JSONPath("/yU`M6`m3pqk<WO?_");
      BigInteger bigInteger0 = BigInteger.ONE;
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, bigInteger0, jSONPath_MultiIndexSegment0, "g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Ve.SP6iB:fZ[oP^Rt";
      stringArray0[1] = "joda";
      stringArray0[2] = "Ve.SP6iB:fZ[oP^Rt";
      stringArray0[3] = "Ve.SP6iB:fZ[oP^Rt";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("Ve.SP6iB:fZ[oP^Rt", "joda", "joda", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      JSONPath jSONPath0 = JSONPath.compile("Ve.SP6iB:fZ[oP^Rt");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "Ve.SP6iB:fZ[oP^Rt", "Ve.SP6iB:fZ[oP^Rt");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("(Ljava/util/Collection;)V", "fastjson.parser.autoTypeAccept", "LIKE", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement(", segement ", "joda", (String) null, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("{@Pq ?oMwz,8&u", (String) null, "{@Pq ?oMwz,8&u", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(";-Q4");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("com.alibaba.fastjson.JSONPath$WildCardSegment", jSONPath_KeySetSegment0, jSONPath_Operator0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("N", true);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_PropertySegment0, (Object) null, "com.alibaba.fastjson.JSONPath$WildCardSegment");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 100000.0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, jSONPath_Operator0, jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/defaultConstructor");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("l", (-5808509594153896547L), jSONPath_Operator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("l");
      SQLTransientException sQLTransientException0 = new SQLTransientException("rlike", "l", 32);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, sQLTransientException0, sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "N0-)~s[hSvxj(Im ^m+";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("N0-)~s[hSvxj(Im ^m+", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("N0-)~s[hSvxj(Im ^m+");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "N0-)~s[hSvxj(Im ^m+", "N0-)~s[hSvxj(Im ^m+", "N0-)~s[hSvxj(Im ^m+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("FX)651,~*lK");
      String[] stringArray0 = new String[2];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("<init>", stringArray0, true);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("FX)651,~*lK", ",_q~|i{1-Lo");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath_WildCardSegment0, sQLInvalidAuthorizationSpecException0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(6607618197526598121L);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("9lT]yQ|", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("9lT]yQ|");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, long0, (Object) null, longArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(464L);
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("Ikzg]iEJD,,hy!>", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("Ikzg]iEJD,,hy!>");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath0, longArray0[1], "B[`d.+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("76`jN)f*+WpnO", 6607618197526598121L, (-1718L), false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("76`jN)f*+WpnO", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeAccept", "/stackTrace/9", 1224736769);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, serializeConfig0, sQLDataException0, "/stackTrace/9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1534);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("-", (-1014497654951707614L), (-1014497654951707614L), true);
      JSONPath jSONPath0 = new JSONPath("8Tqxq=XQIh{<J6");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte)0, 90, 90);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("`E;e", "5rpHN<Mz", 93);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, sQLRecoverableException0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "-", arrayList0, arrayList0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[-Gs{DTaw@:");
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("P_AE7Rl8", longArray0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, "P_AE7Rl8", "P_AE7Rl8", jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("2]A}qN_Ql$[-n71<", jSONPath0, false);
      DataTruncation dataTruncation0 = new DataTruncation((-2429), false, true, (-2429), (-2429));
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, dataTruncation0, "2]A}qN_Ql$[-n71<", "2]A}qN_Ql$[-n71<");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[5Xf");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("NOT_RLIKE", object0, true);
      JSONPath jSONPath0 = JSONPath.compile("0vt?");
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, jSONPath0, "JSONPath", object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment(";:kYtO6H", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("N[]Uja8)ks+qi");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("_6Ay0}");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("N[]Uja8)ks+qi", true);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "N[]Uja8)ks+qi", jSONPath_NullSegement0);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath0, "N[]Uja8)ks+qi", object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", byte0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[-Gs{DTaw@:");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-75), 97, (-75));
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, jSONPath_SizeSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2240), (-2240), 40);
      JSONPath jSONPath0 = JSONPath.compile("Ikzg]iEJD,,hy!>");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "in";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_MultiPropertySegment0, "in");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("/sta*kzrce/0");
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "/sta*kzrce/0", (Object) null);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("(Z(I=(wXz", true);
      JSONPath jSONPath0 = JSONPath.compile("p#");
      SQLDataException sQLDataException0 = new SQLDataException("(Z(I=(wXz");
      jSONPath_PropertySegment0.setValue(jSONPath0, "(Z(I=(wXz", sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[5Xf", "[5Xf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 3, line 1, column 4[5Xf
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("2]A}UqN_Ql$[-n71<", "org.springframework.security.core.authority.SimpleGrantedAuthority");
      Float float0 = new Float(779.5614660932816);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.springframework.security.core.authority.SimpleGrantedAuthority", "2]A}UqN_Ql$[-n71<", 2261, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, sQLSyntaxErrorException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLSyntaxErrorException cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Double double0 = new Double(978.7683400537765);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("stackTrace", "/stackTrace/7");
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, sQLTimeoutException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTimeoutException cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Long long0 = new Long(3571L);
      Double double0 = new Double(3571L);
      int int0 = JSONPath.compare(double0, long0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Long long0 = new Long(989);
      Double double0 = new Double(989);
      int int0 = JSONPath.compare(long0, double0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Long long0 = new Long((-5808556873153909620L));
      // Undeclared exception!
      try { 
        JSONPath.compare("java/lang/Boolean", long0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, sQLTransactionRollbackException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransactionRollbackException cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Long long0 = new Long((-5808556873153909620L));
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, "N[]Uja8)ks+qi");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("f$v\"?V~x:B)dy^/");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, "/stackTrace/10", sQLWarning0);
      assertNotNull(object0);
      
      Object object1 = jSONPath_MinSegment0.eval(jSONPath0, byte0, object0);
      assertEquals("errorCode", object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9", (SerializeConfig) null, parserConfig0);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath_MultiIndexSegment0, bigDecimal0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T>4m1dv`;7wda5x^@", serializeConfig0, parserConfig0);
      Integer integer0 = Integer.valueOf((-1899));
      ArrayList<JSONPath.SizeSegment> arrayList0 = new ArrayList<JSONPath.SizeSegment>();
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      Object object0 = jSONPath_MaxSegment0.eval(jSONPath0, integer0, arrayList0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(":");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("X");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("\"O\" 'e}|[3K6O[/vR.");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"$ref\":\"$\"}");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("'*b\"Z");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?+#CP !s?");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("+#CP !s?", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("n(");
      jSONPath0.init();
      assertEquals("n(", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("can not cast to int, value : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<y!><x7T18rP^`#~M");
      jSONPath_JSONPathParser0.readOp();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!`90");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '`'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":zhI6o>6?:[_=Y");
      jSONPath_JSONPathParser0.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract(",w;", "Mq3/+V0D27");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // between
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("safeMode");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("atU_Qa");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(655701488918567152L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("32+");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(995L);
      assertEquals(1027.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1.2.68");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(1L, object0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"O\" 'e}|[3K6O[/vR.");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/7");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("N[]Uja8)ks+qi", "N[]Uja8)ks+qi");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2N[]Uja8)ks+qi
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("XjaHE>fkY7!G>e)]|+");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("unsupported array put operation. ", "[F>'\"w={jqmUxbciI*l");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 11, line 1, column 12unsupported array put operation. 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@H-i=_(U/[Mt");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 'H'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1073, true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) serializeConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/7");
      SQLWarning sQLWarning0 = new SQLWarning("stackTrace");
      boolean boolean0 = jSONPath0.set((Object) "stackTrace", (Object) sQLWarning0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) jSONPath_SizeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_SizeSegment0, (Object) "com.alibaba.fastjson.JSONPath$PropertySegment");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "*", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("m", false);
      JSONPath jSONPath0 = new JSONPath("&");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = jSONPath0.set((Object) jSONPath_PropertySegment0, (Object) sQLNonTransientConnectionException0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[5Xf");
      SQLWarning sQLWarning0 = new SQLWarning("[5Xf");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPathException");
      boolean boolean0 = jSONPath0.remove((Object) "com.alibaba.fastjson.JSONPathException");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) null, "com.alibaba.fastjson.JSONPath$WildCardSegment");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "scan null error", "`", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$PropertySegment");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.JSONPath$PropertySegment");
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLIntegrityConstraintViolationException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$PropertySegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath.arrayAdd((Object) null, "PoHo4E", (Object[]) stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.TypeReference");
      Set<?> set0 = jSONPath0.keySet((Object) "com.alibaba.fastjson.TypeReference");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("]DZ");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntOpSegement");
      int int0 = jSONPath0.size((Object) "com.alibaba.fastjson.JSONPath$IntOpSegement");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "!`90";
      stringArray0[1] = "!`90";
      stringArray0[2] = "!`90";
      stringArray0[3] = "m'N9'$.i9Cte[K#J_x-";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("[F>'\"w={jqmUxbciI*l", "!`90", "[F>'\"w={jqmUxbciI*l", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("/");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "!`90";
      stringArray1[1] = "!`90";
      stringArray1[2] = "/";
      stringArray1[3] = "m'N9'$.i9Cte[K#J_x-";
      stringArray1[4] = "m'N9'$.i9Cte[K#J_x-";
      stringArray1[5] = "m'N9'$.i9Cte[K#J_x-";
      stringArray1[6] = "ej^?Y#/y'?QH&~";
      stringArray1[7] = "!`90";
      stringArray1[8] = "!`90";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray1);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "m'N9'$.i9Cte[K#J_x-", (Object) null);
      boolean boolean0 = jSONPath0.containsValue((Object) arrayList0, (Object) jSONPath_MatchSegement0);
      assertEquals(9, arrayList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath0 = JSONPath.compile(":");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(30);
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath_ArrayAccessSegment0, (Object) fileSystemHandling0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("F<22T4?>Vl", "^c4>3", 2863);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      JSONPath jSONPath0 = new JSONPath("NE");
      boolean boolean0 = jSONPath0.containsValue((Object) sQLFeatureNotSupportedException0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("5^tpEY*&O", "not", 224);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLIntegrityConstraintViolationException0, (Object) "not");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("java", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(12, 12, (-3067));
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, serializeConfig0, classLoader0);
      assertNotNull(object0);
      
      boolean boolean0 = JSONPath.contains(object0, "fastjson.parser.safeMode");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-378), 46, 2284);
      boolean boolean0 = JSONPath.contains((Object) mockGregorianCalendar0, "y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("stackTrace");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      boolean boolean0 = jSONPath0.contains((Object) sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[-Gs{DTaw@:");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Object object0 = JSONPath.extract("{\"$ref\":\"$\"}", "java.util.List");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/sta*kzrce/0");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%S>Yk@QWOkS;~-");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("%S>Yk@QWOkS;~-");
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_Segment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = new JSONPath("N[]Uja8)ks+qi");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "N[]Uja8)ks+qi", jSONPath_WildCardSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("Ikzg]iEJD,,hy!>", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("Ikzg]iEJD,,hy!>");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath0, longArray0[1], "B[`d.+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("deserializer", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("deserializer");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath0, jSONPath0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      JSONPath jSONPath0 = new JSONPath("WMGzlQ|x=%Sj.oK\"Akj");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("R+^Nm<Hrujw&<VtR", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("R+^Nm<Hrujw&<VtR");
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, "scanLong", "scanLong", pattern0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|2As#");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("|2As#", (-2248.887), jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_DoubleOpSegement0);
      assertSame(jSONPath_DoubleOpSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1534);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("5^tpEY*&O", "com.alibaba.fastjson.JSONPath$PropertySegment", (-1703), hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, byte0, sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("g lfkxh[z|?{", "com.google.common.collect.LinkedListMultimap", (-212));
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      int int0 = JSONPath.size((Object) sQLWarning0, "/stackTrace/10");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_SizeSegment0, stringArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("!0", "!0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2!0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      int int0 = JSONPath.size((Object) jSONPath_Operator0, "com.alibaba.fastjson.JSONPath$Context");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("mark_context");
      String string0 = jSONPath0.getPath();
      assertEquals("mark_context", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("hOk");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1175, 1175, (-86));
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_RangeSegment0, "NE", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path NE
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ahvd", "g", 60);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLIntegrityConstraintViolationException0);
      //  // Unstable assertion: assertEquals(83, map0.size());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      jSONPath0.remove((Object) "like");
  }
}
