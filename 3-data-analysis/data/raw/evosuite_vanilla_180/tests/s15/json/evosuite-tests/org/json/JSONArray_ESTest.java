/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 20:34:42 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.ByteArrayInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.StandardProtocolFamily;
import java.sql.JDBCType;
import java.text.Normalizer;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONArray0.put(0, (Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, 0, 2);
      assertEquals("[[]]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      HashMap<Thread.State, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Thread.State, Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray1 = jSONArray0.put(4032, (Map<?, ?>) hashMap0);
      Object object0 = new Object();
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.put(object0);
      try { 
        jSONArray1.toJSONObject(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONArray0.put(899, (Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[jJKm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 5 [character 6 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONArray0.put(0, (Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getEnum((Class<MultipleGradientPaint.CycleMethod>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Collection<?>) linkedList0);
      try { 
        jSONArray1.getBigInteger(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      HashMap<Thread.State, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Thread.State, Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray1 = jSONArray0.put(4032, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getBigDecimal(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(933, 0L);
      jSONArray0.put(1913, (double) 1913);
      String string0 = jSONArray0.toString();
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.query("");
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery(jSONPointer0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-119);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Number number0 = jSONArray0.optNumber(91, (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Number number0 = jSONArray0.optNumber((-2027), (Number) bigDecimal0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-35);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Number number0 = jSONArray0.optNumber(91, (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(601, (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(60, (-519));
      long long0 = jSONArray0.optLong(60);
      assertEquals((-519L), long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(316.112841687231);
      int int0 = jSONArray1.optInt(0);
      assertEquals(316, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat((-729), (float) (-729));
      assertEquals((-729.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(95, 95);
      float float0 = jSONArray0.optFloat(95);
      assertEquals(95.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(105, (double) (-2882));
      assertEquals((-2882.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-96);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(3879, bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONArray0.optBigInteger((-1577), bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = jSONArray0.optBigDecimal(2052, (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(true);
      int int0 = jSONArray0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      HashMap<Thread.State, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Thread.State, Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray1 = jSONArray0.put(4026, (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONArray1.isNull(4026);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("java.io.StringWriter@0000000002");
      jSONArray0.put(160, 160);
      // Undeclared exception!
      jSONArray0.write((Writer) mockPrintWriter0, 109, 109);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 99, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      HashMap<Thread.State, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Thread.State, Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray1 = jSONArray0.put(4032, (Map<?, ?>) hashMap0);
      jSONArray1.put(4032);
      // Undeclared exception!
      jSONArray0.toList();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONPointer jSONPointer0 = new JSONPointer("/GSSo-@Tk");
      // Undeclared exception!
      try { 
        jSONArray0.query(jSONPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // GSSo-@Tk is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<JSONObject, JDBCType> hashMap0 = new HashMap<JSONObject, JDBCType>();
      JDBCType jDBCType0 = JDBCType.FLOAT;
      hashMap0.putIfAbsent((JSONObject) null, jDBCType0);
      // Undeclared exception!
      try { 
        jSONArray0.put((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(Float.NaN);
      // Undeclared exception!
      try { 
        jSONArray0.put((Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<StandardProtocolFamily, JSONObject> hashMap0 = new HashMap<StandardProtocolFamily, JSONObject>();
      try { 
        jSONArray0.put((-2530), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2530] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONArray0.put((-13), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-13] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      // Undeclared exception!
      jSONArray0.put(1000000, (Collection<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2078), (long) (-2078));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2078] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-289), (-289));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-289] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-369), (-5635.9));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-369] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getEnum((Class<MultipleGradientPaint.CycleMethod>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("].");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2290), (byte)60);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((double) 2040);
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(948, (Map<?, ?>) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray1.write((Writer) stringWriter0, (-918), (-918));
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2, (Map<?, ?>) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, 2, 2);
      assertEquals("[\n    null,\n    null,\n    {}\n  ]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, 2, 2);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(4024, (Object) jSONArray0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONArray0.put(899, (Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = new BigDecimal(1598L);
      JSONArray jSONArray1 = jSONArray0.put(899, (Object) bigDecimal0);
      assertEquals(900, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      try { 
        jSONArray0.put((-2076), object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2076] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.put(0, object0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      HashMap<Thread.State, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Thread.State, Formatter.BigDecimalLayoutForm>();
      jSONArray0.put(4031, (Map<?, ?>) hashMap0);
      String string0 = jSONArray0.optString(4031, "] not found.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(1765, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((double) 2036);
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jSONArray0.optNumber(0, (Number) bigInteger0);
      assertEquals(2036.0, number0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(8448, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      HashMap<Thread.State, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Thread.State, Formatter.BigDecimalLayoutForm>();
      jSONArray0.put(4026, (Map<?, ?>) hashMap0);
      long long0 = jSONArray0.optLong(4026, (long) 4026);
      assertEquals(4026L, long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<DayOfWeek> class0 = DayOfWeek.class;
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      DayOfWeek dayOfWeek1 = jSONArray0.optEnum(class0, 1338, dayOfWeek0);
      assertSame(dayOfWeek1, dayOfWeek0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      HashMap<Thread.State, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Thread.State, Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray1 = jSONArray0.put(4032, (Map<?, ?>) hashMap0);
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.HANUNOO;
      Character.UnicodeScript character_UnicodeScript1 = jSONArray1.optEnum(class0, 4032, character_UnicodeScript0);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(2046, (-114));
      assertEquals((-114), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(99, (float) 99);
      assertEquals(99.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(0, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put(948, (Map<?, ?>) null);
      double double0 = jSONArray1.optDouble(948, (double) 948);
      assertEquals(948.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(948, (Map<?, ?>) null);
      Object object0 = jSONArray0.opt(90);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt(1338);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt((-43));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2040, (float) 2040);
      try { 
        jSONArray0.getBoolean(2040);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2040] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.get(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3, (Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = (JSONObject)jSONArray0.get(3);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(1913, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      jSONArray0.optEnum(class0, (-292));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONArray0.put(0, (Collection<?>) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      jSONArray0.put(755, (Map<?, ?>) hashMap0);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.contains(755));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0);
      List<Object> list0 = jSONArray0.toList();
      assertTrue(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3, (Map<?, ?>) hashMap0);
      String string0 = jSONArray0.toString(3);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      jSONArray0.put(99, (Map<?, ?>) hashMap0);
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(948, (Map<?, ?>) null);
      // Undeclared exception!
      jSONArray1.toString(948);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      
      jSONArray1.put((-1273.285F));
      jSONArray0.toJSONObject(jSONArray1);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-1466.82435241874));
      boolean boolean0 = jSONArray1.similar(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.put(true);
      boolean boolean0 = jSONArray1.similar(jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.similar("[E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2492, (Map<?, ?>) hashMap0);
      jSONArray0.remove(2492);
      assertEquals(2492, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(100);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove((-1));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-295), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-295] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(99, (Map<?, ?>) hashMap0);
      String string0 = jSONArray0.optString(99);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) "java.io.StringWriter@0000000002");
      Long long0 = new Long(0);
      Number number0 = jSONArray1.optNumber(0, (Number) long0);
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = jSONArray0.put(892, (Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Number number0 = jSONArray1.optNumber(892, (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.put((-1490.42371667));
      Number number0 = jSONArray0.optNumber(0);
      assertEquals((-1490.42371667), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(98, 0.0F);
      long long0 = jSONArray1.optLong(98, (long) 98);
      assertEquals(99, jSONArray0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = jSONArray0.put(4, (Collection<?>) linkedList0);
      long long0 = jSONArray1.optLong(4);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      jSONArray0.put(98, (Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray0.optJSONObject(98);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(2571);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray1.optJSONArray(0);
      assertEquals(0, jSONArray2.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(8);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(99, 99);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = jSONArray1.optBigDecimal(99, bigDecimal0);
      assertEquals((short)99, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-1466.82435241874));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertEquals((byte)70, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(1758L);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal((-740), bigDecimal0);
      assertEquals((short)1758, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      JSONArray jSONArray1 = jSONArray0.put(95, (Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 95);
      BigDecimal bigDecimal1 = jSONArray1.optBigDecimal(95, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray0.put(14, 1L);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(14, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = jSONArray0.optBigInteger((-1639), (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONArray1.optBigInteger(0, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      JSONArray jSONArray1 = jSONArray0.put(1811, (Map<?, ?>) hashMap0);
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      try { 
        jSONArray1.getEnum(class0, 1811);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1811] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) "java.io.StringWriter@0000000002");
      int int0 = jSONArray0.optInt(0, 104);
      assertEquals(104, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.put(948, 948);
      int int0 = jSONArray0.optInt(948, (-660));
      assertEquals(948, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put(948, (Map<?, ?>) null);
      int int0 = jSONArray1.optInt(948, (-660));
      assertEquals((-660), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) "java.io.StringWriter@0000000002");
      float float0 = jSONArray1.optFloat(0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0);
      float float0 = jSONArray0.optFloat(0, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(948, (Map<?, ?>) null);
      float float0 = jSONArray1.optFloat(948, (float) 948);
      assertEquals(948.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONArray0.put(0, (Collection<?>) linkedList0);
      double double0 = jSONArray0.optDouble(0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2018, (Map<?, ?>) null);
      jSONArray1.join("java.io.StringWriter@0000000002");
      try { 
        jSONArray1.toString((-1));
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unable to write JSONArray value at index: 1927
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("java.io.StringWriter@0000000002");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.put((Object) "java.io.StringWriter@0000000002");
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(3, 231L);
      assertEquals(4, jSONArray0.length());
      
      long long0 = jSONArray0.getLong(3);
      assertEquals(231L, long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<MultipleGradientPaint.ColorSpaceType, Dialog.ModalityType> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, Dialog.ModalityType>();
      jSONArray0.put(97, (Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getLong(97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[97] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      jSONArray0.put(99, (Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray0.getJSONObject(99);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONArray0.put(95, (Collection<?>) linkedList0);
      try { 
        jSONArray0.getJSONObject(95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[95] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(975, false);
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(104, (double) 104);
      int int0 = jSONArray0.getInt(104);
      assertEquals(104, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      JSONArray jSONArray1 = jSONArray0.put(91, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getInt(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(927, (-3164.4122300724034));
      Number number0 = jSONArray1.getNumber(927);
      assertEquals((-3164.4122300724034), number0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      JSONArray jSONArray1 = jSONArray0.put(99, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getNumber(99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[99] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1913, (double) 1913);
      assertEquals(1914, jSONArray0.length());
      
      float float0 = jSONArray1.getFloat(1913);
      assertEquals(1913.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(4327, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getFloat(704);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[704] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(442, 4009);
      assertEquals(443, jSONArray0.length());
      
      double double0 = jSONArray0.getDouble(442);
      assertEquals(4009.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(60, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getDouble(60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[60] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      jSONArray0.put(95, (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONArray0.optBoolean(95);
      assertEquals(96, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.io.StringWriter@0000000002");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFD;
      linkedList0.offerFirst(normalizer_Form0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.optQuery("");
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.query("|LEsWzaB+Lf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("df{1K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Normalizer.Form, StandardProtocolFamily> hashMap0 = new HashMap<Normalizer.Form, StandardProtocolFamily>();
      JSONArray jSONArray1 = jSONArray0.put(88, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getString(88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[88] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isNull(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) null);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("< 2)E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<JSONObject, JDBCType> hashMap0 = new HashMap<JSONObject, JDBCType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(114);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(99);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray0.getJSONArray(0);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1L);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-7), (float) (-7));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-7] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(55);
      jSONArray0.write((Writer) stringWriter0);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(936);
      assertEquals("", string0);
  }
}
