/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 20:39:07 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.ContextValueFilter;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.PrintStream;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.chrono.JapaneseDate;
import java.time.format.ResolverStyle;
import java.time.temporal.TemporalField;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.UUID;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_Operator0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map1 = JSONPath.paths((Object) map0, serializeConfig0);
      assertNotNull(map1);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(2, map1.size());
      assertFalse(map1.isEmpty());
      assertFalse(map1.equals((Object)map0));
      assertNotSame(map0, map1);
      assertNotSame(map1, map0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.EQ;
      assertSame(jSONPath_Operator1, jSONPath_Operator0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("LRo7qf<Am(^$fVL#yuf");
      assertNotNull(sQLTransientException0);
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: LRo7qf<Am(^$fVL#yuf", sQLTransientException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("LRo7qf<Am(^$fVL#yuf", "LRo7qf<Am(^$fVL#yuf", (Throwable) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: LRo7qf<Am(^$fVL#yuf", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTimeoutException0.getSQLState());
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTimeoutException0.getMessage());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      
      MockDate mockDate0 = new MockDate((-308), (-308), (-308));
      assertNotNull(mockDate0);
      
      JSONPath jSONPath1 = new JSONPath("/stackTrace/10");
      assertNotNull(jSONPath1);
      assertEquals("/stackTrace/10", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      Class<String> class0 = String.class;
      Map<String, String> map2 = ZoneId.SHORT_IDS;
      assertNotNull(map2);
      assertEquals(28, map2.size());
      assertFalse(map2.isEmpty());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map2);
      assertNotNull(javaBeanSerializer0);
      assertEquals(28, map2.size());
      assertFalse(map2.isEmpty());
      
      Byte byte0 = new Byte((byte)114);
      assertNotNull(byte0);
      assertEquals((byte)114, (byte)byte0);
      
      // Undeclared exception!
      try { 
        jSONPath1.set((Object) javaBeanSerializer0, (Object) byte0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
      
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      assertNotNull(jSONPath_OperatorArray0);
      assertEquals(17, jSONPath_OperatorArray0.length);
      
      String string0 = "unsupported set operation.";
      JSONPath jSONPath0 = JSONPath.compile("unsupported set operation.");
      assertNotNull(jSONPath0);
      assertEquals("unsupported set operation.", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) serializeConfig0, serializeConfig0);
      assertNotNull(map0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      SQLTransientException sQLTransientException0 = new SQLTransientException("LRo7qf<Am(^$fVL#yuf");
      assertNotNull(sQLTransientException0);
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: LRo7qf<Am(^$fVL#yuf", sQLTransientException0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "LRo7qf<Am(^$fVL#yuf", sQLTransientException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: LRo7qf<Am(^$fVL#yuf", sQLTransientException0.toString());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      JSONPath jSONPath0 = new JSONPath("BiSc");
      assertNotNull(jSONPath0);
      assertEquals("BiSc", jSONPath0.getPath());
      
      MockDate mockDate0 = new MockDate((-308), (-308), (-308));
      assertNotNull(mockDate0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      SQLDataException sQLDataException0 = new SQLDataException("BiSc", "-luQKZf~S9P7B", 65535, sQLTimeoutException0);
      assertNotNull(sQLDataException0);
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: LRo7qf<Am(^$fVL#yuf", sQLTransientException0.toString());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLDataException: BiSc", sQLDataException0.toString());
      assertEquals(65535, sQLDataException0.getErrorCode());
      assertEquals("BiSc", sQLDataException0.getMessage());
      assertEquals("-luQKZf~S9P7B", sQLDataException0.getSQLState());
      
      // Undeclared exception!
      jSONPath0.set((Object) bigInteger0, (Object) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath jSONPath0 = new JSONPath("]");
      assertNotNull(jSONPath0);
      assertEquals("]", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("]");
      assertNotNull(jSONPath1);
      assertEquals("]", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      SQLWarning sQLWarning0 = new SQLWarning("\t", "dyQ[#*x");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("\t", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: \t", sQLWarning0.toString());
      assertEquals("dyQ[#*x", sQLWarning0.getSQLState());
      
      Throwable[] throwableArray0 = sQLWarning0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("\t", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: \t", sQLWarning0.toString());
      assertEquals("dyQ[#*x", sQLWarning0.getSQLState());
      assertEquals(0, throwableArray0.length);
      
      // Undeclared exception!
      try { 
        jSONPath1.remove((Object) sQLWarning0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "8oS\\u[S`rKMOk&C]0,`";
      JSONPath jSONPath0 = new JSONPath(string0);
      assertNotNull(jSONPath0);
      assertEquals("8oS\\u[S`rKMOk&C]0,`", jSONPath0.getPath());
      
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("wLXo *=E'4Wb@]");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("<gU'i4,$8Hz\"G:!LiE");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser1.buildArraySegement(",");
      assertNotNull(jSONPath_Segment0);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      boolean boolean1 = jSONPath0.removePropertyValue(jSONPath_SizeSegment0, ",", true);
      assertEquals("8oS\\u[S`rKMOk&C]0,`", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackrace/7");
      assertNotNull(jSONPath0);
      assertEquals("/stackrace/7", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("QxkDLh]5qKGP", 5, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      Float float0 = new Float(1000.0F);
      assertNotNull(float0);
      assertEquals(1000.0F, (float)float0, 0.01F);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("stackTrace", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("QxkDLh]5qKGP", "3Fq9", 7);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: QxkDLh]5qKGP", sQLRecoverableException0.toString());
      assertEquals("QxkDLh]5qKGP", sQLRecoverableException0.getMessage());
      assertEquals("3Fq9", sQLRecoverableException0.getSQLState());
      assertEquals(7, sQLRecoverableException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.remove(jSONPath0, sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.sql.SQLRecoverableException#stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" 0XRyWQ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-254670111376247151L));
      assertEquals((-2.54670111376247136E17), double0, 0.01);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      jSONPath_JSONPathParser0.skipWhitespace();
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("16'Jf?AV~u>|T3qz*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~u>|T3qz*", jSONPath0.getPath());
      
      Map<String, Object> map0 = new HashMap<String, Object>();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath jSONPath1 = new JSONPath("y9n)W3fH>0j6r+gQ@J");
      assertNotNull(jSONPath1);
      assertEquals("y9n)W3fH>0j6r+gQ@J", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("t=4FG");
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: t=4FG", sQLRecoverableException0.toString());
      assertEquals("t=4FG", sQLRecoverableException0.getMessage());
      
      Integer integer0 = new Integer(2557);
      assertNotNull(integer0);
      assertEquals(2557, (int)integer0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath1, sQLRecoverableException0, integer0);
      assertNotNull(arrayList0);
      assertEquals("y9n)W3fH>0j6r+gQ@J", jSONPath1.getPath());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: t=4FG", sQLRecoverableException0.toString());
      assertEquals("t=4FG", sQLRecoverableException0.getMessage());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("y9n)W3fH>0j6r+gQ@J");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2557);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONScanner jSONScanner0 = new JSONScanner("*");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Object[] objectArray0 = new Object[6];
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("*"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) treeSet0);
      assertNotNull(list0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(treeSet0.contains("*"));
      assertFalse(list0.contains("*"));
      
      objectArray0[0] = (Object) jSONScanner0;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("*");
      assertNotNull(jSONPath_NullSegement0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      Float float0 = new Float((-301.253));
      assertNotNull(float0);
      assertEquals((-301.253F), (float)float0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONScanner0, stack0);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("*", jSONPath0.getPath());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(1, intArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean3 = jSONPath_NullSegement0.apply(jSONPath0, sQLTransactionRollbackException0, float0, jSONArray0);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("*", jSONPath0.getPath());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, intArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new int[] {0}, intArray0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/asmFactory/classLoader/parent/classLoader/packages/ch.qos.logback.core.pattern", "");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/ch.qos.logback.core.pattern", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /asmFactory/classLoader/parent/classLoader/packages/ch.qos.logback.core.pattern", sQLInvalidAuthorizationSpecException0.toString());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONScanner jSONScanner0 = new JSONScanner("*");
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      Object[] objectArray0 = new Object[6];
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("int"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) treeSet0);
      assertNotNull(list0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(treeSet0.contains("int"));
      assertFalse(list0.contains("int"));
      
      objectArray0[0] = (Object) jSONScanner0;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("*");
      assertNotNull(jSONPath_NullSegement0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      Float float0 = new Float((-301.253));
      assertNotNull(float0);
      assertEquals((-301.253F), (float)float0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONScanner0, stack0);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("*", jSONPath0.getPath());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1, intArray0.length);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean3 = jSONPath_NullSegement0.apply(jSONPath0, sQLTransactionRollbackException0, float0, jSONArray0);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("*", jSONPath0.getPath());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(1, intArray0.length);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new int[] {0}, intArray0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/asmFactory/classLoader/parent/classLoader/packages/ch.qos.logback.core.pattern", "");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /asmFactory/classLoader/parent/classLoader/packages/ch.qos.logback.core.pattern", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/ch.qos.logback.core.pattern", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      boolean boolean4 = jSONPath_NullSegement0.apply(jSONPath0, (Object) null, sQLInvalidAuthorizationSpecException0, "int");
      assertEquals("*", jSONPath0.getPath());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /asmFactory/classLoader/parent/classLoader/packages/ch.qos.logback.core.pattern", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/ch.qos.logback.core.pattern", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      
      String string0 = jSONPath0.getPath();
      assertNotNull(string0);
      assertEquals("*", jSONPath0.getPath());
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/1", "/stackTrace/1");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      SQLTransientException sQLTransientException0 = new SQLTransientException("LRo7qf<Am(^$fVL#yuf");
      assertNotNull(sQLTransientException0);
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: LRo7qf<Am(^$fVL#yuf", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("LRo7qf<Am(^$fVL#yuf", "LRo7qf<Am(^$fVL#yuf", sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLTimeoutException1);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: LRo7qf<Am(^$fVL#yuf", sQLTimeoutException1.toString());
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTimeoutException1.getSQLState());
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/1");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/1", jSONPath0.getPath());
      
      MockDate mockDate0 = new MockDate((-574), 21, (-1055));
      assertNotNull(mockDate0);
      
      boolean boolean1 = jSONPath0.set((Object) sQLTimeoutException0, (Object) null);
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", jSONPath0.getPath());
      assertTrue(boolean1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      boolean boolean2 = JSONPath.eqNotNull(bigInteger0, bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("LRo7qf<Am(^$fVL#yuf", propertyNamingStrategy0, true);
      assertNotNull(jSONPath_ValueSegment0);
      
      Short short0 = new Short((short) (-1799));
      assertNotNull(short0);
      assertEquals((short) (-1799), (short)short0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      PropertyNamingStrategy propertyNamingStrategy1 = parserConfig0.propertyNamingStrategy;
      boolean boolean3 = jSONPath_ValueSegment0.apply(jSONPath0, propertyNamingStrategy0, short0, (Object) null);
      assertEquals("/stackTrace/1", jSONPath0.getPath());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = ")";
      JSONPath jSONPath0 = new JSONPath(")");
      assertNotNull(jSONPath0);
      assertEquals(")", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath(")");
      assertNotNull(jSONPath1);
      assertEquals(")", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Ebx*x\"[>aF,O'", ")");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: Ebx*x\"[>aF,O'", sQLTransientConnectionException0.toString());
      assertEquals("Ebx*x\"[>aF,O'", sQLTransientConnectionException0.getMessage());
      assertEquals(")", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      boolean boolean0 = jSONPath1.containsValue((Object) ")", (Object) "Ebx*x\"[>aF,O'");
      assertEquals(")", jSONPath1.getPath());
      assertFalse(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      String string1 = "!<'v(`=V]7L2S:h:";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!<'v(`=V]7L2S:h:");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pf#b");
      assertFalse(boolean0);
      
      Double double0 = new Double(3545.3955603436643);
      assertNotNull(double0);
      assertEquals(3545.3955603436643, (double)double0, 0.01);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      String string0 = "mFu=Q";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("mFu=Q");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("pf#b");
      assertNotNull(jSONPath0);
      assertEquals("pf#b", jSONPath0.getPath());
      
      boolean boolean1 = JSONPath.eq("mFu=Q", "pf#b");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Long long0 = new Long((-811277319855450459L));
      assertNotNull(long0);
      assertEquals((-811277319855450459L), (long)long0);
      
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : pf#b
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (-1117);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      Float float0 = new Float((float) (-1117));
      assertNotNull(float0);
      assertEquals((-1117.0F), (float)float0, 0.01F);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny", "X", (-1117));
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("fastjson.parser.deny", sQLTransactionRollbackException0.getMessage());
      assertEquals((-1117), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("X", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny", sQLTransactionRollbackException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("runtime", "fastjson.parser.deny", 10, sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals("fastjson.parser.deny", sQLTransactionRollbackException0.getMessage());
      assertEquals((-1117), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("X", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: runtime", sQLTransactionRollbackException1.toString());
      assertEquals("fastjson.parser.deny", sQLTransactionRollbackException1.getSQLState());
      assertEquals(10, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("runtime", sQLTransactionRollbackException1.getMessage());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException1);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("fastjson.parser.deny", sQLTransactionRollbackException0.getMessage());
      assertEquals((-1117), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("X", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: runtime", sQLTransactionRollbackException1.toString());
      assertEquals("fastjson.parser.deny", sQLTransactionRollbackException1.getSQLState());
      assertEquals(10, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("runtime", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: runtime", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException: runtime", sQLNonTransientConnectionException0.toString());
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, sQLNonTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLNonTransientConnectionException cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      int[] intArray0 = new int[2];
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      Float float0 = new Float((float) (-1117));
      assertNotNull(float0);
      assertEquals((-1117.0F), (float)float0, 0.01F);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny", "X", (-1117));
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("fastjson.parser.deny", sQLTransactionRollbackException0.getMessage());
      assertEquals((-1117), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("X", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny", sQLTransactionRollbackException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("runtime", "fastjson.parser.deny", 10, sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals("fastjson.parser.deny", sQLTransactionRollbackException0.getMessage());
      assertEquals((-1117), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("X", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.deny", sQLTransactionRollbackException1.getSQLState());
      assertEquals(10, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: runtime", sQLTransactionRollbackException1.toString());
      assertEquals("runtime", sQLTransactionRollbackException1.getMessage());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException1);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("fastjson.parser.deny", sQLTransactionRollbackException0.getMessage());
      assertEquals((-1117), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("X", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.deny", sQLTransactionRollbackException1.getSQLState());
      assertEquals(10, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: runtime", sQLTransactionRollbackException1.toString());
      assertEquals("runtime", sQLTransactionRollbackException1.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException: runtime", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: runtime", sQLNonTransientConnectionException0.getMessage());
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, sQLNonTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLNonTransientConnectionException cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      int[] intArray0 = new int[2];
      intArray0[1] = (-1117);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-1117)}, intArray0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1117);
      intArray1[1] = (-1117);
      intArray1[2] = (-1117);
      intArray1[3] = (-1117);
      intArray1[4] = (-1117);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment1 = new JSONPath.MultiIndexSegment(intArray1);
      assertNotNull(jSONPath_MultiIndexSegment1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(jSONPath_MultiIndexSegment1.equals((Object)jSONPath_MultiIndexSegment0));
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-1117), (-1117), (-1117), (-1117), (-1117)}, intArray1);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("L.oWBAh%#O5KC/'v<", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, jSONPath_MultiIndexSegment1, parserConfig0);
      assertNotNull(arrayList0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(jSONPath_MultiIndexSegment1.equals((Object)jSONPath_MultiIndexSegment0));
      assertEquals(5, intArray1.length);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(intArray1, intArray0);
      assertNotSame(jSONPath_MultiIndexSegment1, jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {(-1117), (-1117), (-1117), (-1117), (-1117)}, intArray1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.deny");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.deny", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("fastjson.parser.deny", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.autoTypeAccept", "_'uX.l:", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.deny", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("fastjson.parser.deny", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("_'uX.l:", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0.toString());
      
      boolean boolean0 = jSONPath0.set((Object) arrayList0, (Object) sQLInvalidAuthorizationSpecException0, true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.deny", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("fastjson.parser.deny", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("_'uX.l:", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0.toString());
      assertTrue(boolean0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(jSONPath_MultiIndexSegment1.equals((Object)jSONPath_MultiIndexSegment0));
      assertEquals(5, intArray1.length);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(intArray1, intArray0);
      assertNotSame(jSONPath_MultiIndexSegment1, jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {(-1117), (-1117), (-1117), (-1117), (-1117)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "/stackTrace/0";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("]/stackTrace/0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("\t");
      assertNotNull(jSONPath0);
      assertEquals("\t", jSONPath0.getPath());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\t", "]/stackTrace/0");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("]/stackTrace/0", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("\t", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: \t", sQLTransientConnectionException0.toString());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals("]/stackTrace/0", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("\t", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: \t", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: \t", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLTransientConnectionException: \t", sQLNonTransientException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)sQLTransientConnectionException0.initCause(sQLNonTransientException0);
      assertNotNull(sQLTransientConnectionException1);
      assertEquals("]/stackTrace/0", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("\t", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: \t", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: \t", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLTransientConnectionException: \t", sQLNonTransientException0.toString());
      assertEquals("\t", sQLTransientConnectionException1.getMessage());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("]/stackTrace/0", sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: \t", sQLTransientConnectionException1.toString());
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      // Undeclared exception!
      jSONPath0.containsValue((Object) sQLTransientConnectionException0, (Object) "/stackTrace/0");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONScanner jSONScanner0 = new JSONScanner("*");
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Object[] objectArray0 = new Object[6];
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("*"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) treeSet0);
      assertNotNull(list0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(treeSet0.contains("*"));
      assertFalse(list0.contains("*"));
      
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "*";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "*";
      objectArray0[4] = (Object) jSONPath0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("E", "int", 0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("int", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: E", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("E", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      boolean boolean1 = jSONPath0.contains((Object) sQLInvalidAuthorizationSpecException0);
      assertEquals("*", jSONPath0.getPath());
      assertEquals("int", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: E", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("E", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        JSONPath.extract("int", "int");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      assertNotNull(jSONPath0);
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", jSONPath0.getPath());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", "oO");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: /asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", sQLTransientConnectionException0.toString());
      assertEquals("oO", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", sQLTransientConnectionException0.getMessage());
      
      JSONPath jSONPath1 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      assertNotNull(jSONPath1);
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      int int0 = jSONPath0.size((Object) jSONPath1);
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", jSONPath0.getPath());
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", jSONPath1.getPath());
      assertEquals((-1), int0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      assertNotNull(jSONPath0);
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("oO");
      assertNotNull(jSONPath1);
      assertEquals("oO", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      JSONPath jSONPath2 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      assertNotNull(jSONPath2);
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotSame(jSONPath2, jSONPath1);
      assertSame(jSONPath2, jSONPath0);
      
      int int0 = jSONPath0.size((Object) jSONPath2);
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", jSONPath0.getPath());
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", jSONPath2.getPath());
      assertEquals((-1), int0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
      assertSame(jSONPath0, jSONPath2);
      assertNotSame(jSONPath2, jSONPath1);
      assertSame(jSONPath2, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      
      batchUpdateException0.printStackTrace();
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/1", "/stackTrace/1");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/stackTrace/1", sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: /stackTrace/1", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: /stackTrace/1", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      Float float0 = new Float((float) 1815);
      assertNotNull(float0);
      assertEquals(1815.0F, (float)float0, 0.01F);
      
      boolean boolean0 = false;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/1", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      sQLTimeoutException0.printStackTrace();
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      
      SerializeConfig serializeConfig0 = null;
      ParserConfig parserConfig0 = null;
      JSONPath jSONPath0 = new JSONPath("VALUES", (SerializeConfig) null, (ParserConfig) null);
      assertNotNull(jSONPath0);
      assertEquals("VALUES", jSONPath0.getPath());
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(sQLTimeoutException0, "*", 1815, uUID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("parent");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("parent", string0);
      
      JSONPath jSONPath0 = new JSONPath("parent");
      assertNotNull(jSONPath0);
      assertEquals("parent", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNull(jSONPath_Segment0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Object object0 = hashMap0.put("parent", sQLClientInfoException0);
      assertNull(object0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Integer integer0 = new Integer(596);
      assertNotNull(integer0);
      assertEquals(596, (int)integer0);
      
      Integer integer1 = new Integer(596);
      assertNotNull(integer1);
      assertEquals(596, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      int int0 = jSONPath0.evalSize(hashMap0);
      assertEquals("parent", jSONPath0.getPath());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, int0);
      
      jSONPath0.init();
      assertEquals("parent", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[6] = 1792;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("dQyl>c'fjcF");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      assertEquals(PropertyNamingStrategy.PascalCase, propertyNamingStrategy0);
      
      Object object0 = jSONPath0.getPropertyValue(propertyNamingStrategy0, "getCurrent", (-3943L));
      assertNull(object0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONScanner jSONScanner0 = new JSONScanner("0Q:Mg}!5-vjAt8(r9=r");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      assertNotNull(defaultJSONParser0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("int", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("int", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      
      defaultJSONParser0.setDateFomrat(mockSimpleDateFormat0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("int", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      
      JSONPath jSONPath1 = (JSONPath)jSONPath0.getArrayItem(jSONPath0, 0);
      assertNotNull(jSONPath1);
      assertEquals("*", jSONPath0.getPath());
      assertEquals("*", jSONPath1.getPath());
      assertSame(jSONPath0, jSONPath1);
      assertSame(jSONPath1, jSONPath0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Field field0 = ParserConfig.getFieldFromCache("0Q:Mg}!5-vjAt8(r9=r", hashMap0);
      assertNull(field0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6$qBBYPt>*u";
      stringArray0[1] = "*";
      stringArray0[2] = "*";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject((Object) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 6$qBBYPt>*u
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 2093;
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("wL0o *=E'4Wb@]");
      assertNotNull(jSONPath0);
      assertEquals("wL0o *=E'4Wb@]", jSONPath0.getPath());
      
      String string0 = "'[Zu;E}WF9ZT";
      JSONPath jSONPath1 = JSONPath.compile("'[Zu;E}WF9ZT");
      assertNotNull(jSONPath1);
      assertEquals("'[Zu;E}WF9ZT", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath2 = new JSONPath("s#9T}#B]g", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath2);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("s#9T}#B]g", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      jSONPath2.deepSet(aSMClassLoader0, "kT\")rZHJ", (-8070393259084821111L), (Object) null);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("s#9T}#B]g", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      JSONPath jSONPath3 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath3);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath3.getPath());
      assertFalse(jSONPath3.equals((Object)jSONPath1));
      assertFalse(jSONPath3.equals((Object)jSONPath2));
      assertFalse(jSONPath3.equals((Object)jSONPath0));
      assertNotSame(jSONPath3, jSONPath1);
      assertNotSame(jSONPath3, jSONPath2);
      assertNotSame(jSONPath3, jSONPath0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("@1 &MA");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("@1 &MA", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: @1 &MA", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("@1 &MA", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: @1 &MA", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: @1 &MA", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLNonTransientConnectionException: @1 &MA", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      assertNotNull(jSONPath_MinSegment0);
      
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.SafeMode;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportNonPublicField;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableFieldSmartMatch;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSONPath.extract("'[Zu;E}WF9ZT", "fastjson.parser.autoTypeSupport", parserConfig0, 36, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("wL0o *=E'4Wb@]");
      assertNotNull(jSONPath0);
      assertEquals("wL0o *=E'4Wb@]", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("'[Zu;E}WF9ZT");
      assertNotNull(jSONPath1);
      assertEquals("'[Zu;E}WF9ZT", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath2 = new JSONPath("s#9T}#B]g", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath2);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("s#9T}#B]g", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      jSONPath2.deepSet(aSMClassLoader0, "kT\")rZHJ", (-8070393259084821111L), (Object) null);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("s#9T}#B]g", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      JSONPath jSONPath3 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath3);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath3.getPath());
      assertFalse(jSONPath3.equals((Object)jSONPath1));
      assertFalse(jSONPath3.equals((Object)jSONPath2));
      assertFalse(jSONPath3.equals((Object)jSONPath0));
      assertNotSame(jSONPath3, jSONPath1);
      assertNotSame(jSONPath3, jSONPath2);
      assertNotSame(jSONPath3, jSONPath0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) "wL0o *=E'4Wb@]", serializeConfig0);
      assertNotNull(map0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "16'Jf?AV~m>|TJ|z*");
      assertFalse(boolean0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      int int0 = 22;
      Object object0 = jSONPath0.getArrayItem(map0, 22);
      assertNull(object0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      JSONPath jSONPath1 = JSONPath.compile(",KGhTO%NN[");
      assertNotNull(jSONPath1);
      assertEquals(",KGhTO%NN[", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Q|O=", "\"", sQLClientInfoException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("Q|O=", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Q|O=", sQLNonTransientConnectionException0.toString());
      assertEquals("\"", sQLNonTransientConnectionException0.getSQLState());
      
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath1, ",KGhTO%NN[", sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiIndexSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "16'Jf?AV~m>|TJ|z*");
      assertFalse(boolean0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath1 = new JSONPath("16'Jf?AV~m>|TJ|z*", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      boolean boolean1 = JSONPath.remove((Object) null, "i");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      boolean boolean2 = JSONPath.JSONPathParser.isDigitFirst(')');
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("i5 ]246");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("enC5aOhd(7O\"GnhK");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = JSONPath.compile("core");
      assertNotNull(jSONPath0);
      assertEquals("core", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Throwable throwable0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/1", "/stackTrace/1");
      assertNotNull(sQLTimeoutException0);
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "/stackTrace/1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Throwable throwable0 = null;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      batchUpdateException0.printStackTrace();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/1", "/stackTrace/1");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/stackTrace/1", sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("/stackTrace/1", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: /stackTrace/1", sQLIntegrityConstraintViolationException0.toString());
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("/stackTrace/1", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: /stackTrace/1", sQLIntegrityConstraintViolationException0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      
      boolean boolean0 = JSONPath.containsValue((Object) sQLIntegrityConstraintViolationException0, "*", (Object) sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("/stackTrace/1", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: /stackTrace/1", sQLIntegrityConstraintViolationException0.toString());
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("/stackTrace/1"));
      
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "/stackTrace/1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")_");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NOT_RLIKE";
      stringArray0[1] = "ZM`/J{";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(2, stringArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      parserConfig0.setJacksonCompatible(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      SQLDataException sQLDataException0 = new SQLDataException(")_");
      assertNotNull(sQLDataException0);
      assertEquals(")_", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: )_", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, sQLDataException0, "x+FZQ@");
      assertNotNull(arrayList0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertEquals(")_", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: )_", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, stringArray0.length);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      assertNotNull(defaultJSONParser0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      
      // Undeclared exception!
      jSONPath0.setPropertyValue(defaultJSONParser0, "ZM`/J{", 8807520128269719306L, "ZM`/J{");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "=Ph[x;RndfiPhx8Lac=";
      stringArray0[0] = "=Ph[x;RndfiPhx8Lac=";
      stringArray0[1] = "=Ph[x;RndfiPhx8Lac=";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=Ph[x;RndfiPhx8Lac=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("=Ph[x;RndfiPhx8Lac=");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      jSONPath_JSONPathParser1.readOp();
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONScanner jSONScanner0 = new JSONScanner("*");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      Object[] objectArray0 = new Object[6];
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("*"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) treeSet0);
      assertNotNull(list0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(treeSet0.contains("*"));
      assertFalse(list0.contains("*"));
      
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "*";
      objectArray0[2] = (Object) locale0;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) list0, "*", (Object) "G~s+G~~\"]3y.Z}^rl");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("! 0XRyWAQ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1793346306);
      intArray0[1] = 91;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1793346306), 91}, intArray0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/com.thoughtworks.xstream.core");
      assertNotNull(jSONPath1);
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/com.thoughtworks.xstream.core", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      Long long0 = new Long((-2681L));
      assertNotNull(long0);
      assertEquals((-2681L), (long)long0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath1, (Object) long0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("int");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("int", "p>", false);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = new JSONPath("/");
      assertNotNull(jSONPath0);
      assertEquals("/", jSONPath0.getPath());
      
      Integer integer0 = new Integer((-835));
      assertNotNull(integer0);
      assertEquals((-835), (int)integer0);
      
      boolean boolean1 = jSONPath_ValueSegment0.apply(jSONPath0, "/", integer0, jSONPath_JSONPathParser0);
      assertEquals("/", jSONPath0.getPath());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("int");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("int", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: int", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      boolean boolean2 = jSONPath_ValueSegment0.apply(jSONPath0, sQLNonTransientConnectionException0, integer0, sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("/", jSONPath0.getPath());
      assertEquals("int", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: int", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      assertNotNull(jSONPath_NotNullSegement0);
      
      SQLDataException sQLDataException0 = new SQLDataException("ib@R Imn", "nS1$F");
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: ib@R Imn", sQLDataException0.toString());
      assertEquals("nS1$F", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("ib@R Imn", sQLDataException0.getMessage());
      
      boolean boolean3 = jSONPath_NotNullSegement0.apply(jSONPath0, sQLTransactionRollbackException0, "nS1$F", sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("/", jSONPath0.getPath());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = jSONPath0.contains((Object) jSONPath_NotNullSegement0);
      assertEquals("/", jSONPath0.getPath());
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "/stackTrace/1";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      
      batchUpdateException0.printStackTrace();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/1", "/stackTrace/1");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/stackTrace/1", sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: /stackTrace/1", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("/stackTrace/1", sQLIntegrityConstraintViolationException0.getMessage());
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: /stackTrace/1", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("/stackTrace/1", sQLIntegrityConstraintViolationException0.getMessage());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      
      String string1 = "*";
      Float float0 = new Float((float) 1815);
      assertNotNull(float0);
      assertEquals(1815.0F, (float)float0, 0.01F);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("*", false);
      assertNotNull(jSONPath_PropertySegment1);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      
      JSONPath jSONPath0 = new JSONPath("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/stackTrace/1", "MM/dd/yyyy HH:mm:ss", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("MM/dd/yyyy HH:mm:ss", batchUpdateException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: MM/dd/yyyy HH:mm:ss", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("MM/dd/yyyy HH:mm:ss", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLTimeoutException0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(jSONArray0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: MM/dd/yyyy HH:mm:ss", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("MM/dd/yyyy HH:mm:ss", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.size());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals("*", jSONPath0.getPath());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      // Undeclared exception!
      jSONPath_PropertySegment1.setValue(jSONPath0, jSONPath0, jSONPath_FilterSegment0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "/stackTrace/1";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      batchUpdateException0.printStackTrace();
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/1", "/stackTrace/1");
      assertNotNull(sQLTimeoutException0);
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      
      Float float0 = new Float((float) 1815);
      assertNotNull(float0);
      assertEquals(1815.0F, (float)float0, 0.01F);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/1", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("*", true);
      assertNotNull(jSONPath_PropertySegment1);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      
      JSONPath jSONPath0 = new JSONPath("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/stackTrace/1", "/stackTrace/1", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*", batchUpdateException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: *", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("*", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLTimeoutException0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(jSONArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/1", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/1", sQLTimeoutException0.toString());
      assertEquals("*", jSONPath0.getPath());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: *", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("*", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      // Undeclared exception!
      jSONPath_PropertySegment1.setValue(jSONPath0, jSONPath0, jSONPath_FilterSegment0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("null", string0);
      
      JSONPath jSONPath0 = JSONPath.compile("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = jSONPath0.size((Object) "-Eq[k;uu");
      assertEquals("null", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("null", (-1), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      String string1 = "com.alibaba.fastjson.asm.Label";
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "16'Jf?AV~m>|TJ|z*";
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "16'Jf?AV~m>|TJ|z*");
      assertFalse(boolean0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 9;
      intArray0[1] = (-2939);
      intArray0[2] = 20;
      intArray0[3] = 999999;
      intArray0[4] = 1024;
      intArray0[5] = 83;
      intArray0[6] = 65;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {9, (-2939), 20, 999999, 1024, 83, 65}, intArray0);
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "16'Jf?AV~m>|TJ|z*", (Object) null);
      assertNotNull(jSONArray0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(7, jSONArray0.size());
      assertEquals(7, intArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertArrayEquals(new int[] {9, (-2939), 20, 999999, 1024, 83, 65}, intArray0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("16'Jf?AV~m>|TJ|z*"));
      
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(jSONArray0, "16'Jf?AV~m>|TJ|z*", stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".(9lv");
      assertNotNull(jSONPath0);
      assertEquals(".(9lv", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".(9lv");
      assertNotNull(jSONPath_JSONPathParser0);
      
      int int0 = 124;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal(124);
      assertNotNull(bigDecimal0);
      assertEquals((short)124, bigDecimal0.shortValue());
      assertEquals((byte)124, bigDecimal0.byteValue());
      
      Long long0 = new Long(5614464919154503228L);
      assertNotNull(long0);
      assertEquals(5614464919154503228L, (long)long0);
      
      Short short0 = new Short((short)9);
      assertNotNull(short0);
      assertEquals((short)9, (short)short0);
      
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, short0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".(9lv");
      assertNotNull(jSONPath0);
      assertEquals(".(9lv", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".(9lv");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Long long0 = new Long(5614464919154503228L);
      assertNotNull(long0);
      assertEquals(5614464919154503228L, (long)long0);
      
      Short short0 = new Short((short)9);
      assertNotNull(short0);
      assertEquals((short)9, (short)short0);
      
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, short0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")_");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NOT_RLIKE";
      stringArray0[1] = "ZM`/J{";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("NOT_RLIKE", ")_", 2171);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("NOT_RLIKE", sQLTransactionRollbackException0.getMessage());
      assertEquals(2171, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(")_", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: NOT_RLIKE", sQLTransactionRollbackException0.toString());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("3lp]G;*u;AC", (SerializeConfig) null, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("3lp]G;*u;AC", jSONPath0.getPath());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath jSONPath1 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath1);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath1.getPath());
      assertSame(jSONPath1, jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(18, 18, 18);
      assertNotNull(jSONPath_RangeSegment0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("*");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("*", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: *", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("*", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: *", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: *", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: *", sQLSyntaxErrorException0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("*", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: *", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: *", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: *", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: *", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: *", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("*", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: *", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: *", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: *", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: *", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: *", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNotNull(string0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("*", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: *", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: *", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: *", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: *", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: *", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: *", string0);
      
      String string1 = "/stackTrace/2";
      String string2 = "com.google.common.collect.LinkedHashMultimap";
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.google.common.collect.LinkedHashMultimap", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) jSONPath_PropertySegment0, "[int", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'X.6=]+sC");
      assertFalse(boolean0);
      
      String string0 = ",  end ";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",  end ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      String string1 = ";";
      JSONPath jSONPath0 = new JSONPath(";");
      assertNotNull(jSONPath0);
      assertEquals(";", jSONPath0.getPath());
      
      String string2 = "/cause/stackTrace/4";
      Set<?> set0 = JSONPath.keySet((Object) ",  end ", "/cause/stackTrace/4");
      assertNull(set0);
      
      String string3 = jSONPath0.getPath();
      assertNotNull(string3);
      assertEquals(";", jSONPath0.getPath());
      assertEquals(";", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",  end ");
      assertNotNull(defaultJSONParser0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      
      JSONPath jSONPath1 = JSONPath.compile("/cause/stackTrace/4");
      assertNotNull(jSONPath1);
      assertEquals("/cause/stackTrace/4", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2,  end 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONScanner jSONScanner0 = new JSONScanner("*");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      
      Object[] objectArray0 = new Object[6];
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("*"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) treeSet0);
      assertNotNull(list0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(treeSet0.contains("*"));
      assertFalse(list0.contains("*"));
      
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "*";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "*";
      objectArray0[4] = (Object) jSONPath0;
      objectArray0[5] = (Object) "*";
      jSONPath0.arrayAdd((Object) locale0, objectArray0);
      assertEquals("*", jSONPath0.getPath());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      String string0 = "0Q:Mg}!5-vjAt8(r9=r";
      JSONScanner jSONScanner0 = new JSONScanner("0Q:Mg}!5-vjAt8(r9=r");
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      assertNotNull(defaultJSONParser0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("int", jSONScanner0.tokenName());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("int", jSONScanner0.tokenName());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toPattern());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      
      defaultJSONParser0.setDateFomrat(mockSimpleDateFormat0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("int", jSONScanner0.tokenName());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toPattern());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "*";
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      String string1 = "0Q:Mg}!5-vjAt8(r9=r";
      JSONScanner jSONScanner0 = new JSONScanner("0Q:Mg}!5-vjAt8(r9=r");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      assertNotNull(defaultJSONParser0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("int", jSONScanner0.tokenName());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("int", jSONScanner0.tokenName());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      
      defaultJSONParser0.setDateFomrat(mockSimpleDateFormat0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("int", jSONScanner0.tokenName());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      String string0 = "dvQyl>4c'cF";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?),j8PN:Gl(");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but ')'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?),j8PN:Gl(");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but ')'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      
      batchUpdateException0.printStackTrace();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("step must greater than zero : ", "step must greater than zero : ", 1815, batchUpdateException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: step must greater than zero : ", sQLTimeoutException0.toString());
      assertEquals("step must greater than zero : ", sQLTimeoutException0.getSQLState());
      assertEquals("step must greater than zero : ", sQLTimeoutException0.getMessage());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: step must greater than zero : ", sQLTimeoutException0.toString());
      assertEquals("step must greater than zero : ", sQLTimeoutException0.getSQLState());
      assertEquals("step must greater than zero : ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: step must greater than zero : ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: step must greater than zero : ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNotNull(string0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: step must greater than zero : ", sQLTimeoutException0.toString());
      assertEquals("step must greater than zero : ", sQLTimeoutException0.getSQLState());
      assertEquals("step must greater than zero : ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: step must greater than zero : ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: step must greater than zero : ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: step must greater than zero : ", string0);
      
      boolean boolean1 = JSONPath.containsValue((Object) sQLIntegrityConstraintViolationException0, "/stackTrace/2", (Object) sQLIntegrityConstraintViolationException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: step must greater than zero : ", sQLTimeoutException0.toString());
      assertEquals("step must greater than zero : ", sQLTimeoutException0.getSQLState());
      assertEquals("step must greater than zero : ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: step must greater than zero : ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: step must greater than zero : ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/2");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/2", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/2");
      assertNotNull(jSONPath1);
      assertEquals("/stackTrace/2", jSONPath1.getPath());
      assertSame(jSONPath1, jSONPath0);
      
      jSONPath0.init();
      assertEquals("/stackTrace/2", jSONPath0.getPath());
      assertSame(jSONPath0, jSONPath1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("step must greater than zero : ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      int int0 = JSONPath.size((Object) "/stackTrace/11", "/stackTrace/2");
      assertEquals((-1), int0);
      
      SQLDataException sQLDataException0 = new SQLDataException("/stackTrace/11");
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("/stackTrace/11", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: /stackTrace/11", sQLDataException0.toString());
      
      Set<?> set0 = jSONPath0.keySet((Object) sQLDataException0);
      assertNotNull(set0);
      assertEquals("/stackTrace/2", jSONPath0.getPath());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("/stackTrace/11", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: /stackTrace/11", sQLDataException0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(5, set0.size());
      assertFalse(set0.contains("/stackTrace/2"));
      assertSame(jSONPath0, jSONPath1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "16'Jf?AV~m>|TJ|z*";
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("16'Jf?AV~m>|TJ|z*"));
      
      jSONPath0.deepScan(map0, "16'Jf?AV~m>|TJ|z*", arrayList0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("16'Jf?AV~m>|TJ|z*"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Collection<Object> collection0 = jSONPath0.getPropertyValues(arrayList0);
      assertNotNull(collection0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(object0));
      assertFalse(collection0.contains(object0));
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertTrue(boolean0);
      
      String string1 = "EQ";
      boolean boolean1 = false;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment(string1, jSONPath0, boolean1);
      assertNotNull(jSONPath_ValueSegment0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      
      int int0 = (-3117);
      int int1 = 116;
      int int2 = 973;
      MockDate mockDate0 = new MockDate(int0, int0, int1, int1, int1, int2);
      assertNotNull(mockDate0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = jSONPath_ValueSegment0.apply(jSONPath0, mockDate0, arrayList0, jSONPath_MultiPropertySegment0);
      assertEquals("Fri Jul 29 22:12:13 GMT 1478", mockDate0.toString());
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(object0));
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, stringArray0.length);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map1 = JSONPath.paths((Object) mockDate0, serializeConfig0);
      assertNotNull(map1);
      assertEquals("Fri Jul 29 22:12:13 GMT 1478", mockDate0.toString());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertFalse(map1.equals((Object)map0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackrace/7");
      assertNotNull(jSONPath0);
      assertEquals("/stackrace/7", jSONPath0.getPath());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[2] = 1815;
      intArray0[3] = 1815;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Set<?> set0 = jSONPath0.evalKeySet("/stackrace/7");
      assertNotNull(set0);
      assertEquals("/stackrace/7", jSONPath0.getPath());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("/stackrace/7"));
      
      Object object0 = jSONPath0.getArrayItem((Object) null, 1872);
      assertNull(object0);
      assertEquals("/stackrace/7", jSONPath0.getPath());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Collection<Object> collection0 = jSONPath0.getPropertyValues(set0);
      assertNotNull(collection0);
      assertEquals("/stackrace/7", jSONPath0.getPath());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("/stackrace/7"));
      assertFalse(collection0.contains("/stackrace/7"));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("UseISO8601DateFormat");
      assertNotNull(jSONPath0);
      assertEquals("UseISO8601DateFormat", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.runtime.javaee.db");
      assertNotNull(jSONPath1);
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.runtime.javaee.db", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      JSONPath jSONPath2 = new JSONPath("Tv[-m(>kt>!%%(J5JN");
      assertNotNull(jSONPath2);
      assertEquals("Tv[-m(>kt>!%%(J5JN", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      
      jSONPath1.init();
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.runtime.javaee.db", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath1.equals((Object)jSONPath2));
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath1, jSONPath2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" 0XRyWQ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-254670111376247151L));
      assertEquals((-2.54670111376247136E17), double0, 0.01);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      jSONPath_JSONPathParser0.skipWhitespace();
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      
      String string0 = jSONPath_JSONPathParser1.readName();
      assertNotNull(string0);
      assertEquals("fastjson", string0);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser1.skipWhitespace();
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Long long0 = new Long((-1014497654951707614L));
      assertNotNull(long0);
      assertEquals((-1014497654951707614L), (long)long0);
      
      Long long1 = new Long(1317L);
      assertNotNull(long1);
      assertEquals(1317L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((-1619728521L));
      assertNotNull(long2);
      assertEquals((-1619728521L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long2;
      longArray0[1] = long1;
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('R');
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("illOgal j[eY  ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/cause/stackTrace/4");
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = new JSONPath("<gU'i4,$8Hz\"G:!LiE", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("<gU'i4,$8Hz\"G:!LiE", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("b?0iR5v[<K~}e'((", "`bT(Q~/Swk\"", "UseISO8601DateFormat", (String[]) null, false);
      assertNotNull(jSONPath_MatchSegement0);
      
      Double double0 = new Double(2093);
      assertNotNull(double0);
      assertEquals(2093.0, (double)double0, 0.01);
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertNotNull(throwableDeserializer0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      boolean boolean1 = jSONPath_MatchSegement0.apply(jSONPath0, double0, throwableDeserializer0, "UseISO8601DateFormat");
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("<gU'i4,$8Hz\"G:!LiE", jSONPath0.getPath());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONScanner jSONScanner0 = new JSONScanner("*");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("*"));
      
      int int0 = jSONPath0.evalSize(stack0);
      assertEquals("*", jSONPath0.getPath());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, int0);
      
      Float float0 = new Float((-404.0F));
      assertNotNull(float0);
      assertEquals((-404.0F), (float)float0, 0.01F);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      JSONPath jSONPath0 = JSONPath.compile("parent");
      assertNotNull(jSONPath0);
      assertEquals("parent", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(80);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_ArrayAccessSegment0, (String[]) null);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("parent", "pZ>", 2473, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: parent", sQLRecoverableException0.toString());
      assertEquals("pZ>", sQLRecoverableException0.getSQLState());
      assertEquals(2473, sQLRecoverableException0.getErrorCode());
      assertEquals("parent", sQLRecoverableException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLRecoverableException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: parent", sQLRecoverableException0.toString());
      assertEquals("pZ>", sQLRecoverableException0.getSQLState());
      assertEquals(2473, sQLRecoverableException0.getErrorCode());
      assertEquals("parent", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: parent", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLRecoverableException: parent", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTimeoutException0, serializeConfig0);
      assertNotNull(map0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: parent", sQLRecoverableException0.toString());
      assertEquals("pZ>", sQLRecoverableException0.getSQLState());
      assertEquals(2473, sQLRecoverableException0.getErrorCode());
      assertEquals("parent", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: parent", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLRecoverableException: parent", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(map0.isEmpty());
      assertEquals(252, map0.size());
      
      int int0 = jSONPath0.size((Object) jSONArray0);
      assertEquals("parent", jSONPath0.getPath());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, int0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = new Double(3545.938429971137);
      assertNotNull(double0);
      assertEquals(3545.938429971137, (double)double0, 0.01);
      
      Long long0 = new Long(3089L);
      assertNotNull(long0);
      assertEquals(3089L, (long)long0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, jSONPath_WildCardSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$WildCardSegment cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Double double0 = new Double(3545.3955603436643);
      assertNotNull(double0);
      assertEquals(3545.3955603436643, (double)double0, 0.01);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, jSONPath_WildCardSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$WildCardSegment cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "16'Jf?AV~m>|TJ|z*";
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "16'Jf?AV~m>|TJ|z*");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath jSONPath1 = new JSONPath("c;");
      assertNotNull(jSONPath1);
      assertEquals("c;", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      Set<?> set0 = JSONPath.keySet((Object) locale0, ";");
      assertNotNull(set0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(set0.contains("c;"));
      assertSame(locale0, locale1);
      
      String string1 = jSONPath1.getPath();
      assertNotNull(string1);
      assertEquals("c;", jSONPath1.getPath());
      assertEquals("c;", string1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(jSONPath1, jSONPath0);
      
      Float float0 = new Float((-2994.58F));
      assertNotNull(float0);
      assertEquals((-2994.58F), (float)float0, 0.01F);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("16'Jf?AV~m>|TJ|z*");
      assertNotNull(defaultJSONParser0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      
      JSONPath jSONPath2 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath2);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotSame(jSONPath2, jSONPath1);
      assertSame(jSONPath2, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath2.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "rY.x.q~pi0pzx~xxIbD";
      JSONPath jSONPath0 = new JSONPath("rY.x.q~pi0pzx~xxIbD");
      assertNotNull(jSONPath0);
      assertEquals("rY.x.q~pi0pzx~xxIbD", jSONPath0.getPath());
      
      Locale locale0 = new Locale("rY.x.q~pi0pzx~xxIbD");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ry.x.q~pi0pzx~xxibd", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ry.x.q~pi0pzx~xxibd", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(locale0, (List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path rY.x.q~pi0pzx~xxIbD
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      jSONPath0.deepScan(parserConfig0, "json-path can not be null or empty", arrayList0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertFalse(arrayList0.contains("fastjson.parser.deny.internal"));
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", "O)F- )", 22);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientConnectionException0.getMessage());
      assertEquals("O)F- )", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(22, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjson.parser.autoTypeSupport", sQLNonTransientConnectionException0.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("}W1f]Y", stringArray0);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, stringArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      String string0 = "/cause/stackTrace/0";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("", "/cause/stackTrace/0", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("c_C`");
      assertNotNull(jSONPath0);
      assertEquals("c_C`", jSONPath0.getPath());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/cause/stackTrace/0", "/cause/stackTrace/0");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("/cause/stackTrace/0", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: /cause/stackTrace/0", sQLTransactionRollbackException0.toString());
      assertEquals("/cause/stackTrace/0", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      Short short0 = new Short((short)94);
      assertNotNull(short0);
      assertEquals((short)94, (short)short0);
      
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, sQLTransactionRollbackException0, short0, jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals("c_C`", jSONPath0.getPath());
      assertEquals("/cause/stackTrace/0", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: /cause/stackTrace/0", sQLTransactionRollbackException0.toString());
      assertEquals("/cause/stackTrace/0", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath1 = JSONPath.compile("");
      assertNotNull(jSONPath1);
      assertEquals("", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.And;
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath1, string0, string0);
      assertNull(object0);
      assertEquals("", jSONPath1.getPath());
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath_Operator0, jSONPath_Operator1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(parserConfig0.DENY_PROPERTY);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.deny", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("fastjson.parser.deny", sQLTimeoutException0.getMessage());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      boolean boolean1 = true;
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement(parserConfig0.DENY_PROPERTY, parserConfig0.DENYS_INTERNAL, boolean1);
      assertNotNull(jSONPath_StringInSegement0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(boolean1 == boolean0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        jSONPath_StringInSegement0.apply(jSONPath1, jSONPath1, jSONPath1, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "b\\bY+P7?Gj";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "b\bY+P7?Gj";
      stringArray0[1] = ".(9lv";
      stringArray0[2] = "b\bY+P7?Gj";
      stringArray0[3] = ".(9lv";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(4, stringArray0.length);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      String string1 = "[(MDl|/jI2D";
      // Undeclared exception!
      try { 
        JSONPath.size((Object) ".(9lv", "[(MDl|/jI2D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "$";
      // Undeclared exception!
      try { 
        JSONPath.extract("$", "$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("$", "$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = JSONPath.compile(".");
      assertNotNull(jSONPath0);
      assertEquals(".", jSONPath0.getPath());
      
      Short short0 = new Short((short)5);
      assertNotNull(short0);
      assertEquals((short)5, (short)short0);
      
      DataTruncation dataTruncation0 = new DataTruncation((short)5, true, true, (short)5, 1);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      boolean boolean0 = jSONPath0.containsValue((Object) short0, (Object) null);
      assertEquals(".", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$KeySetSegment");
      assertNotNull(jSONPath1);
      assertEquals("com.alibaba.fastjson.JSONPath$KeySetSegment", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      int int0 = jSONPath0.size((Object) "com.alibaba.fastjson.JSONPath$KeySetSegment");
      assertEquals(".", jSONPath0.getPath());
      assertEquals(2, int0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("}W1f]Y", stringArray0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("", "/cause/stackTrace/0", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("c_C`");
      assertNotNull(jSONPath0);
      assertEquals("c_C`", jSONPath0.getPath());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      Short short0 = new Short((short)94);
      assertNotNull(short0);
      assertEquals((short)94, (short)short0);
      
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, sQLTransactionRollbackException0, short0, jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals("c_C`", jSONPath0.getPath());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath1 = new JSONPath("'r^fkpZwcqU", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("'r^fkpZwcqU", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.And;
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath1, "/cause/stackTrace/0", "/cause/stackTrace/0");
      assertNull(object0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("'r^fkpZwcqU", jSONPath1.getPath());
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNotSame(jSONPath_Operator0, jSONPath_Operator1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.deny", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLTimeoutException0.getMessage());
      
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.deny", (String[]) null, true);
      assertNotNull(jSONPath_StringInSegement0);
      
      JSONPath jSONPath2 = new JSONPath("@type");
      assertNotNull(jSONPath2);
      assertEquals("@type", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      
      // Undeclared exception!
      try { 
        jSONPath_StringInSegement0.apply(jSONPath1, jSONPath2, jSONPath2, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("}W1f]Y", stringArray0);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, stringArray0.length);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("", "/cause/stackTrace/0", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("c_C`");
      assertNotNull(jSONPath0);
      assertEquals("c_C`", jSONPath0.getPath());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      Short short0 = new Short((short)94);
      assertNotNull(short0);
      assertEquals((short)94, (short)short0);
      
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, sQLTransactionRollbackException0, short0, jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals("c_C`", jSONPath0.getPath());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath1 = new JSONPath("'r^fkpZwcqU", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("'r^fkpZwcqU", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.And;
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath1, "/cause/stackTrace/0", "/cause/stackTrace/0");
      assertNull(object0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("'r^fkpZwcqU", jSONPath1.getPath());
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotSame(jSONPath_Operator0, jSONPath_Operator1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException1);
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("fastjson.parser.deny", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.deny", sQLTimeoutException0.toString());
      
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.deny", (String[]) null, true);
      assertNotNull(jSONPath_StringInSegement0);
      
      // Undeclared exception!
      try { 
        jSONPath_StringInSegement0.apply(jSONPath1, jSONPath1, jSONPath1, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "value is null";
      JSONPath jSONPath0 = JSONPath.compile("value is null");
      assertNotNull(jSONPath0);
      assertEquals("value is null", jSONPath0.getPath());
      
      String string1 = "/sqackTrace/5";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/sqackTrace/5");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("q ]/64r}3Wh:W3'R");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Locale locale0 = new Locale("value is null", ".A~O]uIFkqI\"W8V14jW", "/sqackTrace/5");
      assertNotNull(locale0);
      assertEquals("/sqackTrace/5", locale0.getVariant());
      assertEquals("value is null_.A~O]UIFKQI\"W8V14JW_/sqackTrace/5", locale0.toString());
      assertEquals(".A~O]UIFKQI\"W8V14JW", locale0.getCountry());
      assertEquals("value is null", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, ".A~O]uIFkqI\"W8V14jW", locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "null";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string1 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string1);
      assertEquals("null", string1);
      assertTrue(string1.equals((Object)string0));
      
      JSONPath jSONPath0 = JSONPath.compile("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      boolean boolean0 = false;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "null";
      stringArray0[1] = "jQirr9\"hu<92j^:Iqg";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "null";
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"&");
      assertFalse(boolean0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(404, 404, (-1126267115));
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"&");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.buildArraySegement("\"&");
      assertNotNull(jSONPath_PropertySegment0);
      
      Object object0 = JSONPath.eval((Object) "\"&", "/80(LWELS\"&[+0FXt");
      assertNull(object0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("/80(LWELS\"&[+0FXt");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1126267115));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = new JSONPath("z;");
      assertNotNull(jSONPath0);
      assertEquals("z;", jSONPath0.getPath());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("-Eq[k;uu", "todo", 404);
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLNonTransientException0.toString());
      assertEquals("todo", sQLNonTransientException0.getSQLState());
      assertEquals("-Eq[k;uu", sQLNonTransientException0.getMessage());
      assertEquals(404, sQLNonTransientException0.getErrorCode());
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientException0);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLNonTransientException0.toString());
      assertEquals("todo", sQLNonTransientException0.getSQLState());
      assertEquals("-Eq[k;uu", sQLNonTransientException0.getMessage());
      assertEquals(404, sQLNonTransientException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.toString());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("-Eq[k;uu", sQLWarning0);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLNonTransientException0.toString());
      assertEquals("todo", sQLNonTransientException0.getSQLState());
      assertEquals("-Eq[k;uu", sQLNonTransientException0.getMessage());
      assertEquals(404, sQLNonTransientException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.toString());
      assertEquals("-Eq[k;uu", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: -Eq[k;uu", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      
      int int0 = jSONPath0.size((Object) sQLTransientException0);
      assertEquals("z;", jSONPath0.getPath());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLNonTransientException0.toString());
      assertEquals("todo", sQLNonTransientException0.getSQLState());
      assertEquals("-Eq[k;uu", sQLNonTransientException0.getMessage());
      assertEquals(404, sQLNonTransientException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.toString());
      assertEquals("-Eq[k;uu", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: -Eq[k;uu", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals((-1), int0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("z;", (-1126267115), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("java/lang/Short", false);
      assertNotNull(jSONPath_PropertySegment1);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      
      boolean boolean1 = jSONPath_PropertySegment0.remove(jSONPath0, sQLTransientException0);
      assertEquals("z;", jSONPath0.getPath());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLNonTransientException0.toString());
      assertEquals("todo", sQLNonTransientException0.getSQLState());
      assertEquals("-Eq[k;uu", sQLNonTransientException0.getMessage());
      assertEquals(404, sQLNonTransientException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.toString());
      assertEquals("-Eq[k;uu", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: -Eq[k;uu", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONPath_PropertySegment0.equals((Object)jSONPath_PropertySegment1));
      assertNotSame(jSONPath_PropertySegment0, jSONPath_PropertySegment1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"&");
      assertFalse(boolean0);
      
      int int0 = (-1126267115);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(404, 404, (-1126267115));
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"&");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("\"&");
      assertNotNull(jSONPath_Segment0);
      
      String string0 = "/80(LWELS\"&\\[+0FXt";
      Object object0 = JSONPath.eval((Object) "\"&", "/80(LWELS\"&[+0FXt");
      assertNull(object0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("/80(LWELS\"&[+0FXt");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath jSONPath0 = null;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1126267115));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/80(LWELS\"&[+0FXt");
      assertNotNull(jSONReaderScanner0);
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char char0 = '\"';
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, charArray0.length);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'o', '\"', '\"'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-1303), (-1303));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1303
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      JSONPath jSONPath0 = JSONPath.compile("pZ>");
      assertNotNull(jSONPath0);
      assertEquals("pZ>", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      String[] stringArray0 = null;
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLIntegrityConstraintViolationException0, (String[]) null);
      assertNotNull(jSONArray0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.getMessage());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("z;");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"&");
      assertFalse(boolean0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(404, 404, (-1126267115));
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"&");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("\"&");
      assertNotNull(jSONPath_Segment0);
      
      Object object0 = JSONPath.eval((Object) "\"&", "/80(LWELS\"&[+0FXt");
      assertNull(object0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("/80(LWELS\"&[+0FXt");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1126267115));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = new JSONPath("/80(LWELS\"&[+0FXt");
      assertNotNull(jSONPath0);
      assertEquals("/80(LWELS\"&[+0FXt", jSONPath0.getPath());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("-Eq[k;uu", "todo", 404);
      assertNotNull(sQLNonTransientException0);
      assertEquals(404, sQLNonTransientException0.getErrorCode());
      assertEquals("todo", sQLNonTransientException0.getSQLState());
      assertEquals("-Eq[k;uu", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLNonTransientException0.toString());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("-Eq[k;uu", (-1126267115), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("java/lang/Short", false);
      assertNotNull(jSONPath_PropertySegment0);
      assertFalse(jSONPath_PropertySegment0.equals((Object)jSONPath_Segment0));
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("int");
      assertNotNull(jSONPath_JSONPathParser0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("@l|,$.)3e6|UIob", "quT.SV89)zVe_y3");
      assertNotNull(sQLTransientException0);
      assertEquals("@l|,$.)3e6|UIob", sQLTransientException0.getMessage());
      assertEquals("quT.SV89)zVe_y3", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: @l|,$.)3e6|UIob", sQLTransientException0.toString());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1354), (-1354), 110);
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("@l|,$.)3e6|UIob");
      assertNotNull(jSONPath0);
      assertEquals("@l|,$.)3e6|UIob", jSONPath0.getPath());
      
      SQLTransientException sQLTransientException1 = new SQLTransientException("int", "length", (-1130));
      assertNotNull(sQLTransientException1);
      assertEquals("int", sQLTransientException1.getMessage());
      assertEquals("length", sQLTransientException1.getSQLState());
      assertEquals("java.sql.SQLTransientException: int", sQLTransientException1.toString());
      assertEquals((-1130), sQLTransientException1.getErrorCode());
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLTransientException1, (Object) null);
      assertNotNull(arrayList0);
      assertEquals("@l|,$.)3e6|UIob", jSONPath0.getPath());
      assertEquals("int", sQLTransientException1.getMessage());
      assertEquals("length", sQLTransientException1.getSQLState());
      assertEquals("java.sql.SQLTransientException: int", sQLTransientException1.toString());
      assertEquals((-1130), sQLTransientException1.getErrorCode());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      assertNotSame(sQLTransientException1, sQLTransientException0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "length";
      stringArray0[1] = "@l|,$.)3e6|UIob";
      stringArray0[2] = "int";
      stringArray0[3] = "@l|,$.)3e6|UIob";
      stringArray0[4] = "quT.SV89)zVe_y3";
      stringArray0[5] = "@l|,$.)3e6|UIob";
      stringArray0[6] = "int";
      stringArray0[7] = "int";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(arrayList0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. @l|,$.)3e6|UIob
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(",1pRUS;r}Cv", ",1pRUS;r}Cv", 0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(",1pRUS;r}Cv", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(",1pRUS;r}Cv", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ,1pRUS;r}Cv", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 1962);
      assertNotNull(jSONPath_RangeSegment0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      
      JSONPath jSONPath0 = JSONPath.compile("L51");
      assertNotNull(jSONPath0);
      assertEquals("L51", jSONPath0.getPath());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("AB:TiycM", "AB:TiycM");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("AB:TiycM", sQLSyntaxErrorException0.getSQLState());
      assertEquals("AB:TiycM", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: AB:TiycM", sQLSyntaxErrorException0.toString());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, ",1pRUS;r}Cv", sQLSyntaxErrorException0);
      assertNotNull(arrayList0);
      assertEquals("L51", jSONPath0.getPath());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("AB:TiycM", sQLSyntaxErrorException0.getSQLState());
      assertEquals("AB:TiycM", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: AB:TiycM", sQLSyntaxErrorException0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Short short0 = new Short((short)8);
      assertNotNull(short0);
      assertEquals((short)8, (short)short0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment1 = new JSONPath.RangeSegment(74, 1962, 0);
      assertNotNull(jSONPath_RangeSegment1);
      assertFalse(jSONPath_RangeSegment1.equals((Object)jSONPath_RangeSegment0));
      
      boolean boolean1 = jSONPath0.containsValue((Object) jSONPath_RangeSegment1, (Object) jSONPath_RangeSegment1);
      assertEquals("L51", jSONPath0.getPath());
      assertFalse(boolean1);
      assertFalse(jSONPath_RangeSegment1.equals((Object)jSONPath_RangeSegment0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONPath_RangeSegment1, jSONPath_RangeSegment0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      batchUpdateException0.printStackTrace();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackrace/7", "/stackrace/7", 1815, batchUpdateException0);
      assertNotNull(sQLTimeoutException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNotNull(string0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", string0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      
      boolean boolean1 = JSONPath.containsValue((Object) sQLIntegrityConstraintViolationException0, "/stackTrace/2", (Object) sQLIntegrityConstraintViolationException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/2");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/2", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("/stackrace/7");
      assertNotNull(jSONPath1);
      assertEquals("/stackrace/7", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      jSONPath0.init();
      assertEquals("/stackTrace/2", jSONPath0.getPath());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath2 = new JSONPath("/80(LWELS\"&[+0FXt", (SerializeConfig) null, parserConfig0);
      assertNotNull(jSONPath2);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("/80(LWELS\"&[+0FXt", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      jSONPath2.init();
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("/80(LWELS\"&[+0FXt", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"&");
      assertFalse(boolean0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(404, 404, (-1126267115));
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"&");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.buildArraySegement("\"&");
      assertNotNull(jSONPath_PropertySegment0);
      
      Object object0 = JSONPath.eval((Object) "\"&", "/80(LWELS\"&[+0FXt");
      assertNull(object0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("/80(LWELS\"&[+0FXt");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1126267115));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = new JSONPath("/80(LWELS\"&[+0FXt");
      assertNotNull(jSONPath0);
      assertEquals("/80(LWELS\"&[+0FXt", jSONPath0.getPath());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("-Eq[k;uu", "todo", 404);
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLNonTransientException0.toString());
      assertEquals("-Eq[k;uu", sQLNonTransientException0.getMessage());
      assertEquals(404, sQLNonTransientException0.getErrorCode());
      assertEquals("todo", sQLNonTransientException0.getSQLState());
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientException0);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLNonTransientException0.toString());
      assertEquals("-Eq[k;uu", sQLNonTransientException0.getMessage());
      assertEquals(404, sQLNonTransientException0.getErrorCode());
      assertEquals("todo", sQLNonTransientException0.getSQLState());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.toString());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("-Eq[k;uu", sQLWarning0);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLNonTransientException0.toString());
      assertEquals("-Eq[k;uu", sQLNonTransientException0.getMessage());
      assertEquals(404, sQLNonTransientException0.getErrorCode());
      assertEquals("todo", sQLNonTransientException0.getSQLState());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.toString());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("-Eq[k;uu", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: -Eq[k;uu", sQLTransientException0.toString());
      
      int int0 = jSONPath0.size((Object) sQLTransientException0);
      assertEquals("/80(LWELS\"&[+0FXt", jSONPath0.getPath());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLNonTransientException0.toString());
      assertEquals("-Eq[k;uu", sQLNonTransientException0.getMessage());
      assertEquals(404, sQLNonTransientException0.getErrorCode());
      assertEquals("todo", sQLNonTransientException0.getSQLState());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.toString());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("-Eq[k;uu", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: -Eq[k;uu", sQLTransientException0.toString());
      assertEquals((-1), int0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("-Eq[k;uu", (-1126267115), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("java/lang/Short", false);
      assertNotNull(jSONPath_PropertySegment1);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      
      boolean boolean1 = jSONPath_PropertySegment0.remove(jSONPath0, sQLTransientException0);
      assertEquals("/80(LWELS\"&[+0FXt", jSONPath0.getPath());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLNonTransientException0.toString());
      assertEquals("-Eq[k;uu", sQLNonTransientException0.getMessage());
      assertEquals(404, sQLNonTransientException0.getErrorCode());
      assertEquals("todo", sQLNonTransientException0.getSQLState());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.toString());
      assertEquals("java.sql.SQLNonTransientException: -Eq[k;uu", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("-Eq[k;uu", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: -Eq[k;uu", sQLTransientException0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONPath_PropertySegment0.equals((Object)jSONPath_PropertySegment1));
      assertNotSame(jSONPath_PropertySegment0, jSONPath_PropertySegment1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "/stackrace/7";
      int int0 = 1815;
      JSONPath jSONPath0 = JSONPath.compile("/stackrace/7");
      assertNotNull(jSONPath0);
      assertEquals("/stackrace/7", jSONPath0.getPath());
      
      JSON.DEFAULT_GENERATE_FEATURE = (-605);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j*FbG=@\"$");
      assertNotNull(defaultJSONParser0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath jSONPath0 = new JSONPath("]");
      assertNotNull(jSONPath0);
      assertEquals("]", jSONPath0.getPath());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONPath0;
      objectArray0[1] = (Object) jSONPath0;
      objectArray0[2] = (Object) jSONPath0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "/stackTrace/7";
      objectArray0[5] = (Object) jSONPath_Operator0;
      objectArray0[6] = (Object) null;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(331, 69, 69);
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/7");
      assertNotNull(jSONPath1);
      assertEquals("/stackTrace/7", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment1 = new JSONPath.RangeSegment(1026, 331, 331);
      assertNotNull(jSONPath_RangeSegment1);
      assertFalse(jSONPath_RangeSegment1.equals((Object)jSONPath_RangeSegment0));
      
      Integer integer0 = new Integer(69);
      assertNotNull(integer0);
      assertEquals(69, (int)integer0);
      
      Object object0 = jSONPath_RangeSegment1.eval(jSONPath1, integer0, jSONPath_RangeSegment0);
      assertNull(object0);
      assertEquals("/stackTrace/7", jSONPath1.getPath());
      assertFalse(jSONPath_RangeSegment0.equals((Object)jSONPath_RangeSegment1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath_RangeSegment1.equals((Object)jSONPath_RangeSegment0));
      assertNotSame(jSONPath_RangeSegment0, jSONPath_RangeSegment1);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath_RangeSegment1, jSONPath_RangeSegment0);
      
      Short short0 = new Short((short)255);
      assertNotNull(short0);
      assertEquals((short)255, (short)short0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath_RangeSegment1, (Object) integer0);
      assertEquals("]", jSONPath0.getPath());
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath_RangeSegment1.equals((Object)jSONPath_RangeSegment0));
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath_RangeSegment1, jSONPath_RangeSegment0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath jSONPath0 = new JSONPath("]");
      assertNotNull(jSONPath0);
      assertEquals("]", jSONPath0.getPath());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONPath0;
      objectArray0[1] = (Object) jSONPath0;
      objectArray0[2] = (Object) jSONPath0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "/stackTrace/7";
      objectArray0[5] = (Object) jSONPath_Operator0;
      objectArray0[6] = (Object) null;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(331, 69, 69);
      assertNotNull(jSONPath_RangeSegment0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/7");
      assertNotNull(jSONPath1);
      assertEquals("/stackTrace/7", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment1 = new JSONPath.RangeSegment(1026, 331, 331);
      assertNotNull(jSONPath_RangeSegment1);
      assertFalse(jSONPath_RangeSegment1.equals((Object)jSONPath_RangeSegment0));
      
      Integer integer0 = new Integer(69);
      assertNotNull(integer0);
      assertEquals(69, (int)integer0);
      
      Object object0 = jSONPath_RangeSegment1.eval(jSONPath1, integer0, jSONPath_RangeSegment0);
      assertNull(object0);
      assertEquals("/stackTrace/7", jSONPath1.getPath());
      assertFalse(jSONPath_RangeSegment0.equals((Object)jSONPath_RangeSegment1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath_RangeSegment1.equals((Object)jSONPath_RangeSegment0));
      assertNotSame(jSONPath_RangeSegment0, jSONPath_RangeSegment1);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath_RangeSegment1, jSONPath_RangeSegment0);
      
      Short short0 = new Short((short)255);
      assertNotNull(short0);
      assertEquals((short)255, (short)short0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath_RangeSegment1, (Object) integer0);
      assertEquals("]", jSONPath0.getPath());
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath_RangeSegment1.equals((Object)jSONPath_RangeSegment0));
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath_RangeSegment1, jSONPath_RangeSegment0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath jSONPath1 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath1);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath1.getPath());
      assertSame(jSONPath1, jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(18, 18, 18);
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath jSONPath2 = JSONPath.compile("*");
      assertNotNull(jSONPath2);
      assertEquals("*", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, jSONPath2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath jSONPath1 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath1);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath1.getPath());
      assertSame(jSONPath1, jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(18, 18, 18);
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath jSONPath2 = new JSONPath("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath2);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, jSONPath2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BETWEEN");
      assertNotNull(jSONPath0);
      assertEquals("BETWEEN", jSONPath0.getPath());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1042;
      intArray0[1] = 1042;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1042, 1042, 0}, intArray0);
      
      boolean boolean0 = jSONPath0.set((Object) jSONPath_MultiIndexSegment0, (Object) jSONPath_MultiIndexSegment0, true);
      assertEquals("BETWEEN", jSONPath0.getPath());
      assertTrue(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1042, 1042, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_Operator0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.EQ;
      assertSame(jSONPath_Operator1, jSONPath_Operator0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("LRo7qf<Am(^$fVL#yuf");
      assertNotNull(sQLTransientException0);
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: LRo7qf<Am(^$fVL#yuf", sQLTransientException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("LRo7qf<Am(^$fVL#yuf", "LRo7qf<Am(^$fVL#yuf", (Throwable) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: LRo7qf<Am(^$fVL#yuf", sQLTimeoutException0.toString());
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTimeoutException0.getMessage());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      
      MockDate mockDate0 = new MockDate((-308), (-308), (-308));
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransientException0, (Object) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      batchUpdateException0.printStackTrace();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackrace/7", "/stackrace/7", 1815, batchUpdateException0);
      assertNotNull(sQLTimeoutException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.toString());
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.toString());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_Operator0, (SerializeConfig) null);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("deserialzeArrayMapping", (SerializeConfig) null, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("deserialzeArrayMapping", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPayh!MaxSegment";
      JSONPath jSONPath0 = JSONPath.compile("[]");
      assertNotNull(jSONPath0);
      assertEquals("[]", jSONPath0.getPath());
      
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      int int0 = 11;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("%%", "com.alibaba.fastjson.JSONPayh!MaxSegment", 11, (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("%%", sQLTransactionRollbackException0.getMessage());
      assertEquals(11, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPayh!MaxSegment", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: %%", sQLTransactionRollbackException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("%%", (Throwable) null);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: %%", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("%%", sQLFeatureNotSupportedException0.getMessage());
      
      String[] stringArray0 = null;
      short short0 = (short)4059;
      Short short1 = new Short((short)4059);
      assertNotNull(short1);
      assertEquals((short)4059, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Float float0 = new Float(1000000.0F);
      assertNotNull(float0);
      assertEquals(1000000.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      assertNotNull(jSONPath0);
      assertEquals("(", jSONPath0.getPath());
      
      SQLDataException sQLDataException0 = new SQLDataException("J^^,e_", "J^^,e_", 74);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: J^^,e_", sQLDataException0.toString());
      assertEquals(74, sQLDataException0.getErrorCode());
      assertEquals("J^^,e_", sQLDataException0.getSQLState());
      assertEquals("J^^,e_", sQLDataException0.getMessage());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      assertEquals("java.sql.SQLDataException: J^^,e_", sQLDataException0.toString());
      assertEquals(74, sQLDataException0.getErrorCode());
      assertEquals("J^^,e_", sQLDataException0.getSQLState());
      assertEquals("J^^,e_", sQLDataException0.getMessage());
      
      Long long0 = Long.valueOf((-32L));
      assertNotNull(long0);
      assertEquals((-32L), (long)long0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) sQLDataException0, (Object) long0);
      assertEquals("(", jSONPath0.getPath());
      assertEquals("java.sql.SQLDataException: J^^,e_", sQLDataException0.toString());
      assertEquals(74, sQLDataException0.getErrorCode());
      assertEquals("J^^,e_", sQLDataException0.getSQLState());
      assertEquals("J^^,e_", sQLDataException0.getMessage());
      assertFalse(boolean0);
      
      boolean boolean1 = jSONPath0.isRef();
      assertEquals("(", jSONPath0.getPath());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(");
      assertNotNull(jSONPath_JSONPathParser0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. (
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("(", "dyQ[#*x", false);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("dyQ[#*x");
      assertNotNull(jSONPath0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("(");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: (", sQLFeatureNotSupportedException0.toString());
      assertEquals("(", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLFeatureNotSupportedException0, "dyQ[#*x", jSONPath_WildCardSegment0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: (", sQLFeatureNotSupportedException0.toString());
      assertEquals("(", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertTrue(boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/cause/stackTrace/9");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: /cause/stackTrace/9", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("/cause/stackTrace/9", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("dyQ[#*x", "/cause/stackTrace/9", Integer.MAX_VALUE);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: dyQ[#*x", sQLSyntaxErrorException0.toString());
      assertEquals("dyQ[#*x", sQLSyntaxErrorException0.getMessage());
      assertEquals("/cause/stackTrace/9", sQLSyntaxErrorException0.getSQLState());
      assertEquals(Integer.MAX_VALUE, sQLSyntaxErrorException0.getErrorCode());
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, (Object) null);
      assertNull(object0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.safeMode");
      assertNotNull(jSONPath_NotNullSegement0);
      
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeSupport", "dyQ[#*x");
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: fastjson.parser.autoTypeSupport", sQLDataException0.toString());
      assertEquals("fastjson.parser.autoTypeSupport", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("dyQ[#*x", sQLDataException0.getSQLState());
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment1);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_Operator0, parserConfig0);
      assertNotNull(arrayList0);
      assertEquals(10, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      boolean boolean1 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath_FilterSegment1, parserConfig0, arrayList0);
      assertEquals(10, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotSame(jSONPath_FilterSegment1, jSONPath_FilterSegment0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.isSafeMode());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath1 = new JSONPath("` 6jQ_7#$T4e]oE8 ", serializeConfig0, parserConfig1);
      assertNotNull(jSONPath1);
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.isSafeMode());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertEquals("` 6jQ_7#$T4e]oE8 ", jSONPath1.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      // Undeclared exception!
      try { 
        jSONPath1.contains((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ` 6jQ_7#$T4e]oE8 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Long long0 = new Long(8488266005336625107L);
      assertNotNull(long0);
      assertEquals(8488266005336625107L, (long)long0);
      
      Long long1 = new Long(8488266005336625107L);
      assertNotNull(long1);
      assertEquals(8488266005336625107L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m81");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("Q#IL9p&\"");
      assertNotNull(jSONPath0);
      assertEquals("Q#IL9p&\"", jSONPath0.getPath());
      
      Set<?> set0 = jSONPath0.evalKeySet("ZY^#2B*\"");
      assertNotNull(set0);
      assertEquals("Q#IL9p&\"", jSONPath0.getPath());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("m81"));
      
      Object object0 = jSONPath0.getArrayItem(set0, 22);
      assertNull(object0);
      assertEquals("Q#IL9p&\"", jSONPath0.getPath());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("m81"));
      
      Object[] objectArray0 = new Object[2];
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "16'Jf?AV~m>|TJ|z*";
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      int int0 = 17;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("16'Jf?AV~m>|TJ|z*", "16'Jf?AV~m>|TJ|z*", 17);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTransientConnectionException0.getSQLState());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTransientConnectionException0.getMessage());
      assertEquals(17, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: 16'Jf?AV~m>|TJ|z*", sQLTransientConnectionException0.toString());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      assertNotNull(japaneseDate0);
      
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(japaneseDate0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains("16'Jf?AV~m>|TJ|z*"));
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLTransientConnectionException0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "=Ph[x;RndfiPhx8Lac=";
      stringArray0[1] = "NOT_RLIKE";
      stringArray0[2] = "b\bY+P7?Gj";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(3, stringArray0.length);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      int int0 = JSONPath.size((Object) jSONPath_WildCardSegment0, "com.alibaba.fastjson.JSONPath$IntInSegement");
      assertEquals((-1), int0);
      
      String string0 = "ErrorOnEnumNotMatch";
      int[] intArray0 = new int[0];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("CIa", "^X8Ie");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("CIa", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: CIa", sQLFeatureNotSupportedException0.toString());
      assertEquals("^X8Ie", sQLFeatureNotSupportedException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONValidator", "b\bY+P7?Gj", 498, intArray0, sQLFeatureNotSupportedException0);
      assertNotNull(batchUpdateException0);
      assertEquals("CIa", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: CIa", sQLFeatureNotSupportedException0.toString());
      assertEquals("^X8Ie", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: com.alibaba.fastjson.JSONValidator", batchUpdateException0.toString());
      assertEquals("b\bY+P7?Gj", batchUpdateException0.getSQLState());
      assertEquals(498, batchUpdateException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONValidator", batchUpdateException0.getMessage());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[F]1\"@");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '), but '1'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("parent");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("parent", string0);
      
      JSONPath jSONPath0 = JSONPath.compile("parent");
      assertNotNull(jSONPath0);
      assertEquals("parent", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(596);
      assertNotNull(integer0);
      assertEquals(596, (int)integer0);
      
      int int0 = jSONPath0.size((Object) hashMap0);
      assertEquals("parent", jSONPath0.getPath());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-1), int0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLClientInfoException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLClientInfoException", sQLTransactionRollbackException0.toString());
      
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(propertyNamingStrategy0, "parent", 8488266005336625107L, sQLTransactionRollbackException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("! 0XRyWAQ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      jSONPath_JSONPathParser0.skipWhitespace();
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      MockDate mockDate0 = new MockDate(726, 432, 432, 726, 26, 38);
      assertNotNull(mockDate0);
      
      Short short0 = new Short((short)875);
      assertNotNull(short0);
      assertEquals((short)875, (short)short0);
      
      Set<?> set0 = JSONPath.keySet((Object) short0, "fastjson.parser.deny");
      assertNull(set0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("in", "fastjson.parser.deny", (short)875, (Throwable) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(875, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("in", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: in", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("fastjson.parser.deny", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny", "com.alibaba.fastjson.JSONPath$StringInSegement", 44, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLDataException0);
      assertEquals(875, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("in", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: in", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("fastjson.parser.deny", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(44, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: fastjson.parser.deny", sQLDataException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$StringInSegement", sQLDataException0.getSQLState());
      assertEquals("fastjson.parser.deny", sQLDataException0.getMessage());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("[tj03NENYxkfk=", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("[tj03NENYxkfk=", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "! 0XRyWAQ", (Object) mockDate0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rdeL[m?Kx");
      assertNotNull(jSONPath0);
      assertEquals("rdeL[m?Kx", jSONPath0.getPath());
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
      assertEquals("rdeL[m?Kx", jSONPath0.getPath());
      
      boolean boolean0 = JSONPath.remove((Object) null, "rdeL[m?Kx");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "rdeL[m?Kx";
      stringArray0[1] = "rdeL[m?Kx";
      stringArray0[2] = "rdeL[m?Kx";
      stringArray0[3] = "rdeL[m?Kx";
      stringArray0[4] = "rdeL[m?Kx";
      stringArray0[5] = "rdeL[m?Kx";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("rdeL[m?Kx", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(6, stringArray0.length);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("rdeL[m?Kx", "/stackTrace/4", (-801));
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals((-801), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("rdeL[m?Kx", sQLTransactionRollbackException0.getMessage());
      assertEquals("/stackTrace/4", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: rdeL[m?Kx", sQLTransactionRollbackException0.toString());
      
      boolean boolean1 = jSONPath_StringInSegement0.apply(jSONPath0, sQLTransactionRollbackException0, (Object) null, "rdeL[m?Kx");
      assertEquals("rdeL[m?Kx", jSONPath0.getPath());
      assertEquals((-801), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("rdeL[m?Kx", sQLTransactionRollbackException0.getMessage());
      assertEquals("/stackTrace/4", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: rdeL[m?Kx", sQLTransactionRollbackException0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",  end ");
      assertFalse(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.alibaba.fastjson.JSONPath$FilterSegment");
      assertNotNull(sQLTransientException0);
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: com.alibaba.fastjson.JSONPath$FilterSegment", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/cause/stackTrace/12", "/cause/stackTrace/0", sQLTransientException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: com.alibaba.fastjson.JSONPath$FilterSegment", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /cause/stackTrace/12", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/cause/stackTrace/0", sQLTimeoutException0.getSQLState());
      assertEquals("/cause/stackTrace/12", sQLTimeoutException0.getMessage());
      
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/0");
      assertNotNull(jSONPath0);
      assertEquals("/cause/stackTrace/0", jSONPath0.getPath());
      
      jSONPath0.init();
      assertEquals("/cause/stackTrace/0", jSONPath0.getPath());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.JSONPath$FilterSegment", "com.alibaba.fastjson.JSONPath$ArrayAccessSegment", sQLTimeoutException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: com.alibaba.fastjson.JSONPath$FilterSegment", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /cause/stackTrace/12", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/cause/stackTrace/0", sQLTimeoutException0.getSQLState());
      assertEquals("/cause/stackTrace/12", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$FilterSegment", sQLRecoverableException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLRecoverableException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", sQLRecoverableException0.getSQLState());
      
      boolean boolean1 = jSONPath0.containsValue((Object) "com.alibaba.fastjson.JSONPath$FilterSegment", (Object) sQLRecoverableException0);
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: com.alibaba.fastjson.JSONPath$FilterSegment", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /cause/stackTrace/12", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/cause/stackTrace/0", sQLTimeoutException0.getSQLState());
      assertEquals("/cause/stackTrace/12", sQLTimeoutException0.getMessage());
      assertEquals("/cause/stackTrace/0", jSONPath0.getPath());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$FilterSegment", sQLRecoverableException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLRecoverableException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", sQLRecoverableException0.getSQLState());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("dyQ[#*x");
      assertNotNull(jSONPath0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_SizeSegment0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      assertFalse(boolean0);
      
      jSONPath0.init();
      assertEquals("dyQ[#*x", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[6] = 1792;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("dvQyl>4c'cF");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      int int0 = JSONPath.size((Object) jSONPath_Segment0, "Y");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(3452119533779314739L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[6] = 1792;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("dvQyl>4c'cF");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
      
      JSONPath jSONPath0 = JSONPath.compile("authorities");
      assertNotNull(jSONPath0);
      assertEquals("authorities", jSONPath0.getPath());
      
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst(',');
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("dvQyl>4c'cF");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("^!6= ");
      assertNotNull(jSONPath_JSONPathParser2);
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser1));
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser0));
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser2.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ^!6= 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[6] = 1792;
      String string0 = "dyQyl>c'cF";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("dyQyl>c'cF");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("notWriteDefaultValue");
      assertNotNull(jSONPath0);
      assertEquals("notWriteDefaultValue", jSONPath0.getPath());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("{T3UP=Wl?(e+#]U0N", (-2414.971496994581), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      Float float0 = new Float((-1340.3602F));
      assertNotNull(float0);
      assertEquals((-1340.3602F), (float)float0, 0.01F);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("in", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, "length");
      assertEquals("notWriteDefaultValue", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'s*,s*'");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNotNull(object0);
      assertEquals("s*,s*'", object0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = null;
      try {
        jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "OaUeMo?";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("OaUeMo?", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(1, stringArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("JSONPath$StringOpSegement");
      assertNotNull(jSONPath0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = jSONPath0.size((Object) "OaUeMo?");
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      Class<SQLException> class0 = SQLException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1), 47, 101);
      assertNotNull(jSONPath_RangeSegment0);
      
      SQLException sQLException0 = new SQLException("unclosed.str.lit", "JSONPath$StringOpSegement");
      assertNotNull(sQLException0);
      assertEquals("JSONPath$StringOpSegement", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: unclosed.str.lit", sQLException0.toString());
      assertEquals("unclosed.str.lit", sQLException0.getMessage());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "unclosed.str.lit");
      assertFalse(boolean0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, 47, 47, sQLException0);
      assertNotNull(dataTruncation0);
      assertEquals("JSONPath$StringOpSegement", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: unclosed.str.lit", sQLException0.toString());
      assertEquals("unclosed.str.lit", sQLException0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      JSONPath jSONPath1 = new JSONPath("unclosed.str.lit");
      assertNotNull(jSONPath1);
      assertEquals("unclosed.str.lit", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap1);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLClientInfoException0, stringArray0);
      assertNotNull(jSONArray0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      boolean boolean1 = jSONPath1.containsValue((Object) jSONArray0, (Object) hashMap0);
      assertEquals("unclosed.str.lit", jSONPath1.getPath());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(boolean1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotSame(jSONPath1, jSONPath0);
      
      Byte byte0 = new Byte((byte)65);
      assertNotNull(byte0);
      assertEquals((byte)65, (byte)byte0);
      
      boolean boolean2 = jSONPath0.set((Object) null, (Object) jSONPath1);
      assertEquals("unclosed.str.lit", jSONPath1.getPath());
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertFalse(boolean2);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath0, jSONPath1);
      
      Random.setNextRandom(93);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      Class<SQLDataException> class1 = SQLDataException.class;
      parserConfig0.register("7Ddw':1BDy6", class1);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath2 = new JSONPath("OaUeMo?", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath2);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("OaUeMo?", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      boolean boolean3 = jSONPath2.isRef();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("OaUeMo?", jSONPath2.getPath());
      assertTrue(boolean3);
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("(", "dyQ[#*x", false);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("dyQ[#*x");
      assertNotNull(jSONPath0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("(");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("(", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: (", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLFeatureNotSupportedException0, "dyQ[#*x", jSONPath_WildCardSegment0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      assertEquals("(", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: (", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertTrue(boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/cause/stackTrace/9");
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: /cause/stackTrace/9", sQLNonTransientConnectionException0.toString());
      assertEquals("/cause/stackTrace/9", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("dyQ[#*x", "/cause/stackTrace/9", Integer.MAX_VALUE);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("dyQ[#*x", sQLSyntaxErrorException0.getMessage());
      assertEquals("/cause/stackTrace/9", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: dyQ[#*x", sQLSyntaxErrorException0.toString());
      assertEquals(Integer.MAX_VALUE, sQLSyntaxErrorException0.getErrorCode());
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, (Object) null);
      assertNull(object0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.safeMode");
      assertNotNull(jSONPath_NotNullSegement0);
      
      SQLDataException sQLDataException0 = new SQLDataException("/cause/stackTrace/9", "fastjson.parser.deny", Integer.MAX_VALUE);
      assertNotNull(sQLDataException0);
      assertEquals(Integer.MAX_VALUE, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: /cause/stackTrace/9", sQLDataException0.toString());
      assertEquals("fastjson.parser.deny", sQLDataException0.getSQLState());
      assertEquals("/cause/stackTrace/9", sQLDataException0.getMessage());
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment1);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_Operator0, parserConfig0);
      assertNotNull(arrayList0);
      assertEquals(10, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      boolean boolean1 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath_FilterSegment1, parserConfig0, arrayList0);
      assertEquals(10, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotSame(jSONPath_FilterSegment1, jSONPath_FilterSegment0);
      
      String string0 = jSONPath0.getPath();
      assertNotNull(string0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      assertEquals("dyQ[#*x", string0);
      
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      JSONPath jSONPath0 = JSONPath.compile("pZ>");
      assertNotNull(jSONPath0);
      assertEquals("pZ>", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pZ>");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("p>");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      parserConfig0.addAccept("9GE.OyTT_wQ4P>R");
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("J[^", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("J[^", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(1317L);
      assertNotNull(long0);
      assertEquals(1317L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-155L));
      assertNotNull(long1);
      assertEquals((-155L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",1pRUS;r}Cv");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("(3f", "(3f", 1791, (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: (3f", sQLTransactionRollbackException0.toString());
      assertEquals("(3f", sQLTransactionRollbackException0.getMessage());
      assertEquals("(3f", sQLTransactionRollbackException0.getSQLState());
      assertEquals(1791, sQLTransactionRollbackException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("(3f", sQLTransactionRollbackException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLTransactionRollbackException: (3f", sQLTransactionRollbackException0.toString());
      assertEquals("(3f", sQLTransactionRollbackException0.getMessage());
      assertEquals("(3f", sQLTransactionRollbackException0.getSQLState());
      assertEquals(1791, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: (3f", sQLFeatureNotSupportedException0.toString());
      assertEquals("(3f", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      Float float0 = new Float((float) 49);
      assertNotNull(float0);
      assertEquals(49.0F, (float)float0, 0.01F);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal((double) (-155L));
      assertNotNull(bigDecimal0);
      assertEquals((byte)101, bigDecimal0.byteValue());
      assertEquals((short) (-155), bigDecimal0.shortValue());
      
      boolean boolean2 = JSONPath.eqNotNull(bigDecimal0, longArray0[0]);
      assertEquals((byte)101, bigDecimal0.byteValue());
      assertEquals((short) (-155), bigDecimal0.shortValue());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "/stackTrace/7";
      int int0 = 1815;
      Throwable throwable0 = null;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath jSONPath0 = new JSONPath("]");
      assertNotNull(jSONPath0);
      assertEquals("]", jSONPath0.getPath());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONPath0;
      objectArray0[1] = (Object) jSONPath0;
      objectArray0[2] = (Object) jSONPath0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "/stackTrace/7";
      objectArray0[5] = (Object) jSONPath_Operator0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) jSONPath_Operator0;
      objectArray0[8] = (Object) jSONPath_Operator0;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_Operator0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      String string0 = "]";
      JSONPath jSONPath0 = new JSONPath("]");
      assertNotNull(jSONPath0);
      assertEquals("]", jSONPath0.getPath());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONPath0;
      objectArray0[1] = (Object) jSONPath0;
      objectArray0[2] = (Object) jSONPath0;
      objectArray0[4] = (Object) "\"staykCrace/7";
      objectArray0[5] = (Object) jSONPath_Operator0;
      objectArray0[7] = (Object) jSONPath_Operator0;
      objectArray0[8] = (Object) jSONPath_Operator0;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_Operator0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONScanner jSONScanner0 = new JSONScanner("*");
      assertNotNull(jSONScanner0);
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      
      Object[] objectArray0 = new Object[6];
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("*"));
      
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "*";
      objectArray0[3] = (Object) "*";
      objectArray0[4] = (Object) jSONPath0;
      jSONPath0.arrayAdd((Object) locale0, objectArray0);
      assertEquals("*", jSONPath0.getPath());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      
      batchUpdateException0.printStackTrace();
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackrace/7", "/stackrace/7", 1815, batchUpdateException0);
      assertNotNull(sQLTimeoutException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      parserConfig0.addAccept("/stackrace/7");
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      int int0 = JSONPath.size((Object) parserConfig0, "$");
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(9, int0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath jSONPath0 = new JSONPath(";");
      assertNotNull(jSONPath0);
      assertEquals(";", jSONPath0.getPath());
      
      Class<BigInteger> class0 = BigInteger.class;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(class0, "ctE*0 ; ?d$I", 9007199254740991L, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("M|", "/stackTrace/3", parserConfig0, (-1218), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
      
      String string0 = "pZ>";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      JSONPath jSONPath0 = JSONPath.compile("pZ>");
      assertNotNull(jSONPath0);
      assertEquals("pZ>", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("pZ>");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: pZ>", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("pZ>", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLIntegrityConstraintViolationException0, (String[]) null);
      assertNotNull(jSONArray0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: pZ>", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("pZ>", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning("@type", "1.2.68", 989);
      assertNotNull(sQLWarning0);
      assertEquals(989, sQLWarning0.getErrorCode());
      assertEquals("@type", sQLWarning0.getMessage());
      assertEquals("1.2.68", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: @type", sQLWarning0.toString());
      
      Float float0 = new Float((-213.3939971923828));
      assertNotNull(float0);
      assertEquals((-213.394F), (float)float0, 0.01F);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath1 = new JSONPath("/WXpVE[~8mnl;:.,O'", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("/WXpVE[~8mnl;:.,O'", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        jSONPath1.init();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~8mnl;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      JSONPath jSONPath0 = JSONPath.compile("pZ>");
      assertNotNull(jSONPath0);
      assertEquals("pZ>", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLIntegrityConstraintViolationException0, (String[]) null);
      assertNotNull(jSONArray0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning("@type", "1.2.68", 989);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: @type", sQLWarning0.toString());
      assertEquals(989, sQLWarning0.getErrorCode());
      assertEquals("@type", sQLWarning0.getMessage());
      assertEquals("1.2.68", sQLWarning0.getSQLState());
      
      Float float0 = new Float((-213.3939971923828));
      assertNotNull(float0);
      assertEquals((-213.394F), (float)float0, 0.01F);
      
      boolean boolean1 = jSONPath0.containsValue((Object) float0, (Object) class0);
      assertEquals("pZ>", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      boolean boolean2 = jSONPath0.isRef();
      assertEquals("pZ>", jSONPath0.getPath());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@type");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.buildArraySegement("'T'");
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. @type
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Ffk(d>o R");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("Ffk", string0);
      
      JSONPath jSONPath0 = JSONPath.compile("Ffk");
      assertNotNull(jSONPath0);
      assertEquals("Ffk", jSONPath0.getPath());
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("'T'");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "[k[gCVn;j:+ +bxkLJR";
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1619728521);
      intArray0[1] = (-36763560);
      intArray0[5] = (-36763560);
      intArray0[1] = (-36763560);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[k[gCVn;j:+ +bxkLJR", intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("[k[gCVn;j:+ +bxkLJR", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: [k[gCVn;j:+ +bxkLJR", batchUpdateException0.toString());
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1619728521), (-36763560), 0, 0, 0, (-36763560), 0}, intArray0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[k[gCVn;j:+ +bxkLJR", "[k[gCVn;j:+ +bxkLJR", (-36763560));
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: [k[gCVn;j:+ +bxkLJR", sQLTransientConnectionException0.toString());
      assertEquals((-36763560), sQLTransientConnectionException0.getErrorCode());
      assertEquals("[k[gCVn;j:+ +bxkLJR", sQLTransientConnectionException0.getSQLState());
      assertEquals("[k[gCVn;j:+ +bxkLJR", sQLTransientConnectionException0.getMessage());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = new JSONPath("[k[gCVn;j:+ +bxkLJR", (SerializeConfig) null, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("[k[gCVn;j:+ +bxkLJR", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      MockDate mockDate0 = new MockDate((-2021161078), (-2021161078), 1366, 767, (-2021161078), (-36763560));
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) mockDate0, "[tj03NENYxkfk=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "=Ph[x;RndfiPhx8Lac=";
      stringArray0[0] = "=Ph[x;RndfiPhx8Lac=";
      stringArray0[1] = "=Ph[x;RndfiPhx8Lac=";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=Ph[x;RndfiPhx8Lac=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        JSONPath.read("=Ph[x;RndfiPhx8Lac=", "=Ph[x;RndfiPhx8Lac=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2=Ph[x;RndfiPhx8Lac=
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "[k[gCVn;j:+ +bxkLJR";
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1619728521);
      intArray0[1] = (-36763560);
      intArray0[2] = (-36763560);
      intArray0[5] = (-36763560);
      intArray0[6] = (-36763560);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[k[gCVn;j:+ +bxkLJR", intArray0);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("[k[gCVn;j:+ +bxkLJR", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: [k[gCVn;j:+ +bxkLJR", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1619728521), (-36763560), (-36763560), 0, 0, (-36763560), (-36763560)}, intArray0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[k[gCVn;j:+ +bxkLJR");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: [k[gCVn;j:+ +bxkLJR", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("[k[gCVn;j:+ +bxkLJR", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("[k[gCVn;j:+ +bxkLJR", (SerializeConfig) null, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("[k[gCVn;j:+ +bxkLJR", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      MockDate mockDate0 = new MockDate((-2021161078), (-2021161078), 1366, 767, (-2021161078), (-36763560));
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) mockDate0, "[tj03NENYxkfk=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(1317L);
      assertNotNull(long0);
      assertEquals(1317L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-146L));
      assertNotNull(long1);
      assertEquals((-146L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-1580386065683472715L));
      assertNotNull(long2);
      assertEquals((-1580386065683472715L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(",1pRUS;r}Cv", longArray0, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(3, longArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile(",1pRUS;r}Cv");
      assertNotNull(jSONPath0);
      assertEquals(",1pRUS;r}Cv", jSONPath0.getPath());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      ParserConfig.global = parserConfig0;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.global.isSafeMode());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertTrue(ParserConfig.global.isAsmEnable());
      assertFalse(ParserConfig.global.isJacksonCompatible());
      
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, (Object) null, long0, longArray0[1]);
      assertEquals(",1pRUS;r}Cv", jSONPath0.getPath());
      assertTrue(boolean0);
      assertFalse(long0.equals((Object)long2));
      assertFalse(long0.equals((Object)long1));
      assertEquals(3, longArray0.length);
      
      boolean boolean1 = jSONPath0.set((Object) null, (Object) jSONPath_IntObjInSegement0);
      assertEquals(",1pRUS;r}Cv", jSONPath0.getPath());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "illegal str, ";
      int int0 = 1232;
      Pattern pattern0 = Pattern.compile("illegal str, ", 1232);
      assertNotNull(pattern0);
      assertEquals("illegal str, ", pattern0.pattern());
      assertEquals("illegal str, ", pattern0.toString());
      assertEquals(1232, pattern0.flags());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("illegal str, ", pattern0, jSONPath_Operator0);
      assertNotNull(jSONPath_RegMatchSegement0);
      assertEquals("illegal str, ", pattern0.pattern());
      assertEquals("illegal str, ", pattern0.toString());
      assertEquals(1232, pattern0.flags());
      
      String string1 = "between";
      JSONPath jSONPath0 = JSONPath.compile("between");
      assertNotNull(jSONPath0);
      assertEquals("between", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        JSONPath.set((Object) pattern0, "between", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.regex.Pattern
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      JSONPath jSONPath0 = JSONPath.compile("pZ>");
      assertNotNull(jSONPath0);
      assertEquals("pZ>", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLIntegrityConstraintViolationException0, (String[]) null);
      assertNotNull(jSONArray0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning("@type", "1.2.68", 989);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: @type", sQLWarning0.toString());
      assertEquals(989, sQLWarning0.getErrorCode());
      assertEquals("@type", sQLWarning0.getMessage());
      assertEquals("1.2.68", sQLWarning0.getSQLState());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1194), (-3543), (-182), (-1366), (-780), (-29));
      assertNotNull(mockGregorianCalendar0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("'tCdrIaB^1CfQo", "?$]7JJEb8");
      assertNotNull(sQLTransientException0);
      assertEquals("?$]7JJEb8", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 'tCdrIaB^1CfQo", sQLTransientException0.toString());
      assertEquals("'tCdrIaB^1CfQo", sQLTransientException0.getMessage());
      
      String string0 = (String)JSONPath.reserveToObject("'tCdrIaB^1CfQo", (String[]) null);
      assertNotNull(string0);
      assertEquals("'tCdrIaB^1CfQo", string0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(42, false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("?$]7JJEb8");
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("java.sql.SQLNonTransientConnectionException: ?$]7JJEb8", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("?$]7JJEb8", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      HashSet<Annotation> hashSet0 = new HashSet<Annotation>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/11");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertNotNull(jSONPath_SegmentArray0);
      assertEquals(3, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/cause/stackTrace/5");
      assertFalse(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      JSONPath jSONPath0 = new JSONPath(";");
      assertNotNull(jSONPath0);
      assertEquals(";", jSONPath0.getPath());
      
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      int int0 = jSONPath0.size((Object) double0);
      assertEquals(";", jSONPath0.getPath());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      batchUpdateException0.printStackTrace();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/7", "/stackTrace/7", 1815, batchUpdateException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLTimeoutException0.toString());
      
      batchUpdateException0.setNextException(sQLTimeoutException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLTimeoutException0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLTimeoutException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.toString());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1815;
      intArray0[1] = 1815;
      intArray0[2] = 1815;
      intArray0[3] = 1815;
      intArray0[4] = 1815;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1815, 1815, 1815, 1815, 1815}, intArray0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("I", (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: I", sQLTransientConnectionException0.toString());
      assertEquals("I", sQLTransientConnectionException0.getMessage());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("UM;sg:T");
      assertNotNull(mockPrintStream0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Q-%L/X!a", "Q-%L/X!a", 1815);
      assertNotNull(sQLTransientConnectionException1);
      assertEquals("Q-%L/X!a", sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: Q-%L/X!a", sQLTransientConnectionException1.toString());
      assertEquals("Q-%L/X!a", sQLTransientConnectionException1.getMessage());
      assertEquals(1815, sQLTransientConnectionException1.getErrorCode());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionException1.printStackTrace((PrintStream) mockPrintStream0);
      assertEquals("Q-%L/X!a", sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: Q-%L/X!a", sQLTransientConnectionException1.toString());
      assertEquals("Q-%L/X!a", sQLTransientConnectionException1.getMessage());
      assertEquals(1815, sQLTransientConnectionException1.getErrorCode());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      StackTraceElement stackTraceElement0 = (StackTraceElement)JSONPath.eval((Object) sQLTransientConnectionException1, "/stackTrace/7");
      assertNotNull(stackTraceElement0);
      assertEquals("org.evosuite.testcase.execution.TestRunnable", stackTraceElement0.getClassName());
      assertEquals("org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:296)", stackTraceElement0.toString());
      assertEquals("TestRunnable.java", stackTraceElement0.getFileName());
      assertEquals("executeStatements", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(296, stackTraceElement0.getLineNumber());
      assertEquals("Q-%L/X!a", sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: Q-%L/X!a", sQLTransientConnectionException1.toString());
      assertEquals("Q-%L/X!a", sQLTransientConnectionException1.getMessage());
      assertEquals(1815, sQLTransientConnectionException1.getErrorCode());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      Short short0 = new Short((short)11);
      assertNotNull(short0);
      assertEquals((short)11, (short)short0);
      
      JSONPath jSONPath0 = new JSONPath("LE");
      assertNotNull(jSONPath0);
      assertEquals("LE", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, sQLTransientConnectionException0, mockPrintStream0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BETWEEN");
      assertNotNull(jSONPath0);
      assertEquals("BETWEEN", jSONPath0.getPath());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertNotNull(throwableDeserializer0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1436);
      intArray0[1] = (-1436);
      intArray0[2] = (-1436);
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";>,S9rPzA4d\"~k", "illegal ref, ", (-124), mockThrowable0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("illegal ref, ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ;>,S9rPzA4d\"~k", sQLTransientConnectionException0.toString());
      assertEquals(";>,S9rPzA4d\"~k", sQLTransientConnectionException0.getMessage());
      assertEquals((-124), sQLTransientConnectionException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(", but '", "Z+h+dK$)s \"", sQLTransientConnectionException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("illegal ref, ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ;>,S9rPzA4d\"~k", sQLTransientConnectionException0.toString());
      assertEquals(";>,S9rPzA4d\"~k", sQLTransientConnectionException0.getMessage());
      assertEquals((-124), sQLTransientConnectionException0.getErrorCode());
      assertEquals("Z+h+dK$)s \"", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(", but '", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: , but '", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$ValueSegment", "fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLTransientConnectionException1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("illegal ref, ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ;>,S9rPzA4d\"~k", sQLTransientConnectionException0.toString());
      assertEquals(";>,S9rPzA4d\"~k", sQLTransientConnectionException0.getMessage());
      assertEquals((-124), sQLTransientConnectionException0.getErrorCode());
      assertEquals("Z+h+dK$)s \"", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(", but '", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: , but '", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.alibaba.fastjson.JSONPath$ValueSegment", sQLTransientConnectionException1.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTransientConnectionException1.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$ValueSegment", sQLTransientConnectionException1.getMessage());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.safeMode", "fastjson.parser.safeMode", (-1436), intArray0, sQLTransientConnectionException1);
      assertNotNull(batchUpdateException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("illegal ref, ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ;>,S9rPzA4d\"~k", sQLTransientConnectionException0.toString());
      assertEquals(";>,S9rPzA4d\"~k", sQLTransientConnectionException0.getMessage());
      assertEquals((-124), sQLTransientConnectionException0.getErrorCode());
      assertEquals("Z+h+dK$)s \"", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(", but '", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: , but '", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.alibaba.fastjson.JSONPath$ValueSegment", sQLTransientConnectionException1.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTransientConnectionException1.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$ValueSegment", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: fastjson.parser.safeMode", batchUpdateException0.toString());
      assertEquals("fastjson.parser.safeMode", batchUpdateException0.getSQLState());
      assertEquals("fastjson.parser.safeMode", batchUpdateException0.getMessage());
      assertEquals((-1436), batchUpdateException0.getErrorCode());
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1436), (-1436), (-1436)}, intArray0);
      
      boolean boolean0 = jSONPath0.set((Object) "@vekfk.\"l:{v", (Object) batchUpdateException0);
      assertEquals("BETWEEN", jSONPath0.getPath());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("illegal ref, ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ;>,S9rPzA4d\"~k", sQLTransientConnectionException0.toString());
      assertEquals(";>,S9rPzA4d\"~k", sQLTransientConnectionException0.getMessage());
      assertEquals((-124), sQLTransientConnectionException0.getErrorCode());
      assertEquals("Z+h+dK$)s \"", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(", but '", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: , but '", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.alibaba.fastjson.JSONPath$ValueSegment", sQLTransientConnectionException1.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTransientConnectionException1.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$ValueSegment", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: fastjson.parser.safeMode", batchUpdateException0.toString());
      assertEquals("fastjson.parser.safeMode", batchUpdateException0.getSQLState());
      assertEquals("fastjson.parser.safeMode", batchUpdateException0.getMessage());
      assertEquals((-1436), batchUpdateException0.getErrorCode());
      assertTrue(boolean0);
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertEquals(3, intArray0.length);
      assertNotSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNotSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertArrayEquals(new int[] {(-1436), (-1436), (-1436)}, intArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONPath jSONPath1 = new JSONPath(", but '");
      assertNotNull(jSONPath1);
      assertEquals(", but '", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      String string0 = "com.alibaba.fastjson.JSONPath$MaxSegment";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MaxSegment");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      JSONPath jSONPath0 = JSONPath.compile("pZ>");
      assertNotNull(jSONPath0);
      assertEquals("pZ>", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLIntegrityConstraintViolationException0, (String[]) null);
      assertNotNull(jSONArray0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLWarning sQLWarning0 = new SQLWarning("@type", "1.2.68", 989);
      assertNotNull(sQLWarning0);
      assertEquals(989, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: @type", sQLWarning0.toString());
      assertEquals("@type", sQLWarning0.getMessage());
      assertEquals("1.2.68", sQLWarning0.getSQLState());
      
      Float float0 = new Float((-213.3939971923828));
      assertNotNull(float0);
      assertEquals((-213.394F), (float)float0, 0.01F);
      
      boolean boolean1 = jSONPath0.containsValue((Object) float0, (Object) class0);
      assertEquals("pZ>", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      boolean boolean2 = jSONPath0.removePropertyValue(jSONPath_SizeSegment0, "pZ>", true);
      assertEquals("pZ>", jSONPath0.getPath());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("false", (-1014497654951707614L), 4147696707147271408L, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("1.2.68");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 1.2.68", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("1.2.68", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      boolean boolean3 = jSONPath_IntBetweenSegement0.apply(jSONPath0, class0, "@type", sQLInvalidAuthorizationSpecException0);
      assertEquals("pZ>", jSONPath0.getPath());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 1.2.68", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("1.2.68", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("pZ>");
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: pZ>", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("pZ>", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment1 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment1);
      assertSame(jSONPath_SizeSegment1, jSONPath_SizeSegment0);
      
      boolean boolean4 = jSONPath_FilterGroup0.apply(jSONPath0, sQLIntegrityConstraintViolationException1, jSONPath_SizeSegment1, "false");
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: pZ>", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("pZ>", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("pZ>", jSONPath0.getPath());
      assertFalse(boolean4);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertNotSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertSame(jSONPath_SizeSegment1, jSONPath_SizeSegment0);
      
      Collection<Object> collection0 = jSONPath0.getPropertyValues(sQLIntegrityConstraintViolationException0);
      assertNotNull(collection0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("pZ>", jSONPath0.getPath());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertFalse(collection0.contains("1.2.68"));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNotSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("{_Vi.LL1KJ?5=pm6c`", (-1014497654951707614L), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      boolean boolean5 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_FilterGroup0, "false", jSONArray0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("pZ>", jSONPath0.getPath());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(boolean5);
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      JSONPath jSONPath0 = JSONPath.compile("pZ>");
      assertNotNull(jSONPath0);
      assertEquals("pZ>", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLIntegrityConstraintViolationException0, (String[]) null);
      assertNotNull(jSONArray0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning("@type", "1.2.68", 989);
      assertNotNull(sQLWarning0);
      assertEquals(989, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: @type", sQLWarning0.toString());
      assertEquals("@type", sQLWarning0.getMessage());
      assertEquals("1.2.68", sQLWarning0.getSQLState());
      
      Float float0 = new Float((-213.3939971923828));
      assertNotNull(float0);
      assertEquals((-213.394F), (float)float0, 0.01F);
      
      boolean boolean0 = jSONPath0.containsValue((Object) float0, (Object) class0);
      assertEquals("pZ>", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      boolean boolean1 = jSONPath0.removePropertyValue(jSONPath_SizeSegment0, "pZ>", false);
      assertEquals("pZ>", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("false", (-1014497654951707614L), 4147696707147271408L, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("1.2.68");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("1.2.68", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 1.2.68", sQLInvalidAuthorizationSpecException0.toString());
      
      boolean boolean2 = jSONPath_IntBetweenSegement0.apply(jSONPath0, class0, "@type", sQLInvalidAuthorizationSpecException0);
      assertEquals("pZ>", jSONPath0.getPath());
      assertEquals("1.2.68", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 1.2.68", sQLInvalidAuthorizationSpecException0.toString());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("pZ>");
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("pZ>", sQLIntegrityConstraintViolationException1.getMessage());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: pZ>", sQLIntegrityConstraintViolationException1.toString());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment1 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment1);
      assertSame(jSONPath_SizeSegment1, jSONPath_SizeSegment0);
      
      boolean boolean3 = jSONPath_FilterGroup0.apply(jSONPath0, sQLIntegrityConstraintViolationException1, jSONPath_SizeSegment1, "false");
      assertEquals("pZ>", jSONPath0.getPath());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("pZ>", sQLIntegrityConstraintViolationException1.getMessage());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: pZ>", sQLIntegrityConstraintViolationException1.toString());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertSame(jSONPath_SizeSegment1, jSONPath_SizeSegment0);
      assertNotSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      
      Collection<Object> collection0 = jSONPath0.getPropertyValues(sQLIntegrityConstraintViolationException0);
      assertNotNull(collection0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("pZ>", jSONPath0.getPath());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertFalse(collection0.contains("pZ>"));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNotSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("{_Vi.LL1KJ?5=pm6c", (-1014497654951707614L), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      boolean boolean4 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_FilterGroup0, "false", jSONArray0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("pZ>", jSONPath0.getPath());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(boolean4);
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_Operator0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map1 = JSONPath.paths((Object) map0, serializeConfig0);
      assertNotNull(map1);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(2, map1.size());
      assertFalse(map1.isEmpty());
      assertFalse(map1.equals((Object)map0));
      assertNotSame(map0, map1);
      assertNotSame(map1, map0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.EQ;
      assertSame(jSONPath_Operator1, jSONPath_Operator0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("LRo7qf<Am(^$fVL#yuf");
      assertNotNull(sQLTransientException0);
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: LRo7qf<Am(^$fVL#yuf", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("LRo7qf<Am(^$fVL#yuf", "LRo7qf<Am(^$fVL#yuf", (Throwable) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTimeoutException0.getMessage());
      assertEquals("LRo7qf<Am(^$fVL#yuf", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: LRo7qf<Am(^$fVL#yuf", sQLTimeoutException0.toString());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      
      MockDate mockDate0 = new MockDate((-308), (-308), (-308));
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransientException0, (Object) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeSupport", "j>%AAI\"& pGz", (String) null, (String[]) null, true);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath jSONPath0 = new JSONPath("$E:/$@^tdR /sx");
      assertNotNull(jSONPath0);
      assertEquals("$E:/$@^tdR /sx", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")");
      assertNotNull(jSONPath0);
      assertEquals(")", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(192);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      String string0 = "r{n\\WW?o4c}#_kd%(U.";
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")";
      stringArray0[1] = ")";
      stringArray0[2] = ")";
      stringArray0[3] = ")";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("r{nWW?o4c}#_kd%(U.", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      Object object0 = JSONPath.eval((Object) jSONPath_FilterSegment0, "fastjson.parser.safeMode");
      assertNull(object0);
      
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("v`P2", "d#OE*IGC}g", 83);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: v`P2", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("d#OE*IGC}g", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(83, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("v`P2", sQLInvalidAuthorizationSpecException0.getMessage());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(83, (-759), 1331);
      assertNotNull(jSONPath_RangeSegment0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.safeMode");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.safeMode", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath1, "d#OE*IGC}g", (Object) null);
      assertNotNull(arrayList0);
      assertEquals("fastjson.parser.safeMode", jSONPath1.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      Short short0 = new Short((short)666);
      assertNotNull(short0);
      assertEquals((short)666, (short)short0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "/cause/stackTrace/6", 83);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("/cause/stackTrace/6", sQLTimeoutException0.getSQLState());
      assertEquals(83, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      
      Throwable[] throwableArray0 = sQLTimeoutException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("/cause/stackTrace/6", sQLTimeoutException0.getSQLState());
      assertEquals(83, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, throwableArray0.length);
      
      // Undeclared exception!
      try { 
        jSONPath1.containsValue((Object) "null", (Object) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath(".(v");
      assertNotNull(jSONPath0);
      assertEquals(".(v", jSONPath0.getPath());
      
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
      assertEquals(".(v", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1951));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rP!u`)iUd@S=yY");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'u'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("16'Jf?AV~m>|TJ|z*", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("write", "write", (-2034458194));
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals((-2034458194), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: write", sQLFeatureNotSupportedException0.toString());
      assertEquals("write", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("write", sQLFeatureNotSupportedException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("16'Jf?AV~m>|TJ|z*");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: 16'Jf?AV~m>|TJ|z*", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLRecoverableException0, "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("java/lang/Short");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("java", string0);
      
      Class<String> class0 = String.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",  end ");
      assertFalse(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      JSONPath jSONPath0 = new JSONPath("@{D0oZg)z+BB;");
      assertNotNull(jSONPath0);
      assertEquals("@{D0oZg)z+BB;", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(",  end ");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(",  end ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ,  end ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(",  end ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ,  end ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      boolean boolean1 = JSONPath.containsValue((Object) uUID0, "nll", (Object) null);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath jSONPath1 = JSONPath.compile("/cause/stackTrace/4");
      assertNotNull(jSONPath1);
      assertEquals("/cause/stackTrace/4", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_MultiIndexSegment0, "Exceptions");
      assertNull(set0);
      
      String string0 = jSONPath1.getPath();
      assertNotNull(string0);
      assertEquals("/cause/stackTrace/4", jSONPath1.getPath());
      assertEquals("/cause/stackTrace/4", string0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      Float float0 = new Float((-2880.0F));
      assertNotNull(float0);
      assertEquals((-2880.0F), (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1640.6981325945665));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1640), bigDecimal0.shortValue());
      assertEquals((byte) (-104), bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = bigDecimal0.plus();
      assertNotNull(bigDecimal1);
      assertEquals((short) (-1640), bigDecimal0.shortValue());
      assertEquals((byte) (-104), bigDecimal0.byteValue());
      assertEquals((short) (-1640), bigDecimal1.shortValue());
      assertEquals((byte) (-104), bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      boolean boolean2 = JSONPath.eqNotNull(float0, bigDecimal0);
      assertEquals((short) (-1640), bigDecimal0.shortValue());
      assertEquals((byte) (-104), bigDecimal0.byteValue());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      batchUpdateException0.printStackTrace();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackrace/7", "/stackrace/7", 1815, batchUpdateException0);
      assertNotNull(sQLTimeoutException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNotNull(string0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", string0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      
      boolean boolean1 = JSONPath.containsValue((Object) sQLIntegrityConstraintViolationException0, "/stackTrace/2", (Object) sQLIntegrityConstraintViolationException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackrace/7", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/2");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/2", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("/stackrace/7");
      assertNotNull(jSONPath1);
      assertEquals("/stackrace/7", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      jSONPath0.init();
      assertEquals("/stackTrace/2", jSONPath0.getPath());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackrace/7");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("]/stackTrace/0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/0", jSONPath0.getPath());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/stackTrace/0", "com.alibaba.fastjson.serializer.DateCodec", 192);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(192, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("/stackTrace/0", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: /stackTrace/0", sQLNonTransientConnectionException0.toString());
      assertEquals("com.alibaba.fastjson.serializer.DateCodec", sQLNonTransientConnectionException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(192, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("/stackTrace/0", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: /stackTrace/0", sQLNonTransientConnectionException0.toString());
      assertEquals("com.alibaba.fastjson.serializer.DateCodec", sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: /stackTrace/0", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLNonTransientConnectionException: /stackTrace/0", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      int int0 = jSONPath0.size((Object) sQLIntegrityConstraintViolationException0);
      assertEquals("/stackTrace/0", jSONPath0.getPath());
      assertEquals(192, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("/stackTrace/0", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: /stackTrace/0", sQLNonTransientConnectionException0.toString());
      assertEquals("com.alibaba.fastjson.serializer.DateCodec", sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: /stackTrace/0", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLNonTransientConnectionException: /stackTrace/0", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONScanner jSONScanner0 = new JSONScanner("*");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Object[] objectArray0 = new Object[6];
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("*"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) treeSet0);
      assertNotNull(list0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(treeSet0.contains("*"));
      assertFalse(list0.contains("*"));
      
      objectArray0[5] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "*";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "*";
      objectArray0[4] = (Object) jSONPath0;
      // Undeclared exception!
      JSONPath.set(objectArray0[2], "deny", (Object) stack0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "nll";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nll");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nll
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",  end ");
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/2");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("!Y&`9=}hx+mu_V6z#f");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser1.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      String string0 = "value not found in path ";
      JSONPath jSONPath0 = JSONPath.compile("value not found in path ");
      assertNotNull(jSONPath0);
      assertEquals("value not found in path ", jSONPath0.getPath());
      
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      assertEquals("value not found in path ", jSONPath0.getPath());
      
      boolean boolean1 = JSONPath.JSONPathParser.isDigitFirst('>');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser(";");
      assertNotNull(jSONPath_JSONPathParser2);
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser0));
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser1));
      
      String string1 = jSONPath_JSONPathParser1.readName();
      assertNotNull(string1);
      assertEquals("f", string1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser2);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1933305337), (-1933305337), (-1933305337));
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[5] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("WW");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(", segement ", "'\"ftTK_");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(", segement ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: , segement ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("'\"ftTK_", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2139, 0, (-1087));
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("'\"ftTK_", jSONPath_RangeSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_Filter0);
      assertSame(jSONPath_RefOpSegement0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_RefOpSegement0);
      
      JSONPath.Filter jSONPath_Filter1 = jSONPath_JSONPathParser0.filterRest(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_Filter1);
      assertSame(jSONPath_RefOpSegement0, jSONPath_Filter1);
      assertSame(jSONPath_RefOpSegement0, jSONPath_Filter0);
      assertSame(jSONPath_Filter1, jSONPath_Filter0);
      assertSame(jSONPath_Filter1, jSONPath_RefOpSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile(", segement ");
      assertNotNull(jSONPath0);
      assertEquals(", segement ", jSONPath0.getPath());
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("WW", string0);
      
      boolean boolean0 = JSONPath.eqNotNull(0, 2139);
      assertFalse(boolean0);
      
      Object object0 = jSONPath0.getPropertyValue("WW", "WW", 307L);
      assertNull(object0);
      assertEquals(", segement ", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",  end ");
      assertFalse(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      JSONPath jSONPath0 = new JSONPath(";");
      assertNotNull(jSONPath0);
      assertEquals(";", jSONPath0.getPath());
      
      Class<BigInteger> class0 = BigInteger.class;
      Class<JSONPath> class1 = JSONPath.class;
      Class<UUID> class2 = UUID.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Field field0 = ParserConfig.getFieldFromCache("/cause/stackTrace/4", hashMap0);
      assertNull(field0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      FieldInfo fieldInfo0 = new FieldInfo("/cause/stackTrace/4", class1, class2, class0, (Field) null, (-996), 7, 1686);
      assertNotNull(fieldInfo0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("/cause/stackTrace/4", fieldInfo0.toString());
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(7, fieldInfo0.serialzeFeatures);
      assertEquals(1686, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertNotNull(beanContext0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("/cause/stackTrace/4", fieldInfo0.toString());
      assertEquals("", beanContext0.getLabel());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals("/cause/stackTrace/4", beanContext0.getName());
      assertEquals(7, beanContext0.getFeatures());
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(7, fieldInfo0.serialzeFeatures);
      assertEquals(1686, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      
      Method method0 = beanContext0.getMethod();
      assertNull(method0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("/cause/stackTrace/4", fieldInfo0.toString());
      assertEquals("", beanContext0.getLabel());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals("/cause/stackTrace/4", beanContext0.getName());
      assertEquals(7, beanContext0.getFeatures());
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(7, fieldInfo0.serialzeFeatures);
      assertEquals(1686, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      
      boolean boolean1 = jSONPath0.set((Object) ",  end ", (Object) null, true);
      assertEquals(";", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")");
      assertNotNull(jSONPath0);
      assertEquals(")", jSONPath0.getPath());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 192;
      intArray0[1] = 192;
      intArray0[2] = (-1117);
      intArray0[3] = (-1117);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {192, 192, (-1117), (-1117)}, intArray0);
      
      Byte byte0 = new Byte((byte)117);
      assertNotNull(byte0);
      assertEquals((byte)117, (byte)byte0);
      
      boolean boolean0 = jSONPath0.set((Object) ")", (Object) byte0, true);
      assertEquals(")", jSONPath0.getPath());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("j*ava.util.List");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1239);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      Double double0 = new Double((-2108.155));
      assertNotNull(double0);
      assertEquals((-2108.155), (double)double0, 0.01);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Double double0 = new Double(239.2506736114868);
      assertNotNull(double0);
      assertEquals(239.2506736114868, (double)double0, 0.01);
      
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('5');
      assertTrue(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=`di_w");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator1 = jSONPath_JSONPathParser0.readOp();
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator1, (Object) jSONPath_JSONPathParser0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertNotNull(sQLTransientException0);
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLTransientException0);
      assertNotNull(sQLWarning0);
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLTransactionRollbackException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransactionRollbackException: java.sql.SQLWarning", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      Spliterator<Throwable> spliterator0 = sQLTimeoutException0.spliterator();
      assertNotNull(spliterator0);
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransactionRollbackException: java.sql.SQLWarning", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "", sQLTransactionRollbackException0);
      assertNotNull(sQLTimeoutException1);
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLTimeoutException1.getSQLState());
      assertNull(sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      parserConfig0.addAccept("{\"$ref\":\"$\"}");
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      String string0 = "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer";
      // Undeclared exception!
      try { 
        JSONPath.size((Object) "", "NOT_RLIKE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "safeMode";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("safeMode", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(1, stringArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("JSONPath$StringOpSegement");
      assertNotNull(jSONPath0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = jSONPath0.size((Object) "safeMode");
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      Class<SQLException> class0 = SQLException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1), 47, 101);
      assertNotNull(jSONPath_RangeSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "safeMode", hashMap0);
      assertNotNull(arrayList0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Short short0 = new Short((short)1024);
      assertNotNull(short0);
      assertEquals((short)1024, (short)short0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)1024;
      intArray0[1] = 47;
      intArray0[2] = 40;
      intArray0[3] = 3845;
      intArray0[4] = (int) (short)1024;
      intArray0[5] = (int) (short)1024;
      intArray0[6] = (-1);
      intArray0[7] = (int) (short)1024;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("safeMode", "safeMode", 40, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals("safeMode", batchUpdateException0.getMessage());
      assertEquals("safeMode", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: safeMode", batchUpdateException0.toString());
      assertEquals(40, batchUpdateException0.getErrorCode());
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1024, 47, 40, 3845, 1024, 1024, (-1), 1024}, intArray0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) javaBeanDeserializer0, (Object) batchUpdateException0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals("safeMode", batchUpdateException0.getMessage());
      assertEquals("safeMode", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: safeMode", batchUpdateException0.toString());
      assertEquals(40, batchUpdateException0.getErrorCode());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1024, 47, 40, 3845, 1024, 1024, (-1), 1024}, intArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("parent");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("parent", string0);
      
      JSONPath jSONPath0 = new JSONPath("parent");
      assertNotNull(jSONPath0);
      assertEquals("parent", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(596);
      assertNotNull(integer0);
      assertEquals(596, (int)integer0);
      
      int int0 = jSONPath0.size((Object) hashMap0);
      assertEquals("parent", jSONPath0.getPath());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-1), int0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      int int1 = jSONPath0.evalSize(hashMap0);
      assertEquals("parent", jSONPath0.getPath());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("safeMode");
      assertNotNull(jSONPath0);
      assertEquals("safeMode", jSONPath0.getPath());
      
      String string0 = ",";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("+T", 693L, jSONPath_Operator0);
      assertNotNull(jSONPath_IntOpSegement0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath0, "+T", ",");
      assertEquals("safeMode", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("rlike");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      JSONPath.Operator jSONPath_Operator1 = jSONPath_JSONPathParser1.readOp();
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser1.readSegement();
      assertNull(jSONPath_Segment0);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        JSONPath.Operator.valueOf("`jUm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.JSONPath.Operator.`jUm
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "16'Jf?AV~m>|TJ|z*");
      assertFalse(boolean0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      Map<String, Object> map1 = JSONPath.paths((Object) null, (SerializeConfig) null);
      assertNotNull(map1);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertFalse(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      
      JSONPath jSONPath1 = new JSONPath("`");
      assertNotNull(jSONPath1);
      assertEquals("`", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      int int0 = jSONPath1.size((Object) "`");
      assertEquals("`", jSONPath1.getPath());
      assertEquals(2, int0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.deny", "fastjson.parser.autoTypeSupport", parserConfig0, (-1218), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1202, 273, (-1077));
      assertNotNull(jSONPath_RangeSegment0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      JSONPath jSONPath0 = new JSONPath(":");
      assertNotNull(jSONPath0);
      assertEquals(":", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("7^_\"7tL^<^vHk.Lbcu", ":", 4);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7^_\"7tL^<^vHk.Lbcu", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("7^_\"7tL^<^vHk.Lbcu", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(":", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(4, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, jSONPath0);
      assertNotNull(arrayList0);
      assertEquals(":", jSONPath0.getPath());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7^_\"7tL^<^vHk.Lbcu", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("7^_\"7tL^<^vHk.Lbcu", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(":", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(4, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = new Short((short) (-904));
      assertNotNull(short0);
      assertEquals((short) (-904), (short)short0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      
      boolean boolean0 = jSONPath0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertEquals(":", jSONPath0.getPath());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7^_\"7tL^<^vHk.Lbcu", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("7^_\"7tL^<^vHk.Lbcu", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(":", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(4, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(class0, "{7]rmpuR", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("kotlin.Metadata");
      assertNotNull(jSONPath0);
      assertEquals("kotlin.Metadata", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.containsValue((Object) "kotlin.Metadata", (Object) null);
      assertEquals("kotlin.Metadata", jSONPath0.getPath());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal", "fastjson.parser.safeMode");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("fastjson.parser.safeMode", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLTransactionRollbackException0.getMessage());
      
      Spliterator<Throwable> spliterator0 = sQLTransactionRollbackException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("fastjson.parser.safeMode", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLTransactionRollbackException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.safeMode", "fastjson.parser.deny.internal", sQLTransactionRollbackException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("fastjson.parser.safeMode", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLTransactionRollbackException0.getMessage());
      assertEquals("fastjson.parser.deny.internal", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.safeMode", sQLTimeoutException0.toString());
      
      parserConfig0.addAccept("fastjson.parser.deny.internal");
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = JSONPath.compile("in");
      assertNotNull(jSONPath0);
      assertEquals("in", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(spliterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // evalKeySet error : in
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal", "fastjson.parser.safeMode");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLTransactionRollbackException0.getSQLState());
      
      Spliterator<Throwable> spliterator0 = sQLTransactionRollbackException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLTransactionRollbackException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.safeMode", "fastjson.parser.deny.internal", sQLTransactionRollbackException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLTransactionRollbackException0.getSQLState());
      assertEquals("fastjson.parser.safeMode", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.safeMode", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLTimeoutException0.getSQLState());
      
      parserConfig0.addAccept("fastjson.parser.deny.internal");
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      int int0 = JSONPath.size((Object) serializeConfig0, "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer");
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals((-1), int0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("illeal jsonpath syntax. ", sQLTransactionRollbackException1, true);
      assertNotNull(jSONPath_ValueSegment0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      JSONPath jSONPath0 = JSONPath.compile("pZ>");
      assertNotNull(jSONPath0);
      assertEquals("pZ>", jSONPath0.getPath());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLNonTransientConnectionException0.getMessage());
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(149, 3493, 1301, 3484, (-1));
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, serializeConfig0, jSONPath_SizeSegment0, mockGregorianCalendar0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("pZ>", jSONPath0.getPath());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=149,MONTH=3493,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1301,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3484,HOUR_OF_DAY=3484,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(boolean0);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      
      boolean boolean1 = JSONPath.JSONPathParser.isDigitFirst('Z');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("<ULJ%;/I", "!.!tX", true);
      assertNotNull(jSONPath_ValueSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = new JSONPath("<ULJ%;/I", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("<ULJ%;/I", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, serializeConfig0, serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("<ULJ%;/I", jSONPath0.getPath());
      assertFalse(boolean0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("16'Jf?AV~m>|TJ|z*", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2, false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSONPath$IntOpSegement");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("JSONPath$IntOpSegement", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: JSONPath$IntOpSegement", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("RA", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("JSONPath$IntOpSegement", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: JSONPath$IntOpSegement", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("RA", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: RA", sQLFeatureNotSupportedException0.toString());
      
      Float float0 = new Float((float) 472);
      assertNotNull(float0);
      assertEquals(472.0F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal(1044L);
      assertNotNull(bigDecimal0);
      assertEquals((byte)20, bigDecimal0.byteValue());
      assertEquals((short)1044, bigDecimal0.shortValue());
      
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, float0);
      assertEquals((byte)20, bigDecimal0.byteValue());
      assertEquals((short)1044, bigDecimal0.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(1317L);
      assertNotNull(long0);
      assertEquals(1317L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-155L));
      assertNotNull(long1);
      assertEquals((-155L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(3904L);
      assertNotNull(long2);
      assertEquals(3904L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(",1pRUS;r}Cv", longArray0, false);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(3, longArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile(",1pRUS;r}Cv");
      assertNotNull(jSONPath0);
      assertEquals(",1pRUS;r}Cv", jSONPath0.getPath());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      SQLWarning sQLWarning0 = new SQLWarning(",1pRUS;r}Cv");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ,1pRUS;r}Cv", sQLWarning0.toString());
      assertEquals(",1pRUS;r}Cv", sQLWarning0.getMessage());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("like", "A<3'j5q", (-2306));
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("like", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-2306), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("A<3'j5q", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: like", sQLIntegrityConstraintViolationException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",1pRUS;r}Cv", "h#9Y]@m,", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("like", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-2306), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("A<3'j5q", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: like", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(",1pRUS;r}Cv", sQLTransientConnectionException0.getMessage());
      assertEquals("h#9Y]@m,", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ,1pRUS;r}Cv", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        jSONPath_IntObjInSegement0.apply(jSONPath0, sQLWarning0, sQLTransientConnectionException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("W.");
      assertNotNull(jSONPath0);
      assertEquals("W.", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) jSONPath_Operator0, objectArray0);
      assertEquals("W.", jSONPath0.getPath());
      assertEquals(0, objectArray0.length);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.And;
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-114), (-114), 39, 110, 110, 1342);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.REG_MATCH;
      assertFalse(jSONPath_Operator2.equals((Object)jSONPath_Operator0));
      assertFalse(jSONPath_Operator2.equals((Object)jSONPath_Operator1));
      assertNotSame(jSONPath_Operator2, jSONPath_Operator0);
      assertNotSame(jSONPath_Operator2, jSONPath_Operator1);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(mockGregorianCalendar0, "W.", (-5604252664643399704L), jSONPath_Operator2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path W., segement W.
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Object object0 = JSONPath.eval((Object) jSONPath0, "null");
      assertNull(object0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      SQLDataException sQLDataException0 = new SQLDataException("null", "null", 4197);
      assertNotNull(sQLDataException0);
      assertEquals(4197, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: null", sQLDataException0.toString());
      assertEquals("null", sQLDataException0.getSQLState());
      assertEquals("null", sQLDataException0.getMessage());
      
      String string0 = sQLDataException0.getLocalizedMessage();
      assertNotNull(string0);
      assertEquals(4197, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: null", sQLDataException0.toString());
      assertEquals("null", sQLDataException0.getSQLState());
      assertEquals("null", sQLDataException0.getMessage());
      assertEquals("null", string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("null"));
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string1 = "BETWEEN";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "BETWEEN";
      stringArray0[4] = "BETWEEN";
      stringArray0[5] = "BETWEEN";
      stringArray0[6] = "null";
      stringArray0[7] = "null";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("null", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "5e(A=BRudD@ex";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "5e(A=BRudD@ex";
      stringArray0[1] = "#{";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("authorities", "#{", "5e(A=BRudD@ex", stringArray0, true);
      assertNotNull(jSONPath_MatchSegement0);
      assertEquals(2, stringArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("5e(A=BRudD@ex", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("#{", (-234.10593441), jSONPath_Operator1);
      assertNotNull(jSONPath_DoubleOpSegement0);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "authorities", (Object) null);
      assertNull(object0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      Byte byte0 = new Byte((byte)52);
      assertNotNull(byte0);
      assertEquals((byte)52, (byte)byte0);
      
      // Undeclared exception!
      try { 
        Pattern.compile("#{", 65);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // #{
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/cause/stackTrace/4");
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*Z(TZzJ6Z`YBU[]p");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath", jSONPath0.getPath());
      
      SerializeConfig serializeConfig1 = new SerializeConfig();
      assertNotNull(serializeConfig1);
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      
      Integer integer0 = new Integer(156);
      assertNotNull(integer0);
      assertEquals(156, (int)integer0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      boolean boolean1 = JSONPath.set((Object) null, "*Z(TZzJ6Z`YBU[]p", (Object) "com.alibaba.fastjson.JSONPath");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
      assertEquals("com.alibaba.fastjson.JSONPath", jSONPath0.getPath());
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      Object object1 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object1);
      assertEquals("com.alibaba.fastjson.JSONPath", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONPath$Context");
      assertFalse(boolean0);
      
      String string0 = "g";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("g");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = null;
      try {
        jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      String string0 = "44VLhj;_A(Z=^%vohe";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("java.util.List");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("safeMode");
      assertNotNull(jSONPath0);
      assertEquals("safeMode", jSONPath0.getPath());
      
      int int0 = JSONPath.compare("safeMode", "java.util.List");
      assertEquals(9, int0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("rlike");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser1.readSegement();
      assertNotNull(jSONPath_Segment0);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "safeMode";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("safeMode", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(1, stringArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("JSONPath$StringOpSegement");
      assertNotNull(jSONPath0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("safeMode", "safeMode");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("safeMode", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("safeMode", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: safeMode", sQLSyntaxErrorException0.toString());
      
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) serializeConfig0, serializeConfig0);
      assertNotNull(map0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      
      int int0 = jSONPath0.size((Object) "safeMode");
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      Class<SQLException> class0 = SQLException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      Set<?> set0 = JSONPath.keySet((Object) map0, "safeMode");
      assertNull(set0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(101, (-1), (-1), 1, (-1), (-969));
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = jSONPath0.contains((Object) mockGregorianCalendar0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=101,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=-1,SECOND=-969,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(boolean0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath0, mockDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[6] = 1792;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{cIf+ w*z^", "}W1f]Y");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {cIf+ w*z^", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("}W1f]Y", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("{cIf+ w*z^", sQLIntegrityConstraintViolationException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1792}, intArray0);
      
      JSONPath jSONPath0 = JSONPath.compile("0ldO$oG");
      assertNotNull(jSONPath0);
      assertEquals("0ldO$oG", jSONPath0.getPath());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("0ldO$oG", (String) null, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {cIf+ w*z^", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("}W1f]Y", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("{cIf+ w*z^", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("0ldO$oG", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 0ldO$oG", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLInvalidAuthorizationSpecException0, false);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {cIf+ w*z^", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("}W1f]Y", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("{cIf+ w*z^", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("0ldO$oG", jSONPath0.getPath());
      assertEquals("0ldO$oG", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 0ldO$oG", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      
      jSONPath0.deepScan(parserConfig0, "fastjson.parser.autoTypeSupport", (List<Object>) null);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.deny", (-1932L), (-1932L), false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, (JSONPath.Filter) null, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath jSONPath1 = new JSONPath("GT");
      assertNotNull(jSONPath1);
      assertEquals("GT", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("fastjson.parser.autoTypeAccept");
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("fastjson.parser.autoTypeAccept", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: fastjson.parser.autoTypeAccept", sQLNonTransientException0.toString());
      
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath1, sQLNonTransientException0, (Object) null);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      assertEquals("GT", jSONPath1.getPath());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("fastjson.parser.autoTypeAccept", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: fastjson.parser.autoTypeAccept", sQLNonTransientException0.toString());
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal", "fastjson.parser.safeMode");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLTransactionRollbackException0.getSQLState());
      
      Spliterator<Throwable> spliterator0 = sQLTransactionRollbackException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLTransactionRollbackException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.safeMode", "fastjson.parser.deny.internal", sQLTransactionRollbackException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLTransactionRollbackException0.getSQLState());
      assertEquals("fastjson.parser.safeMode", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.safeMode", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLTimeoutException0.getSQLState());
      
      parserConfig0.addAccept("fastjson.parser.deny.internal");
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      int int0 = JSONPath.size((Object) serializeConfig0, "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer");
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals((-1), int0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.deny", 6007332606592876737L, (-1319L), false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig1);
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertNotSame(serializeConfig1, serializeConfig0);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertNotSame(parserConfig1, parserConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ParserConfig parserConfig2 = new ParserConfig(classLoader1);
      assertNotNull(parserConfig2);
      assertFalse(parserConfig2.isSafeMode());
      assertFalse(parserConfig2.isJacksonCompatible());
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("9I;%y]gq]xoeQO", serializeConfig1, parserConfig2);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig2.isSafeMode());
      assertFalse(parserConfig2.isJacksonCompatible());
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertEquals("9I;%y]gq]xoeQO", jSONPath0.getPath());
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertFalse(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      assertNotNull(jSONPath_FilterSegment0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLTimeoutException0, jSONPath_FilterSegment0, sQLClientInfoException0);
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.deny.internal", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLTransactionRollbackException0.getSQLState());
      assertEquals("fastjson.parser.safeMode", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.safeMode", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLTimeoutException0.getSQLState());
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertFalse(parserConfig2.isSafeMode());
      assertFalse(parserConfig2.isJacksonCompatible());
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertEquals("9I;%y]gq]xoeQO", jSONPath0.getPath());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertFalse(boolean0);
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(serializeConfig1, serializeConfig0);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotSame(parserConfig2, parserConfig1);
      assertNotSame(parserConfig2, parserConfig0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-856), (-1), (-1));
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(39, (-856), 39);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_Operator0, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -854
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)46;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)17, (byte)46}, byteArray0);
      
      String string0 = "height";
      SerializeConfig serializeConfig0 = new SerializeConfig(268435455, false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = new JSONPath(string0, serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("height", jSONPath0.getPath());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      jSONPath0.init();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("height", jSONPath0.getPath());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(parserConfig0.DENY_PROPERTY_INTERNAL);
      assertNotNull(jSONPath_JSONPathParser0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      boolean boolean2 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("sL7j}eOmBQ", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertTrue(boolean0);
      
      SerializeConfig serializeConfig1 = new SerializeConfig();
      assertNotNull(serializeConfig1);
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      
      Float float0 = new Float((float) (-838));
      assertNotNull(float0);
      assertEquals((-838.0F), (float)float0, 0.01F);
      
      Object object0 = jSONPath0.getPropertyValue(sQLInvalidAuthorizationSpecException0, "$VALUES", 0L);
      assertNull(object0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, object1, sQLDataException0);
      assertNotNull(arrayList0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%d8c");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_PropertySegment1);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertNotSame(jSONPath_PropertySegment1, jSONPath_PropertySegment0);
      
      JSONPath jSONPath1 = new JSONPath("$VALUES");
      assertNotNull(jSONPath1);
      assertEquals("$VALUES", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      int int0 = JSONPath.size((Object) jSONPath1, "sL7j}eOmBQ");
      assertEquals("$VALUES", jSONPath1.getPath());
      assertEquals((-1), int0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      long long0 = 516L;
      // Undeclared exception!
      try { 
        jSONPath1.setPropertyValue(object0, parserConfig0.DENY_PROPERTY_INTERNAL, long0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = ".(9lv";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".(9lv");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("null", string0);
      
      JSONPath jSONPath0 = new JSONPath("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      int int0 = 3;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3, 42, 44);
      assertNotNull(jSONPath_RangeSegment0);
      
      BigDecimal bigDecimal0 = new BigDecimal(4);
      assertNotNull(bigDecimal0);
      assertEquals((byte)4, bigDecimal0.byteValue());
      assertEquals((short)4, bigDecimal0.shortValue());
      
      int int1 = JSONPath.compare("null", "null");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutes(42, 42);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 42 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "authorities";
      JSONPath jSONPath0 = JSONPath.compile("authorities");
      assertNotNull(jSONPath0);
      assertEquals("authorities", jSONPath0.getPath());
      
      String string1 = "null";
      Class<SQLWarning> class0 = SQLWarning.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      assertNotNull(javaBeanSerializer0);
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) javaBeanSerializer0, "writeNull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'@~*z x0J)]EX]9 }R");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.buildArraySegement("%bRM5jMdiuO|");
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Lh!WB>0");
      assertNotNull(sQLRecoverableException0);
      assertEquals("Lh!WB>0", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: Lh!WB>0", sQLRecoverableException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation((-1935), false, false, (-1935), (-17), sQLRecoverableException0);
      assertNotNull(dataTruncation0);
      assertEquals("Lh!WB>0", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: Lh!WB>0", sQLRecoverableException0.toString());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      JSONPath jSONPath0 = JSONPath.compile("unsupported array put operation. ");
      assertNotNull(jSONPath0);
      assertEquals("unsupported array put operation. ", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLRecoverableException0);
      assertEquals("Lh!WB>0", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: Lh!WB>0", sQLRecoverableException0.toString());
      assertEquals("unsupported array put operation. ", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("%bRM5jMdiuO|");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("'@~*z x0J)]EX]9 }R");
      assertNotNull(jSONPath_JSONPathParser2);
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser0));
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser1));
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but 'R'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'~*zP x0J)]EX]9 }R");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.buildArraySegement("%bRM5jMdiuO|");
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Lh!WB>0");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: Lh!WB>0", sQLRecoverableException0.toString());
      assertEquals("Lh!WB>0", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation((-1935), false, false, 93, (-17), sQLRecoverableException0);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.SQLRecoverableException: Lh!WB>0", sQLRecoverableException0.toString());
      assertEquals("Lh!WB>0", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      JSONPath jSONPath0 = JSONPath.compile("unsupported array put operation. ");
      assertNotNull(jSONPath0);
      assertEquals("unsupported array put operation. ", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: Lh!WB>0", sQLRecoverableException0.toString());
      assertEquals("Lh!WB>0", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("unsupported array put operation. ", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("%bRM5jMdiuO|");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("'~*zP x0J)]EX]9 }R");
      assertNotNull(jSONPath_JSONPathParser2);
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser0));
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser1));
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but 'R'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("null", string0);
      
      JSONPath jSONPath0 = new JSONPath("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertNotNull(map0);
      assertEquals("null", jSONPath0.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      int int0 = jSONPath0.size((Object) "-Eq[k;uu");
      assertEquals("null", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("null", (-1), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      boolean boolean0 = jSONPath0.contains((Object) map0);
      assertEquals("null", jSONPath0.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertFalse(boolean0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("-Eq[k;uu", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLWarning sQLWarning0 = new SQLWarning("m\"rYV?m$^B,0-Fz", "null");
      assertNotNull(sQLWarning0);
      assertEquals("m\"rYV?m$^B,0-Fz", sQLWarning0.getMessage());
      assertEquals("null", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: m\"rYV?m$^B,0-Fz", sQLWarning0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*SCX><H8&%.vvaUs(", "*SCX><H8&%.vvaUs(", sQLWarning0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("m\"rYV?m$^B,0-Fz", sQLWarning0.getMessage());
      assertEquals("null", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: m\"rYV?m$^B,0-Fz", sQLWarning0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("*SCX><H8&%.vvaUs(", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: *SCX><H8&%.vvaUs(", sQLTimeoutException0.toString());
      assertEquals("*SCX><H8&%.vvaUs(", sQLTimeoutException0.getSQLState());
      
      boolean boolean1 = jSONPath_DoubleOpSegement0.apply(jSONPath0, float0, jSONPath_PropertySegment0, sQLTimeoutException0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals("m\"rYV?m$^B,0-Fz", sQLWarning0.getMessage());
      assertEquals("null", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: m\"rYV?m$^B,0-Fz", sQLWarning0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("*SCX><H8&%.vvaUs(", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: *SCX><H8&%.vvaUs(", sQLTimeoutException0.toString());
      assertEquals("*SCX><H8&%.vvaUs(", sQLTimeoutException0.getSQLState());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean2 = jSONPath_DoubleOpSegement0.apply(jSONPath0, "-Eq[k;uu", "-Eq[k;uu", mockGregorianCalendar0);
      assertEquals("null", jSONPath0.getPath());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("A:p%3NytOGw>", (-1), (-1), false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      // Undeclared exception!
      try { 
        jSONPath_IntBetweenSegement0.apply((JSONPath) null, sQLWarning0, (Object) null, jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$IntBetweenSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      
      jSONPath0.deepScan(parserConfig0, "fastjson.parser.autoTypeSupport", (List<Object>) null);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.deny", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.autoTypeAccept");
      assertNotNull(jSONPath2);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      
      jSONPath2.init();
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      // Undeclared exception!
      jSONPath1.deepSet(jSONPath0, "fastjson.parser.safeMode", 5614464919154503228L, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "16'Jf?AV~m>|TJ|z*";
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath jSONPath1 = JSONPath.compile("y9n)W3fH>0j6r+gQ@J");
      assertNotNull(jSONPath1);
      assertEquals("y9n)W3fH>0j6r+gQ@J", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      jSONPath1.deepSet(map0, "16'Jf?AV~m>|TJ|z*", (-8070393259084821111L), jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$WildCardSegment");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$WildCardSegment", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("com.alibaba.fastjson.JSONPath$WildCardSegment", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      String string0 = "y9n)W3fH\\>0j6r+gQ@J";
      JSONPath jSONPath1 = JSONPath.compile("y9n)W3fH>0j6r+gQ@J");
      assertNotNull(jSONPath1);
      assertEquals("y9n)W3fH>0j6r+gQ@J", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      jSONPath1.deepSet(map0, "com.alibaba.fastjson.JSONPath$WildCardSegment", (-8070393259084821111L), jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1619728504);
      intArray0[1] = (-36763560);
      intArray0[2] = 1663;
      intArray0[3] = (-1619728504);
      intArray0[4] = (-1619728504);
      intArray0[5] = (-36763560);
      intArray0[6] = (-36763560);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[k[gCVn;j:+ +bxkLJR", intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: [k[gCVn;j:+ +bxkLJR", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("[k[gCVn;j:+ +bxkLJR", batchUpdateException0.getMessage());
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1619728504), (-36763560), 1663, (-1619728504), (-1619728504), (-36763560), (-36763560)}, intArray0);
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("[k[gCVn;j:+ +bxkLJR", (String[]) null);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      Float float0 = new Float(3466.0078F);
      assertNotNull(float0);
      assertEquals(3466.0078F, (float)float0, 0.01F);
      
      boolean boolean0 = JSONPath.eqNotNull(1663, (-1619728504));
      assertFalse(boolean0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("yyyy-MM-dd HH:mm:ss", "[k[gCVn;j:+ +bxkLJR", 34, mockThrowable0);
      assertNotNull(sQLTransientException0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals(34, sQLTransientException0.getErrorCode());
      assertEquals("yyyy-MM-dd HH:mm:ss", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: yyyy-MM-dd HH:mm:ss", sQLTransientException0.toString());
      assertEquals("[k[gCVn;j:+ +bxkLJR", sQLTransientException0.getSQLState());
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-36763560);
      longArray0[1] = (long) (-1619728504);
      longArray0[2] = (long) 34;
      longArray0[2] = (long) 989;
      longArray0[4] = (long) (-1619728504);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("wi4^f-MW", longArray0, true);
      assertNotNull(jSONPath_IntInSegement0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-36763560L), (-1619728504L), 989L, 0L, (-1619728504L)}, longArray0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-36763560L), (-1619728504L), 989L, 0L, (-1619728504L)}, longArray0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$PropertySegment");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$PropertySegment", jSONPath0.getPath());
      
      boolean boolean1 = jSONPath_FilterSegment0.remove(jSONPath0, "wi4^f-MW", batchUpdateException0);
      assertEquals("com.alibaba.fastjson.JSONPath$PropertySegment", jSONPath0.getPath());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: [k[gCVn;j:+ +bxkLJR", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("[k[gCVn;j:+ +bxkLJR", batchUpdateException0.getMessage());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, intArray0.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new int[] {(-1619728504), (-36763560), 1663, (-1619728504), (-1619728504), (-36763560), (-36763560)}, intArray0);
      assertArrayEquals(new long[] {(-36763560L), (-1619728504L), 989L, 0L, (-1619728504L)}, longArray0);
      
      Object object0 = jSONPath0.eval((Object) sQLTransientException0);
      assertNull(object0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$PropertySegment", jSONPath0.getPath());
      assertEquals(34, sQLTransientException0.getErrorCode());
      assertEquals("yyyy-MM-dd HH:mm:ss", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: yyyy-MM-dd HH:mm:ss", sQLTransientException0.toString());
      assertEquals("[k[gCVn;j:+ +bxkLJR", sQLTransientException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)93;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)93}, byteArray0);
      
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      String string0 = "T.\\E kLm+q@";
      JSONPath jSONPath1 = new JSONPath("FS");
      assertNotNull(jSONPath1);
      assertEquals("FS", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "T.E kLm+q@";
      String string1 = "com.alibaba.fastjson.JSONPath";
      Object object0 = JSONPath.eval((Object) "16'Jf?AV~m>|TJ|z*", "com.alibaba.fastjson.JSONPath");
      assertNull(object0);
      
      objectArray0[1] = null;
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) javaBeanSerializer0, "FS", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("null", string0);
      
      JSONPath jSONPath0 = new JSONPath("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertNotNull(map0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      int int0 = jSONPath0.size((Object) "-Eq[k;uu");
      assertEquals("null", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("null", (-1), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      boolean boolean0 = false;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("-Eq[k;uu", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      boolean boolean1 = jSONPath_PropertySegment0.remove(jSONPath0, map0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.NonStringKeyAsString;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSONPath.extract("z;", "z;", parserConfig0, 256, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLDataException sQLDataException0 = new SQLDataException("44VLhj;_A(Z=^%vohe", "44VLhj;_A(Z=^%vohe");
      assertNotNull(sQLDataException0);
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("v", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      Integer integer0 = Integer.getInteger("fastjson.parser.safeMode");
      assertNull(integer0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, jSONPath_Operator0);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLDataException sQLDataException1 = new SQLDataException("fieldName", sQLDataException0);
      assertNotNull(sQLDataException1);
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("fieldName", sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: fieldName", sQLDataException1.toString());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLDataException1, sQLDataException1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLDataException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Long long0 = new Long(5614464919154503228L);
      assertNotNull(long0);
      assertEquals(5614464919154503228L, (long)long0);
      
      Short short0 = new Short((short)9);
      assertNotNull(short0);
      assertEquals((short)9, (short)short0);
      
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath0, jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.JSONObject$SecureObjectInputStream");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.alibaba.fastjson.JSONObject$SecureObjectInputStream", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONObject$SecureObjectInputStream", sQLInvalidAuthorizationSpecException0.getMessage());
      
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      assertNotNull(javaBeanSerializer0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)JSONPath.reserveToObject(sQLInvalidAuthorizationSpecException0, (String[]) null);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.alibaba.fastjson.JSONObject$SecureObjectInputStream", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONObject$SecureObjectInputStream", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.alibaba.fastjson.JSONObject$SecureObjectInputStream", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONObject$SecureObjectInputStream", sQLInvalidAuthorizationSpecException1.getMessage());
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("com.alibaba.fastjson.JSONObject$SecureObjectInputStream"));
      
      JSONPath jSONPath0 = JSONPath.compile("BETWEEN");
      assertNotNull(jSONPath0);
      assertEquals("BETWEEN", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(class0, "com.alibaba.fastjson.JSONObject$SecureObjectInputStream", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      intArray0[0] = 7;
      intArray0[1] = 102;
      intArray0[2] = 12;
      intArray0[3] = 1277;
      intArray0[4] = 688;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {7, 102, 12, 1277, 688}, intArray0);
      
      boolean boolean1 = JSONPath.contains((Object) jSONPath_MultiIndexSegment0, "'");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {7, 102, 12, 1277, 688}, intArray0);
      
      SQLDataException sQLDataException0 = new SQLDataException("", "like", 688);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(688, sQLDataException0.getErrorCode());
      assertEquals("like", sQLDataException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      JSONPath jSONPath0 = JSONPath.compile("like");
      assertNotNull(jSONPath0);
      assertEquals("like", jSONPath0.getPath());
      
      Integer integer0 = new Integer(393216);
      assertNotNull(integer0);
      assertEquals(393216, (int)integer0);
      
      Object object0 = jSONPath0.eval((Object) integer0);
      assertNull(object0);
      assertEquals("like", jSONPath0.getPath());
      
      boolean boolean2 = jSONPath0.remove((Object) null);
      assertEquals("like", jSONPath0.getPath());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      intArray0[0] = 7;
      intArray0[1] = 102;
      intArray0[2] = 12;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.util.OptionalLong", sQLTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.util.OptionalLong", sQLNonTransientConnectionException0.toString());
      assertEquals("java.util.OptionalLong", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[B", "in", sQLNonTransientConnectionException0);
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.util.OptionalLong", sQLNonTransientConnectionException0.toString());
      assertEquals("java.util.OptionalLong", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[B", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: [B", sQLRecoverableException0.toString());
      assertEquals("in", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.alibaba.fastjson.serializer.FieldSerializer");
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: com.alibaba.fastjson.serializer.FieldSerializer", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.serializer.FieldSerializer", sQLTimeoutException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("r178b[BG4", "java.util.OptionalLong", sQLTimeoutException0);
      assertNotNull(sQLRecoverableException1);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: com.alibaba.fastjson.serializer.FieldSerializer", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.serializer.FieldSerializer", sQLTimeoutException0.getMessage());
      assertEquals("r178b[BG4", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.util.OptionalLong", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: r178b[BG4", sQLRecoverableException1.toString());
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[B";
      stringArray0[1] = "com.alibaba.fastjson.serializer.FieldSerializer";
      stringArray0[2] = "java.util.OptionalLong";
      stringArray0[3] = "in";
      stringArray0[4] = "java.util.OptionalLong";
      stringArray0[5] = "java.util.OptionalLong";
      stringArray0[6] = "[B";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLNonTransientConnectionException0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-936L);
      longArray0[1] = 4254584350247334433L;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      longArray0[2] = 4254584350247334433L;
      longArray0[3] = (-1014497654951707614L);
      longArray0[4] = 1027L;
      longArray0[5] = (-2160L);
      longArray0[6] = (-2578L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement(";-k,5m]8~q}0j5gV1", longArray0, false);
      assertNotNull(jSONPath_IntInSegement0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-936L), 4254584350247334433L, 4254584350247334433L, (-1014497654951707614L), 1027L, (-2160L), (-2578L), 0L}, longArray0);
      
      JSONPath jSONPath0 = new JSONPath("%bRM5jMdiuO|");
      assertNotNull(jSONPath0);
      assertEquals("%bRM5jMdiuO|", jSONPath0.getPath());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";-k,5m]8~q}0j5gV1");
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('w');
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      boolean boolean1 = jSONPath_IntInSegement0.apply(jSONPath0, "%bRM5jMdiuO|", ";-k,5m]8~q}0j5gV1", (Object) null);
      assertEquals("%bRM5jMdiuO|", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-936L), 4254584350247334433L, 4254584350247334433L, (-1014497654951707614L), 1027L, (-2160L), (-2578L), 0L}, longArray0);
      
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("%bRM5jMdiuO|", "writeString", (-460), intArray0, (Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals((-460), batchUpdateException0.getErrorCode());
      assertEquals("writeString", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: %bRM5jMdiuO|", batchUpdateException0.toString());
      assertEquals("%bRM5jMdiuO|", batchUpdateException0.getMessage());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, batchUpdateException0);
      assertNotNull(jSONArray0);
      assertEquals((-460), batchUpdateException0.getErrorCode());
      assertEquals("writeString", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: %bRM5jMdiuO|", batchUpdateException0.toString());
      assertEquals("%bRM5jMdiuO|", batchUpdateException0.getMessage());
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("%bRM5jMdiuO|", jSONPath0.getPath());
      assertEquals(1, intArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      int[] intArray0 = new int[2];
      intArray0[1] = (-1117);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-1117)}, intArray0);
      
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, parserConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("lEZvJIU>['6]");
      assertNotNull(jSONPath0);
      assertEquals("lEZvJIU>['6]", jSONPath0.getPath());
      
      StringReader stringReader0 = new StringReader("lEZvJIU>['6]");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char char0 = 'f';
      UUID uUID0 = jSONReaderScanner0.scanUUID('f');
      assertNull(uUID0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONReaderScanner0, parserConfig0);
      assertNotNull(defaultJSONParser0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("error", jSONReaderScanner0.tokenName());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : lEZvJIU>['6]
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("UseISO8601D.teForma}");
      assertNotNull(jSONPath0);
      assertEquals("UseISO8601D.teForma}", jSONPath0.getPath());
      
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(0, stringArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      parserConfig0.setJacksonCompatible(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.deny");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.deny", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(127);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, sQLDataException0, jSONPath_ArrayAccessSegment0);
      assertNotNull(arrayList0);
      assertEquals("UseISO8601D.teForma}", jSONPath0.getPath());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertEquals(0, stringArray0.length);
      assertNotSame(jSONPath0, jSONPath1);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      assertNotNull(defaultJSONParser0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
      assertEquals("UseISO8601D.teForma}", jSONPath0.getPath());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object0 = JSONPath.extract("", "null");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = new JSONPath("in");
      assertNotNull(jSONPath0);
      assertEquals("in", jSONPath0.getPath());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("in");
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("in", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: in", sQLNonTransientConnectionException0.toString());
      
      sQLNonTransientConnectionException0.printStackTrace();
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("in", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: in", sQLNonTransientConnectionException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("in", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: in", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLNonTransientConnectionException: in", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: in", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
      assertEquals("in", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("dyQ[#*x", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath0 = new JSONPath("16'Jf?AV~m>|TJ|z*", (SerializeConfig) null, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("wL0o *=E'4Wb@]");
      assertNotNull(jSONPath0);
      assertEquals("wL0o *=E'4Wb@]", jSONPath0.getPath());
      
      MockThrowable mockThrowable0 = new MockThrowable("/stackTrace/12", (Throwable) null);
      assertNotNull(mockThrowable0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("wL0o *=E'4Wb@]", "~,g't3%sHnceB/ 'f", mockThrowable0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: /stackTrace/12", mockThrowable0.toString());
      assertEquals("/stackTrace/12", mockThrowable0.getMessage());
      assertEquals("wL0o *=E'4Wb@]", sQLTransientConnectionException0.getMessage());
      assertEquals("~,g't3%sHnceB/ 'f", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: wL0o *=E'4Wb@]", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      Throwable[] throwableArray0 = sQLTransientConnectionException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: /stackTrace/12", mockThrowable0.toString());
      assertEquals("/stackTrace/12", mockThrowable0.getMessage());
      assertEquals("wL0o *=E'4Wb@]", sQLTransientConnectionException0.getMessage());
      assertEquals("~,g't3%sHnceB/ 'f", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: wL0o *=E'4Wb@]", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      
      boolean boolean0 = JSONPath.contains((Object) sQLTransientConnectionException0, "/stackTrace/12");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: /stackTrace/12", mockThrowable0.toString());
      assertEquals("/stackTrace/12", mockThrowable0.getMessage());
      assertEquals("wL0o *=E'4Wb@]", sQLTransientConnectionException0.getMessage());
      assertEquals("~,g't3%sHnceB/ 'f", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: wL0o *=E'4Wb@]", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertTrue(boolean0);
      
      JSONPath jSONPath1 = new JSONPath("vb");
      assertNotNull(jSONPath1);
      assertEquals("vb", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      int int0 = jSONPath0.size((Object) null);
      assertEquals("wL0o *=E'4Wb@]", jSONPath0.getPath());
      assertEquals((-1), int0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNotNull(object0);
      assertEquals(16L, object0);
      
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath_NullSegement0);
      
      String string0 = "min";
      JSONPath jSONPath1 = new JSONPath("min");
      assertNotNull(jSONPath1);
      assertEquals("min", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig1);
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertTrue(serializeConfig1.isAsmEnable());
      assertSame(serializeConfig1, serializeConfig0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      Integer integer0 = new Integer(1187);
      assertNotNull(integer0);
      assertEquals(1187, (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)sQLClientInfoException0.fillInStackTrace();
      assertNotNull(sQLClientInfoException1);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertNull(sQLClientInfoException1.getMessage());
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("internal", "v", 79, sQLClientInfoException0);
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLTransientException: internal", sQLTransientException0.toString());
      assertEquals("v", sQLTransientException0.getSQLState());
      assertEquals(79, sQLTransientException0.getErrorCode());
      assertEquals("internal", sQLTransientException0.getMessage());
      
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath1, jSONPath_JSONPathParser0, sQLTransientException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNotNull(object0);
      assertEquals(16L, object0);
      
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath_NullSegement0);
      
      String string0 = "min";
      JSONPath jSONPath1 = new JSONPath("min");
      assertNotNull(jSONPath1);
      assertEquals("min", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig1);
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertSame(serializeConfig1, serializeConfig0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      Integer integer0 = new Integer(1187);
      assertNotNull(integer0);
      assertEquals(1187, (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException1);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("internal", "v", 79, sQLClientInfoException0);
      assertNotNull(sQLTransientException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("v", sQLTransientException0.getSQLState());
      assertEquals("internal", sQLTransientException0.getMessage());
      assertEquals(79, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: internal", sQLTransientException0.toString());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath1, jSONPath_JSONPathParser0, sQLTransientException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("\"-Fl<z0", "`Psa%r'Zb$F&)4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("null", string0);
      
      JSONPath jSONPath0 = new JSONPath("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = jSONPath0.size((Object) "-Eq[k;uu");
      assertEquals("null", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      JSONPath jSONPath1 = JSONPath.compile("null");
      assertNotNull(jSONPath1);
      assertEquals("null", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath1.size((Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      Object object0 = JSONPath.eval((Object) jSONPath0, "null");
      assertNull(object0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      JSONPath jSONPath1 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNotNull(jSONPath1);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Set<?> set0 = jSONPath1.evalKeySet(jSONPath_WildCardSegment0);
      assertNotNull(set0);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath1.getPath());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("com.alibaba.fastjson.JSONPath$StringOpSegement"));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",  end ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-3044L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("B,K)'BgTI{~V/O![P9");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-9007199254740974L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Long long0 = new Long(8488266005336625107L);
      assertNotNull(long0);
      assertEquals(8488266005336625107L, (long)long0);
      
      Long long1 = new Long(8488266005336625107L);
      assertNotNull(long1);
      assertEquals(8488266005336625107L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("ZY^#2B*\"", longArray0, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(1, longArray0.length);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m81");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ZY^#2B*\"", "m81", 49, (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(49, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("m81", sQLTransactionRollbackException0.getSQLState());
      assertEquals("ZY^#2B*\"", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ZY^#2B*\"", sQLTransactionRollbackException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLTransactionRollbackException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(49, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("m81", sQLTransactionRollbackException0.getSQLState());
      assertEquals("ZY^#2B*\"", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ZY^#2B*\"", sQLTransactionRollbackException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      
      Float float0 = new Float((-1893.0F));
      assertNotNull(float0);
      assertEquals((-1893.0F), (float)float0, 0.01F);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(long1, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      Long long0 = new Long(8488266005336625119L);
      assertNotNull(long0);
      assertEquals(8488266005336625119L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("ZY^#2B*\"&", longArray0, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(1, longArray0.length);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(80);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_ArrayAccessSegment0, serializeConfig0);
      assertNotNull(map0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(longArray0[0], bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) jSONPath0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      batchUpdateException0.printStackTrace();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackrace/7", "/stackrace/7", 1815, batchUpdateException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTimeoutException: /stackrace/7", sQLTimeoutException0.toString());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackrace/7", sQLTimeoutException0.getMessage());
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1201L;
      longArray0[1] = (long) 1815;
      longArray0[2] = (long) 1815;
      longArray0[3] = (long) 1815;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("t#^=X_", longArray0, true);
      assertNotNull(jSONPath_IntInSegement0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1201L, 1815L, 1815L, 1815L}, longArray0);
      
      JSONPath jSONPath0 = new JSONPath("t#^=X_");
      assertNotNull(jSONPath0);
      assertEquals("t#^=X_", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst(')');
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator1 = jSONPath_JSONPathParser0.readOp();
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("9GE.OyTT_wQ4P>R");
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("9GE.OyTT_wQ4P>R", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: 9GE.OyTT_wQ4P>R", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeAccept", "{/3wx[t3+H", 105);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(105, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: fastjson.parser.autoTypeAccept", sQLFeatureNotSupportedException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("{/3wx[t3+H", sQLFeatureNotSupportedException0.getSQLState());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.deny.internal", 0L, 0L, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      Float float0 = new Float((-3321.636465823903));
      assertNotNull(float0);
      assertEquals((-3321.6365F), (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal(105);
      assertNotNull(bigDecimal0);
      assertEquals((short)105, bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal1, bigDecimal0);
      
      int int0 = bigDecimal0.compareTo(bigDecimal1);
      assertEquals((short)105, bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(1, int0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      boolean boolean0 = JSONPath.eqNotNull(float0, bigDecimal0);
      assertEquals((short)105, bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertFalse(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotSame(bigDecimal0, bigDecimal1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement(".rU(sVni");
      assertNotNull(jSONPath_Segment0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "16'Jf?AV~m>|TJ|z*";
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("16'Jf?AV~m>|TJ|z*", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      int int0 = 2;
      SerializeConfig serializeConfig0 = new SerializeConfig(2, false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$RangeSegment", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("com.alibaba.fastjson.JSONPath$RangeSegment", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        jSONPath1.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class long
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "L";
      JSONPath jSONPath0 = new JSONPath("L");
      assertNotNull(jSONPath0);
      assertEquals("L", jSONPath0.getPath());
      
      Object[] objectArray0 = new Object[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$ValueSegment");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("com.alibaba.fastjson.JSONPath$ValueSegment", (-4270347329889690746L), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$ValueSegment", jSONPath0.getPath());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'b';
      charArray0[2] = 'E';
      charArray0[3] = 'C';
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(5, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'L', 'b', 'E', 'C', '\u0000'}, charArray0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(5, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'L', 'b', 'E', 'C', '\u0000'}, charArray0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(5, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'L', 'b', 'E', 'C', '\u0000'}, charArray0);
      
      int int0 = jSONPath1.evalSize(mockGregorianCalendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny", jSONPath1.getPath());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), int0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertEquals(5, charArray0.length);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONPath1, jSONPath0);
      assertArrayEquals(new char[] {'L', 'b', 'E', 'C', '\u0000'}, charArray0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny.internal");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath jSONPath2 = new JSONPath("!`P`");
      assertNotNull(jSONPath2);
      assertEquals("!`P`", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      
      Spliterator<Throwable> spliterator0 = sQLSyntaxErrorException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      UUID uUID0 = MockUUID.fromString("com.alibaba.fastjson.JSONPath$ValueSegment");
      assertNotNull(uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("SI'Kd>%|W@p){WKc[V", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: SI'Kd>%|W@p){WKc[V", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("SI'Kd>%|W@p){WKc[V", sQLClientInfoException0.getMessage());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: SI'Kd>%|W@p){WKc[V", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("SI'Kd>%|W@p){WKc[V", sQLClientInfoException0.getMessage());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("fastjson.parser.autoTypeSupport", "!`P`", map0, sQLSyntaxErrorException0);
      assertNotNull(sQLClientInfoException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: SI'Kd>%|W@p){WKc[V", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("SI'Kd>%|W@p){WKc[V", sQLClientInfoException0.getMessage());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("java.sql.SQLClientInfoException: fastjson.parser.autoTypeSupport", sQLClientInfoException1.toString());
      assertEquals("!`P`", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("!`P`");
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("!`P`", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: !`P`", sQLSyntaxErrorException1.toString());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath1, sQLClientInfoException1, sQLSyntaxErrorException1, parserConfig0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: SI'Kd>%|W@p){WKc[V", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("SI'Kd>%|W@p){WKc[V", sQLClientInfoException0.getMessage());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("java.sql.SQLClientInfoException: fastjson.parser.autoTypeSupport", sQLClientInfoException1.toString());
      assertEquals("!`P`", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLClientInfoException1.getMessage());
      assertEquals("!`P`", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: !`P`", sQLSyntaxErrorException1.toString());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny", jSONPath1.getPath());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertTrue(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath2));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertNotSame(jSONPath1, jSONPath2);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("wL0o *=E'4Wb@]");
      assertNotNull(jSONPath0);
      assertEquals("wL0o *=E'4Wb@]", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      String string0 = "null";
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "null", "com.alibaba.fastjson.JSONPath$Operator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Float float0 = new Float((double) 2048L);
      assertNotNull(float0);
      assertEquals(2048.0F, (float)float0, 0.01F);
      
      boolean boolean0 = jSONPath0.setPropertyValue("16'Jf?AV~m>|TJ|z*", "16'Jf?AV~m>|TJ|z*", 2048L, float0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(boolean0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("16'Jf?AV~m>|TJ|z*", "16'Jf?AV~m>|TJ|z*");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: 16'Jf?AV~m>|TJ|z*", sQLTimeoutException0.toString());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTimeoutException0.getSQLState());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTimeoutException0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("l", " QR", 2707);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(2707, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(" QR", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: l", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("l", sQLInvalidAuthorizationSpecException0.getMessage());
      
      int int0 = 38;
      SerializeConfig serializeConfig0 = new SerializeConfig(38);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath1 = new JSONPath("5@'X", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("5@'X", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement((String) null, "fastjson.parser.deny.internal", " QR", (String[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      Float float0 = new Float((float) (-1117));
      assertNotNull(float0);
      assertEquals((-1117.0F), (float)float0, 0.01F);
      
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Integer integer0 = new Integer(117);
      assertNotNull(integer0);
      assertEquals(117, (int)integer0);
      
      parserConfig0.compatibleWithJavaBean = true;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      // Undeclared exception!
      jSONPath0.set((Object) locale0, (Object) integer0, true);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Wk%";
      stringArray0[1] = "Wk%";
      stringArray0[2] = "Wk%";
      stringArray0[3] = "Wk%";
      stringArray0[4] = "Wk%";
      stringArray0[5] = "Wk%";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("Wk%", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(6, stringArray0.length);
      
      JSONPath jSONPath0 = new JSONPath("Wk%");
      assertNotNull(jSONPath0);
      assertEquals("Wk%", jSONPath0.getPath());
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "NOT_BETWEEN";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray1);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.JSONPath$FilterGroup", "");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterGroup", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.alibaba.fastjson.JSONPath$FilterGroup", sQLFeatureNotSupportedException0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("serializer", sQLFeatureNotSupportedException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterGroup", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.alibaba.fastjson.JSONPath$FilterGroup", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: serializer", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("serializer", sQLSyntaxErrorException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(",!J", sQLSyntaxErrorException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(",!J", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ,!J", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterGroup", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.alibaba.fastjson.JSONPath$FilterGroup", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: serializer", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("serializer", sQLSyntaxErrorException0.getMessage());
      
      boolean boolean0 = jSONPath0.set((Object) "Wk%", (Object) sQLTimeoutException0, true);
      assertEquals(",!J", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ,!J", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("Wk%", jSONPath0.getPath());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterGroup", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.alibaba.fastjson.JSONPath$FilterGroup", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: serializer", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("serializer", sQLSyntaxErrorException0.getMessage());
      assertTrue(boolean0);
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      jSONPath0.init();
      assertEquals("Wk%", jSONPath0.getPath());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Long long0 = (Long)jSONPath_JSONPathParser0.readValue();
      assertNotNull(long0);
      assertEquals(16L, (long)long0);
      
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      Map<String, Object> map0 = JSONPath.paths((Object) long0, serializeConfig0);
      assertNotNull(map0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      Integer integer0 = new Integer(366);
      assertNotNull(integer0);
      assertEquals(366, (int)integer0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.buildArraySegement("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath_PropertySegment0);
      
      Float float0 = new Float((float) 52);
      assertNotNull(float0);
      assertEquals(52.0F, (float)float0, 0.01F);
      
      boolean boolean0 = JSONPath.eqNotNull(float0, long0);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer((-793));
      assertNotNull(integer1);
      assertEquals((-793), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Double double0 = new Double((-171.94064));
      assertNotNull(double0);
      assertEquals((-171.94064), (double)double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-793);
      intArray0[1] = (-793);
      intArray0[2] = 366;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-793), (-793), 366}, intArray0);
      
      int int0 = jSONPath0.evalSize(jSONPath_MultiIndexSegment0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-793), (-793), 366}, intArray0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("hashCode");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath jSONPath1 = new JSONPath("D'zo=6tKl");
      assertNotNull(jSONPath1);
      assertEquals("D'zo=6tKl", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException0.getFailedProperties();
      assertNull(map1);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("B:Bki6WFoLmC$", "", (Map<String, ClientInfoStatus>) null);
      assertNotNull(sQLClientInfoException1);
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("B:Bki6WFoLmC$", sQLClientInfoException1.getMessage());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: B:Bki6WFoLmC$", sQLClientInfoException1.toString());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("min", sQLClientInfoException1);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("B:Bki6WFoLmC$", sQLClientInfoException1.getMessage());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: B:Bki6WFoLmC$", sQLClientInfoException1.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("min", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: min", sQLSyntaxErrorException0.toString());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      Spliterator<Throwable> spliterator0 = sQLSyntaxErrorException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("B:Bki6WFoLmC$", sQLClientInfoException1.getMessage());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: B:Bki6WFoLmC$", sQLClientInfoException1.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("min", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: min", sQLSyntaxErrorException0.toString());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      
      UUID uUID0 = MockUUID.fromString("hashCode");
      assertNotNull(uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      boolean boolean1 = jSONPath_NullSegement0.apply(jSONPath0, "16'Jf?AV~m>|TJ|z*", long0, float0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertTrue(boolean1);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONPath0, jSONPath1);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains((-793)));
      
      // Undeclared exception!
      try { 
        jSONPath1.deepScan("min", "com.alibaba.fastjson.JSONPath$IntOpSegement", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path D'zo=6tKl, segement com.alibaba.fastjson.JSONPath$IntOpSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2149;
      intArray0[1] = 2149;
      intArray0[2] = 2149;
      intArray0[3] = 2149;
      intArray0[4] = 1792;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("parent");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("parent", string0);
      
      JSONPath jSONPath0 = JSONPath.compile("parent");
      assertNotNull(jSONPath0);
      assertEquals("parent", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("parent");
      assertNotNull(jSONPath1);
      assertEquals("parent", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      Class<String> class0 = String.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath1.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("parent", jSONPath1.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_4_String
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      assertEquals(PropertyNamingStrategy.PascalCase, propertyNamingStrategy0);
      
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "D}=%j>MK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("7u", "()[C");
      assertNotNull(sQLRecoverableException0);
      assertEquals("()[C", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 7u", sQLRecoverableException0.toString());
      assertEquals("7u", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Byte byte0 = new Byte((byte)3);
      assertNotNull(byte0);
      assertEquals((byte)3, (byte)byte0);
      
      JSONPath.arrayAdd((Object) byte0, "null", (Object[]) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("$j");
      assertNotNull(sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("$j", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: $j", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      
      Spliterator<Throwable> spliterator0 = sQLTransientException0.spliterator();
      assertNotNull(spliterator0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("$j", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: $j", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("notWriteDefaultValue", "C+!@C8->v", sQLRecoverableException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("()[C", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 7u", sQLRecoverableException0.toString());
      assertEquals("7u", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: notWriteDefaultValue", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("notWriteDefaultValue", sQLTimeoutException0.getMessage());
      assertEquals("C+!@C8->v", sQLTimeoutException0.getSQLState());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("v", 1792.0, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5e(A=BRudD@x";
      stringArray0[1] = "5e(A=BRudD@x";
      stringArray0[2] = "5e(A=BRudD@x";
      stringArray0[3] = "sq[pJk}^M-_6D^()";
      stringArray0[4] = "5e(A=BRudD@x";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("sq[pJk}^M-_6D^()", "sq[pJk}^M-_6D^()", "5e(A=BRudD@x", stringArray0, false);
      assertNotNull(jSONPath_MatchSegement0);
      assertEquals(5, stringArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath0 = new JSONPath("sq[pJk}^M-_6D^()", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("sq[pJk}^M-_6D^()", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('.');
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("}w]Mh-t", (-1014497654951707614L), 1651L, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertEquals(5, stringArray0.length);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("5e(A=BRudD@x");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      JSONPath.Operator jSONPath_Operator1 = jSONPath_JSONPathParser0.readOp();
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
      assertSame(jSONPath_Operator1, jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5e(A=BRudD@x";
      stringArray0[1] = "5e(A=BRudD@x";
      stringArray0[2] = "5e(A=BRudD@x";
      stringArray0[3] = "sq[pJk}^M-_6D^()";
      stringArray0[4] = "5e(A=BRudD@x";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("sq[pJk}^M-_6D^()", "sq[pJk}^M-_6D^()", "5e(A=BRudD@x", stringArray0, false);
      assertNotNull(jSONPath_MatchSegement0);
      assertEquals(5, stringArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('.');
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("}w]Mh-t", (-1014497654951707614L), 1651L, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertEquals(5, stringArray0.length);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("5e(A=BRudD@x");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      JSONPath.Operator jSONPath_Operator1 = jSONPath_JSONPathParser0.readOp();
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
      assertSame(jSONPath_Operator1, jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("UseISO8601DateFormat");
      assertNotNull(jSONPath0);
      assertEquals("UseISO8601DateFormat", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("<gU'i4,$8Hz\"G:!LiE");
      assertNotNull(jSONPath1);
      assertEquals("<gU'i4,$8Hz\"G:!LiE", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_WildCardSegment0, serializeConfig0);
      assertNotNull(map0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("9GE.OyTT_wQ4P>R");
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("9GE.OyTT_wQ4P>R", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: 9GE.OyTT_wQ4P>R", sQLTransientException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeAccept", "{/3wx[t3+H", 105);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("fastjson.parser.autoTypeAccept", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(105, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: fastjson.parser.autoTypeAccept", sQLFeatureNotSupportedException0.toString());
      assertEquals("{/3wx[t3+H", sQLFeatureNotSupportedException0.getSQLState());
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.deny.internal", 0L, 0L, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      boolean boolean0 = JSONPath.remove((Object) jSONPath_IntBetweenSegement0, "com.alibaba.fastjson.serializer.AwtCodec");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "16'Jf?AV~m>|TJ|z*";
      String string1 = "/stackTrace/7";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/7");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("$VALUES");
      assertNotNull(jSONPath0);
      assertEquals("$VALUES", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) "/stackTrace/7", serializeConfig0);
      assertNotNull(map0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      String string2 = null;
      int int0 = (-1611526256);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "hJVZ3X:jG9sV$6+_", (-1611526256));
      assertNotNull(sQLDataException0);
      assertEquals((-1611526256), sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertEquals("hJVZ3X:jG9sV$6+_", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      
      int int1 = jSONPath0.size((Object) sQLDataException0);
      assertEquals("$VALUES", jSONPath0.getPath());
      assertEquals((-1611526256), sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertEquals("hJVZ3X:jG9sV$6+_", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("in", (-1), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("I`>W.*c", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      String string3 = "\":\"";
      SQLWarning sQLWarning0 = new SQLWarning("\":\"", "in");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("\":\"", sQLWarning0.getMessage());
      assertEquals("in", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: \":\"", sQLWarning0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Eq[k;uu", "m\"rYV?m$^B,0-Fz", sQLDataException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("m\"rYV?m$^B,0-Fz", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Eq[k;uu", sQLTimeoutException0.toString());
      assertEquals("Eq[k;uu", sQLTimeoutException0.getMessage());
      assertEquals((-1611526256), sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertEquals("hJVZ3X:jG9sV$6+_", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath jSONPath1 = JSONPath.compile("\":\"");
      assertNotNull(jSONPath1);
      assertEquals("\":\"", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$VALUES");
      assertNotNull(jSONPath0);
      assertEquals("$VALUES", jSONPath0.getPath());
      
      DataTruncation dataTruncation0 = new DataTruncation(17, true, true, (-56613888), 40);
      assertNotNull(dataTruncation0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      boolean boolean0 = jSONPath0.remove((Object) dataTruncation0);
      assertEquals("$VALUES", jSONPath0.getPath());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath(";Ljava/lang/reflect/Type;)Ljava/lang/Object;", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(";Ljava/lang/reflect/Type;)Ljava/lang/Object;", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      JSON.DEFAULT_GENERATE_FEATURE = (-1559);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(111, 4045, 200, (-771), 200, 118);
      assertNotNull(mockGregorianCalendar0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("16'Jf?AV~m>|TJ|z*", "Ffk(d>o R");
      assertNotNull(sQLTransientException0);
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: 16'Jf?AV~m>|TJ|z*", sQLTransientException0.toString());
      assertEquals("Ffk(d>o R", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray1);
      assertNull(object0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2326, true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("16'Jf?AV~m>|TJ|z*", "Ffk(d>o R");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: 16'Jf?AV~m>|TJ|z*", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Ffk(d>o R", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLNonTransientConnectionException0.getMessage());
      
      Set<?> set0 = JSONPath.keySet((Object) sQLNonTransientConnectionException0, "Ffk(d>o R");
      assertNull(set0);
      assertEquals("java.sql.SQLNonTransientConnectionException: 16'Jf?AV~m>|TJ|z*", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Ffk(d>o R", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLNonTransientConnectionException0.getMessage());
      
      Object object1 = null;
      boolean boolean0 = jSONPath0.remove(object1);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("T.E kLm+q@");
      assertNotNull(jSONPath0);
      assertEquals("T.E kLm+q@", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("setToken", serializeConfig0, (ParserConfig) null);
      assertNotNull(jSONPath1);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("setToken", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "T.E kLm+q@", 48, hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(48, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("T.E kLm+q@", sQLClientInfoException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      
      // Undeclared exception!
      try { 
        jSONPath1.remove((Object) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(FZ)V");
      assertNotNull(jSONPath0);
      assertEquals("(FZ)V", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(FZ)V");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Throwable throwable0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("(FZ)V", (Throwable) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("(FZ)V", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: (FZ)V", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "(FZ)V";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "(FZ)V";
      objectArray0[3] = (Object) jSONPath_JSONPathParser0;
      objectArray0[4] = (Object) null;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1275, 1275, (-2927));
      assertNotNull(jSONPath_RangeSegment0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLTransactionRollbackException0, sQLNonTransientConnectionException0);
      assertNotNull(arrayList0);
      assertEquals("(FZ)V", jSONPath0.getPath());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLInvalidAuthorizationSpecException0, "_7HL+HS.%;^vnIh~D", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : _7HL+HS.%;^vnIh~D
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("p>", sQLTransactionRollbackException0, false);
      assertNotNull(jSONPath_ValueSegment0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      JSONPath jSONPath0 = new JSONPath("p>");
      assertNotNull(jSONPath0);
      assertEquals("p>", jSONPath0.getPath());
      
      boolean boolean1 = jSONPath_ValueSegment0.apply(jSONPath0, class0, "p>", jSONPath_SizeSegment0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals("p>", jSONPath0.getPath());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("p>");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: p>", sQLNonTransientConnectionException0.toString());
      assertEquals("p>", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      boolean boolean2 = jSONPath_ValueSegment0.apply(jSONPath0, sQLNonTransientConnectionException0, sQLTransactionRollbackException0, sQLNonTransientConnectionException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals("p>", jSONPath0.getPath());
      assertEquals("java.sql.SQLNonTransientConnectionException: p>", sQLNonTransientConnectionException0.toString());
      assertEquals("p>", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("p>");
      assertNotNull(jSONPath_NotNullSegement0);
      
      SQLDataException sQLDataException0 = new SQLDataException("true", "true");
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: true", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("true", sQLDataException0.getSQLState());
      assertEquals("true", sQLDataException0.getMessage());
      
      boolean boolean3 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath_ValueSegment0, jSONPath_ValueSegment0, sQLDataException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals("p>", jSONPath0.getPath());
      assertEquals("java.sql.SQLDataException: true", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("true", sQLDataException0.getSQLState());
      assertEquals("true", sQLDataException0.getMessage());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = jSONPath0.contains((Object) sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals("p>", jSONPath0.getPath());
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("16'Jf?AV~m>|TJ|z*", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      Class<Long> class0 = Long.class;
      SerializeConfig serializeConfig0 = new SerializeConfig(2, false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$RangeSegment", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("com.alibaba.fastjson.JSONPath$RangeSegment", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JavaBeanSerializer javaBeanSerializer0 = jSONPath1.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("com.alibaba.fastjson.JSONPath$RangeSegment", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSONPath$IntOpSegement");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("JSONPath$IntOpSegement", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: JSONPath$IntOpSegement", sQLIntegrityConstraintViolationException0.toString());
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.safeMode");
      assertNotNull(jSONPath_NotNullSegement0);
      
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class1);
      assertNotNull(javaBeanSerializer1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("WwVYg%/5u1~Toh18", "/stackTrace/7");
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("/stackTrace/7", sQLRecoverableException0.getSQLState());
      assertEquals("WwVYg%/5u1~Toh18", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: WwVYg%/5u1~Toh18", sQLRecoverableException0.toString());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("16'Jf?AV~m>|TJ|z*", "JSONPath$Operator", 2);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(2, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("JSONPath$Operator", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 16'Jf?AV~m>|TJ|z*", sQLInvalidAuthorizationSpecException0.toString());
      
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath1, (Object) null, sQLRecoverableException0, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("/stackTrace/7", sQLRecoverableException0.getSQLState());
      assertEquals("WwVYg%/5u1~Toh18", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: WwVYg%/5u1~Toh18", sQLRecoverableException0.toString());
      assertEquals(2, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("JSONPath$Operator", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 16'Jf?AV~m>|TJ|z*", sQLInvalidAuthorizationSpecException0.toString());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("com.alibaba.fastjson.JSONPath$RangeSegment", jSONPath1.getPath());
      assertFalse(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_Operator0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map1 = JSONPath.paths((Object) map0, serializeConfig0);
      assertNotNull(map1);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(map1.isEmpty());
      assertEquals(2, map1.size());
      assertFalse(map1.equals((Object)map0));
      assertNotSame(map0, map1);
      assertNotSame(map1, map0);
      
      String string0 = "Eq[k;uu";
      JSONPath jSONPath0 = new JSONPath("Eq[k;uu", serializeConfig0, (ParserConfig) null);
      assertNotNull(jSONPath0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("Eq[k;uu", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_Operator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. Eq[k;uu
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=Qp\"KX]D4od'u%R\u00008");
      assertNotNull(jSONPath0);
      assertEquals("=Qp\"KX]D4od'u%R\u00008", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) serializeConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte byte0 = (byte)90;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONPath$RegMatchSegement");
      assertFalse(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONPath$RegMatchSegement");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = "/stackTrace/13";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/13");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("java.util.List");
      assertNotNull(jSONPath_NullSegement0);
      
      Double double0 = new Double((-1.793346304E9));
      assertNotNull(double0);
      assertEquals((-1.793346304E9), (double)double0, 0.01);
      
      JSONPath jSONPath0 = JSONPath.compile("E");
      assertNotNull(jSONPath0);
      assertEquals("E", jSONPath0.getPath());
      
      SQLDataException sQLDataException0 = new SQLDataException("java.util.List");
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.util.List", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.util.List", sQLDataException0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLDataException0);
      assertNotNull(sQLWarning0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.util.List", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.util.List", sQLDataException0.toString());
      assertEquals("java.sql.SQLDataException: java.util.List", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLDataException: java.util.List", sQLWarning0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "_sfd$^,zX", 92, sQLWarning0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.util.List", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.util.List", sQLDataException0.toString());
      assertEquals("java.sql.SQLDataException: java.util.List", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLDataException: java.util.List", sQLWarning0.toString());
      assertEquals(92, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("_sfd$^,zX", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, (Object) null, sQLIntegrityConstraintViolationException0, jSONPath_SizeSegment0);
      assertEquals("E", jSONPath0.getPath());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.util.List", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.util.List", sQLDataException0.toString());
      assertEquals("java.sql.SQLDataException: java.util.List", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLDataException: java.util.List", sQLWarning0.toString());
      assertEquals(92, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("_sfd$^,zX", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertTrue(boolean0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      Integer integer0 = new Integer(1187);
      assertNotNull(integer0);
      assertEquals(1187, (int)integer0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      DataTruncation dataTruncation0 = new DataTruncation(1187, true, true, (-1517), (-2387), sQLWarning0);
      assertNotNull(dataTruncation0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.util.List", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.util.List", sQLDataException0.toString());
      assertEquals("java.sql.SQLDataException: java.util.List", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLDataException: java.util.List", sQLWarning0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      boolean boolean2 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, (Object) null);
      assertEquals("E", jSONPath0.getPath());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("Oc0E");
      assertNotNull(jSONPath0);
      assertEquals("Oc0E", jSONPath0.getPath());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, batchUpdateException0, (Object) null);
      assertEquals("Oc0E", jSONPath0.getPath());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertFalse(boolean0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertNotNull(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oc0E";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$IntObjInSegement";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$IntObjInSegement";
      stringArray0[3] = "Oc0E";
      stringArray0[4] = "Oc0E";
      stringArray0[5] = "com.alibaba.fastjson.JSONPath$IntObjInSegement";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(calendar0, stringArray0);
      assertNotNull(jSONArray0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(6, jSONArray0.size());
      assertEquals(6, stringArray0.length);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 60;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Oc0E", intArray0);
      assertNotNull(batchUpdateException1);
      assertEquals("Oc0E", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: Oc0E", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3, 60}, intArray0);
      
      Object object0 = JSONPath.eval((Object) batchUpdateException1, "com.alibaba.fastjson.JSONPath$IntObjInSegement");
      assertNull(object0);
      assertEquals("Oc0E", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: Oc0E", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals(2, intArray0.length);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertArrayEquals(new int[] {3, 60}, intArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Object object0 = JSONPath.eval((Object) jSONPath0, "null");
      assertNull(object0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("com.alibaba.fastjson.JSONPath$ValueSegment", clientInfoStatus0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("16'Jf?AV~m>|TJ|z*", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: 16'Jf?AV~m>|TJ|z*", sQLClientInfoException0.toString());
      
      jSONPath0.deepSet((Object) null, "k8iYZ:zzY)JeB;*X_", 1094L, sQLClientInfoException0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: 16'Jf?AV~m>|TJ|z*", sQLClientInfoException0.toString());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("kotlin.reflect.jvm.internal.KClassImpl", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath jSONPath1 = new JSONPath("?!/=R_oCPLBG;j");
      assertNotNull(jSONPath1);
      assertEquals("?!/=R_oCPLBG;j", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object1 = jSONPath_JSONPathParser0.readValue();
      assertNotNull(object1);
      assertEquals(16L, object1);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m81");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-9007199254740974L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONPath$Operator";
      stringArray0[1] = "JSONPath$Operator";
      Long long0 = new Long((-1628L));
      assertNotNull(long0);
      assertEquals((-1628L), (long)long0);
      
      Long long1 = new Long(1203232727967308606L);
      assertNotNull(long1);
      assertEquals(1203232727967308606L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long1;
      longArray0[1] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("JSONPath$Operator", longArray0, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(2, longArray0.length);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m81");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("m81");
      assertNotNull(jSONPath0);
      assertEquals("m81", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("AZ1$AK8Fg:_vkC7V]`q", "between", 3590, (Throwable) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: AZ1$AK8Fg:_vkC7V]`q", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("AZ1$AK8Fg:_vkC7V]`q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(3590, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("between", sQLIntegrityConstraintViolationException0.getSQLState());
      
      Set<?> set0 = jSONPath0.evalKeySet(sQLIntegrityConstraintViolationException0);
      assertNotNull(set0);
      assertEquals("m81", jSONPath0.getPath());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: AZ1$AK8Fg:_vkC7V]`q", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("AZ1$AK8Fg:_vkC7V]`q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(3590, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("between", sQLIntegrityConstraintViolationException0.getSQLState());
      assertFalse(set0.isEmpty());
      assertEquals(5, set0.size());
      assertFalse(set0.contains("JSONPath$Operator"));
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(3590);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "+o2{bC skp5@U0rz";
      JSONPath jSONPath0 = JSONPath.compile("+o2{bC skp5@U0rz");
      assertNotNull(jSONPath0);
      assertEquals("+o2{bC skp5@U0rz", jSONPath0.getPath());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2334), 687, (-1757));
      assertNotNull(jSONPath_RangeSegment0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      assertNotNull(batchUpdateException1);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, batchUpdateException1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("dyQ[#*x");
      assertNotNull(jSONPath0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_SizeSegment0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) jSONPath0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLDataException sQLDataException0 = new SQLDataException("44VLhj;_A(Z=^%vohe", "44VLhj;_A(Z=^%vohe");
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      Integer integer0 = Integer.getInteger("fastjson.parser.safeMode");
      assertNull(integer0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = JSONPath.remove((Object) aSMDeserializerFactory0, "c");
      assertFalse(boolean0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2139, 2139, 2139, 2139, 1792, 2139, 2139}, intArray0);
      
      jSONPath1.init();
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      Pattern pattern0 = Pattern.compile("jsonpath can not be null");
      assertNotNull(pattern0);
      assertEquals("jsonpath can not be null", pattern0.pattern());
      assertEquals("jsonpath can not be null", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("6+iVo$=8m4O", pattern0, jSONPath_Operator0);
      assertNotNull(jSONPath_RegMatchSegement0);
      assertEquals("jsonpath can not be null", pattern0.pattern());
      assertEquals("jsonpath can not be null", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("z8cpvlQ)2b|$");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: z8cpvlQ)2b|$", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("z8cpvlQ)2b|$", sQLIntegrityConstraintViolationException0.getMessage());
      
      boolean boolean1 = jSONPath_RegMatchSegement0.apply(jSONPath1, "jsonpath can not be null", aSMDeserializerFactory0, sQLIntegrityConstraintViolationException0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertEquals("jsonpath can not be null", pattern0.pattern());
      assertEquals("jsonpath can not be null", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: z8cpvlQ)2b|$", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("z8cpvlQ)2b|$", sQLIntegrityConstraintViolationException0.getMessage());
      assertFalse(boolean1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONPath1, jSONPath0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      boolean boolean2 = jSONPath_RegMatchSegement0.apply(jSONPath0, "jsonpath can not be null", bigInteger0, "v");
      assertEquals("jsonpath can not be null", pattern0.pattern());
      assertEquals("jsonpath can not be null", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2163, (-32), 2324);
      assertNotNull(jSONPath_RangeSegment0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath1, object0, sQLDataException0);
      assertNotNull(arrayList0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(2139));
      
      jSONPath0.deepGetPropertyValues(object0, arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertFalse(arrayList1.contains(2139));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(4647432019745535567L);
      assertNotNull(long0);
      assertEquals(4647432019745535567L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONWriter", longArray0, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(2, longArray0.length);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" E{Gn}=)!u");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("(J)Ljava/lang/Long;");
      assertNotNull(jSONPath0);
      assertEquals("(J)Ljava/lang/Long;", jSONPath0.getPath());
      
      Set<?> set0 = jSONPath0.evalKeySet(long0);
      assertNotNull(set0);
      assertEquals("(J)Ljava/lang/Long;", jSONPath0.getPath());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("com.alibaba.fastjson.JSONWriter"));
      assertFalse(long0.equals((Object)long1));
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNull(object0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("l", string0);
      
      JSONPath jSONPath0 = new JSONPath("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertNotNull(map0);
      assertEquals("null", jSONPath0.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      int int0 = jSONPath0.size((Object) "7e5TO");
      assertEquals("null", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("null", (-1), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      Class<SQLException> class0 = SQLException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNull(object0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "null";
      JSONPath jSONPath0 = new JSONPath("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertNotNull(map0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int0 = jSONPath0.size((Object) double0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byte byte0 = (byte)122;
      byteArray0[2] = (byte)122;
      byte byte1 = (byte)52;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)48;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)25;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short)2073, bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)122, (byte)52, (byte)48, (byte)0, (byte)8, (byte)25}, byteArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((short)2073, bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short)2073, bigDecimal0.shortValue());
      assertEquals((byte)25, bigDecimal0.byteValue());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)122, (byte)52, (byte)48, (byte)0, (byte)8, (byte)25}, byteArray0);
      
      boolean boolean0 = jSONPath0.contains((Object) bigDecimal0);
      assertEquals((short)2073, bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short)2073, bigDecimal0.shortValue());
      assertEquals((byte)25, bigDecimal0.byteValue());
      assertEquals("null", jSONPath0.getPath());
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)122, (byte)52, (byte)48, (byte)0, (byte)8, (byte)25}, byteArray0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7e5TO");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("x:+SU", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(15, (byte)122, (-1190));
      assertNotNull(jSONPath_RangeSegment0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, (Object) null);
      assertNotNull(arrayList0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "com.alibaba.fastjson.serializer.EnumerationSerializer", (byte)52, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fE0");
      assertNotNull(jSONPath0);
      assertEquals("fE0", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-85)}, byteArray0);
      
      String string0 = "jsonpath error, path ";
      JSONPath jSONPath0 = JSONPath.compile("jsonpath error, path ");
      assertNotNull(jSONPath0);
      assertEquals("jsonpath error, path ", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "XA0@#]=G`p";
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("XA0@#]=G`p", serializeConfig0, (ParserConfig) null);
      assertNotNull(jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("XA0@#]=G`p", jSONPath0.getPath());
      
      JSONPath jSONPath1 = null;
      int int0 = (-1031);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem((JSONPath) null, (Object) null, (-1031));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5(^S;<`5tIcLjW4}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("5(^S;<`5tIcLjW4}");
      assertNotNull(jSONPath_Segment0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      Short short0 = new Short((short)83);
      assertNotNull(short0);
      assertEquals((short)83, (short)short0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      boolean boolean1 = JSONPath.eq(short0, short0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLDataException sQLDataException0 = new SQLDataException("44VLhj;_A(Z=^%vohe", "44VLhj;_A(Z=^%vohe");
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("v", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      Integer integer0 = Integer.getInteger("fastjson.parser.safeMode");
      assertNull(integer0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, jSONPath_Operator0);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = JSONPath.remove((Object) aSMDeserializerFactory0, "s");
      assertFalse(boolean0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2139, 2139, 2139, 2139, 1792, 2139, 2139}, intArray0);
      
      jSONPath1.init();
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      Byte byte0 = new Byte((byte)61);
      assertNotNull(byte0);
      assertEquals((byte)61, (byte)byte0);
      
      boolean boolean1 = jSONPath_PropertySegment0.remove(jSONPath1, byte0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(boolean1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONPath1, jSONPath0);
      
      SerializeConfig serializeConfig1 = new SerializeConfig(16384);
      assertNotNull(serializeConfig1);
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertTrue(serializeConfig1.isAsmEnable());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("s", true);
      assertNotNull(jSONPath_PropertySegment1);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_PropertySegment1, serializeConfig0);
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertFalse(serializeConfig0.equals((Object)serializeConfig1));
      assertNotSame(jSONPath_PropertySegment1, jSONPath_PropertySegment0);
      assertNotSame(serializeConfig0, serializeConfig1);
      
      boolean boolean2 = jSONPath1.removePropertyValue(map0, "fastjson.parser.deny", true);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(boolean2);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertFalse(serializeConfig0.equals((Object)serializeConfig1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath_PropertySegment1, jSONPath_PropertySegment0);
      assertNotSame(serializeConfig0, serializeConfig1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLDataException sQLDataException0 = new SQLDataException("44VLhj;_A(Z=^%vohe", "44VLhj;_A(Z=^%vohe");
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("v", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      Integer integer0 = Integer.getInteger("fastjson.parser.safeMode");
      assertNull(integer0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, jSONPath_Operator0);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      String string0 = "s";
      boolean boolean0 = JSONPath.remove((Object) aSMDeserializerFactory0, "s");
      assertFalse(boolean0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2139, 2139, 2139, 2139, 1792, 2139, 2139}, intArray0);
      
      jSONPath1.init();
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      Byte byte0 = new Byte((byte)61);
      assertNotNull(byte0);
      assertEquals((byte)61, (byte)byte0);
      
      boolean boolean1 = jSONPath_PropertySegment0.remove(jSONPath1, byte0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(boolean1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONPath1, jSONPath0);
      
      SerializeConfig serializeConfig1 = new SerializeConfig(16384);
      assertNotNull(serializeConfig1);
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("s", true);
      assertNotNull(jSONPath_PropertySegment1);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_PropertySegment1, serializeConfig0);
      assertNotNull(map0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertFalse(serializeConfig0.equals((Object)serializeConfig1));
      assertNotSame(jSONPath_PropertySegment1, jSONPath_PropertySegment0);
      assertNotSame(serializeConfig0, serializeConfig1);
      
      boolean boolean2 = jSONPath1.removePropertyValue(map0, "fastjson.parser.deny", true);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(boolean2);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertFalse(serializeConfig0.equals((Object)serializeConfig1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath_PropertySegment1, jSONPath_PropertySegment0);
      assertNotSame(serializeConfig0, serializeConfig1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("w;G e3i0H~Do>");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : w;G e3i0H~Do>
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(1317L);
      assertNotNull(long0);
      assertEquals(1317L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-155L));
      assertNotNull(long1);
      assertEquals((-155L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-1580386065683472715L));
      assertNotNull(long2);
      assertEquals((-1580386065683472715L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(",1pRUS;r7}Cv", longArray0, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(3, longArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile(",1pRUS;r7}Cv");
      assertNotNull(jSONPath0);
      assertEquals(",1pRUS;r7}Cv", jSONPath0.getPath());
      
      SQLWarning sQLWarning0 = new SQLWarning(",1pRUS;r7}Cv");
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals(",1pRUS;r7}Cv", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ,1pRUS;r7}Cv", sQLWarning0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("like", "A<3'j5q", (-2306));
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("like", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: like", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("A<3'j5q", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-2306), sQLIntegrityConstraintViolationException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",1pRUS;r7}Cv", "h#9Y]@m,", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("like", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: like", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("A<3'j5q", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-2306), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("h#9Y]@m,", sQLTransientConnectionException0.getSQLState());
      assertEquals(",1pRUS;r7}Cv", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ,1pRUS;r7}Cv", sQLTransientConnectionException0.toString());
      
      JSONPath jSONPath1 = JSONPath.compile("h#9Y]@m,");
      assertNotNull(jSONPath1);
      assertEquals("h#9Y]@m,", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2306));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ID1A:3?4", "~?-O7y*t8i]b~,", (-2306), hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-2306), sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ID1A:3?4", sQLClientInfoException0.toString());
      assertEquals("ID1A:3?4", sQLClientInfoException0.getMessage());
      assertEquals("~?-O7y*t8i]b~,", sQLClientInfoException0.getSQLState());
      
      boolean boolean0 = jSONPath1.removePropertyValue(sQLClientInfoException0, "ID1A:3?4", true);
      assertEquals("h#9Y]@m,", jSONPath1.getPath());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-2306), sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ID1A:3?4", sQLClientInfoException0.toString());
      assertEquals("ID1A:3?4", sQLClientInfoException0.getMessage());
      assertEquals("~?-O7y*t8i]b~,", sQLClientInfoException0.getSQLState());
      assertFalse(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(Ljava/lang/String;)V");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. (Ljava/lang/String;)V
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("null", string0);
      
      JSONPath jSONPath0 = JSONPath.compile("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int0 = jSONPath0.size((Object) "-Eq[k;uu");
      assertEquals("null", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("null", (-1), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("-Eq[k;uu", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, hashMap0);
      assertEquals("null", jSONPath0.getPath());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "16'Jf?AV~m>|TJ|z*";
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      List<ContextValueFilter> list0 = javaBeanSerializer0.getContextValueFilters();
      assertNotNull(list0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Object> list1 = javaBeanSerializer0.getObjectFieldValues("16'Jf?AV~m>|TJ|z*");
      assertNotNull(list1);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(list1.contains("16'Jf?AV~m>|TJ|z*"));
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("16'Jf?AV~m>|TJ|z*", list1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$ValueSegment");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("k:0=Neq|U/@Y[", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$ValueSegment", 648L, 8537233257283452655L, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser(" QR");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser1.filterRest(jSONPath_IntBetweenSegement0);
      assertNotNull(jSONPath_Filter0);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertSame(jSONPath_IntBetweenSegement0, jSONPath_Filter0);
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      assertSame(jSONPath_Filter0, jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      assertNotNull(jSONPath_FilterSegment0);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("9;", "9;");
      assertNotNull(sQLRecoverableException0);
      assertEquals("9;", sQLRecoverableException0.getSQLState());
      assertEquals("9;", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: 9;", sQLRecoverableException0.toString());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLRecoverableException0, "/'dR*TJJq'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /'dR*TJJq'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("aMu_V5e=@E8)\")o 5");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("gW';qfA)CV");
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("aMu_V5e=@E8)\")o 5");
      assertNotNull(jSONPath_NotNullSegement0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = 3949;
      intArray0[2] = 79;
      intArray0[3] = 0;
      intArray0[4] = 512;
      intArray0[5] = 979;
      intArray0[6] = 83;
      intArray0[7] = 13;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {7, 3949, 79, 0, 512, 979, 83, 13}, intArray0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("between");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("between", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: between", sQLIntegrityConstraintViolationException0.toString());
      
      // Undeclared exception!
      try { 
        jSONPath_NotNullSegement0.apply((JSONPath) null, jSONPath_MultiIndexSegment0, jSONPath_JSONPathParser0, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$NotNullSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("L");
      assertNotNull(jSONPath0);
      assertEquals("L", jSONPath0.getPath());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("L", "^dk5]E5hnXQR2b", (-32));
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals((-32), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("L", sQLNonTransientConnectionException0.getMessage());
      assertEquals("^dk5]E5hnXQR2b", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: L", sQLNonTransientConnectionException0.toString());
      
      boolean boolean0 = jSONPath0.remove((Object) sQLNonTransientConnectionException0);
      assertEquals("L", jSONPath0.getPath());
      assertEquals((-32), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("L", sQLNonTransientConnectionException0.getMessage());
      assertEquals("^dk5]E5hnXQR2b", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: L", sQLNonTransientConnectionException0.toString());
      assertFalse(boolean0);
      
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      assertEquals("L", jSONPath0.getPath());
      
      Double double0 = new Double(3.0);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      int int0 = jSONPath0.size((Object) double0);
      assertEquals("L", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath1 = new JSONPath("L", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("L", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Set<?> set0 = jSONPath1.evalKeySet(double0);
      assertNull(set0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("L", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("L");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(4647432019745535567L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "16'Jf?AV~m>|TJ|z*");
      assertFalse(boolean0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      Map<String, Object> map1 = JSONPath.paths((Object) null, (SerializeConfig) null);
      assertNotNull(map1);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertFalse(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      
      JSONPath jSONPath1 = new JSONPath("`");
      assertNotNull(jSONPath1);
      assertEquals("`", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      Set<?> set0 = jSONPath1.keySet((Object) jSONPath0);
      assertNull(set0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals("`", jSONPath1.getPath());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      String string1 = "|N\"";
      JSONPath jSONPath0 = JSONPath.compile("|N\"");
      assertNotNull(jSONPath0);
      assertEquals("|N\"", jSONPath0.getPath());
      
      String string2 = "com.alibaba.fastjson.JSONPath$MatchSegement";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONPath0;
      objectArray0[1] = (Object) "|N\"";
      objectArray0[2] = (Object) "com.alibaba.fastjson.JSONPath$MatchSegement";
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(104);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      assertNotNull(jSONPath_MaxSegment0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.JSONPath$MatchSegement", "hs`(V12,-G1INC");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("hs`(V12,-G1INC", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$MatchSegement", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.alibaba.fastjson.JSONPath$MatchSegement", sQLFeatureNotSupportedException0.toString());
      
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "", sQLFeatureNotSupportedException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "v";
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_WildCardSegment0, "v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_Operator0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      String string0 = "null";
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "-", "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "safeMode";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("safeMode", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(1, stringArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("JSONPath$StringOpSegement");
      assertNotNull(jSONPath0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("safeMode", "safeMode");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("safeMode", sQLSyntaxErrorException0.getMessage());
      assertEquals("safeMode", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: safeMode", sQLSyntaxErrorException0.toString());
      
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      int int0 = jSONPath0.size((Object) "safeMode");
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      Class<SQLException> class0 = SQLException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(101, (-1), (-1), 1, (-1), 215);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = jSONPath0.contains((Object) mockGregorianCalendar0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=101,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=-1,SECOND=215,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(boolean0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertEquals(1, stringArray0.length);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("safeMode", "SEPu4R", 1, sQLSyntaxErrorException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("safeMode", sQLSyntaxErrorException0.getMessage());
      assertEquals("safeMode", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: safeMode", sQLSyntaxErrorException0.toString());
      assertEquals(1, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: safeMode", sQLTransactionRollbackException0.toString());
      assertEquals("safeMode", sQLTransactionRollbackException0.getMessage());
      assertEquals("SEPu4R", sQLTransactionRollbackException0.getSQLState());
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, serializeConfig0, sQLTransactionRollbackException0);
      assertNotNull(jSONArray0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertEquals("safeMode", sQLSyntaxErrorException0.getMessage());
      assertEquals("safeMode", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: safeMode", sQLSyntaxErrorException0.toString());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(1, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: safeMode", sQLTransactionRollbackException0.toString());
      assertEquals("safeMode", sQLTransactionRollbackException0.getMessage());
      assertEquals("SEPu4R", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException1);
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[3] = 2139;
      Long long0 = new Long(2139);
      assertNotNull(long0);
      assertEquals(2139L, (long)long0);
      
      Long[] longArray0 = new Long[9];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = long0;
      Long long1 = new Long((-3359L));
      assertNotNull(long1);
      assertEquals((-3359L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[6] = long1;
      longArray0[5] = long0;
      longArray0[8] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("}v", longArray0, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(9, longArray0.length);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertEquals(9, longArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath(" (;[`vAAUL%hS", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(" (;[`vAAUL%hS", jSONPath0.getPath());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("j~", "fastjson.parser.autoTypeSupport");
      assertNotNull(sQLNonTransientException0);
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: j~", sQLNonTransientException0.toString());
      assertEquals("j~", sQLNonTransientException0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeSupport", "fastjson.parser.deny", sQLNonTransientException0);
      assertNotNull(sQLDataException0);
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: j~", sQLNonTransientException0.toString());
      assertEquals("j~", sQLNonTransientException0.getMessage());
      assertEquals("fastjson.parser.autoTypeSupport", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: fastjson.parser.autoTypeSupport", sQLDataException0.toString());
      assertEquals("fastjson.parser.deny", sQLDataException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny", sQLDataException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: j~", sQLNonTransientException0.toString());
      assertEquals("j~", sQLNonTransientException0.getMessage());
      assertEquals("fastjson.parser.autoTypeSupport", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: fastjson.parser.autoTypeSupport", sQLDataException0.toString());
      assertEquals("fastjson.parser.deny", sQLDataException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("fastjson.parser.deny", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.deny", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: j~", sQLNonTransientException0.toString());
      assertEquals("j~", sQLNonTransientException0.getMessage());
      assertEquals("fastjson.parser.autoTypeSupport", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: fastjson.parser.autoTypeSupport", sQLDataException0.toString());
      assertEquals("fastjson.parser.deny", sQLDataException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("fastjson.parser.deny", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.deny", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.deny", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.deny", sQLTransientConnectionException0.toString());
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, serializeConfig0, sQLTransientConnectionException0);
      assertNotNull(jSONArray0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(" (;[`vAAUL%hS", jSONPath0.getPath());
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: j~", sQLNonTransientException0.toString());
      assertEquals("j~", sQLNonTransientException0.getMessage());
      assertEquals("fastjson.parser.autoTypeSupport", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: fastjson.parser.autoTypeSupport", sQLDataException0.toString());
      assertEquals("fastjson.parser.deny", sQLDataException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("fastjson.parser.deny", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.deny", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.deny", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.deny", sQLTransientConnectionException0.toString());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(9, longArray0.length);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      JSONPath jSONPath0 = JSONPath.compile("v");
      assertNotNull(jSONPath0);
      assertEquals("v", jSONPath0.getPath());
      
      int int0 = jSONPath0.size((Object) "v");
      assertEquals("v", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      Class<DataTruncation> class0 = DataTruncation.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("v", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(215, (-1), (-1), (-1), (-1), 215);
      assertNotNull(mockGregorianCalendar0);
      
      SQLWarning sQLWarning0 = new SQLWarning("rlike", "v", 8);
      assertNotNull(sQLWarning0);
      assertEquals("v", sQLWarning0.getSQLState());
      assertEquals(8, sQLWarning0.getErrorCode());
      assertEquals("rlike", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: rlike", sQLWarning0.toString());
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("v", jSONPath0.getPath());
      assertTrue(boolean0);
      
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("v", stringArray0, true);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(2, stringArray0.length);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertEquals(2, stringArray0.length);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("v", "v", (-1), sQLWarning0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("v", sQLWarning0.getSQLState());
      assertEquals(8, sQLWarning0.getErrorCode());
      assertEquals("rlike", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: rlike", sQLWarning0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: v", sQLTransactionRollbackException0.toString());
      assertEquals("v", sQLTransactionRollbackException0.getMessage());
      assertEquals("v", sQLTransactionRollbackException0.getSQLState());
      assertEquals((-1), sQLTransactionRollbackException0.getErrorCode());
      
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.serializer.AfterFilter");
      assertNotNull(jSONPath1);
      assertEquals("com.alibaba.fastjson.serializer.AfterFilter", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath1, "v", sQLWarning0);
      assertNotNull(jSONArray0);
      assertEquals("v", sQLWarning0.getSQLState());
      assertEquals(8, sQLWarning0.getErrorCode());
      assertEquals("rlike", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: rlike", sQLWarning0.toString());
      assertEquals("com.alibaba.fastjson.serializer.AfterFilter", jSONPath1.getPath());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertEquals(2, stringArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertTrue(boolean0);
      
      Object object0 = jSONPath0.eval((Object) parserConfig0);
      assertNull(object0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      int int0 = jSONPath0.size((Object) null);
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("vYBxDW");
      assertNotNull(jSONPath0);
      assertEquals("vYBxDW", jSONPath0.getPath());
      
      Integer integer0 = new Integer(18);
      assertNotNull(integer0);
      assertEquals(18, (int)integer0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) "vYBxDW", (Object) integer0);
      assertEquals("vYBxDW", jSONPath0.getPath());
      assertFalse(boolean0);
      
      int int0 = jSONPath0.size((Object) null);
      assertEquals("vYBxDW", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 18;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {18}, intArray0);
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "vYBxDW", (Object) null);
      assertNotNull(jSONArray0);
      assertEquals("vYBxDW", jSONPath0.getPath());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals(1, intArray0.length);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertArrayEquals(new int[] {18}, intArray0);
      
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("IDfMicO@]?6e", longArray0, true);
      assertNotNull(jSONPath_IntInSegement0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("C", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      boolean boolean1 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_SizeSegment0, integer0, jSONPath_PropertySegment0);
      assertEquals("vYBxDW", jSONPath0.getPath());
      assertFalse(boolean1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(57, false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath1 = new JSONPath("C", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("C", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SQLDataException sQLDataException0 = new SQLDataException("unclosed.str", "fastjson.parser.safeMode");
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: unclosed.str", sQLDataException0.toString());
      assertEquals("unclosed.str", sQLDataException0.getMessage());
      assertEquals("fastjson.parser.safeMode", sQLDataException0.getSQLState());
      
      SQLException sQLException0 = new SQLException("C", sQLDataException0);
      assertNotNull(sQLException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: unclosed.str", sQLDataException0.toString());
      assertEquals("unclosed.str", sQLDataException0.getMessage());
      assertEquals("fastjson.parser.safeMode", sQLDataException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: C", sQLException0.toString());
      assertEquals("C", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, sQLException0, 1000000, jSONPath_MultiIndexSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      JSONPath jSONPath0 = JSONPath.compile("9KS= O2>E+|6*LX*");
      assertNotNull(jSONPath0);
      assertEquals("9KS= O2>E+|6*LX*", jSONPath0.getPath());
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, "9KS= O2>E+|6*LX*");
      assertNotNull(jSONArray0);
      assertEquals("9KS= O2>E+|6*LX*", jSONPath0.getPath());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, intArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = JSONPath.size((Object) jSONPath_MultiIndexSegment0, "nin");
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Short short0 = new Short((short) (-2282));
      assertNotNull(short0);
      assertEquals((short) (-2282), (short)short0);
      
      String string0 = "com.alibaba.fastjson.JSONPath$MatchSegement";
      boolean boolean2 = JSONPath.contains((Object) short0, "com.alibaba.fastjson.JSONPath$MatchSegement");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Object[] objectArray0 = new Object[5];
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("BMZnMH");
      assertNotNull(jSONPath0);
      assertEquals("BMZnMH", jSONPath0.getPath());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("BMZnMH", "BMZnMH", (Map<String, ClientInfoStatus>) null);
      assertNotNull(sQLClientInfoException1);
      assertEquals("BMZnMH", sQLClientInfoException1.getMessage());
      assertEquals("BMZnMH", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: BMZnMH", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((short) (-2282));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, sQLClientInfoException1, jSONPath_ArrayAccessSegment0);
      assertNotNull(arrayList0);
      assertEquals("BMZnMH", jSONPath0.getPath());
      assertEquals("BMZnMH", sQLClientInfoException1.getMessage());
      assertEquals("BMZnMH", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: BMZnMH", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$MatchSegement", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertEquals("com.alibaba.fastjson.JSONPath$MatchSegement", jSONPath1.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      SimplePropertyPreFilter simplePropertyPreFilter0 = null;
      try {
        simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = false;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "safeMode";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("safeMode", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(1, stringArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("JSONPath$StringOpSegement");
      assertNotNull(jSONPath0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&kB@&6A$9zX", "&kB@&6A$9zX");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("&kB@&6A$9zX", sQLSyntaxErrorException0.getSQLState());
      assertEquals("&kB@&6A$9zX", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: &kB@&6A$9zX", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = sQLSyntaxErrorException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("&kB@&6A$9zX", sQLSyntaxErrorException0.getSQLState());
      assertEquals("&kB@&6A$9zX", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: &kB@&6A$9zX", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(13, stackTraceElementArray0.length);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath_SizeSegment0, "&kB@&6A$9zX", jSONPath_MultiPropertySegment0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      int int0 = (-1619728504);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1619728504);
      intArray0[1] = 1663;
      intArray0[2] = (-1619728504);
      intArray0[3] = (-1619728504);
      intArray0[4] = (-1619728504);
      intArray0[5] = 1663;
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLSyntaxErrorException0, stringArray0);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("&kB@&6A$9zX", sQLSyntaxErrorException0.getSQLState());
      assertEquals("&kB@&6A$9zX", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: &kB@&6A$9zX", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(1, stringArray0.length);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("safeMode");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("UseISO8601DateFormt");
      assertNotNull(jSONPath0);
      assertEquals("UseISO8601DateFormt", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      DataTruncation dataTruncation0 = new DataTruncation(2093, true, true, 2093, 2093);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "UseISO8601DateFormt";
      stringArray0[1] = "UseISO8601DateFormt";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(dataTruncation0, stringArray0);
      assertEquals(2, jSONArray0.size());
      assertNotNull(jSONArray0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(sQLRecoverableException0, stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      assertEquals(PropertyNamingStrategy.KebabCase, propertyNamingStrategy0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%bRM5jMdiuO|", "%bRM5jMdiuO|");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(182);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("", sQLIntegrityConstraintViolationException1.getMessage());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("/stackTrace"));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      String[] stringArray0 = new String[0];
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)JSONPath.reserveToObject(sQLTransactionRollbackException0, stringArray0);
      assertNotNull(sQLTransactionRollbackException1);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, stringArray0.length);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("/stackTrace"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("/stackTrace"));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean0 = linkedList0.offerFirst("/stackTrace");
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(182));
      assertTrue(linkedList0.contains("/stackTrace"));
      assertTrue(boolean0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/stackTrace", "YBHNfFs!d[9\"A&I", sQLTransactionRollbackException1);
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("/stackTrace", sQLRecoverableException0.getMessage());
      assertEquals("YBHNfFs!d[9\"A&I", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = linkedList0.add((Object) sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains(182));
      assertTrue(linkedList0.contains("/stackTrace"));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertNotSame(linkedList0, linkedList1);
      
      boolean boolean2 = linkedList1.add((Object) sQLRecoverableException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals(1, linkedList1.size());
      assertEquals("/stackTrace", sQLRecoverableException0.getMessage());
      assertEquals("YBHNfFs!d[9\"A&I", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertFalse(linkedList1.contains("/stackTrace"));
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, stringArray0.length);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertNotSame(linkedList1, linkedList0);
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)linkedList1.pollLast();
      assertNotNull(sQLRecoverableException1);
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("YBHNfFs!d[9\"A&I", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace", sQLRecoverableException1.toString());
      assertEquals("/stackTrace", sQLRecoverableException1.getMessage());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("/stackTrace"));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotSame(linkedList1, linkedList0);
      
      jSONPath0.deepScan(linkedList0, "%bRM5jMdiuO|", linkedList1);
      assertEquals("/stackTrace", jSONPath0.getPath());
      assertEquals(2, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList0.contains(182));
      assertTrue(linkedList0.contains("/stackTrace"));
      assertFalse(linkedList1.contains("/stackTrace"));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      Float float0 = new Float((float) 1792);
      assertNotNull(float0);
      assertEquals(1792.0F, (float)float0, 0.01F);
      
      boolean boolean3 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      JSONPath jSONPath1 = JSONPath.compile("Q-%L/X!a");
      assertNotNull(jSONPath1);
      assertEquals("Q-%L/X!a", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath1.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Q-%L/X!a
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("java.util.List");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("java.util.List");
      assertNotNull(jSONPath0);
      assertEquals("java.util.List", jSONPath0.getPath());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("dyQ[#*x");
      assertNotNull(jSONPath0);
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("LT");
      assertNotNull(defaultJSONParser0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$ValueSegment");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("com.alibaba.fastjson.JSONPath$ValueSegment", (-4270347329889690746L), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$ValueSegment", jSONPath0.getPath());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'b';
      charArray0[2] = 'E';
      charArray0[3] = 'C';
      charArray0[4] = '~';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, 1);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('L', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.getFeatures());
      assertEquals(5, charArray0.length);
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'L', 'b', 'E', 'C', '~'}, charArray0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      assertNotNull(defaultJSONParser0);
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("error", jSONScanner0.tokenName());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.getFeatures());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(5, charArray0.length);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertArrayEquals(new char[] {'L', 'b', 'E', 'C', '~'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      String string0 = "! 0XRyWAQ";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("! 0XRyWAQ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")");
      assertNotNull(jSONPath0);
      assertEquals(")", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("r{nWW?o4c}#_kd%(U.");
      assertNotNull(jSONPath1);
      assertEquals("r{nWW?o4c}#_kd%(U.", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      int int0 = jSONPath0.size((Object) "r{nWW?o4c}#_kd%(U.");
      assertEquals(")", jSONPath0.getPath());
      assertEquals(2, int0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
      
      // Undeclared exception!
      jSONPath1.removePropertyValue(jSONPath0, "r{nWW?o4c}#_kd%(U.", false);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$ValueSegment");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("k:0=Neq|U/@Y[", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" QR", "com.alibaba.fastjson.JSONPath$ValueSegment", 2707);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(2707, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$ValueSegment", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(" QR", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException:  QR", sQLInvalidAuthorizationSpecException0.toString());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(57344);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("l", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("l", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Object object0 = jSONPath0.getArrayItem(hashMap0, 4);
      assertNull(object0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("l", jSONPath0.getPath());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Object object1 = jSONPath_PropertySegment0.eval(jSONPath0, javaBeanSerializer0, (Object) null);
      assertNull(object1);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("l", jSONPath0.getPath());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("like");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'l'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("16'Jf?AV~m>|TJ|z*"));
      
      jSONPath0.deepScan(map0, "16'Jf?AV~m>|TJ|z*", arrayList0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("16'Jf?AV~m>|TJ|z*"));
      
      Object object0 = jSONPath0.getArrayItem(map0, 22);
      assertNull(object0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("16'Jf?AV~m>|TJ|z*", "16'Jf?AV~m>|TJ|z*", 22);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(22, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 16'Jf?AV~m>|TJ|z*", sQLNonTransientConnectionException0.toString());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLNonTransientConnectionException0.getMessage());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLNonTransientConnectionException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Long long0 = new Long(8488266005336625107L);
      assertNotNull(long0);
      assertEquals(8488266005336625107L, (long)long0);
      
      Long long1 = new Long(8488266005336625107L);
      assertNotNull(long1);
      assertEquals(8488266005336625107L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m81");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("Q#IL9p&\"");
      assertNotNull(jSONPath0);
      assertEquals("Q#IL9p&\"", jSONPath0.getPath());
      
      Set<?> set0 = jSONPath0.evalKeySet("ZY^#2B*\"");
      assertNotNull(set0);
      assertEquals("Q#IL9p&\"", jSONPath0.getPath());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("m81"));
      
      Object object0 = jSONPath0.getArrayItem(set0, 22);
      assertNull(object0);
      assertEquals("Q#IL9p&\"", jSONPath0.getPath());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("m81"));
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/8", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      Object object1 = jSONPath_PropertySegment0.eval(jSONPath0, "m81", "ZY^#2B*\"");
      assertNull(object1);
      assertEquals("Q#IL9p&\"", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = "B";
      JSONPath jSONPath0 = JSONPath.compile("B");
      assertNotNull(jSONPath0);
      assertEquals("B", jSONPath0.getPath());
      
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "B");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("T.E kLm+q@");
      assertNotNull(jSONPath0);
      assertEquals("T.E kLm+q@", jSONPath0.getPath());
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      
      String[] stringArray0 = new String[2];
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
      assertEquals("T.E kLm+q@", jSONPath0.getPath());
      
      stringArray0[0] = "parent";
      stringArray0[1] = "parent";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("parent", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, uUID0, (Object) null, "parent");
      assertEquals("T.E kLm+q@", jSONPath0.getPath());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1663;
      intArray0[1] = (-1619728504);
      intArray0[2] = (-36763560);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("parent", intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals("parent", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: parent", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1663, (-1619728504), (-36763560)}, intArray0);
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(batchUpdateException0, (String[]) null);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals("parent", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: parent", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(3, intArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertArrayEquals(new int[] {1663, (-1619728504), (-36763560)}, intArray0);
      
      Float float0 = new Float(0.75F);
      assertNotNull(float0);
      assertEquals(0.75F, (float)float0, 0.01F);
      
      boolean boolean1 = JSONPath.eqNotNull(float0, 1663);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer((-36763560));
      assertNotNull(integer0);
      assertEquals((-36763560), (int)integer0);
      
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "parent", "[TAwo;0", (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. [TAwo;0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      Object object0 = JSONPath.eval((Object) jSONPath0, "null");
      assertNull(object0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath1 = new JSONPath("BxXl8clkC'[", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("BxXl8clkC'[", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.safeMode");
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('W');
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      DataTruncation dataTruncation0 = new DataTruncation(3544, false, true, 3544, 2914);
      assertNotNull(dataTruncation0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      boolean boolean0 = dataTruncation0.getParameter();
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertFalse(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("msV8", "MnCl.=6f%h2", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("in", "-/o`&JtD|P,fTx", (-192), dataTruncation0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("-/o`&JtD|P,fTx", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: in", sQLTimeoutException0.toString());
      assertEquals("in", sQLTimeoutException0.getMessage());
      assertEquals((-192), sQLTimeoutException0.getErrorCode());
      
      boolean boolean1 = jSONPath_StringOpSegement0.apply(jSONPath0, (Object) null, "null", sQLTimeoutException0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("-/o`&JtD|P,fTx", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: in", sQLTimeoutException0.toString());
      assertEquals("in", sQLTimeoutException0.getMessage());
      assertEquals((-192), sQLTimeoutException0.getErrorCode());
      assertFalse(boolean1);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONPath0, jSONPath1);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotSame(parserConfig1, parserConfig0);
      
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig1);
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertNotSame(serializeConfig1, serializeConfig0);
      
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig1, parserConfig1);
      assertNotNull(jSONPath2);
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath2.getPath());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      Class<Byte> class0 = Byte.class;
      boolean boolean2 = JSONPath.isInt(class0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) "null", "0OycF1+8|V47]v#!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 0OycF1+8|V47]v#!
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)33;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)17, (byte)33}, byteArray0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("and", (byte)90, (byte)90, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      boolean boolean1 = JSONPath.eqNotNull(bigInteger0, (byte)17);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-2473987886800209058L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$1", "com.alibaba.fastjson.JSONPath$1", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$1");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$1", jSONPath0.getPath());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$1";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$1";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$1";
      stringArray0[3] = "com.alibaba.fastjson.JSONPath$1";
      stringArray0[4] = "com.alibaba.fastjson.JSONPath$1";
      stringArray0[5] = "com.alibaba.fastjson.JSONPath$1";
      stringArray0[6] = "com.alibaba.fastjson.JSONPath$1";
      stringArray0[7] = "com.alibaba.fastjson.JSONPath$1";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$1", jSONPath_Operator0, jSONPath_MultiPropertySegment0);
      assertEquals("com.alibaba.fastjson.JSONPath$1", jSONPath0.getPath());
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      assertEquals(PropertyNamingStrategy.KebabCase, propertyNamingStrategy0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%bRM5jMdiuO|", "%bRM5jMdiuO|");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      
      int int0 = 1792;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(182);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.toString());
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      
      String[] stringArray0 = new String[0];
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)JSONPath.reserveToObject(sQLTransactionRollbackException0, stringArray0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException1.toString());
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertEquals(0, stringArray0.length);
      assertNotSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(""));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean0 = linkedList0.offerFirst("/stackTrace");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("/stackTrace"));
      assertFalse(linkedList0.contains(""));
      assertTrue(boolean0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/stackTrace", "YBHNfFs!d[9\"A&I", sQLTransactionRollbackException1);
      assertNotNull(sQLRecoverableException0);
      assertEquals("YBHNfFs!d[9\"A&I", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace", sQLRecoverableException0.toString());
      assertEquals("/stackTrace", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException1.toString());
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = linkedList0.add((Object) sQLTransactionRollbackException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.toString());
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains("/stackTrace"));
      assertFalse(linkedList0.contains(""));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertNotSame(linkedList0, linkedList1);
      
      boolean boolean2 = linkedList1.add((Object) sQLRecoverableException0);
      assertEquals("YBHNfFs!d[9\"A&I", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace", sQLRecoverableException0.toString());
      assertEquals("/stackTrace", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException1.toString());
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(""));
      assertTrue(boolean2);
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, stringArray0.length);
      assertNotSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertNotSame(linkedList1, linkedList0);
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)linkedList1.pollLast();
      assertNotNull(sQLRecoverableException1);
      assertEquals("YBHNfFs!d[9\"A&I", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace", sQLRecoverableException1.toString());
      assertEquals("/stackTrace", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(""));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotSame(linkedList1, linkedList0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(linkedList0, "%bRM5jMdiuO|", linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /stackTrace, segement %bRM5jMdiuO|
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      assertEquals(PropertyNamingStrategy.KebabCase, propertyNamingStrategy0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%bRM5jMdiuO|", "%bRM5jMdiuO|");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(182);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace", jSONPath0.getPath());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("/stackTrace"));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      String[] stringArray0 = new String[0];
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)JSONPath.reserveToObject(sQLTransactionRollbackException0, stringArray0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertEquals(0, stringArray0.length);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("/stackTrace"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("/stackTrace"));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean0 = linkedList0.offerFirst("/stackTrace");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("/stackTrace"));
      assertFalse(linkedList0.contains(182));
      assertTrue(boolean0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/stackTrace", "YBHNfFs!d[9\"A&I", sQLTransactionRollbackException1);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("/stackTrace", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace", sQLRecoverableException0.toString());
      assertEquals("YBHNfFs!d[9\"A&I", sQLRecoverableException0.getSQLState());
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = linkedList0.add((Object) sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains("/stackTrace"));
      assertFalse(linkedList0.contains(182));
      assertTrue(boolean1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean1 == boolean0);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertNotSame(linkedList0, linkedList1);
      
      boolean boolean2 = linkedList1.add((Object) sQLRecoverableException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertEquals(1, linkedList1.size());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("/stackTrace", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace", sQLRecoverableException0.toString());
      assertEquals("YBHNfFs!d[9\"A&I", sQLRecoverableException0.getSQLState());
      assertFalse(linkedList1.contains(182));
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, stringArray0.length);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertNotSame(linkedList1, linkedList0);
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)linkedList1.pollLast();
      assertNotNull(sQLRecoverableException1);
      assertEquals("YBHNfFs!d[9\"A&I", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace", sQLRecoverableException1.toString());
      assertEquals("/stackTrace", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(182));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotSame(linkedList1, linkedList0);
      
      jSONPath0.deepScan(linkedList0, "%bRM5jMdiuO|", linkedList1);
      assertEquals("/stackTrace", jSONPath0.getPath());
      assertEquals(2, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList0.contains("/stackTrace"));
      assertFalse(linkedList0.contains(182));
      assertFalse(linkedList1.contains(182));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      Float float0 = new Float((float) 1792);
      assertNotNull(float0);
      assertEquals(1792.0F, (float)float0, 0.01F);
      
      boolean boolean3 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      JSONPath jSONPath1 = JSONPath.compile("Q-%L/X!a");
      assertNotNull(jSONPath1);
      assertEquals("Q-%L/X!a", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath1.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Q-%L/X!a
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = new JSONPath("in");
      assertNotNull(jSONPath0);
      assertEquals("in", jSONPath0.getPath());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("in");
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("in", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: in", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      sQLNonTransientConnectionException0.printStackTrace();
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("in", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: in", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("in", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: in", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLNonTransientConnectionException: in", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: in", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, sQLTransactionRollbackException0, sQLNonTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLDataException sQLDataException0 = new SQLDataException("44VLhj;_A(Z=^%vohe", "44VLhj;_A(Z=^%vohe");
      assertNotNull(sQLDataException0);
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("v", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("nin", (String) null, intArray0, sQLDataException0);
      assertNotNull(batchUpdateException0);
      assertEquals("nin", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: nin", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2139, 2139, 2139, 2139, 1792, 2139, 2139}, intArray0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      assertEquals(PropertyNamingStrategy.KebabCase, propertyNamingStrategy0);
      
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, batchUpdateException0, propertyNamingStrategy0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("notWriteDefaultValue");
      assertNotNull(jSONPath0);
      assertEquals("notWriteDefaultValue", jSONPath0.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("can not cast to byte[], value : ", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_PropertySegment0);
      assertNull(set0);
      assertEquals("notWriteDefaultValue", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("write", "", 48);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: write", sQLFeatureNotSupportedException0.toString());
      assertEquals("write", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(48, sQLFeatureNotSupportedException0.getErrorCode());
      
      boolean boolean0 = JSONPath.remove((Object) "can not cast to byte[], value : ", "l");
      assertFalse(boolean0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("notWriteDefaultValue", 1639L, 8963398325558730460L, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("", "notWriteDefaultValue", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("l", sQLFeatureNotSupportedException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: write", sQLFeatureNotSupportedException0.toString());
      assertEquals("write", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(48, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: l", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("l", sQLSyntaxErrorException0.getMessage());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_Operator0, "SortField");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath jSONPath1 = JSONPath.compile("y9n)W3fH>0j6r+gQ@J");
      assertNotNull(jSONPath1);
      assertEquals("y9n)W3fH>0j6r+gQ@J", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = true;
      int int0 = (-536);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_Operator0, "LE");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("parent", jSONPath_Segment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Ys@Ea_BS+", "'\"ftTK_");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Ys@Ea_BS+", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("'\"ftTK_", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Ys@Ea_BS+", sQLInvalidAuthorizationSpecException0.toString());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2484);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("parent");
      assertNotNull(jSONPath0);
      assertEquals("parent", jSONPath0.getPath());
      
      Class<BigInteger> class0 = BigInteger.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      assertEquals("parent", jSONPath0.getPath());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2139, (-297), (-3628));
      assertNotNull(jSONPath_RangeSegment0);
      
      Integer integer0 = new Integer(63);
      assertNotNull(integer0);
      assertEquals(63, (int)integer0);
      
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, "parent");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "parYent";
      int[] intArray0 = new int[7];
      intArray0[5] = 0;
      String string1 = "'\"ftTK_";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("parYent", "parYent", 0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("parYent", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: parYent", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("parYent", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      // Undeclared exception!
      try { 
        JSONPath.compare(0, "parYent");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$ValueSegment");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-4270347329889690746L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("java.util.List");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("java.util.List");
      assertNotNull(jSONPath0);
      assertEquals("java.util.List", jSONPath0.getPath());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((byte)7, bigInteger0.byteValue());
      assertEquals((short)7, bigInteger0.shortValue());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)7, bigInteger0.byteValue());
      assertEquals((short)7, bigInteger0.shortValue());
      assertEquals((byte)7, bigDecimal0.byteValue());
      assertEquals((short)7, bigDecimal0.shortValue());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_NullSegement0);
      assertEquals("java.util.List", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("java.util.List");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, bigDecimal0, jSONPath_JSONPathParser0);
      assertNotNull(arrayList0);
      assertEquals("java.util.List", jSONPath0.getPath());
      assertEquals((byte)7, bigInteger0.byteValue());
      assertEquals((short)7, bigInteger0.shortValue());
      assertEquals((byte)7, bigDecimal0.byteValue());
      assertEquals((short)7, bigDecimal0.shortValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      
      ArrayList arrayList1 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, arrayList0, bigInteger0);
      assertNotNull(arrayList1);
      assertEquals("java.util.List", jSONPath0.getPath());
      assertEquals((byte)7, bigInteger0.byteValue());
      assertEquals((short)7, bigInteger0.shortValue());
      assertEquals((byte)7, bigDecimal0.byteValue());
      assertEquals((short)7, bigDecimal0.shortValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals(1, byteArray0.length);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement1 = (JSONPath.RefOpSegement)jSONPath_JSONPathParser0.filterRest(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_RefOpSegement1);
      assertSame(jSONPath_RefOpSegement0, jSONPath_RefOpSegement1);
      assertSame(jSONPath_RefOpSegement1, jSONPath_RefOpSegement0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(110, (-1060), (byte)48);
      assertNotNull(jSONPath_RangeSegment0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      Byte byte0 = new Byte((byte)48);
      assertNotNull(byte0);
      assertEquals((byte)48, (byte)byte0);
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, byte0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -23
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{cIf+ w*z^", "}W1f]Y");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {cIf+ w*z^", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("}W1f]Y", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("{cIf+ w*z^", sQLIntegrityConstraintViolationException0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {cIf+ w*z^", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("}W1f]Y", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("{cIf+ w*z^", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLIntegrityConstraintViolationException: {cIf+ w*z^", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {cIf+ w*z^", sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-Rao_0o%jcnqKQ^-XST", "null]", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {cIf+ w*z^", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("}W1f]Y", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("{cIf+ w*z^", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: -Rao_0o%jcnqKQ^-XST", sQLRecoverableException0.toString());
      assertEquals("-Rao_0o%jcnqKQ^-XST", sQLRecoverableException0.getMessage());
      assertEquals("null]", sQLRecoverableException0.getSQLState());
      
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("}W1f]Y", stringArray0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      
      IsoChronology isoChronology0 = (IsoChronology)Chronology.ofLocale(locale0);
      assertNotNull(isoChronology0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      
      HashMap<TemporalField, Long> hashMap0 = new HashMap<TemporalField, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      ChronoLocalDate chronoLocalDate0 = isoChronology0.resolveDate(hashMap0, resolverStyle0);
      assertNull(chronoLocalDate0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2139, false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("in", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("in", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("in", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("16'Jf?AV~m>|TJ|z*", "16'Jf?AV~m>|TJ|z*");
      assertNotNull(sQLTimeoutException0);
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 16'Jf?AV~m>|TJ|z*", sQLTimeoutException0.toString());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("16'Jf?AV~m>|TJ|z*", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSON.DEFAULT_PARSER_FEATURE = (-1793346313);
      JSONPath jSONPath1 = new JSONPath("(");
      assertNotNull(jSONPath1);
      assertEquals("(", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("16'Jf?AV~m>|TJ|z*", "16'Jf?AV~m>|TJ|z*", (-1793346313), sQLTimeoutException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 16'Jf?AV~m>|TJ|z*", sQLTimeoutException0.toString());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTransactionRollbackException0.getSQLState());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTransactionRollbackException0.getMessage());
      assertEquals((-1793346313), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: 16'Jf?AV~m>|TJ|z*", sQLTransactionRollbackException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("(", sQLTimeoutException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 16'Jf?AV~m>|TJ|z*", sQLTimeoutException0.toString());
      assertEquals("16'Jf?AV~m>|TJ|z*", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("(", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: (", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      Float float0 = new Float((float) (-1793346313));
      assertNotNull(float0);
      assertEquals((-1.7933463E9F), (float)float0, 0.01F);
      
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
      
      Pattern pattern0 = Pattern.compile("9A", (-1793346313));
      assertNotNull(pattern0);
      assertEquals((-1793346313), pattern0.flags());
      assertEquals("9A", pattern0.toString());
      assertEquals("9A", pattern0.pattern());
      
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("(", pattern0, jSONPath_Operator0);
      assertNotNull(jSONPath_RegMatchSegement0);
      assertEquals((-1793346313), pattern0.flags());
      assertEquals("9A", pattern0.toString());
      assertEquals("9A", pattern0.pattern());
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertEquals((-1793346313), pattern0.flags());
      assertEquals("9A", pattern0.toString());
      assertEquals("9A", pattern0.pattern());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath1, jSONPath1, bigDecimal0);
      assertNull(object0);
      assertEquals("(", jSONPath1.getPath());
      assertEquals((-1793346313), pattern0.flags());
      assertEquals("9A", pattern0.toString());
      assertEquals("9A", pattern0.pattern());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      Byte byte0 = new Byte((byte)52);
      assertNotNull(byte0);
      assertEquals((byte)52, (byte)byte0);
      
      boolean boolean1 = jSONPath_RegMatchSegement0.apply(jSONPath0, "9A", (Object) null, byte0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals((-1793346313), pattern0.flags());
      assertEquals("9A", pattern0.toString());
      assertEquals("9A", pattern0.pattern());
      assertFalse(boolean1);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = "null";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string1 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string1);
      assertEquals("null", string1);
      assertTrue(string1.equals((Object)string0));
      
      JSONPath jSONPath0 = new JSONPath("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int0 = jSONPath0.size((Object) double0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[7] = (byte)122;
      byteArray0[3] = (byte)52;
      byte byte0 = (byte)17;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)8;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(736647604770692839L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("p)");
      assertNotNull(jSONPath0);
      assertEquals("p)", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("r{nWW?o4c}#_kd%(U.");
      assertNotNull(jSONPath1);
      assertEquals("r{nWW?o4c}#_kd%(U.", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      int int0 = jSONPath0.size((Object) "r{nWW?o4c}#_kd%(U.");
      assertEquals("p)", jSONPath0.getPath());
      assertEquals((-1), int0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("p)", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) jSONPath0, "8L4\"RaE}ZCPh^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 8L4\"RaE}ZCPh^
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      batchUpdateException0.printStackTrace();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/7", "/stackTrace/7", 1815, batchUpdateException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLTimeoutException0.toString());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLTimeoutException0.toString());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.toString());
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLTimeoutException0.toString());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[TAwo;0", "[TAwo;0", (-1166));
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals((-1166), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: [TAwo;0", sQLFeatureNotSupportedException0.toString());
      assertEquals("[TAwo;0", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("[TAwo;0", sQLFeatureNotSupportedException0.getMessage());
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("Could not obtain an instance of DatatypeFactory.", (-40L), 0L, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      boolean boolean0 = JSONPath.remove((Object) null, "e3h2'P=O.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BId(+bPuPLO&");
      assertNotNull(jSONPath0);
      assertEquals("BId(+bPuPLO&", jSONPath0.getPath());
      
      boolean boolean0 = JSONPath.remove((Object) null, "BId(+bPuPLO&");
      assertFalse(boolean0);
      
      int int0 = jSONPath0.evalSize("BId(+bPuPLO&");
      assertEquals("BId(+bPuPLO&", jSONPath0.getPath());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = "null";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string1 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string1);
      assertEquals("null", string1);
      assertTrue(string1.equals((Object)string0));
      
      JSONPath jSONPath0 = new JSONPath("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertNotNull(map0);
      assertEquals("null", jSONPath0.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int0 = jSONPath0.size((Object) double0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[7] = (byte)122;
      byteArray0[3] = (byte)52;
      byte byte0 = (byte)17;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)25;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short)2073, bigInteger0.shortValue());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)0, (byte)52, (byte)17, (byte)7, (byte)8, (byte)25}, byteArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short)2073, bigInteger0.shortValue());
      assertEquals((short)2073, bigDecimal0.shortValue());
      assertEquals((byte)25, bigDecimal0.byteValue());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)0, (byte)52, (byte)17, (byte)7, (byte)8, (byte)25}, byteArray0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser(",  end ");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("UseISO8601DateFormat");
      assertNotNull(jSONPath0);
      assertEquals("UseISO8601DateFormat", jSONPath0.getPath());
      
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<gU'i4,$8Hz\"G:!LiE");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("<gU'i4,$8Hz\"G:!LiE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<gU'i4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("{B4<H$-sd} U*x");
      assertNotNull(jSONPath0);
      assertEquals("{B4<H$-sd} U*x", jSONPath0.getPath());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{B4<H$-sd} U*x", "{B4<H$-sd} U*x", 2861);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: {B4<H$-sd} U*x", sQLSyntaxErrorException0.toString());
      assertEquals(2861, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("{B4<H$-sd} U*x", sQLSyntaxErrorException0.getSQLState());
      assertEquals("{B4<H$-sd} U*x", sQLSyntaxErrorException0.getMessage());
      
      Object object0 = jSONPath0.getPropertyValue(sQLSyntaxErrorException0, "{B4<H$-sd} U*x", 2861);
      assertNull(object0);
      assertEquals("{B4<H$-sd} U*x", jSONPath0.getPath());
      assertEquals("java.sql.SQLSyntaxErrorException: {B4<H$-sd} U*x", sQLSyntaxErrorException0.toString());
      assertEquals(2861, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("{B4<H$-sd} U*x", sQLSyntaxErrorException0.getSQLState());
      assertEquals("{B4<H$-sd} U*x", sQLSyntaxErrorException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("like");
      assertNotNull(sQLRecoverableException0);
      assertEquals("like", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: like", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "UseISO8601DateFormt";
      JSONPath jSONPath0 = new JSONPath("UseISO8601DateFormt");
      assertNotNull(jSONPath0);
      assertEquals("UseISO8601DateFormt", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      DataTruncation dataTruncation0 = new DataTruncation(2093, true, true, 2093, 2093);
      assertNotNull(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "UseISO8601DateFormt";
      stringArray0[1] = "UseISO8601DateFormt";
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) serializeConfig0, "/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      String string0 = ",  end ";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",  end ");
      assertFalse(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) mockGregorianCalendar0, ";");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "/cause/stackTrace/7";
      String string1 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("/cause/stackTrace/7", (String) null, "", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackrace/7");
      assertNotNull(jSONPath0);
      assertEquals("/stackrace/7", jSONPath0.getPath());
      
      int[] intArray0 = new int[7];
      intArray0[6] = (-1117);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-1117)}, intArray0);
      
      boolean boolean0 = jSONPath0.set((Object) jSONPath_MultiIndexSegment0, (Object) "/stackrace/7", true);
      assertEquals("/stackrace/7", jSONPath0.getPath());
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-1117)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("notWriteDefaultValue");
      assertNotNull(jSONPath0);
      assertEquals("notWriteDefaultValue", jSONPath0.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("can not cast to byte[], value : ", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_PropertySegment0);
      assertNull(set0);
      assertEquals("notWriteDefaultValue", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("write", "", 48);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("write", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(48, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: write", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      
      boolean boolean0 = JSONPath.remove((Object) "can not cast to byte[], value : ", "l");
      assertFalse(boolean0);
      
      Class<SQLException> class0 = SQLException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("notWriteDefaultValue", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2867);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Double double0 = new Double(100000.0);
      assertNotNull(double0);
      assertEquals(100000.0, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, double0, "write");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Double
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      assertEquals(PropertyNamingStrategy.KebabCase, propertyNamingStrategy0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%bRM5jMdiuO|", "%bRM5jMdiuO|");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(182);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(182));
      
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
      assertEquals("/stackTrace", jSONPath0.getPath());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      
      String[] stringArray0 = new String[0];
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)JSONPath.reserveToObject(sQLTransactionRollbackException0, stringArray0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException1.toString());
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertEquals(0, stringArray0.length);
      assertNotSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(182));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(182));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Object object0 = linkedList1.pollLast();
      assertNull(object0);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(182));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      
      jSONPath0.deepScan(linkedList0, "scanBoolean", linkedList1);
      assertEquals("/stackTrace", jSONPath0.getPath());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList0.contains(182));
      assertFalse(linkedList1.contains(182));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      Float float0 = new Float((float) 1792);
      assertNotNull(float0);
      assertEquals(1792.0F, (float)float0, 0.01F);
      
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
      
      JSONPath jSONPath1 = JSONPath.compile("Q-%L/X!a");
      assertNotNull(jSONPath1);
      assertEquals("Q-%L/X!a", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath1.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Q-%L/X!a
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      assertNotNull(jSONPath0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object object0 = JSONPath.eval((Object) jSONPath0, "null");
      assertNull(object0);
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      JSONPath jSONPath1 = JSONPath.compile("D_ZL}u");
      assertNotNull(jSONPath1);
      assertEquals("D_ZL}u", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath1.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : D_ZL}u
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("T.E kLm+q@");
      assertNotNull(jSONPath0);
      assertEquals("T.E kLm+q@", jSONPath0.getPath());
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "parent";
      stringArray0[1] = "parent";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("parent", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, uUID0, (Object) null, "parent");
      assertEquals("T.E kLm+q@", jSONPath0.getPath());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1663;
      intArray0[1] = (-1619728504);
      intArray0[2] = (-36763560);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("parent", intArray0);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("parent", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: parent", batchUpdateException0.toString());
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1663, (-1619728504), (-36763560)}, intArray0);
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(batchUpdateException0, (String[]) null);
      assertNotNull(jSONArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("parent", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: parent", batchUpdateException0.toString());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(3, intArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertArrayEquals(new int[] {1663, (-1619728504), (-36763560)}, intArray0);
      
      Float float0 = new Float(0.75F);
      assertNotNull(float0);
      assertEquals(0.75F, (float)float0, 0.01F);
      
      boolean boolean1 = JSONPath.eqNotNull(float0, 1663);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer((-36763560));
      assertNotNull(integer0);
      assertEquals((-36763560), (int)integer0);
      
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "parent", "[TAwo;0", (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. [TAwo;0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      int int0 = JSONPath.size((Object) jSONPath_WildCardSegment0, "com.alibaba.fastjson.JSONPath$IntInSegement");
      assertEquals((-1), int0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("CIa", "^X8Ie");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("CIa", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: CIa", sQLFeatureNotSupportedException0.toString());
      assertEquals("^X8Ie", sQLFeatureNotSupportedException0.getSQLState());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[F]1\"@");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '), but '1'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(48, true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("wL0o *=E'4Wb@]");
      assertNotNull(jSONPath0);
      assertEquals("wL0o *=E'4Wb@]", jSONPath0.getPath());
      
      MockThrowable mockThrowable0 = new MockThrowable("/stackrace/7", (Throwable) null);
      assertNotNull(mockThrowable0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("wL0o *=E'4Wb@]", "wL0o *=E'4Wb@]", mockThrowable0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: /stackrace/7", mockThrowable0.toString());
      assertEquals("/stackrace/7", mockThrowable0.getMessage());
      assertEquals("wL0o *=E'4Wb@]", sQLTransientConnectionException0.getSQLState());
      assertEquals("wL0o *=E'4Wb@]", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: wL0o *=E'4Wb@]", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      Throwable[] throwableArray0 = sQLTransientConnectionException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: /stackrace/7", mockThrowable0.toString());
      assertEquals("/stackrace/7", mockThrowable0.getMessage());
      assertEquals("wL0o *=E'4Wb@]", sQLTransientConnectionException0.getSQLState());
      assertEquals("wL0o *=E'4Wb@]", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: wL0o *=E'4Wb@]", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLTransientConnectionException0, "[C");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      Object[] objectArray0 = new Object[0];
      Short short0 = new Short((short)60);
      assertNotNull(short0);
      assertEquals((short)60, (short)short0);
      
      Float float0 = new Float((float) (-3679L));
      assertNotNull(float0);
      assertEquals((-3679.0F), (float)float0, 0.01F);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      boolean boolean0 = JSONPath.eqNotNull(float0, bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("eiIjd'b'2XDw");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("NE");
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("g3q", jSONPath_Segment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("IEU,(|V)z1hO T45", false);
      assertNotNull(jSONPath_PropertySegment0);
      assertFalse(jSONPath_PropertySegment0.equals((Object)jSONPath_Segment0));
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSONPath$MaxSegment", "/stackTrace/2", 493, (Throwable) null);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(493, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("JSONPath$MaxSegment", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: JSONPath$MaxSegment", sQLSyntaxErrorException0.toString());
      assertEquals("/stackTrace/2", sQLSyntaxErrorException0.getSQLState());
      
      // Undeclared exception!
      try { 
        jSONPath_RefOpSegement0.apply((JSONPath) null, (Object) null, jSONPath_PropertySegment0, sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$RefOpSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      String string0 = "! 0XRyWAQ";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("! 0XRyWAQ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but ' '
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(1465);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("16'Jf?AV~m>|TJ|z*", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Float float0 = new Float((-7.32244F));
      assertNotNull(float0);
      assertEquals((-7.32244F), (float)float0, 0.01F);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2139);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      String string0 = "V<j,?+R} ";
      Object object0 = jSONPath0.getPropertyValue(float0, "V<j,?+R} ", 1465);
      assertNull(object0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("3\"vz /81so7'vX", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("3\"vz /81so7'vX", (String) null, 14);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(14, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("3\"vz /81so7'vX", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 3\"vz /81so7'vX", sQLInvalidAuthorizationSpecException0.toString());
      
      Object object1 = jSONPath_PropertySegment0.eval(jSONPath0, float0, "9=/2+CuOr$#c&Oh");
      assertNull(object1);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("A!_U&");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '_'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("6");
      assertNotNull(jSONPath0);
      assertEquals("6", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "6", (Object) "6");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = "6";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("6");
      assertNotNull(jSONPath0);
      assertEquals("6", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "6", (Object) "6");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("wL0o *=E'4Wb@]");
      assertNotNull(jSONPath0);
      assertEquals("wL0o *=E'4Wb@]", jSONPath0.getPath());
      
      String string0 = "5";
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) "/cause/stackTrace/4", "5");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2139);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("16'Jf?AV~m>|TJ|z*", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      
      Float float0 = new Float((float) 2139);
      assertNotNull(float0);
      assertEquals(2139.0F, (float)float0, 0.01F);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Object object0 = jSONPath0.getPropertyValue(jSONPath_ArrayAccessSegment0, "WSN4]'4gMyj", (-7484549517624850491L));
      assertNull(object0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("l", "9=/2+CuOr$#c&Oh", 2139);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: l", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("l", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(2139, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("9=/2+CuOr$#c&Oh", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      Object object1 = jSONPath_PropertySegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, (Object) null);
      assertNull(object1);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: l", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("l", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(2139, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("9=/2+CuOr$#c&Oh", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Ys@Ea_BS+");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      assertFalse(jSONPath_Segment0.equals((Object)jSONPath_PropertySegment0));
      assertNotSame(jSONPath_Segment0, jSONPath_PropertySegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("fastjson.parser.safeMode", jSONPath_Segment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      assertFalse(jSONPath_Segment0.equals((Object)jSONPath_PropertySegment0));
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny.internal", "WSN4]'4gMyj");
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertEquals("WSN4]'4gMyj", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.deny.internal", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("fastjson.parser.deny.internal", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(1239);
      assertNotNull(jSONPath_ArrayAccessSegment1);
      assertFalse(jSONPath_ArrayAccessSegment1.equals((Object)jSONPath_ArrayAccessSegment0));
      
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException1, jSONPath_ArrayAccessSegment1, jSONPath_ArrayAccessSegment1);
      assertEquals("WSN4]'4gMyj", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.deny.internal", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("fastjson.parser.deny.internal", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
      assertFalse(boolean0);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(jSONPath_ArrayAccessSegment1.equals((Object)jSONPath_ArrayAccessSegment0));
      assertFalse(jSONPath_Segment0.equals((Object)jSONPath_PropertySegment0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNotSame(jSONPath_ArrayAccessSegment1, jSONPath_ArrayAccessSegment0);
      assertNotSame(jSONPath_Segment0, jSONPath_PropertySegment0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 'E'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = "@vekfk.\"l:{v";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@vekfk.\"l:{v");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 'v'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("org.springframework.security.core.authority.SimpleGrantedAuthority", (JSONPath.Segment) null, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, (Object) null, "org.springframework.security.core.authority.SimpleGrantedAuthority", jSONPath_Operator0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      assertEquals(PropertyNamingStrategy.KebabCase, propertyNamingStrategy0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%bRM5jMdiuO|", "%bRM5jMdiuO|");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(182);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException1.getMessage());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("%bRM5jMdiuO|"));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.toString());
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      
      String[] stringArray0 = new String[0];
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)JSONPath.reserveToObject(sQLTransactionRollbackException0, stringArray0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("%bRM5jMdiuO|", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %bRM5jMdiuO|", sQLTransactionRollbackException1.getMessage());
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertEquals(0, stringArray0.length);
      assertNotSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("%bRM5jMdiuO|"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("%bRM5jMdiuO|"));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Object object0 = linkedList1.pollLast();
      assertNull(object0);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("%bRM5jMdiuO|"));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      
      jSONPath0.deepScan(linkedList0, "scanBoolean", linkedList1);
      assertEquals("/stackTrace", jSONPath0.getPath());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList0.contains("scanBoolean"));
      assertFalse(linkedList1.contains("scanBoolean"));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      Float float0 = new Float((float) 1792);
      assertNotNull(float0);
      assertEquals(1792.0F, (float)float0, 0.01F);
      
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
      
      JSONPath jSONPath1 = JSONPath.compile("Q-%L/X!a");
      assertNotNull(jSONPath1);
      assertEquals("Q-%L/X!a", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath1.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Q-%L/X!a
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-85)}, byteArray0);
      
      JSONPath jSONPath0 = JSONPath.compile("jsonpath error, path ");
      assertNotNull(jSONPath0);
      assertEquals("jsonpath error, path ", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("jsonpath error, path ", (byte) (-85), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      JSONPath jSONPath1 = JSONPath.compile("GT");
      assertNotNull(jSONPath1);
      assertEquals("GT", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath1, sQLFeatureNotSupportedException0, jSONPath1);
      assertNull(object0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("GT", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(4647432019745535567L);
      assertNotNull(long0);
      assertEquals(4647432019745535567L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONWriter", longArray0, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(2, longArray0.length);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertEquals(2, longArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONWriter", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("com.alibaba.fastjson.JSONWriter", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, long1);
      assertNotNull(object0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("com.alibaba.fastjson.JSONWriter", jSONPath0.getPath());
      assertEquals((-1L), object0);
      assertFalse(long1.equals((Object)long0));
      assertFalse(object0.equals((Object)long0));
      assertEquals(2, longArray0.length);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",  end ");
      assertFalse(boolean0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(",  end ", "1", (-814), (Throwable) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals(",  end ", sQLTimeoutException0.getMessage());
      assertEquals((-814), sQLTimeoutException0.getErrorCode());
      assertEquals("1", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ,  end ", sQLTimeoutException0.toString());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(",  end ", sQLTimeoutException0.getMessage());
      assertEquals((-814), sQLTimeoutException0.getErrorCode());
      assertEquals("1", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ,  end ", sQLTimeoutException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ,  end ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: ,  end ", sQLIntegrityConstraintViolationException0.toString());
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertEquals(",  end ", sQLTimeoutException0.getMessage());
      assertEquals((-814), sQLTimeoutException0.getErrorCode());
      assertEquals("1", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ,  end ", sQLTimeoutException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ,  end ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: ,  end ", sQLIntegrityConstraintViolationException0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      assertEquals(",  end ", sQLTimeoutException0.getMessage());
      assertEquals((-814), sQLTimeoutException0.getErrorCode());
      assertEquals("1", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ,  end ", sQLTimeoutException0.toString());
      
      boolean boolean2 = JSONPath.containsValue((Object) "*", "*", (Object) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("I2No,");
      assertNotNull(jSONPath0);
      assertEquals("I2No,", jSONPath0.getPath());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("sqackTrace");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("sqackTrace", string0);
      
      System.setCurrentTimeMillis((-2609L));
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackrace/7");
      assertNotNull(jSONPath0);
      assertEquals("/stackrace/7", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("/stackrace/7");
      assertNotNull(jSONPath1);
      assertEquals("/stackrace/7", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      boolean boolean0 = JSONPath.eq((Object) null, jSONPath1);
      assertEquals("/stackrace/7", jSONPath1.getPath());
      assertFalse(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = "/stackTrace/0";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/0", jSONPath0.getPath());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/stackTrace/0", "/stackTrace/0");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: /stackTrace/0", sQLTransientConnectionException0.toString());
      assertEquals("/stackTrace/0", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("/stackTrace/0", sQLTransientConnectionException0.getSQLState());
      
      boolean boolean0 = jSONPath0.containsValue((Object) sQLTransientConnectionException0, (Object) "/stackTrace/0");
      assertEquals("/stackTrace/0", jSONPath0.getPath());
      assertEquals("java.sql.SQLTransientConnectionException: /stackTrace/0", sQLTransientConnectionException0.toString());
      assertEquals("/stackTrace/0", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("/stackTrace/0", sQLTransientConnectionException0.getSQLState());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /stackTrace/0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("notWriteDefaultValue");
      assertNotNull(jSONPath0);
      assertEquals("notWriteDefaultValue", jSONPath0.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("notWriteDefaultValue");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      Short short0 = new Short((short)83);
      assertNotNull(short0);
      assertEquals((short)83, (short)short0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      boolean boolean1 = JSONPath.eq(short0, propertyNamingStrategy0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      
      batchUpdateException0.printStackTrace();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/7", "/stackTrace/7", 1815, batchUpdateException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNotNull(string0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", string0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      
      boolean boolean0 = JSONPath.containsValue((Object) sQLIntegrityConstraintViolationException0, "*", (Object) sQLIntegrityConstraintViolationException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLTimeoutException0.toString());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/7", sQLTimeoutException0.getMessage());
      assertEquals(1815, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/7", sQLIntegrityConstraintViolationException0.getMessage());
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      String string1 = jSONPath0.getPath();
      assertNotNull(string1);
      assertEquals("*", jSONPath0.getPath());
      assertEquals("*", string1);
      assertFalse(string1.equals((Object)string0));
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("@:X-le0Gx9e", 1815, 1815, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      Object object0 = null;
      String[] stringArray0 = null;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      Integer integer0 = new Integer(20);
      assertNotNull(integer0);
      assertEquals(20, (int)integer0);
      
      boolean boolean0 = jSONPath0.removePropertyValue(integer0, "*", true);
      assertEquals("*", jSONPath0.getPath());
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath1 = new JSONPath("*", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath1);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("*", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      // Undeclared exception!
      try { 
        jSONPath1.set((Object) parserConfig0, (Object) serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = "/stackTrace/0";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("\t");
      assertNotNull(jSONPath0);
      assertEquals("\t", jSONPath0.getPath());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\t", "/stackTrace/0");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("/stackTrace/0", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: \t", sQLTransientConnectionException0.toString());
      assertEquals("\t", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      boolean boolean0 = jSONPath0.containsValue((Object) sQLTransientConnectionException0, (Object) "/stackTrace/0");
      assertEquals("\t", jSONPath0.getPath());
      assertEquals("/stackTrace/0", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: \t", sQLTransientConnectionException0.toString());
      assertEquals("\t", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /stackTrace/0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLDataException sQLDataException0 = new SQLDataException("44VLhj;_A(Z=^%vohe", "44VLhj;_A(Z=^%vohe");
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("v", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      Integer integer0 = Integer.getInteger("fastjson.parser.safeMode");
      assertNull(integer0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, jSONPath_Operator0);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeAccept");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.toString());
      assertEquals("fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("fastjson.parser.autoTypeAccept", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      Object object0 = jSONPath0.getPropertyValue(sQLFeatureNotSupportedException0, "fastjson.parser.autoTypeAccept", 0L);
      assertNull(object0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.toString());
      assertEquals("fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("fastjson.parser.autoTypeAccept", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
      
      boolean boolean0 = JSONPath.remove((Object) aSMDeserializerFactory0, "c");
      assertFalse(boolean0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2139, 2139, 2139, 2139, 1792, 2139, 2139}, intArray0);
      
      boolean boolean1 = jSONPath_PropertySegment0.remove(jSONPath1, "com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(boolean1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_PropertySegment1);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertNotSame(jSONPath_PropertySegment1, jSONPath_PropertySegment0);
      
      boolean boolean2 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Set<?> set0 = JSONPath.keySet((Object) arrayList0, "/stackTrace");
      assertNull(set0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertFalse(jSONPath_PropertySegment0.equals((Object)jSONPath_PropertySegment1));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath_PropertySegment0, jSONPath_PropertySegment1);
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",  end ");
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",  end ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath(",  end ");
      assertNotNull(jSONPath0);
      assertEquals(",  end ", jSONPath0.getPath());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(locale0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale locale2 = Locale.lookup(linkedList0, linkedHashSet0);
      assertNull(locale2);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedHashSet0.contains(locale0));
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Set<?> set0 = jSONPath0.evalKeySet(linkedHashSet0);
      assertNull(set0);
      assertEquals(",  end ", jSONPath0.getPath());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(locale0));
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("A", "A", sQLSyntaxErrorException0);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: A", sQLTransientConnectionException0.toString());
      assertEquals("A", sQLTransientConnectionException0.getMessage());
      assertEquals("A", sQLTransientConnectionException0.getSQLState());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A";
      StackTraceElement[] stackTraceElementArray0 = sQLTransientConnectionException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: A", sQLTransientConnectionException0.toString());
      assertEquals("A", sQLTransientConnectionException0.getMessage());
      assertEquals("A", sQLTransientConnectionException0.getSQLState());
      assertEquals(13, stackTraceElementArray0.length);
      
      stringArray0[1] = "A";
      stringArray0[2] = "A";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLTransientConnectionException0, stringArray0);
      assertNotNull(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.size());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: A", sQLTransientConnectionException0.toString());
      assertEquals("A", sQLTransientConnectionException0.getMessage());
      assertEquals("A", sQLTransientConnectionException0.getSQLState());
      assertEquals(3, stringArray0.length);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept", 0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("fastjson.parser.safeMode", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.safeMode", sQLInvalidAuthorizationSpecException0.toString());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 2726, 46);
      assertNotNull(jSONPath_RangeSegment0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      JSONPath jSONPath0 = JSONPath.compile("L51");
      assertNotNull(jSONPath0);
      assertEquals("L51", jSONPath0.getPath());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "L51", calendar0);
      assertNotNull(arrayList0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("L51", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short)255);
      assertNotNull(short0);
      assertEquals((short)255, (short)short0);
      
      boolean boolean1 = jSONPath0.containsValue((Object) arrayList0, (Object) null);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("L51", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      int int0 = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      String string0 = "scanBoolean";
      JSONPath jSONPath0 = JSONPath.compile("scanBoolean");
      assertNotNull(jSONPath0);
      assertEquals("scanBoolean", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(2139));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("`j", (String[]) null, false);
      assertNotNull(jSONPath_StringInSegement0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`j", "`j", (-1793346306), sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("`j", sQLNonTransientConnectionException0.getMessage());
      assertEquals("`j", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: `j", sQLNonTransientConnectionException0.toString());
      assertEquals((-1793346306), sQLNonTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        jSONPath_StringInSegement0.apply(jSONPath0, sQLNonTransientConnectionException0, hashMap0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("UseISO8601D.teForma}");
      assertNotNull(jSONPath0);
      assertEquals("UseISO8601D.teForma}", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = jSONPath0.size((Object) hashMap0);
      assertEquals("UseISO8601D.teForma}", jSONPath0.getPath());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-1), int0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      String string0 = jSONPath0.getPath();
      assertNotNull(string0);
      assertEquals("UseISO8601D.teForma}", jSONPath0.getPath());
      assertEquals("UseISO8601D.teForma}", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<[>RaNr|B{";
      stringArray0[2] = "<[>RaNr|B{";
      stringArray0[3] = "com.alibaba.fastjson.JSONPath$FilterGroup";
      stringArray0[4] = "<[>RaNr|B{";
      stringArray0[5] = "<[>RaNr|B{";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("<[>RaNr|B{", stringArray0, true);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(6, stringArray0.length);
      
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator", jSONPath0.getPath());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator", "<[>RaNr|B{", (-1080430200), (Throwable) null);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLTransientException: com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator", sQLTransientException0.toString());
      assertEquals("<[>RaNr|B{", sQLTransientException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator", sQLTransientException0.getMessage());
      assertEquals((-1080430200), sQLTransientException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("<[>RaNr|B{", sQLTransientException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLTransientException: com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator", sQLTransientException0.toString());
      assertEquals("<[>RaNr|B{", sQLTransientException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator", sQLTransientException0.getMessage());
      assertEquals((-1080430200), sQLTransientException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("<[>RaNr|B{", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: <[>RaNr|B{", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("<[>RaNr|B{", "scanFieldFloatArray2", (-1080430200), sQLTransientException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientException: com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator", sQLTransientException0.toString());
      assertEquals("<[>RaNr|B{", sQLTransientException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator", sQLTransientException0.getMessage());
      assertEquals((-1080430200), sQLTransientException0.getErrorCode());
      assertEquals((-1080430200), sQLTransientConnectionException0.getErrorCode());
      assertEquals("scanFieldFloatArray2", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: <[>RaNr|B{", sQLTransientConnectionException0.toString());
      assertEquals("<[>RaNr|B{", sQLTransientConnectionException0.getMessage());
      
      Float float0 = new Float((float) 3196);
      assertNotNull(float0);
      assertEquals(3196.0F, (float)float0, 0.01F);
      
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLTransientConnectionException0, sQLTransientException0, float0);
      assertEquals("com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator", jSONPath0.getPath());
      assertEquals("java.sql.SQLTransientException: com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator", sQLTransientException0.toString());
      assertEquals("<[>RaNr|B{", sQLTransientException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator", sQLTransientException0.getMessage());
      assertEquals((-1080430200), sQLTransientException0.getErrorCode());
      assertEquals((-1080430200), sQLTransientConnectionException0.getErrorCode());
      assertEquals("scanFieldFloatArray2", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: <[>RaNr|B{", sQLTransientConnectionException0.toString());
      assertEquals("<[>RaNr|B{", sQLTransientConnectionException0.getMessage());
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Wk%";
      stringArray0[1] = "Wk%";
      stringArray0[2] = "Wk%";
      stringArray0[3] = "Wk%";
      stringArray0[4] = "Wk%";
      stringArray0[5] = "Wk%";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("Wk%", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(6, stringArray0.length);
      
      JSONPath jSONPath0 = new JSONPath("Wk%");
      assertNotNull(jSONPath0);
      assertEquals("Wk%", jSONPath0.getPath());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("Wk%", "iadq0zYast>)>>1>r,", 3196, (Throwable) null);
      assertNotNull(sQLTransientException0);
      assertEquals("iadq0zYast>)>>1>r,", sQLTransientException0.getSQLState());
      assertEquals("Wk%", sQLTransientException0.getMessage());
      assertEquals(3196, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Wk%", sQLTransientException0.toString());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Wk%", sQLTransientException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("iadq0zYast>)>>1>r,", sQLTransientException0.getSQLState());
      assertEquals("Wk%", sQLTransientException0.getMessage());
      assertEquals(3196, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Wk%", sQLTransientException0.toString());
      assertEquals("Wk%", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Wk%", sQLInvalidAuthorizationSpecException0.toString());
      
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, "Wk%", sQLInvalidAuthorizationSpecException0);
      assertEquals("Wk%", jSONPath0.getPath());
      assertEquals("iadq0zYast>)>>1>r,", sQLTransientException0.getSQLState());
      assertEquals("Wk%", sQLTransientException0.getMessage());
      assertEquals(3196, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Wk%", sQLTransientException0.toString());
      assertEquals("Wk%", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Wk%", sQLInvalidAuthorizationSpecException0.toString());
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "Wk%";
      stringArray0[3] = "Wk%";
      stringArray0[4] = "Wk%";
      stringArray0[5] = "Wk%";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("Wk%", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(6, stringArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("Wk%");
      assertNotNull(jSONPath0);
      assertEquals("Wk%", jSONPath0.getPath());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(stringArray0[1], "iadq0zYast>)>>1>r,", 3196, (Throwable) null);
      assertNotNull(sQLTransientException0);
      assertEquals(3196, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals("iadq0zYast>)>>1>r,", sQLTransientException0.getSQLState());
      assertEquals(6, stringArray0.length);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Wk%", sQLTransientException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(3196, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals("iadq0zYast>)>>1>r,", sQLTransientException0.getSQLState());
      assertEquals("Wk%", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Wk%", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(6, stringArray0.length);
      
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, "Wk%", sQLInvalidAuthorizationSpecException0);
      assertEquals("Wk%", jSONPath0.getPath());
      assertEquals(3196, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals("iadq0zYast>)>>1>r,", sQLTransientException0.getSQLState());
      assertEquals("Wk%", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Wk%", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("T.E kLm+q@");
      assertNotNull(jSONPath0);
      assertEquals("T.E kLm+q@", jSONPath0.getPath());
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "parent";
      stringArray0[1] = "parent";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("parent", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, uUID0, (Object) null, "parent");
      assertEquals("T.E kLm+q@", jSONPath0.getPath());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("parent", mockThrowable0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: parent", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("parent", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("~R#,WnX>FH", "ZX]#uYvzVj`", 656, mockThrowable0);
      assertNotNull(sQLTimeoutException1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(656, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ~R#,WnX>FH", sQLTimeoutException1.toString());
      assertEquals("ZX]#uYvzVj`", sQLTimeoutException1.getSQLState());
      assertEquals("~R#,WnX>FH", sQLTimeoutException1.getMessage());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("6GFA?-)7?!v`/K-8", "Mh0j_.=SR*3", sQLTimeoutException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: parent", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("parent", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("Mh0j_.=SR*3", sQLSyntaxErrorException0.getSQLState());
      assertEquals("6GFA?-)7?!v`/K-8", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: 6GFA?-)7?!v`/K-8", sQLSyntaxErrorException0.toString());
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      
      boolean boolean1 = jSONPath0.containsValue((Object) null, (Object) sQLSyntaxErrorException0);
      assertEquals("T.E kLm+q@", jSONPath0.getPath());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: parent", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("parent", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("Mh0j_.=SR*3", sQLSyntaxErrorException0.getSQLState());
      assertEquals("6GFA?-)7?!v`/K-8", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: 6GFA?-)7?!v`/K-8", sQLSyntaxErrorException0.toString());
      assertFalse(boolean1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("I");
      assertNotNull(jSONPath0);
      assertEquals("I", jSONPath0.getPath());
      
      boolean boolean1 = jSONPath0.containsValue((Object) "I", (Object) "I");
      assertEquals("I", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<BigInteger> class0 = BigInteger.class;
      boolean boolean2 = JSONPath.isDouble(class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "I";
      stringArray0[1] = "I";
      stringArray0[2] = "I";
      stringArray0[3] = "I";
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "I", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path I
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[]");
      assertNotNull(jSONPath0);
      assertEquals("[]", jSONPath0.getPath());
      
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("%%", "com.alibaba.fastjson.JSONPath$MaxSegment", 11, (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: %%", sQLTransactionRollbackException0.toString());
      assertEquals(11, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$MaxSegment", sQLTransactionRollbackException0.getSQLState());
      assertEquals("%%", sQLTransactionRollbackException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("%%", (Throwable) null);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: %%", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("%%", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      String[] stringArray0 = null;
      short short0 = (short)4059;
      Short short1 = new Short((short)4059);
      assertNotNull(short1);
      assertEquals((short)4059, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(short1, (String[]) null);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(short1.equals((Object)short0));
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      Float float0 = new Float(1000000.0F);
      assertNotNull(float0);
      assertEquals(1000000.0F, (float)float0, 0.01F);
      
      boolean boolean0 = JSONPath.eqNotNull(short1, float0);
      assertFalse(boolean0);
      assertTrue(short1.equals((Object)short0));
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "e\"=!]I?AO2", 11, hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("e\"=!]I?AO2", sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(11, sQLClientInfoException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "com.alibaba.fastjson.JSONPath$MaxSegment", "", (Object) sQLClientInfoException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = "16'Jf?AV~m>|TJ|z*";
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      SQLDataException sQLDataException0 = new SQLDataException("TT :sDJ/hU`yEa");
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("TT :sDJ/hU`yEa", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: TT :sDJ/hU`yEa", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      DataTruncation dataTruncation0 = new DataTruncation(126, false, false, 317, 883);
      assertNotNull(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem((JSONPath) null, "TT :sDJ/hU`yEa", 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = "parent";
      int int0 = 2139;
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("parent");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string1 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string1);
      assertEquals("parent", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      boolean boolean1 = JSONPath.eq("com.alibaba.fastjson.JSONPath$StringOpSegement", "com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNull(jSONPath_Segment0);
      
      boolean boolean2 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2139, 2139, 2139, 0, 0, 0, 0}, intArray0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      Set<?> set0 = jSONPath0.evalKeySet("parent");
      assertNotNull(set0);
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath0.getPath());
      assertFalse(set0.contains("com.alibaba.fastjson.JSONPath$StringOpSegement"));
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2139);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("null", string0);
      
      JSONPath jSONPath0 = new JSONPath("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertNotNull(map0);
      assertEquals("null", jSONPath0.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int0 = jSONPath0.size((Object) double0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("7e5TO");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, "null", "7e5TO");
      assertNotNull(arrayList0);
      assertEquals("null", jSONPath0.getPath());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("x:+SU", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement1 = (JSONPath.RefOpSegement)jSONPath_JSONPathParser0.filterRest(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_RefOpSegement1);
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
      assertSame(jSONPath_RefOpSegement0, jSONPath_RefOpSegement1);
      assertSame(jSONPath_RefOpSegement1, jSONPath_RefOpSegement0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("#j]/\"lRv^p&B", "x:+SU");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: #j]/\"lRv^p&B", sQLFeatureNotSupportedException0.toString());
      assertEquals("x:+SU", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("#j]/\"lRv^p&B", sQLFeatureNotSupportedException0.getMessage());
      
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.autoTypeAccept", ":58BI'KGSAB:L0", intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals("fastjson.parser.autoTypeAccept", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: fastjson.parser.autoTypeAccept", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(":58BI'KGSAB:L0", batchUpdateException0.getSQLState());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = JSONPath.eq(sQLFeatureNotSupportedException0, batchUpdateException0);
      assertEquals("fastjson.parser.autoTypeAccept", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: fastjson.parser.autoTypeAccept", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(":58BI'KGSAB:L0", batchUpdateException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: #j]/\"lRv^p&B", sQLFeatureNotSupportedException0.toString());
      assertEquals("x:+SU", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("#j]/\"lRv^p&B", sQLFeatureNotSupportedException0.getMessage());
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      StringReader stringReader0 = new StringReader("fastjson.parser.deny.internal");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 91);
      assertNotNull(jSONReaderScanner0);
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(91, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      ParserConfig parserConfig1 = new ParserConfig(false);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.isSafeMode());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(javaBeanSerializer0, jSONReaderScanner0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("value is null");
      assertNotNull(jSONPath0);
      assertEquals("value is null", jSONPath0.getPath());
      
      boolean boolean0 = JSONPath.eq(jSONPath0, "value is null");
      assertEquals("value is null", jSONPath0.getPath());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "value is null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("kotlin.ranges.CharRange", longArray0, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(0, longArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("kotlin.ranges.CharRange");
      assertNotNull(jSONPath0);
      assertEquals("kotlin.ranges.CharRange", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("kotlin.ranges.CharRange");
      assertNotNull(jSONPath1);
      assertEquals("kotlin.ranges.CharRange", jSONPath1.getPath());
      assertSame(jSONPath1, jSONPath0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath1, sQLFeatureNotSupportedException0, jSONPath0);
      assertEquals("kotlin.ranges.CharRange", jSONPath0.getPath());
      assertEquals("kotlin.ranges.CharRange", jSONPath1.getPath());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertSame(jSONPath0, jSONPath1);
      assertSame(jSONPath1, jSONPath0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      assertEquals(0, longArray0.length);
      
      JSONPath jSONPath2 = new JSONPath("kotlin.ranges.CharRange");
      assertNotNull(jSONPath2);
      assertEquals("kotlin.ranges.CharRange", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("kotlin.ranges.CharRange");
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: kotlin.ranges.CharRange", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("kotlin.ranges.CharRange", sQLTransientConnectionException0.getMessage());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("UdcwUt@>I&Dn", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      jSONPath_PropertySegment0.setValue(jSONPath2, jSONPath2, sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = "sL7j}eOmBQ";
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("sL7j}eOmBQ", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("sL7j}eOmBQ", "lo=FX)E64.j8-v#X$)\"", (-838));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("lo=FX)E64.j8-v#X$)\"", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals((-838), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("sL7j}eOmBQ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: sL7j}eOmBQ", sQLInvalidAuthorizationSpecException0.toString());
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertTrue(boolean0);
      
      SerializeConfig serializeConfig1 = new SerializeConfig();
      assertNotNull(serializeConfig1);
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      
      Float float0 = new Float((float) (-838));
      assertNotNull(float0);
      assertEquals((-838.0F), (float)float0, 0.01F);
      
      Spliterator<Throwable> spliterator0 = sQLInvalidAuthorizationSpecException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("lo=FX)E64.j8-v#X$)\"", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals((-838), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("sL7j}eOmBQ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: sL7j}eOmBQ", sQLInvalidAuthorizationSpecException0.toString());
      
      String string1 = "$VALUES";
      Object object0 = jSONPath0.getPropertyValue(sQLInvalidAuthorizationSpecException0, "$VALUES", 0L);
      assertNull(object0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals("lo=FX)E64.j8-v#X$)\"", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals((-838), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("sL7j}eOmBQ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: sL7j}eOmBQ", sQLInvalidAuthorizationSpecException0.toString());
      
      MockDate mockDate0 = new MockDate((-838), 3590, 845);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, mockDate0, "$VALUES");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path fastjson.parser.safeMode, segement sL7j}eOmBQ
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-5), (-5), (-5));
      assertNotNull(jSONPath_RangeSegment0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      String string0 = "j";
      JSONPath jSONPath0 = JSONPath.compile("j");
      assertNotNull(jSONPath0);
      assertEquals("j", jSONPath0.getPath());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("j", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_SizeSegment0, "j");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IwkBoX9HtK[oTC}s*Z");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("IwkBoX9HtK[oTC}s*Z");
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(893, 13, (-715));
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("l22r");
      assertNotNull(jSONPath0);
      assertEquals("l22r", jSONPath0.getPath());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_JSONPathParser0, jSONPath_Segment0);
      assertNotNull(arrayList0);
      assertEquals("l22r", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLDataException sQLDataException0 = new SQLDataException("44VLhj;_A(Z=^%vohe", "44VLhj;_A(Z=^%vohe");
      assertNotNull(sQLDataException0);
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("v", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      Integer integer0 = Integer.getInteger("fastjson.parser.safeMode");
      assertNull(integer0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, jSONPath_Operator0);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = JSONPath.remove((Object) aSMDeserializerFactory0, "c");
      assertFalse(boolean0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2139, 2139, 2139, 2139, 1792, 2139, 2139}, intArray0);
      
      jSONPath1.init();
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      Pattern pattern0 = Pattern.compile("jsonpath can not be null");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("jsonpath can not be null", pattern0.pattern());
      assertEquals("jsonpath can not be null", pattern0.toString());
      
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("6+iVo$=8m4O", pattern0, jSONPath_Operator0);
      assertNotNull(jSONPath_RegMatchSegement0);
      assertEquals(0, pattern0.flags());
      assertEquals("jsonpath can not be null", pattern0.pattern());
      assertEquals("jsonpath can not be null", pattern0.toString());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      boolean boolean1 = jSONPath_RegMatchSegement0.apply(jSONPath0, "jsonpath can not be null", bigInteger0, "v");
      assertEquals(0, pattern0.flags());
      assertEquals("jsonpath can not be null", pattern0.pattern());
      assertEquals("jsonpath can not be null", pattern0.toString());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2163, (-32), 2324);
      assertNotNull(jSONPath_RangeSegment0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayList arrayList1 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath1, object0, sQLDataException0);
      assertNotNull(arrayList1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(arrayList1, arrayList0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1803, 2726, 2726);
      assertNotNull(jSONPath_RangeSegment0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      
      JSONPath jSONPath0 = JSONPath.compile("9");
      assertNotNull(jSONPath0);
      assertEquals("9", jSONPath0.getPath());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, calendar0);
      assertNotNull(arrayList0);
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("9", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = new Short((short)255);
      assertNotNull(short0);
      assertEquals((short)255, (short)short0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("null", string0);
      
      JSONPath jSONPath0 = new JSONPath("null");
      assertNotNull(jSONPath0);
      assertEquals("null", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertNotNull(map0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int0 = jSONPath0.size((Object) double0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)25;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short)2073, bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)47, (byte)122, (byte)52, (byte)17, (byte)7, (byte)8, (byte)25}, byteArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((short)2073, bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((byte)25, bigDecimal0.byteValue());
      assertEquals((short)2073, bigDecimal0.shortValue());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)47, (byte)122, (byte)52, (byte)17, (byte)7, (byte)8, (byte)25}, byteArray0);
      
      boolean boolean0 = jSONPath0.contains((Object) bigDecimal0);
      assertEquals((short)2073, bigInteger0.shortValue());
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((byte)25, bigDecimal0.byteValue());
      assertEquals((short)2073, bigDecimal0.shortValue());
      assertEquals("null", jSONPath0.getPath());
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)47, (byte)122, (byte)52, (byte)17, (byte)7, (byte)8, (byte)25}, byteArray0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("7e5TO");
      assertNotNull(jSONPath_JSONPathParser1);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, "null", "7e5TO");
      assertNotNull(arrayList0);
      assertEquals("null", jSONPath0.getPath());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("x:+SU", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement1 = (JSONPath.RefOpSegement)jSONPath_JSONPathParser0.filterRest(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_RefOpSegement1);
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
      assertSame(jSONPath_RefOpSegement0, jSONPath_RefOpSegement1);
      assertSame(jSONPath_RefOpSegement1, jSONPath_RefOpSegement0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(15, (byte)122, (-1190));
      assertNotNull(jSONPath_RangeSegment0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      ArrayList arrayList1 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, (Object) null);
      assertNotNull(arrayList1);
      assertEquals("null", jSONPath0.getPath());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNotSame(arrayList1, arrayList0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("null", string0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      String string1 = "com.alibaba.fastjson.JSONPath$MaxSegment";
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MaxSegment");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$MaxSegment", jSONPath0.getPath());
      
      int int0 = (-838);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.autoTypeAccept", "/stackTrace/0", 52);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(52, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("/stackTrace/0", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      JSONPath jSONPath1 = new JSONPath("LIKE");
      assertNotNull(jSONPath1);
      assertEquals("LIKE", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      
      boolean boolean0 = jSONPath1.isRef();
      assertEquals("LIKE", jSONPath1.getPath());
      assertTrue(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      Float float0 = new Float((float) (-838));
      assertNotNull(float0);
      assertEquals((-838.0F), (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue("null", "Y&Nn", 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Ngn9EaCe`");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("Ngn9EaCe", string0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/9", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLSyntaxErrorException0, serializeConfig0);
      assertNotNull(map0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertFalse(map0.isEmpty());
      assertEquals(80, map0.size());
      
      Integer integer0 = new Integer(933);
      assertNotNull(integer0);
      assertEquals(933, (int)integer0);
      
      int int0 = jSONPath0.size((Object) integer0);
      assertEquals("/stackTrace/9", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/9");
      assertNotNull(jSONPath1);
      assertEquals("/stackTrace/9", jSONPath1.getPath());
      assertSame(jSONPath1, jSONPath0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment1);
      assertSame(jSONPath_WildCardSegment1, jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_WildCardSegment1, "iL'o)Y5^ghY[c", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("jaa/lang/Float");
      assertNotNull(jSONPath0);
      assertEquals("jaa/lang/Float", jSONPath0.getPath());
      
      jSONPath0.init();
      assertEquals("jaa/lang/Float", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = "$";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string1 = "[k[gCVn;j:+ +bxkLJR";
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 0;
      intArray0[4] = 1792;
      SQLDataException sQLDataException0 = new SQLDataException("44VLhj;_A(Z=^%vohe", "44VLhj;_A(Z=^%vohe");
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("v", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      Integer integer0 = Integer.getInteger("fastjson.parser.safeMode");
      assertNull(integer0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, jSONPath_Operator0);
      assertNotNull(arrayList0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = JSONPath.remove((Object) aSMDeserializerFactory0, "c");
      assertFalse(boolean0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 1792, 0, 0}, intArray0);
      
      boolean boolean1 = jSONPath_PropertySegment0.remove(jSONPath1, "com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_PropertySegment1);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertNotSame(jSONPath_PropertySegment1, jSONPath_PropertySegment0);
      
      boolean boolean2 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      ArrayList arrayList1 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath1, (Object) null, arrayList0);
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath_PropertySegment0.equals((Object)jSONPath_PropertySegment1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath_PropertySegment0, jSONPath_PropertySegment1);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(116, 116, 116);
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLDataException0, jSONPath_RangeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, parserConfig0, parserConfig0);
      assertNotNull(arrayList0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertFalse(arrayList0.isEmpty());
      assertEquals(7, arrayList0.size());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, parserConfig0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("notWriteDefaultValue");
      assertNotNull(jSONPath0);
      assertEquals("notWriteDefaultValue", jSONPath0.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("illegal ref");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("illegal", string0);
      
      JSONPath jSONPath1 = JSONPath.compile("notWriteDefaultValue");
      assertNotNull(jSONPath1);
      assertEquals("notWriteDefaultValue", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLSyntaxErrorException0, serializeConfig0);
      assertNotNull(map0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertFalse(map0.isEmpty());
      assertEquals(80, map0.size());
      
      Integer integer0 = new Integer(366);
      assertNotNull(integer0);
      assertEquals(366, (int)integer0);
      
      int int0 = jSONPath1.size((Object) "notWriteDefaultValue");
      assertEquals("notWriteDefaultValue", jSONPath1.getPath());
      assertEquals((-1), int0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath jSONPath2 = JSONPath.compile("com.alibaba.fastjson.JSONPath$FilterSegment");
      assertNotNull(jSONPath2);
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      boolean boolean0 = jSONPath2.removePropertyValue("illegal", "LE", true);
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", jSONPath2.getPath());
      assertFalse(boolean0);
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNull(object0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertNotNull(string0);
      assertEquals("l", string0);
      
      JSONPath jSONPath0 = new JSONPath("nin");
      assertNotNull(jSONPath0);
      assertEquals("nin", jSONPath0.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      SQLDataException sQLDataException0 = new SQLDataException("l");
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("l", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: l", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, sQLDataException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLDataException sQLDataException0 = new SQLDataException("44VLhj;_A(Z=^%vohe", "44VLhj;_A(Z=^%vohe");
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: 44VLhj;_A(Z=^%vohe", sQLDataException0.toString());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getSQLState());
      assertEquals("44VLhj;_A(Z=^%vohe", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("v", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      Integer integer0 = Integer.getInteger("fastjson.parser.safeMode");
      assertNull(integer0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, jSONPath_Operator0);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = JSONPath.remove((Object) aSMDeserializerFactory0, "c");
      assertFalse(boolean0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2139, 2139, 2139, 2139, 1792, 2139, 2139}, intArray0);
      
      boolean boolean1 = jSONPath_PropertySegment0.remove(jSONPath1, "com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(boolean1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_PropertySegment1);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertNotSame(jSONPath_PropertySegment1, jSONPath_PropertySegment0);
      
      boolean boolean2 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      ArrayList arrayList1 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath1, (Object) null, arrayList0);
      assertNotNull(arrayList1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath_PropertySegment0.equals((Object)jSONPath_PropertySegment1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath_PropertySegment0, jSONPath_PropertySegment1);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NOT_BETWEEN");
      assertNotNull(jSONPath0);
      assertEquals("NOT_BETWEEN", jSONPath0.getPath());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("NOT_BETWEEN"));
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("NOT_BETWEEN", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"TN\"ma{w");
      assertNotNull(jSONPath0);
      assertEquals("\"TN\"ma{w", jSONPath0.getPath());
      
      String string0 = "Ngn9EaCe`";
      String string1 = "Yq25& .";
      SQLException sQLException0 = new SQLException("\"TN\"ma{w", "GVp@kQYy]W>0hn3o`sq");
      assertNotNull(sQLException0);
      assertEquals("GVp@kQYy]W>0hn3o`sq", sQLException0.getSQLState());
      assertEquals("\"TN\"ma{w", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: \"TN\"ma{w", sQLException0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      assertNotNull(sQLWarning0);
      assertEquals("GVp@kQYy]W>0hn3o`sq", sQLException0.getSQLState());
      assertEquals("\"TN\"ma{w", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: \"TN\"ma{w", sQLException0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLException: \"TN\"ma{w", sQLWarning0.toString());
      assertEquals("java.sql.SQLException: \"TN\"ma{w", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("GVp@kQYy]W>0hn3o`sq", sQLException0.getSQLState());
      assertEquals("\"TN\"ma{w", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: \"TN\"ma{w", sQLException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLException: \"TN\"ma{w", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLException: \"TN\"ma{w", sQLTransactionRollbackException0.getMessage());
      
      SQLWarning sQLWarning1 = (SQLWarning)sQLWarning0.fillInStackTrace();
      assertNotNull(sQLWarning1);
      assertEquals("GVp@kQYy]W>0hn3o`sq", sQLException0.getSQLState());
      assertEquals("\"TN\"ma{w", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: \"TN\"ma{w", sQLException0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLException: \"TN\"ma{w", sQLWarning0.toString());
      assertEquals("java.sql.SQLException: \"TN\"ma{w", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLException: \"TN\"ma{w", sQLWarning1.toString());
      assertNull(sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLException: \"TN\"ma{w", sQLWarning1.getMessage());
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      
      String string2 = "5=5sq*)Hl99&u";
      SQLDataException sQLDataException0 = new SQLDataException("", "5=5sq*)Hl99&u", 2288);
      assertNotNull(sQLDataException0);
      assertEquals(2288, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("5=5sq*)Hl99&u", sQLDataException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLDataException0);
      assertNotNull(batchUpdateException0);
      assertEquals(2288, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("5=5sq*)Hl99&u", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLDataException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = batchUpdateException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(2288, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("5=5sq*)Hl99&u", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLDataException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(13, stackTraceElementArray0.length);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, "Ngn9EaCe`", sQLDataException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      
      JSONPath jSONPath0 = JSONPath.compile("R _");
      assertNotNull(jSONPath0);
      assertEquals("R _", jSONPath0.getPath());
      
      boolean boolean0 = JSONPath.contains((Object) null, "tJk?CYh0y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONPath.read("a&-RG", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2139);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("scanBoolean");
      assertNotNull(jSONPath0);
      assertEquals("scanBoolean", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(2139));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BETWEEN";
      stringArray0[1] = "scanBoolean";
      stringArray0[2] = "scanBoolean";
      stringArray0[3] = "scanBoolean";
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "scanBoolean");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = new JSONPath("max");
      int int0 = 4045;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-780), 4045, 111, 111, 13, (-780));
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ngn9EaCe`", "max");
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance_deep;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ngn9EaCe`";
      stringArray0[1] = "Ffk(d>o R";
      stringArray0[2] = "max";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath_WildCardSegment1, stringArray0);
      assertEquals(0, jSONObject0.size());
      
      boolean boolean0 = false;
      int int1 = 2205;
      boolean boolean1 = false;
      SerializeConfig serializeConfig0 = new SerializeConfig(int1, boolean1);
      String string0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0);
      JSONPath.keySet((Object) stringArray0[2], stringArray0[2]);
      String string1 = "7a";
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(string1, boolean0);
      char char0 = '5';
      boolean boolean2 = JSONPath.JSONPathParser.isDigitFirst(char0);
      Long[] longArray0 = new Long[2];
      String string2 = "";
      long long0 = (-719183851066137122L);
      Long long1 = new Long(long0);
      Long long2 = Long.getLong(string2, long1);
      longArray0[0] = long2;
      Long long3 = new Long(int0);
      longArray0[1] = long3;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(stringArray0[2], longArray0, boolean2);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      long long4 = (-3773L);
      Long long5 = new Long(long4);
      boolean boolean3 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_MultiPropertySegment0, long5, stringArray0[2]);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("L<", "L<");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?),j8PN:Gl(");
      SerializeConfig serializeConfig1 = new SerializeConfig(3895, false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = new JSONPath("A`q&}(");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, (Object) null, 122, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("o", "^9R\"QXtRuMw", parserConfig0, 2645, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2o
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("int");
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("int", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("like");
      JSONPath.remove((Object) jSONPath_IntInSegement0, "int");
      Byte byte0 = new Byte((byte)74);
      jSONPath_IntInSegement0.apply(jSONPath0, byte0, "int", jSONPath0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("E^#W`8[4br]P6EG_");
      jSONPath_JSONPathParser1.readString();
      jSONPath_JSONPathParser1.readName();
      Object object0 = jSONPath0.eval((Object) "like");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "=Ph[x;RndfiPhx8Lac=";
      stringArray0[0] = "=Ph[x;RndfiPhx8Lac=";
      stringArray0[1] = "=Ph[x;RndfiPhx8Lac=";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=Ph[x;RndfiPhx8Lac=");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("=Ph[x;RndfiPhx8Lac=");
      jSONPath_JSONPathParser1.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath(".0*$");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONPath0.remove((Object) serializeConfig0);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Long long0 = new Long((-1014497654951707614L));
      Long long1 = new Long((-1619728521L));
      Long[] longArray0 = new Long[2];
      longArray0[0] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("vYBxDW", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("vYBxDW");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, long0, "vYBxDW", "vYBxDW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("kotlin.ranges.CharRange", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      JSONPath jSONPath0 = new JSONPath("kotlin.ranges.CharRange");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLTransientConnectionException0, "kotlin.ranges.CharRange", "kotlin.ranges.CharRange");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-5808493101479473382L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      longArray0[0] = long0;
      Long long1 = new Long(943L);
      longArray0[1] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(">LdE[L\"xs>D*P}6*U\"", longArray0, false);
      JSONPath jSONPath0 = new JSONPath(">LdE[L\"xs>D*P}6*U\"");
      jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath0, longArray0[0], long1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">LdE[L\"xs>D*P}6*U\"";
      stringArray0[1] = ">LdE[L\"xs>D*P}6*U\"";
      stringArray0[2] = ">LdE[L\"xs>D*P}6*U\"";
      stringArray0[3] = ">LdE[L\"xs>D*P}6*U\"";
      stringArray0[4] = ">LdE[L\"xs>D*P}6*U\"";
      stringArray0[5] = ">LdE[L\"xs>D*P}6*U\"";
      stringArray0[6] = ">LdE[L\"xs>D*P}6*U\"";
      stringArray0[7] = ">LdE[L\"xs>D*P}6*U\"";
      stringArray0[8] = ">LdE[L\"xs>D*P}6*U\"";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_IntObjInSegement0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("@v1YXLqTrQ@", "@v1YXLqTrQ@", false);
      jSONPath_JSONPathParser0.filterRest(jSONPath_RlikeSegement0);
      JSONPath jSONPath0 = new JSONPath("5M/%kdhD}");
      JSONPath jSONPath1 = new JSONPath("like");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, "like", 651, jSONPath1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("UseISO8601DateFormat");
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, sQLClientInfoException0, 2093, "<gU'i4,$8Hz\"G:!LiE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<[>RaP|B{");
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. <[>RaP|B{
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-936L);
      longArray0[1] = 0L;
      longArray0[2] = (-6179589609550493385L);
      longArray0[3] = (-1014497654951707614L);
      longArray0[4] = 1027L;
      longArray0[5] = (-2160L);
      longArray0[7] = (-719183851066137122L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement(";-k,5m]8~q}0j5gV1", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("%bRM5jMdiuO|");
      MockDate mockDate0 = new MockDate(25, 25, 25, 4, 58, (-1263));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths((Object) null, serializeConfig0);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, (Object) null, mockDate0, jSONPath0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";-k,5m]8~q}0j5gV1");
      Class<SQLWarning> class0 = SQLWarning.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      Class<JSONPath.RangeSegment> class1 = JSONPath.RangeSegment.class;
      jSONPath0.getJavaBeanSerializer(class1);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      boolean boolean1 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_IntInSegement0, class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("getDeserializer", "getDeserializer", false);
      JSONPath jSONPath0 = new JSONPath("64MlDJ");
      Double double0 = new Double((-4.2703473065087468E18));
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, double0, "getDeserializer", "64MlDJ");
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = "";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.compile("|N\"");
      JSONPath.compile("safeMode");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+T");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("parent");
      jSONPath_JSONPathParser0.readName();
      JSONPath jSONPath0 = new JSONPath("parent");
      SerializeConfig.getGlobalInstance();
      jSONPath_JSONPathParser0.readSegement();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("parent", sQLClientInfoException0);
      JSONPath.JSONPathParser.isDigitFirst('+');
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. -
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = "";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.compile("|N\"");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("", true);
      JSONPath jSONPath0 = new JSONPath("safeMode");
      jSONPath_PropertySegment0.remove(jSONPath0, "|N\"");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+T");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-817));
      JSONPath jSONPath0 = new JSONPath("scanBoolean");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Class<Integer> class0 = Integer.TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BETWEEN";
      stringArray0[1] = "scanBoolean";
      stringArray0[2] = "scanBoolean";
      stringArray0[3] = "scanBoolean";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("v", "v", "v", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("v");
      assertEquals("v", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("sL7j}eOmBQ", true);
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("sL7j}eOmBQ", "lo=FX)E64.j8-v#X$)\"", (-838));
      jSONPath0.isRef();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Float float0 = new Float((float) (-838));
      jSONPath0.getPropertyValue(sQLInvalidAuthorizationSpecException0, "$VALUES", 0L);
      SQLDataException sQLDataException0 = new SQLDataException();
      Object object0 = new Object();
      jSONPath_PropertySegment0.eval(jSONPath0, object0, sQLDataException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%d8c");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath jSONPath1 = new JSONPath("$VALUES");
      JSONPath.size((Object) jSONPath1, "sL7j}eOmBQ");
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{F`/35vADpE1uhBzr");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("m", 6607618197526598121L, 546L, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      jSONPath_JSONPathParser0.filterRest(jSONPath_FilterGroup0);
      jSONPath_JSONPathParser0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {F`/35vADpE1uhBzr
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = "I";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I");
      JSONPath jSONPath0 = JSONPath.compile("I");
      jSONPath0.containsValue((Object) "I", (Object) "I");
      Class<BigInteger> class0 = BigInteger.class;
      JSONPath.isDouble(class0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "I";
      stringArray0[1] = "I";
      stringArray0[2] = "I";
      stringArray0[3] = "I";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("I", stringArray0, false);
      JSONPath jSONPath1 = null;
      // Undeclared exception!
      try { 
        jSONPath_StringInSegement0.apply((JSONPath) null, (Object) null, jSONPath0, "I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("dyQ[#*x");
      jSONPath0.init();
      assertEquals("dyQ[#*x", jSONPath0.getPath());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "dyQ[#*x";
      stringArray0[1] = "dyQ[#*x";
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath_MultiPropertySegment0.eval(jSONPath0, "dyQ[#*x", "com.alibaba.fastjson.JSONPathException");
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_MultiPropertySegment0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONPath$Operator";
      stringArray0[1] = "between";
      stringArray0[2] = "-Rao_0o%jcnqKQ^-XST";
      stringArray0[3] = "java.util.OptionalInt";
      stringArray0[4] = ">\"na";
      stringArray0[5] = ")9z|'V<<lYy]";
      stringArray0[6] = "l";
      stringArray0[7] = "rlike";
      stringArray0[8] = "(Ljava/util/Collection;C)V";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(630, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com", serializeConfig0, parserConfig0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, classLoader0, "com");
      assertEquals(9, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = "B";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "B";
      objectArray0[1] = (Object) "B";
      JSONPath jSONPath0 = JSONPath.compile("]>i$");
      Object object0 = jSONPath0.eval(objectArray0[0]);
      JSONPath.keySet(object0, string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("L");
      jSONPath0.containsValue((Object) "L", (Object) "L");
      Object[] objectArray0 = new Object[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = jSONPath0.evalSize("L");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%bRM5jMdiuO|", "%bRM5jMdiuO|");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("%bRM5jMdiuO|", true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("%bRM5jMdiuO|", serializeConfig0, parserConfig0);
      Float float0 = new Float(0.0F);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FS/`1=cuQY<X");
      DataTruncation dataTruncation0 = new DataTruncation(1607, true, false, 1607, 64, sQLIntegrityConstraintViolationException0);
      sQLFeatureNotSupportedException0.addSuppressed(dataTruncation0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath0, "Ct", (Object) parserConfig0);
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("fastjson", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("IT:NIF=XUeEEns#p_6", serializeConfig0, parserConfig0);
      jSONPath_SizeSegment0.eval(jSONPath0, serializeConfig0, serializeConfig0);
      String string0 = "G\"+Rh*So";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "G\"+Rh*So", 503);
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 503;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("", "fastjson.parser.deny.internal", "G\"+Rh*So", (String[]) null, false);
      String string1 = null;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = null;
      try {
        jSONPath_PropertySegment0 = new JSONPath.PropertySegment((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("null", (-811277319855450459L), (-811277319855450459L), true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("K6p");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement1 = new JSONPath.IntBetweenSegement("fastjson.parser.autoTypeAccept", (-811277319855450459L), (-811277319855450459L), true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement1);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "null", "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace");
      Set<?> set0 = jSONPath0.evalKeySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".(v");
      Double double0 = new Double((-1751.6));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, double0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1182), (-1182), (-303), 989, 0, (-1182));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "0bxl");
      SQLDataException sQLDataException0 = new SQLDataException((String) null, ".(v", sQLSyntaxErrorException0);
      JSONPath jSONPath1 = JSONPath.compile("0bxl");
      jSONPath1.getPath();
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONPath.keySet((Object) bigInteger0, "q");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".(v");
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2139);
      JSONPath.compile("scanBoolean");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Class<Integer> class0 = Integer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BTWEE";
      stringArray0[1] = "scanBoolean";
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
      
      boolean boolean1 = JSONPath.JSONPathParser.isDigitFirst(';');
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("vYBxDW");
      int[] intArray0 = new int[16];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_SizeSegment0, serializeConfig0);
      assertEquals(1, map0.size());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("vYBxDW");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      System.setCurrentTimeMillis((-1727L));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("a|P`cH3E", "vYBxDW", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "a|P`cH3E", jSONPath_JSONPathParser0, jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLTransientException sQLTransientException0 = new SQLTransientException("P}4i'T-+Pl");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("parent", "v", 2139, intArray0, sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("parent", batchUpdateException0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("parent", sQLTransactionRollbackException0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("parent", "K> Wp", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$StringOpSegement", serializeConfig0, parserConfig0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      jSONReaderScanner0.scanDecimal('V');
      DataTruncation dataTruncation0 = new DataTruncation(2139, true, false, (-192), 3544);
      jSONPath_StringOpSegement0.apply(jSONPath0, sQLTransactionRollbackException0, (Object) null, dataTruncation0);
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONPath jSONPath1 = null;
      try {
        jSONPath1 = new JSONPath("", serializeConfig0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("expect '", "expect '");
      sQLTransactionRollbackException0.getLocalizedMessage();
      sQLTransactionRollbackException0.spliterator();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "expect '", "com.alibaba.fastjson.JSONPath$MatchSegement", (Object) serializeConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Long long0 = new Long(8488266005336625107L);
      Long long1 = new Long(8488266005336625107L);
      Long[] longArray0 = new Long[1];
      longArray0[0] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("ZY^#2B*\"", longArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m81");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ZY^#2B*\"", "m81", 49, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLTransactionRollbackException0);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.JSONObject", "Lgw_");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("ZxA9", "fastjson.parser.deny", sQLFeatureNotSupportedException1);
      boolean boolean1 = jSONPath_FilterGroup0.apply(jSONPath0, sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException2, "com.alibaba.fastjson.JSONObject");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      parserConfig0.addAccept("fastjson.parser.deny.internal");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("X", serializeConfig0, parserConfig0);
      jSONPath0.init();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.deny", (-1342L), jSONPath_Operator0);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath_SizeSegment0, jSONPath0, jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLDataException sQLDataException0 = new SQLDataException("44VLhj;_A(Z=^%vohe", "44VLhj;_A(Z=^%vohe");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("v", true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Integer.getInteger("fastjson.parser.safeMode");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, jSONPath_Operator0);
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath.remove((Object) aSMDeserializerFactory0, "s");
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath1.init();
      Byte byte0 = new Byte((byte)61);
      jSONPath_PropertySegment0.remove(jSONPath1, byte0);
      SerializeConfig serializeConfig1 = new SerializeConfig(16384);
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("s", true);
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_PropertySegment1, serializeConfig0);
      assertFalse(map0.isEmpty());
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.Or;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("s", 678L, jSONPath_Operator1);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, serializeConfig1, sQLIntegrityConstraintViolationException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = ".(v";
      JSONPath jSONPath0 = new JSONPath(".(v");
      Double double0 = new Double((-1751.6));
      jSONPath0.evalKeySet(double0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. .(v
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[3] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLTransientException sQLTransientException0 = new SQLTransientException("P}4i'T-+Pl");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("P}4i'T-+Pl", "", sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("parent", "v", 2139, intArray0, sQLTimeoutException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("", 2139, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("X");
      jSONPath0.init();
      assertEquals("X", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2139);
      boolean boolean0 = JSONPath.set((Object) null, "v", (Object) jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = new JSONPath("value is null");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("2~_MVC)Bp:g", (String) null, sQLFeatureNotSupportedException0);
      jSONPath0.set((Object) null, (Object) sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "value is null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = "\"TN\"ma{w";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      Double double0 = new Double(0.0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("()I", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = null;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("java.util.OptionalLong", "jsonpath can not be null", false);
      JSONPath jSONPath0 = JSONPath.compile("java.util.OptionalLong");
      Class<SQLTransientException> class0 = SQLTransientException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      jSONPath_RlikeSegement0.apply(jSONPath0, javaBeanSerializer0, class0, "java.util.OptionalLong");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("G\"+Rh*So");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(151, 151, 151, 151, 151, 151);
      jSONPath_NullSegement0.apply(jSONPath0, "G\"+Rh*So", javaBeanSerializer0, mockGregorianCalendar0);
      JSONPath jSONPath1 = null;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      String string0 = "";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.util.OptionalLong";
      stringArray0[1] = "jsonpath can not be null";
      stringArray0[2] = "";
      stringArray0[3] = "jsonpath can not be null";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = "writeAfter";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("writeAfter");
      String string1 = "[k[gCVn;j:+ +bxkLJR";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[k[gCVn;j:+ +bxkLJR";
      stringArray0[1] = "writeAfter";
      stringArray0[2] = "[k[gCVn;j:+ +bxkLJR";
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MaxSegment", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny");
      jSONPath0.eval((Object) sQLDataException0);
      DataTruncation dataTruncation0 = new DataTruncation(512, false, false, 27, 1510);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem((JSONPath) null, dataTruncation0, 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.DataTruncation
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny");
      JSONPath jSONPath0 = new JSONPath("(Ljava/lang/String;)I");
      Double double0 = new Double((-1.0));
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, parserConfig0, double0, "org.joda.time.LocalDateTime");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Integer integer0 = new Integer(1187);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      DataTruncation dataTruncation0 = new DataTruncation(39, false, false, 39, 1187, sQLClientInfoException0);
      boolean boolean1 = jSONPath_FilterSegment0.remove(jSONPath0, "org.joda.time.LocalDateTime", jSONPath_NullSegement0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-936L);
      longArray0[1] = 0L;
      longArray0[2] = (-6179589609550493385L);
      longArray0[3] = (-1014497654951707614L);
      longArray0[4] = 1027L;
      longArray0[5] = (-2160L);
      longArray0[7] = (-719183851066137122L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement(";-k,5m]8~q}0j5gV1", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("%bRM5jMdiuO|");
      MockDate mockDate0 = new MockDate(25, 25, 25, 4, 58, (-1263));
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, (Object) null, mockDate0, jSONPath0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";-k,5m]8~q}0j5gV1");
      Class<SQLWarning> class0 = SQLWarning.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      boolean boolean1 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_IntInSegement0, class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{F`/35vADpE1uhBzr");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{F`/35vADpE1uhBzr");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{F`/35vADpE1uhBzr", 6607618197526598121L, 546L, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_FilterGroup0);
      JSONPath jSONPath0 = new JSONPath("{F`/35vADpE1uhBzr");
      jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_Filter0, jSONPath_Filter0, jSONPath_JSONPathParser0);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("IT:NIF=XUeEEns#p_6", serializeConfig0, parserConfig0);
      jSONPath_SizeSegment0.eval(jSONPath0, serializeConfig0, serializeConfig0);
      String string0 = "0bxl";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("jsonpath error, path ", "fastjson.parser.autoTypeSupport");
      SQLDataException sQLDataException0 = new SQLDataException("WriteBigDecimalAsPlain", "jsonpath error, path ", sQLSyntaxErrorException0);
      JSONPath.reserveToObject(jSONPath0, (String[]) null);
      JSONPath jSONPath1 = JSONPath.compile(",$=2KX&n'Q#");
      jSONPath1.getPath();
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string1 = "xCa";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("WriteBigDecimalAsPlain", "xCa", sQLSyntaxErrorException0);
      JSONPath.keySet((Object) sQLRecoverableException0, "Ct?l}NrBF*W'S<*GKci");
      boolean boolean0 = true;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(string0, boolean0);
      jSONPath_PropertySegment0.remove(jSONPath0, string1);
      int int0 = (-2460);
      SerializeConfig serializeConfig1 = null;
      try {
        serializeConfig1 = new SerializeConfig(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1792);
      JSONPath jSONPath0 = new JSONPath("9}g (Vz/3F(- REB~\"");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("evalKeySet error : ");
      DataTruncation dataTruncation0 = new DataTruncation(730, true, true, 19, 8, sQLIntegrityConstraintViolationException0);
      JSONPath.size((Object) "yyyyMMddHHmmssSSSZ", "fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 9}g (Vz/3F(- REB~\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion";
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = "16'Jf?AV~m>|TJ|z*";
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      long long0 = JSONPath.SIZE;
      String string1 = "BuXl8clkC'k";
      SQLWarning sQLWarning0 = new SQLWarning("16'Jf?AV~m>|TJ|z*", "com.alibaba.fastjson.JSONPath$Context");
      sQLWarning0.fillInStackTrace();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$Context", "Ffk(d>o R", intArray0);
      batchUpdateException1.getStackTrace();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      String string2 = "GT";
      jSONPath_WildCardSegment0.eval(jSONPath0, "Ffk(d>o R", (Object) null);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("GT", true);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$Context", sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 16'Jf?AV~m>|TJ|z*, segement GT
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("not", (SerializeConfig) null, parserConfig0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("m8\"++");
      UUID uUID0 = MockUUID.fromString("parent");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) serializeConfig0;
      objectArray0[1] = (Object) "parent";
      objectArray0[2] = (Object) uUID0;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) uUID0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : m8\"++
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("16'Jf?AV~m>|TJ|z*", "16'Jf?AV~m>|TJ|z*");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "16'Jf?AV~m>|TJ|z*";
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "16'Jf?AV~m>|TJ|z*", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%bRM5jMdiuO|", "%bRM5jMdiuO|");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("%bRM5jMdiuO|", serializeConfig0, parserConfig0);
      Float float0 = new Float(0.0F);
      jSONPath0.getPropertyValue(float0, "$VALUES", 0L);
      SQLDataException sQLDataException0 = new SQLDataException();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("unsupported array put operation. ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'u'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("java.uzil.Li;t");
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (String) null);
      JSONPath jSONPath0 = new JSONPath("LM.vYBxDW,@!c%lk.");
      jSONPath0.arrayAdd((Object) null, (Object[]) stackTraceElementArray0);
      assertEquals("LM.vYBxDW,@!c%lk.", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.DoubleSerializer");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("_X");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.serializer.DoubleSerializer", sQLRecoverableException0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "_X";
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLInvalidAuthorizationSpecException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.serializer.DoubleSerializer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{cIf+Gw*z^", "}W1f]Y");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-Rao_0o%jcnqKQ^-XST", "null]", sQLIntegrityConstraintViolationException0);
      String[] stringArray0 = new String[0];
      sQLIntegrityConstraintViolationException0.getStackTrace();
      SerializeConfig serializeConfig0 = new SerializeConfig(2139, true);
      JSONPath jSONPath0 = new JSONPath("[TAwo;0", serializeConfig0, (ParserConfig) null);
      jSONPath0.arrayAdd((Object) sQLRecoverableException0, (Object[]) stringArray0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Object object0 = JSONPath.reserveToObject(jSONPath_MultiPropertySegment0, stringArray0);
      assertSame(object0, jSONPath_MultiPropertySegment0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("java.util.List");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("java.util.List");
      long long0 = JSONPath.SIZE;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "Ffk(d>o R", 77, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.JSONPath$1", sQLTransactionRollbackException0);
      JSONPath.reserveToArray("BuXl8clkC'k", (String[]) null);
      Float float0 = new Float(872.78674F);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 122, sQLFeatureNotSupportedException0);
      jSONPath0.arrayAdd((Object) float0, (Object[]) null);
      DataTruncation dataTruncation0 = new DataTruncation(77, true, true, 873, 108, sQLFeatureNotSupportedException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("typeName", "H", hashMap0, sQLFeatureNotSupportedException0);
      JSONPath.size((Object) sQLClientInfoException0, "jsonpath can not be null");
      jSONPath0.init();
      Object object0 = jSONPath0.eval((Object) sQLRecoverableException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      jSONPath0.arrayAdd((Object) parserConfig0, (Object[]) null);
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2139);
      JSONPath.compile("scanBoolean");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Class<Integer> class0 = Integer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BETWEEN";
      stringArray0[1] = "scanBoolean";
      stringArray0[2] = "scanBoolean";
      stringArray0[3] = "scanBoolean";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      String string0 = "?x#JOxJ0<lk7";
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = new JSONPath(".(v");
      MockDate mockDate0 = new MockDate((-4205), (-270), (-4205), (-270), (-4205));
      jSONPath_SizeSegment0.eval(jSONPath0, (Object) null, mockDate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("?x#JOxJ0<lk7", "scan false error", 105);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$RangeSegment", 105, (-2429L), true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("jsonpath");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntBetweenSegement0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "scan false error", "'JHRI");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      JSONPath jSONPath0 = new JSONPath(":mLHp/'[JsP");
      jSONPath0.getPropertyValue("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", (-3851359326990528739L));
      JSONPath jSONPath1 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      jSONPath1.init();
      int int0 = jSONPath1.evalSize(jSONPath0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String string0 = ".{m]";
      JSONPath jSONPath0 = new JSONPath(".{m]");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONPath_MinSegment0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getFieldType");
      objectArray0[1] = (Object) jSONPath0;
      JSONPath.arrayAdd((Object) ".{m]", ".{m]", objectArray0);
      long long0 = 5614464919154503228L;
      jSONPath0.deepSet(string0, string0, long0, string0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      JSONPath.arrayAdd((Object) jSONPath0, "Q/AjQP8^", (Object[]) null);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept");
      jSONPath1.init();
      assertFalse(jSONPath1.equals((Object)jSONPath0));
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = null;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) sQLRecoverableException0;
      objectArray0[2] = (Object) sQLRecoverableException0;
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLRecoverableException0, (String) null, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      jSONPath_JSONPathParser0.readName();
      JSONPath jSONPath0 = new JSONPath("null");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      jSONPath0.size((Object) "7e5TO");
      jSONPath0.removePropertyValue(jSONPath_JSONPathParser0, "7e5TO", true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("null", 0.0, jSONPath_Operator0);
      Float float0 = new Float(1.0F);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("7e5TO", false);
      jSONPath_PropertySegment0.setValue(jSONPath0, map0, jSONPath_DoubleOpSegement0);
      jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, (Object) null);
      SQLWarning sQLWarning0 = new SQLWarning("m\"rYV?m$^B,0-Fz", "null");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*SCX><H8&%.vvaUs(", "*SCX><H8&%.vvaUs(", sQLWarning0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, float0, jSONPath_PropertySegment0, sQLTimeoutException0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 61, 61);
      boolean boolean1 = jSONPath_DoubleOpSegement0.apply(jSONPath0, "7e5TO", "7e5TO", mockGregorianCalendar0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLDataException sQLDataException0 = new SQLDataException("44VLhj;_A(Z=^%vohe", "44VLhj;_A(Z=^%vohe");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("v", true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Integer.getInteger("fastjson.parser.safeMode");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, jSONPath_Operator0);
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      boolean boolean0 = JSONPath.remove((Object) aSMDeserializerFactory0, "c");
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath1.init();
      Pattern pattern0 = Pattern.compile("jsonpath can not be null");
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("6+iVo$=8m4O", pattern0, jSONPath_Operator0);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean1 = jSONPath_RegMatchSegement0.apply(jSONPath0, "jsonpath can not be null", bigInteger0, "v");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("value is null");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/sqackTrace/5");
      Pattern pattern0 = Pattern.compile("/sqackTrace/5", 43);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("Mg!M2a\"", pattern0, jSONPath_Operator0);
      jSONPath_RegMatchSegement0.apply(jSONPath0, "Mg!M2a\"", "value is null", jSONPath0);
      jSONPath_JSONPathParser0.explain();
      jSONPath_JSONPathParser0.filterRest(jSONPath_RegMatchSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /sqackTrace/5
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("16'Jf?AV~m>|TJ|z*", "16'Jf?AV~m>|TJ|z*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      jSONPath0.deepSet(sQLTimeoutException0, "16'Jf?AV~m>|TJ|z*", 9007199254740991L, jSONPath_Operator0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("16'Jf?AV~m>|TJ|z*", true);
      String string0 = "(";
      JSON.DEFAULT_PARSER_FEATURE = (-1793346306);
      JSONPath jSONPath1 = new JSONPath("(");
      // Undeclared exception!
      jSONPath_PropertySegment0.remove(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Double double0 = new Double((-3760.36));
      Long long0 = new Long((-3459L));
      int int0 = JSONPath.compare(double0, long0);
      assertEquals((-1), int0);
      
      JSONPath jSONPath0 = new JSONPath("#0Zk#|oYAHG");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = "x|BmX";
      JSONPath jSONPath0 = JSONPath.compile("x|BmX");
      jSONPath0.set((Object) "x|BmX", (Object) "x|BmX", true);
      String string1 = "]u(TFq)62Zza";
      Pattern pattern0 = Pattern.compile(string1);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement(string0, pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      jSONPath0.eval((Object) jSONPath_FilterSegment0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/cause/stackTrace/4");
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("<gU'i4,$8Hz\"G:!LiE", serializeConfig0, parserConfig0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("b?0iR5v[<K~}e'((", "`bT(Q~/Swk\"", "UseISO8601DateFormat", (String[]) null, false);
      Double double0 = new Double(2093);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("parser", (Throwable) null);
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, "/cause/stackTrace/4", sQLNonTransientException0);
      jSONPath0.getArrayItem(object0, 2093);
      Object object1 = new Object();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Pe QZqT7", "UseISO8601DateFormat", 2093);
      assertEquals("java.sql.SQLNonTransientConnectionException: Pe QZqT7", sQLNonTransientConnectionException0.toString());
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = new JSONPath("max");
      SQLException sQLException0 = new SQLException("Ngn9EaCe`", "Yq25& .");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("P}4i'T-+Pl");
      sQLTimeoutException0.spliterator();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.read((String) null, "<%pteI?");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("O(QIw+y\"URT]@@JB", "jsonpath can not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<%pteI?", sQLTimeoutException0);
      sQLSyntaxErrorException0.getLocalizedMessage();
      jSONPath0.deepSet(sQLTransactionRollbackException0, "jsonpath can not be null", 9007199254740991L, sQLSyntaxErrorException0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Rg2pGwdK-XG|XF98<cD", "Yq25& .", sQLTransactionRollbackException0);
      jSONPath_KeySetSegment0.eval(jSONPath0, sQLTimeoutException0, sQLInvalidAuthorizationSpecException0);
      jSONPath0.init();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<%pteI?");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      jSONPath_JSONPathParser0.readName();
      JSONPath jSONPath0 = new JSONPath("null");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.paths((Object) jSONPath0, serializeConfig0);
      Double double0 = new Double(0.0);
      jSONPath0.size((Object) double0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)25;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONPath0.contains((Object) bigDecimal0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("7e5TO");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("x:+SU", jSONPath_WildCardSegment0, jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RefOpSegement0);
      assertSame(jSONPath_RefOpSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      jSONPath_JSONPathParser0.readName();
      JSONPath jSONPath0 = new JSONPath("null");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.paths((Object) jSONPath0, serializeConfig0);
      jSONPath0.size((Object) "7e5TO");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("null", (-1), jSONPath_Operator0);
      Float float0 = new Float(1.0F);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("7e5TO", false);
      SQLWarning sQLWarning0 = new SQLWarning("m\"rYV?m$^B,0-Fz", "null");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("m\"rYV?m$^B,0-Fz");
      jSONPath_JSONPathParser1.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. m\"rYV?m$^B,0-Fz
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      String string0 = "u{R";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("u{R");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'u, but 'R'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v/");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("u{R");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'u, but 'R'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("T.E kLm+q@");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("<_d\"UdJ87O }_D", "expect '", (Throwable) null);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("/stackTrace/12", 10.0, jSONPath_Operator1);
      jSONPath_DoubleOpSegement0.apply(jSONPath0, "<_d\"UdJ87O }_D", "/stackTrace/12", jSONPath_Operator1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("null", string0);
      
      JSONPath jSONPath0 = new JSONPath("null");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertFalse(map0.isEmpty());
      
      int int0 = jSONPath0.size((Object) "7e5TO");
      assertEquals((-1), int0);
      
      boolean boolean0 = jSONPath0.removePropertyValue(jSONPath_JSONPathParser0, "7e5TO", true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("null", 0.0, jSONPath_Operator0);
      Float float0 = new Float(1.0F);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("7e5TO", false);
      SQLWarning sQLWarning0 = new SQLWarning("m\"rYV?m$^B,0-Fz", "null");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*SCX><H8&%.vvaUs(", "*SCX><H8&%.vvaUs(", sQLWarning0);
      jSONPath_DoubleOpSegement0.apply(jSONPath0, float0, jSONPath_PropertySegment0, sQLTimeoutException0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 61, 61);
      boolean boolean1 = jSONPath_DoubleOpSegement0.apply(jSONPath0, "7e5TO", "7e5TO", mockGregorianCalendar0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[6] = 1792;
      String[] stringArray0 = new String[0];
      JSONPath.reserveToArray("}W1f]Y", stringArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1.2.68");
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("vYBxDW", "vYBxDW", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "vYBxDW";
      stringArray0[1] = "vYBxDW";
      stringArray0[2] = "vYBxDW";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray((Object) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("java.util.OptionalLong", "jsonpath can not be null", false);
      JSONPath jSONPath0 = JSONPath.compile("java.util.OptionalLong");
      Class<SQLTransientException> class0 = SQLTransientException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      jSONPath_RlikeSegement0.apply(jSONPath0, javaBeanSerializer0, class0, "java.util.OptionalLong");
      Random.setNextRandom(151);
      jSONPath0.getJavaBeanDeserializer(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("i|4U24'L<%b[}nzV", "i|4U24'L<%b[}nzV");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-Rao_0o%jcnqKQ^-XST", "-Rao_0o%jcnqKQ^-XST", sQLInvalidAuthorizationSpecException0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.util.OptionalLong";
      stringArray0[1] = "jsonpath can not be null";
      stringArray0[2] = "i|4U24'L<%b[}nzV";
      stringArray0[3] = "java.util.OptionalLong";
      stringArray0[4] = "-Rao_0o%jcnqKQ^-XST";
      stringArray0[5] = "jsonpath can not be null";
      stringArray0[6] = "java.util.OptionalLong";
      stringArray0[7] = "-Rao_0o%jcnqKQ^-XST";
      stringArray0[8] = "m";
      JSONPath.reserveToArray(sQLRecoverableException0, stringArray0);
      Locale locale0 = Locale.ITALY;
      Chronology chronology0 = Chronology.ofLocale(locale0);
      HashMap<TemporalField, Long> hashMap0 = new HashMap<TemporalField, Long>();
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      ChronoLocalDate chronoLocalDate0 = chronology0.resolveDate(hashMap0, resolverStyle0);
      // Undeclared exception!
      try { 
        JSONPath.compare(chronoLocalDate0, jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("java.util.OptionalLong", "jsonpath can not be null", true);
      JSONPath jSONPath0 = JSONPath.compile("java.util.OptionalLong");
      Class<SQLTransientException> class0 = SQLTransientException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, javaBeanSerializer0, class0, "java.util.OptionalLong");
      assertFalse(boolean0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("G\"+Rh*So");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(151, 151, 151, 151, 151, 151);
      boolean boolean1 = jSONPath_NullSegement0.apply(jSONPath0, "G\"+Rh*So", javaBeanSerializer0, mockGregorianCalendar0);
      SerializeConfig serializeConfig0 = new SerializeConfig(151, true);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean2 = jSONPath0.isRef();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      JSONPath jSONPath1 = new JSONPath("16'Jf?AV~m>|TJ|z*");
      JSONPath.compile("P");
      Object object0 = null;
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath0.contains((Object) jSONPath_MultiPropertySegment0);
      jSONPath0.keySet(object0);
      String string0 = "com.alibaba.fastjson.serializer.MiscCodec";
      String string1 = "CFRx5$Q(krA~&*Aq8B:";
      int int0 = 114;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(string0, string1, int0);
      String string2 = "";
      int int1 = 105;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(int1);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_ArrayAccessSegment0, string2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      JSONPath.compile("16'Jf?AV~m1>|TJ|z*");
      long long0 = JSONPath.SIZE;
      JSON.DEFAULT_GENERATE_FEATURE = (-1586);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("w");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'w'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("L");
      Object[] objectArray0 = new Object[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONPath0.evalSize("L");
      objectArray0[0] = (Object) "L";
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "L", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path L
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      jSONPath0.isRef();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(");
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. (
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      sQLTransactionRollbackException0.getLocalizedMessage();
      sQLTransactionRollbackException0.spliterator();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.set((Object) parserConfig0, "! 0XRyWAQ", (Object) "! 0XRyWAQ");
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = "2hQ =?M6g/U!BFeT~,";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("2hQ =?M6g/U!BFeT~,");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath jSONPath0 = new JSONPath("2hQ =?M6g/U!BFeT~,");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.paths((Object) serializeConfig0, serializeConfig0);
      jSONPath_JSONPathParser0.readSegement();
      JSONPath.size((Object) jSONPath_Segment0, "n\"EMP@P6\"mC@l");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) serializeConfig0, (Object) string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 2hQ =?M6g/U!BFeT~,
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2139);
      JSONPath jSONPath0 = JSONPath.compile("scanBoolean");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      DataTruncation dataTruncation0 = new DataTruncation(2, true, true, 48, 2139, sQLIntegrityConstraintViolationException0);
      String string0 = "-gxJV%s";
      JSONPath.size((Object) dataTruncation0, "-gxJV%s");
      jSONPath0.init();
      jSONPath0.eval((Object) string0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "NZk`G");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = "java.util.List";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("java.util.List");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("java.util.List");
      Long long0 = new Long(0L);
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".(v");
      Double double0 = new Double((-1751.6));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, double0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1182), (-1182), (-303), 989, 0, (-1182));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "0bxl");
      SQLDataException sQLDataException0 = new SQLDataException((String) null, ".(v", sQLSyntaxErrorException0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0bxl";
      stringArray0[1] = "";
      stringArray0[2] = ".(v";
      stringArray0[3] = "";
      stringArray0[4] = ".(v";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLDataException0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Ffk(d>o R");
      jSONPath_JSONPathParser0.readName();
      JSONPath.compile("Ffk");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. Ffk(d>o R
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("notWriteDefaultValue");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SQLTransientException sQLTransientException0 = new SQLTransientException("length", "length");
      JSONPath jSONPath1 = JSONPath.compile("Ffk(d>o R");
      jSONPath1.set((Object) "length", (Object) jSONPath0);
      jSONPath0.init();
      assertFalse(jSONPath0.equals((Object)jSONPath1));
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLTransientException sQLTransientException0 = new SQLTransientException("P}4i'T-+Pl");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("P}4i'T-+Pl", "", sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("parent", "v", 2139, intArray0, sQLTimeoutException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("", 2139, jSONPath_Operator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      boolean boolean0 = JSONPath.set((Object) "P}4i'T-+Pl", "com", (Object) batchUpdateException0);
      assertTrue(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("P}4i'T-+Pl");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLFeatureNotSupportedException0, (Object) "P}4i'T-+Pl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : P}4i'T-+Pl
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackrace/7");
      String string0 = "toJSON error";
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("/stackrace/7", "toJSON error", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /stackrace/7, segement toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("16'JfNAV~m>|TJ|z*");
      long long0 = JSONPath.SIZE;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<gU'i4,$8Hz\"G:!LiE");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("not support : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"not support \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("", 0L, 0L, false);
      JSONPath jSONPath0 = new JSONPath("f");
      jSONPath_IntBetweenSegement0.apply(jSONPath0, "", "", (Object) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLRecoverableException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"$ref\":\"@\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"$ref\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "LIKE";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("LIKE", stringArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("keySet", serializeConfig0, parserConfig0);
      Integer integer0 = new Integer(0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONPath0.deepSet(bigInteger0, "LIKE", 9007199254740991L, "LIKE");
      jSONPath0.init();
      assertEquals("keySet", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      int[] intArray0 = new int[2];
      intArray0[1] = (-1117);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_MultiIndexSegment0, (Object) jSONPath1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = JSONPath.compile("*");
      jSONPath0.isRef();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NOT_IN");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("fastjson.parser.deny");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      batchUpdateException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackrace/7", (Throwable) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/stackrace/7", (Throwable) null);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      JSONPath jSONPath0 = JSONPath.compile("/stackrace/7");
      jSONPath0.isRef();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackrace/7");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("5~i9&");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("sL7j}eOmBQ", true);
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      String string0 = "JSONValidator$UTF16Validator";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("sL7j}eOmBQ", "lo=FX)E64.j8-v#X$)\"", (-838));
      jSONPath0.isRef();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "sL7j}eOmBQ", (Object) "JSONValidator$UTF16Validator", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      JSONPath.paths((Object) jSONPath0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = new JSONPath("max");
      long[] longArray0 = new long[1];
      longArray0[0] = (-6179589609550493385L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("beanInfo", longArray0, false);
      JSONPath jSONPath1 = new JSONPath("beanInfo");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%bRM5jMdiuO|");
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner1.scanUUID('w');
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("XBdC.ti?j=HbDf6");
      jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_IntInSegement0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Hdhcg{D`V&", false);
      JSONPath jSONPath0 = new JSONPath("m\"rYV?m$^B,0-Fz");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("m\"rYV?m$^B,0-Fz", "f=tkB", sQLSyntaxErrorException0);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLDataException sQLDataException0 = new SQLDataException("44VLhj;_A(Z=^%vohe", "44VLhj;_A(Z=^%vohe");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("v", true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Integer.getInteger("fastjson.parser.safeMode");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, jSONPath_Operator0);
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath.remove((Object) aSMDeserializerFactory0, "c");
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath_PropertySegment0.remove(jSONPath1, "com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      jSONPath_JSONPathParser0.readSegement();
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.JSONObject$SecureObjectInputStream");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONObject$SecureObjectInputStream", "com.alibaba.fastjson.JSONObject$SecureObjectInputStream", (-2004802928), sQLInvalidAuthorizationSpecException0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths((Object) sQLTransientConnectionException0, serializeConfig0);
      Double double0 = new Double((-2004802928));
      String string0 = "/stackTrace/8";
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8", serializeConfig0, (ParserConfig) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.alibaba.fastjson.JSONObject$SecureObjectInputStream", "/stackTrace/8", sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      SQLWarning sQLWarning0 = new SQLWarning("16'Jf?AV~m>|TJ|z*", "com.alibaba.fastjson.JSONPath$Context");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$Context", "Ffk(d>o R", intArray0);
      batchUpdateException1.getStackTrace();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("GT", true);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$Context", sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 16'Jf?AV~m>|TJ|z*, segement GT
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      String string0 = ";-k,5m]8~q}0j5gV1";
      long[] longArray0 = new long[8];
      longArray0[0] = (-936L);
      longArray0[1] = 0L;
      longArray0[2] = (-6179589609550493385L);
      longArray0[3] = (-1014497654951707614L);
      longArray0[4] = 1027L;
      longArray0[5] = (-2160L);
      longArray0[6] = (-2578L);
      longArray0[7] = (-719183851066137122L);
      JSONPath.reserveToArray(";-k,5m]8~q}0j5gV1", (String[]) null);
      Float float0 = new Float(0.0F);
      JSONPath.eqNotNull(1027L, (-719183851066137122L));
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath(";-k,5m]8~q}0j5gV1", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ;-k,5m]8~q}0j5gV1
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      long long0 = JSONPath.SIZE;
      JSON.DEFAULT_GENERATE_FEATURE = (-1586);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("w");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("IT:NIF=XUeEEns#p_6", serializeConfig0, parserConfig0);
      jSONPath_SizeSegment0.eval(jSONPath0, serializeConfig0, serializeConfig0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "G\"+Rh*So", 503);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.autoTypeSupport", 503, 0L, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      boolean boolean0 = JSONPath.remove((Object) jSONPath_FilterSegment0, "com.alibaba.fastjson.JSONValidator$UTF16Validator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("getFieldValue error.");
      JSONPath jSONPath1 = new JSONPath("getFieldValue error.");
      JSONPath jSONPath2 = JSONPath.compile("getFieldValue error.");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, jSONPath2, 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Z9b[[L#tzPuE]");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(3885);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "value is null");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-936L);
      longArray0[1] = 0L;
      longArray0[2] = (-6179589609550493385L);
      longArray0[3] = (-1014497654951707614L);
      longArray0[4] = 1027L;
      longArray0[5] = (-2160L);
      longArray0[6] = (-2578L);
      longArray0[7] = (-719183851066137122L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement(";-k,5m]8~q}0j5gV1", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("%bRM5jMdiuO|");
      MockDate mockDate0 = new MockDate(25, 25, 25, 4, 58, (-1263));
      jSONPath_IntInSegement0.apply(jSONPath0, (Object) null, mockDate0, jSONPath0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";-k,5m]8~q}0j5gV1");
      Class<SQLWarning> class0 = SQLWarning.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, jSONPath_IntInSegement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$IntInSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepScan(map0, "16'Jf?AV~m>|TJ|z*", arrayList0);
      Object object0 = new Object();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("16'Jf?AV~m>|TJ|z*", "16'Jf?AV~m>|TJ|z*", 22);
      assertEquals("java.sql.SQLNonTransientConnectionException: 16'Jf?AV~m>|TJ|z*", sQLNonTransientConnectionException0.toString());
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("java.util.List");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("java.util.List");
      long long0 = JSONPath.SIZE;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "Ffk(d>o R", 77, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.JSONPath$1", sQLTransactionRollbackException0);
      JSONPath.reserveToArray("BuXl8clkC'k", (String[]) null);
      Float float0 = new Float(872.78674F);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 122, sQLFeatureNotSupportedException0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLRecoverableException0, "|osoM7(l", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path java.util.List, segement |osoM7(l
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = "16'Jf?AV~m>|TJ|z*";
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath jSONPath1 = JSONPath.compile("y9n)W3fH>0j6r+gQ@J");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath1.deepScan(map0, "y9n)W3fH>0j6r+gQ@J", arrayList0);
      long long0 = (-8070393259084821111L);
      // Undeclared exception!
      jSONPath1.deepSet(map0, "16'Jf?AV~m>|TJ|z*", (-8070393259084821111L), jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      jSONPath0.deepScan(parserConfig0, "fastjson.parser.autoTypeSupport", (List<Object>) null);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny");
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.autoTypeAccept");
      jSONPath2.init();
      assertFalse(jSONPath2.equals((Object)jSONPath1));
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string0 = "size";
      stringArray0[5] = "size";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(stringArray0[3]);
      SerializeConfig serializeConfig0 = new SerializeConfig(4);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("a>BJMKJvjPc/KM}]", serializeConfig0, parserConfig0);
      String string1 = null;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "7|?L=>YnX", 4);
      SQLWarning sQLWarning0 = new SQLWarning("className", "", (-2379), sQLDataException0);
      javaBeanSerializer0.getSize(sQLWarning0);
      jSONPath0.deepScan(class0, "NOT_IN", list0);
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 28;
      intArray0[2] = 532;
      intArray0[3] = 532;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath0.evalSize(parserConfig0);
      // Undeclared exception!
      try { 
        Pattern.compile(stringArray0[1], 532);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("parent");
      jSONPath_JSONPathParser0.readName();
      JSONPath jSONPath0 = new JSONPath("parent");
      SerializeConfig.getGlobalInstance();
      jSONPath_JSONPathParser0.readSegement();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("parent", sQLClientInfoException0);
      Integer integer0 = new Integer(596);
      jSONPath0.size((Object) hashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      jSONPath0.evalSize(hashMap0);
      // Undeclared exception!
      try { 
        JSONPath.read("parent", "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.symbolic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2parent
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("syntax error,except start with { or [,but actually start with ");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("m\"rYV?m$^B,0-Fz");
      jSONPath0.contains((Object) null);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "m\"rYV?m$^B,0-Fz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : m\"rYV?m$^B,0-Fz
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String string0 = "(FZ)V";
      JSONPath.compile("(FZ)V");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(FZ)V");
      jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      boolean boolean0 = false;
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      long[] longArray0 = new long[6];
      longArray0[0] = 253L;
      longArray0[1] = 466L;
      longArray0[2] = 0L;
      longArray0[3] = 7267793227937552092L;
      longArray0[4] = 43L;
      String string1 = "L$]{<c$(mmfnX$u";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\fWB>G1OPFy]Dpq qp";
      stringArray0[0] = "(FZ)V";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<[>Ra$|B{");
      jSONPath_JSONPathParser0.readOp();
      jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. <[>Ra$|B{
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("sL7j}eOmBQ", true);
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath(" mHv))");
      String string0 = "JSONValidator$UTF16Validator";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("sL7j}eOmBQ", "lo=FX)E64.j8-v#X$)\"", (-838));
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath :  mHv))
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      int[] intArray0 = new int[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      intArray0[0] = 7;
      intArray0[1] = 102;
      intArray0[2] = 12;
      intArray0[3] = 1274;
      intArray0[4] = 688;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.contains((Object) jSONPath_MultiIndexSegment0, "'");
      SQLDataException sQLDataException0 = new SQLDataException("", "like", 688);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLDataException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("like", "like", batchUpdateException0);
      JSONPath.size((Object) sQLNonTransientConnectionException0, "isWriteClassName");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\t");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("8ed;yiDE))d'*_Ii#r");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("8ed;yiDE))d'*_Ii#r", "*", (-2004802928), sQLInvalidAuthorizationSpecException0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransientConnectionException0, serializeConfig0);
      JSONPath jSONPath0 = new JSONPath("/cause", serializeConfig0, (ParserConfig) null);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      jSONPath0.getPropertyValues(map0);
      assertEquals(172, map0.size());
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<[>Ra$|B{");
      jSONPath_JSONPathParser0.readOp();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject(propertyNamingStrategy0, stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      jSONPath0.getPath();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      JSONPath.keySet((Object) "p|JBTM;9itT", "u'F4F");
      String string0 = ":*cos4-fCG=yk";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. :*cos4-fCG=yk
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = "safeMode";
      JSONPath jSONPath0 = new JSONPath("safeMode");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("safeMode", "safeMode");
      MockThrowable.getDefaultStackTrace();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONPath0.size((Object) "safeMode");
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("safeMode", (Long[]) null, true);
      JSONPath jSONPath1 = JSONPath.compile("JSONPath$StringOpSegement");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/stackTrace/8";
      JSONPath.reserveToObject(serializeConfig0, stringArray0);
      // Undeclared exception!
      try { 
        jSONPath_IntObjInSegement0.apply(jSONPath1, serializeConfig0, "JSONPath$StringOpSegement", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$IntObjInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "5e(A=BRudD@ex";
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ffk(d>o R", "5e(A=BRudD@ex");
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("5e(A=BRudD@ex", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Class<String> class0 = String.class;
      JSONPath.isInt(class0);
      int[] intArray0 = new int[6];
      intArray0[0] = 116;
      intArray0[1] = 0;
      intArray0[2] = 36;
      intArray0[3] = 384;
      intArray0[4] = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 384, 0, (-2617), 131072, 45);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject(sQLTransientException0, stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(384, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      JSONPath.keySet((Object) sQLInvalidAuthorizationSpecException0, ")G4c");
      String string0 = "Rr5";
      boolean boolean0 = false;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(string0, boolean0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not support jsonpath : ");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";_{(", (String) null, 44);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("!hqg_K6|0?YB9", false);
      DataTruncation dataTruncation0 = new DataTruncation(44, true, false, 63, 63, sQLInvalidAuthorizationSpecException0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1931, 29, 1931);
      jSONPath_PropertySegment0.setValue(jSONPath0, dataTruncation0, jSONPath_RangeSegment0);
      jSONPath_PropertySegment0.remove(jSONPath0, "scanFieldStringArray");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.paths((Object) serializeConfig0, serializeConfig0);
      JSONPath jSONPath1 = JSONPath.compile("(Ljava/lang/reflect/Type;)Ljava/util/Collection;");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(MeyJ-6D72S(WkWID");
      // Undeclared exception!
      try { 
        jSONPath1.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2(MeyJ-6D72S(WkWID
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      int[] intArray0 = new int[8];
      intArray0[0] = 90;
      intArray0[1] = 90;
      intArray0[2] = 90;
      intArray0[3] = 90;
      intArray0[4] = 90;
      intArray0[5] = 90;
      intArray0[6] = 90;
      intArray0[7] = 90;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(43, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath1 = new JSONPath("( dQB*d7", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath1, serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 42;
      intArray0[1] = 538;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("1q");
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, "1q", jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      JSONPath jSONPath0 = new JSONPath("wL0o *=E'4Wb@]");
      MockThrowable mockThrowable0 = new MockThrowable("/stackTrace/12", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("wL0o *=E'4Wb@]", "~,g't3%sHnceB/ 'f", mockThrowable0);
      sQLTransientConnectionException0.getSuppressed();
      JSONPath.contains((Object) sQLTransientConnectionException0, "/stackTrace/12");
      JSONPath jSONPath1 = new JSONPath("vb");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : wL0o *=E'4Wb@]
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Z9b[[L#tzPuE]");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(3885);
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("value is null");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "value is null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      JSONPath.compile("(FZ)V");
      JSONPath.contains((Object) null, "(FZ)V");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(FZ)V");
      jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(FZ)V";
      stringArray0[1] = "\fWB>G1OPFy]Dpq qp";
      stringArray0[2] = "\fWB>G1OPFy]Dpq qp";
      stringArray0[3] = "L$]{<c$(mmfnX$u";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("(FZ)V", "\fWB>G1OPFy]Dpq qp", "token", stringArray0, false);
      // Undeclared exception!
      try { 
        JSONPath.Operator.valueOf("com.alibaba.fastjson.JSONPath$ValueSegment");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.JSONPath.Operator.com.alibaba.fastjson.JSONPath$ValueSegment
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("sL7j}eOmBQ", serializeConfig0, parserConfig0);
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      jSONPath_JSONPathParser0.buildArraySegement("keySet");
      jSONPath_JSONPathParser0.explain();
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("sL7j}eOmBQ", "", "s1C>$)eh+", (String[]) null, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "fastjson.parser.deny";
      stringArray0[1] = "fastjson.parser.deny";
      stringArray0[2] = "keySet";
      stringArray0[3] = "fastjson.parser.deny.internal";
      stringArray0[4] = "fastjson.parser.autoTypeAccept";
      stringArray0[5] = "sL7j}eOmBQ";
      stringArray0[6] = "fastjson.parser.deny.internal";
      stringArray0[7] = "fastjson.parser.deny.internal";
      stringArray0[8] = "L$]{<c$(mmfnX$u";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath_MatchSegement0.apply(jSONPath0, sQLTransientConnectionException0, "sL7j}eOmBQ", jSONPath_MultiPropertySegment0);
      boolean boolean0 = JSONPath.contains((Object) jSONPath_MultiPropertySegment0, "fastjson.parser.deny.internal");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = "]>\\]%V\"Th[)4";
      JSONPath jSONPath0 = JSONPath.compile("]>]%V\"Th[)4");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JSONPath.contains((Object) jSONPath0, "7)laME9&");
      JSONPath jSONPath1 = JSONPath.compile(string0);
      jSONPath1.size((Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = new JSONPath("/BstackTrace/9");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(16);
      Float float0 = new Float((float) 16);
      long long0 = JSONPath.LENGTH;
      boolean boolean0 = JSONPath.eqNotNull(float0, (-1580386065683472715L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Ffk(d>o R");
      jSONPath_JSONPathParser0.readName();
      jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      JSONPath.compile("Ffk");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float((-1893.0F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean1 = JSONPath.eqNotNull(bigInteger0, float0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("! 0XRyWAQ");
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("! 0XRyWAQ", (String[]) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Float float0 = new Float(0.75F);
      JSONPath.eqNotNull(float0, float0);
      JSONPath jSONPath0 = JSONPath.compile("ghgX\"G`:@AW");
      assertEquals("ghgX\"G`:@AW", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<[>Ra$|B{");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONScanner jSONScanner0 = new JSONScanner("])");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      JSONPath jSONPath0 = new JSONPath("])");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ])
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not support jsonpath : ");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";_{(", (String) null, 44);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("!hqg_K6|0?YB9", false);
      jSONPath_PropertySegment0.remove(jSONPath0, "scanFieldStringArray");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.paths((Object) serializeConfig0, serializeConfig0);
      JSONPath jSONPath1 = JSONPath.compile("(Ljava/lang/reflect/Type;)Ljava/util/Collection;");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(MeyJ-6D72S(WkWID");
      // Undeclared exception!
      try { 
        jSONPath1.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2(MeyJ-6D72S(WkWID
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)46;
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("and", (byte)90, (byte)90, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("L>", serializeConfig0, parserConfig0);
      ParserConfig.global = parserConfig0;
      jSONPath0.extract((DefaultJSONParser) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'f, but 't'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      String string0 = "1xzXyI;<B&wb@&H@0mI";
      JSONPath jSONPath0 = new JSONPath("1xzXyI;<B&wb@&H@0mI");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("1xzXyI;<B&wb@&H@0mI", "F", 535);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("safeMode", "safeMode", 535, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) jSONPath_SizeSegment0, (Object) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 1xzXyI;<B&wb@&H@0mI
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      String string0 = "UseISO8601DateFormt";
      JSONPath jSONPath0 = new JSONPath("UseISO8601DateFormt");
      SerializeConfig serializeConfig0 = new SerializeConfig(2093, true);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) serializeConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2616));
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("", false);
      JSONPath jSONPath0 = new JSONPath(";_{(");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";_{(", "scanFieldStringArray", (-2616));
      jSONPath_PropertySegment0.remove(jSONPath0, sQLInvalidAuthorizationSpecException0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.paths((Object) jSONPath_PropertySegment0, serializeConfig0);
      JSONPath jSONPath1 = JSONPath.compile("x,D< MA3qI;KZ19");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment((-2616));
      // Undeclared exception!
      try { 
        jSONPath1.containsValue((Object) jSONPath_SizeSegment0, (Object) jSONPath_ArrayAccessSegment1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : x,D< MA3qI;KZ19
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("dyQ[#*x");
      JSON.DEFAULT_PARSER_FEATURE = 17;
      jSONPath0.removePropertyValue("dyQ[#*x", "dyQ[#*x", false);
      jSONPath0.init();
      assertEquals("dyQ[#*x", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransactionRollbackException0, serializeConfig0);
      assertEquals(87, map0.size());
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackrace/7");
      int[] intArray0 = new int[9];
      intArray0[0] = 1815;
      intArray0[1] = 7;
      intArray0[2] = 440;
      intArray0[3] = 440;
      intArray0[4] = 1042;
      intArray0[5] = 440;
      intArray0[6] = 1042;
      intArray0[7] = 7;
      intArray0[8] = 1042;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath0.set((Object) "/stackrace/7", (Object) "/stackrace/7", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      Object object0 = new Object();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal", "fastjson.parser.safeMode");
      sQLTransactionRollbackException0.getLocalizedMessage();
      sQLTransactionRollbackException0.spliterator();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "fastjson.parser.safeMode", (Object) "com.alibaba.fastjson.JSONPath$MatchSegement");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("16'Jf?AV~m>|TJ|z*", "16'Jf?AV~m>|TJ|z*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      jSONPath0.deepSet(sQLTimeoutException0, "16'Jf?AV~m>|TJ|z*", 9007199254740991L, jSONPath_Operator0);
      jSONPath0.init();
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("in");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("in");
      JSONPath.set((Object) "in", "in", (Object) "in");
      sQLNonTransientConnectionException0.printStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, sQLTransactionRollbackException0, sQLNonTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      JSONPath jSONPath1 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      int int0 = jSONPath0.size((Object) jSONPath1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, parserConfig0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("JSONPath$NotNullSegement");
      boolean boolean0 = jSONPath0.set((Object) "UseISO8601D.teForma}", (Object) "UseISO8601D.teForma}");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean1 = JSONPath.eqNotNull(bigInteger0, bigInteger0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String string0 = "()I";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("()I");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("ZM`/J{", "()I", jSONPath_Operator0);
      String string1 = "com.alibaba.fastjson.JSONValidator$UTF16Validator";
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("()I", 0.0, jSONPath_Operator1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("()I");
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.LIKE;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "com.alibaba.fastjson.JSONValidator$UTF16Validator", (Object) jSONPath_Operator2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", (Object) "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("F", "F", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("F");
      jSONPath_JSONPathParser0.skipWhitespace();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.compile("F");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("sL7j}eOmBQ", true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("sL7j}eOmBQ", serializeConfig0, parserConfig0);
      jSONPath_PropertySegment0.remove(jSONPath0, parserConfig0);
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      jSONPath_JSONPathParser0.buildArraySegement("keySet");
      jSONPath_JSONPathParser0.explain();
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("sL7j}eOmBQ", "", "s1C>$)eh+", (String[]) null, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "fastjson.parser.deny";
      stringArray0[1] = "fastjson.parser.deny";
      stringArray0[2] = "keySet";
      stringArray0[3] = "fastjson.parser.deny.internal";
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, properties0, jSONPath_FilterSegment0);
      stringArray0[4] = "fastjson.parser.autoTypeAccept";
      stringArray0[5] = "sL7j}eOmBQ";
      stringArray0[6] = "fastjson.parser.deny.internal";
      stringArray0[7] = "fastjson.parser.deny.internal";
      stringArray0[8] = "L$]{<c$(mmfnX$u";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean1 = jSONPath_MatchSegement0.apply(jSONPath0, sQLTransientConnectionException0, "sL7j}eOmBQ", jSONPath_MultiPropertySegment0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("dyQ[#*x");
      jSONPath0.init();
      assertEquals("dyQ[#*x", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ghgX\"G`:@AW");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath0, "ghgX\"G`:@AW");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      boolean boolean0 = JSONPath.remove((Object) "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 532);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLFeatureNotSupportedException0, "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      int int0 = 79;
      Integer integer0 = new Integer(79);
      JSONPath.eqNotNull(integer0, integer0);
      JSONPath.Filter jSONPath_Filter0 = null;
      boolean boolean0 = true;
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, (JSONPath.Filter) null, true);
      SerializeConfig serializeConfig0 = new SerializeConfig(79);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.addAccept(".ElzFDwW`D(a}");
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      Double double0 = new Double(0.0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("Ax#JOxJ0<lk7", double0, true);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("=p0VFQ#", "Ax#JOxJ0<lk7", 110);
      Double double1 = new Double(110);
      JSONPath.reserveToArray(double1, (String[]) null);
      Float float0 = new Float((float) 110);
      JSONPath.eqNotNull(float0, float0);
      SerializeConfig serializeConfig1 = new SerializeConfig(110, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      jSONPath0.init();
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      int int0 = 1313;
      SerializeConfig serializeConfig0 = new SerializeConfig(1313, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      JSONPath jSONPath0 = new JSONPath("q?:,V.|=ne9Q1 8QX", serializeConfig0, parserConfig0);
      parserConfig0.clearDeserializers();
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : q?:,V.|=ne9Q1 8QX
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      String string0 = "0QZZJ3cc!*X";
      JSONPath jSONPath0 = JSONPath.compile("0QZZJ3cc!*X");
      String string1 = "step must greater than zero : ";
      // Undeclared exception!
      try { 
        JSONPath.compare("0QZZJ3cc!*X", jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath0, parserConfig0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("()I");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but '('
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("PmmU_");
      jSONPath0.init();
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "$VALUES", parserConfig0, 1, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$1";
      int int0 = (-1436);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableASM;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InitStringFieldAsEmpty;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SafeMode;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSONPath.extract("com.alibaba.fastjson.JSONPath$1", "com.alibaba.fastjson.JSONPath$1", (ParserConfig) null, (-1436), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("s8=e6~EaACkEqUq-");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("s8=e6~EaACkEqUq-", serializeConfig0, (ParserConfig) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath0, bigDecimal0, bigDecimal0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("value is null");
      Class<Calendar> class0 = Calendar.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "value is null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      String string0 = "java.util.List";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("java.util.List");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("java.util.List");
      Long long0 = new Long(0L);
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "i";
      stringArray0[1] = "89k ?";
      stringArray0[2] = "H R'wh0SY;IZ`,F'0.";
      stringArray0[3] = "%w[S$S9B04";
      stringArray0[4] = "'2JQ";
      stringArray0[5] = "]";
      stringArray0[6] = "!w`2CC01]mtd+m/~^-";
      stringArray0[7] = "";
      stringArray0[8] = "writeAfter";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$ValueSegment");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("com.alibaba.fastjson.JSONPath$ValueSegment", (-4270347329889690746L), jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment");
      char[] charArray0 = new char[5];
      charArray0[2] = 'E';
      charArray0[3] = 'C';
      charArray0[4] = '~';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, 1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONPath0.extract(defaultJSONParser0);
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      jSONPath1.init();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. com.alibaba.fastjson.JSONPath$ValueSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, javaBeanDeserializer0, "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = new JSONPath("l");
      JSONPath jSONPath1 = new JSONPath("l");
      int int0 = jSONPath0.size((Object) jSONPath_SizeSegment0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      String string0 = "max";
      JSONPath jSONPath0 = new JSONPath("max");
      String string1 = "Ngn9EaCe`";
      SQLException sQLException0 = new SQLException("Ngn9EaCe`", "Yq25& .");
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      sQLWarning0.fillInStackTrace();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      batchUpdateException0.getStackTrace();
      jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, batchUpdateException0);
      String string2 = "z";
      // Undeclared exception!
      try { 
        JSONPath.extract("max", "z");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      String string0 = "notWriteDefaul(Value";
      JSONPath jSONPath0 = new JSONPath("notWriteDefaul(Value");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("notWriteDefaul(Value", true);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath_PropertySegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : notWriteDefaul(Value
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("notWriteDefaultValue");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("notWriteDefaultValue", true);
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_PropertySegment0);
      assertNull(set0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("notWriteDefaultValue");
      jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("notWriteDefaultValue", string0);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      String string0 = "m\"rYV?m$^B,0-Fz";
      JSONPath jSONPath0 = new JSONPath("m\"rYV?m$^B,0-Fz");
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "m\"rYV?m$^B,0-Fz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : m\"rYV?m$^B,0-Fz
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Class<String> class0 = String.class;
      JSONPath.isInt(class0);
      int[] intArray0 = new int[6];
      intArray0[0] = 116;
      intArray0[1] = 0;
      intArray0[2] = 36;
      intArray0[3] = 384;
      intArray0[4] = 0;
      intArray0[5] = 461;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map1, sQLClientInfoException1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      // Undeclared exception!
      try { 
        jSONPath_RefOpSegement0.apply((JSONPath) null, sQLClientInfoException2, sQLClientInfoException0, sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$RefOpSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("]nS]qzIk-4~e[9 ", (JSONPath.Segment) null, jSONPath_Operator0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      String string0 = "";
      Pattern pattern0 = Pattern.compile("");
      Pattern.matches("", "");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("", pattern0, jSONPath_Operator0);
      JSONPath.compile("");
      int int0 = 0;
      int int1 = (-142);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(int0, int1, int0);
      String string1 = " _Dm=PbsBPO<o2O1";
      JSONPath jSONPath0 = new JSONPath(string1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int2 = 60;
      int int3 = 0;
      int int4 = 944;
      int int5 = 1787;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int2, int3, int4, int1, int5, int3);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, bigInteger0, mockGregorianCalendar0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      JSONPath.compile("value is null");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/sqackTrace/5");
      Pattern pattern0 = Pattern.compile("/sqackTrace/5", 43);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("Mg!M2a\"", pattern0, jSONPath_Operator0);
      jSONPath_JSONPathParser0.explain();
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RegMatchSegement0);
      assertSame(jSONPath_RegMatchSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath0 = new JSONPath(", line ");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(", line ", 65);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      int int0 = (-3068);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3068));
      String string0 = "";
      JSONPath jSONPath0 = new JSONPath("u'F4F");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, "u'F4F", jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Q0&5p_");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2792);
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_ArrayAccessSegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/0");
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1776));
      int int0 = jSONPath0.size((Object) jSONPath_ArrayAccessSegment0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      String string0 = "I|\\8";
      // Undeclared exception!
      try { 
        JSONPath.extract("I|8", "I|8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2I|8
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      String string0 = "";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("", "", jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"k!mh07{STe2^-z");
      jSONPath_JSONPathParser0.getNextChar();
      // Undeclared exception!
      try { 
        JSONPath.Operator.valueOf("Q1Ll$M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.JSONPath.Operator.Q1Ll$M
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      BigInteger bigInteger0 = BigInteger.TEN;
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, bigInteger0, parserConfig0);
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, integer0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      String string0 = "IT:NIF=XUeEEns#p_6";
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("IT:NIF=XUeEEns#p_6", serializeConfig0, parserConfig0);
      jSONPath_SizeSegment0.eval(jSONPath0, serializeConfig0, serializeConfig0);
      String string1 = "G\"+Rh*So";
      // Undeclared exception!
      try { 
        JSONPath.read("G\"+Rh*So", "com.alibaba.fastjson.JSONPObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2G\"+Rh*So
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.compile("dyQ[#*x");
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String string0 = "";
      JSONPath jSONPath0 = JSONPath.compile("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Object[] objectArray0 = new Object[7];
      Object object0 = JSONPath.read(string0, string0);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) sQLTimeoutException0;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) sQLTimeoutException0;
      objectArray0[4] = (Object) string0;
      long long0 = 34L;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(objectArray0[4], string0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      String string0 = "";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("", 1.0E7, jSONPath_Operator0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      String string1 = "";
      JSONPath.compile("");
      ParserConfig parserConfig0 = null;
      int int0 = (-3136);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AutoCloseSource;
      String string2 = "";
      String string3 = "{[H\"CzI':j";
      String string4 = "RbJ'sjh`p";
      SQLDataException sQLDataException0 = new SQLDataException(string4);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string0, string3, sQLDataException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string2, sQLTimeoutException0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.paths((Object) sQLNonTransientConnectionException0, serializeConfig0);
      featureArray0[2] = feature2;
      String string5 = "kotlin.reflect.jvm.internal.KClassImpl";
      JSONPath.eval((Object) jSONPath_KeySetSegment0, string5);
      Feature feature3 = Feature.AutoCloseSource;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSONPath.extract(string1, string0, parserConfig0, int0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("()I");
      jSONPath_JSONPathParser0.next();
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("value is null");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value is null");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("value is null", 0.0, jSONPath_Operator0);
      jSONPath_JSONPathParser0.filterRest(jSONPath_DoubleOpSegement0);
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("value", string0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("!~(S", 886.3301833975172, jSONPath_Operator0);
      String string0 = "";
      SerializeConfig serializeConfig0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = JSONPath.compile("");
      ParserConfig parserConfig1 = null;
      JSONPath jSONPath1 = new JSONPath(parserConfig0.DENY_PROPERTY, serializeConfig0, parserConfig1);
      Object object0 = null;
      String string1 = "([CLjava/lang/Class;)";
      SQLTransientException sQLTransientException0 = new SQLTransientException(string1);
      sQLTransientException0.printStackTrace();
      jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath1, object0, sQLTransientException0);
      JSONPath jSONPath2 = null;
      try {
        jSONPath2 = new JSONPath(string0, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      JSONPath.eval((Object) jSONPath0, "null");
      long long0 = JSONPath.SIZE;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("BuXl8clkC'k", "MnCl.=6f%h2", 77, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("16'Jf?AV~m>|TJ|z*", sQLTransactionRollbackException0);
      Float float0 = new Float((float) 3089);
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Wk%";
      stringArray0[1] = "Wk%";
      stringArray0[2] = "Wk%";
      stringArray0[3] = "Wk%";
      stringArray0[5] = "Wk%";
      JSONPath jSONPath0 = new JSONPath("Wk%");
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.xor(bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, mathContext0);
      JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Wk%");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("?xUa{t");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("kotlin.ranges.CharRange", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      JSONPath jSONPath0 = new JSONPath("kotlin.ranges.CharRange");
      long long0 = JSONPath.SIZE;
      Short short0 = new Short((short)61);
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      long long0 = JSONPath.SIZE;
      JSON.DEFAULT_GENERATE_FEATURE = (-1586);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("BuXl8clkC'k", "MnCl.=6f%h2", 77, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ffk(d>o R", sQLTransactionRollbackException0);
      JSONPath.reserveToArray(sQLFeatureNotSupportedException0, (String[]) null);
      Float float0 = new Float(0.0F);
      JSONPath.eqNotNull(5614464919154503228L, float0);
      jSONPath0.init();
      assertEquals("16'Jf?AV~m>|TJ|z*", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      String string0 = "LIKE";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "LIKE";
      boolean boolean0 = false;
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("LIKE", stringArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("keySet", serializeConfig0, parserConfig0);
      boolean boolean1 = true;
      Integer integer0 = new Integer(0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.eqNotNull(integer0, bigDecimal0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("", true);
      parserConfig0.propertyNamingStrategy = null;
      // Undeclared exception!
      try { 
        jSONPath_StringInSegement0.apply(jSONPath0, jSONPath_PropertySegment0, "LIKE", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal", "fastjson.parser.safeMode");
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.safeMode", (String[]) null, false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.autoTypeAccept", "And", 64, (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath_StringInSegement0.apply(jSONPath0, "And", jSONPath0, "And");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[k[gCVnW;j:+ +bxkL1R");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("[k[gCVnW;j:+ +bxkL1R", (SerializeConfig) null, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(3, jSONPath_SegmentArray0.length);
      
      boolean boolean0 = JSONPath.eqNotNull((-1619728521), (-1619728521));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      String string0 = "7ep5TO";
      JSONPath jSONPath0 = JSONPath.compile("m81[+");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(118);
      jSONPath0.remove((Object) jSONPath_ArrayAccessSegment0);
      String string1 = "parent";
      MockUUID.fromString(string1);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string0);
      jSONPath_JSONPathParser0.readValue();
      String string2 = null;
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = null;
      try {
        jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("! 0XRyWAQ");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      jSONPath0.arrayAdd((Object) "! 0XRyWAQ", (Object[]) null);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = ".(v";
      JSONPath jSONPath0 = new JSONPath(".(v");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1951));
      JSONPath.Filter jSONPath_Filter0 = null;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".(v");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("int");
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("int", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("like");
      Byte byte0 = new Byte((byte)94);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, byte0, "int", jSONPath0);
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("E^#W`8[4br]P6EG_");
      String string0 = jSONPath_JSONPathParser1.readName();
      assertEquals("E", string0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("write javaBean error, fastjson version 1.2.68", longArray0, false);
      // Undeclared exception!
      try { 
        jSONPath_IntInSegement0.apply((JSONPath) null, (Object) null, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$IntInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(6, 2127, 92);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(FZ)V");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(FZ)V");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      long[] longArray0 = new long[6];
      longArray0[0] = 253L;
      longArray0[1] = 466L;
      longArray0[2] = 0L;
      longArray0[3] = 7267793227937552092L;
      longArray0[4] = 43L;
      longArray0[5] = 1228L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("\fWB>G1OPFy]Dpq qp", longArray0, false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1970), 54, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(97, 3222, 52, 97, 0, (-2813));
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_RangeSegment0, mockGregorianCalendar0, jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      String string0 = "9}g (Vz/3F(- REB~\"";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9}g (Vz/3F(- REB~\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 9}g (Vz/3F(- REB~\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("20Vc");
      JSONPath jSONPath0 = new JSONPath("20Vc");
      int int0 = 63;
      BigDecimal bigDecimal0 = new BigDecimal(63);
      String string0 = null;
      JSONPath.NullSegement jSONPath_NullSegement0 = null;
      try {
        jSONPath_NullSegement0 = new JSONPath.NullSegement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")_");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("ZM`/J{", ")_", jSONPath_Operator0);
      // Undeclared exception!
      try { 
        JSONPath.extract(")_", ")_");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2)_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion", jSONPath0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_ValueSegment0, jSONPath0, jSONPath_ValueSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2139;
      intArray0[1] = 2139;
      intArray0[2] = 2139;
      intArray0[3] = 2139;
      intArray0[4] = 1792;
      intArray0[5] = 2139;
      intArray0[6] = 2139;
      SQLTransientException sQLTransientException0 = new SQLTransientException("P}4i'T-+Pl");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("P}4i'T-+Pl", "", sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("parent", "v", 2139, intArray0, sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("parent", batchUpdateException0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("parent", sQLTransactionRollbackException0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("parent", "K> Wp", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7*F(LCWctoBNRQH");
      jSONPath_JSONPathParser0.readValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 7*F(LCWctoBNRQH
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9}g (Vz/3F(- REB~\"");
      jSONPath_JSONPathParser0.readValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 9}g (Vz/3F(- REB~\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("! 0XRyWAQ");
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.readValue();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      jSONPath0.arrayAdd((Object) "! 0XRyWAQ", (Object[]) null);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("! 0XRyWAQ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      String string0 = "kA^`m~h0}sgZ";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("kA^`m~h0}sgZ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONPath.isInt(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("", 0L, 0L, false);
      JSONPath jSONPath0 = new JSONPath("f");
      jSONPath_IntBetweenSegement0.apply(jSONPath0, "", "", (Object) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        jSONPath_IntBetweenSegement0.apply((JSONPath) null, "", sQLIntegrityConstraintViolationException0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$IntBetweenSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{F`/35vADpE1uhBzr");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{F`/35vADpE1uhBzr", 6607618197526598121L, 546L, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_FilterGroup0);
      JSONPath jSONPath0 = new JSONPath("{F`/35vADpE1uhBzr");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_Filter0, jSONPath_Filter0, jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{F`/35vADpE1uhBzr");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{F`/35vADpE1uhBzr", 6607618197526598135L, 6607618197526598135L, false);
      JSONPath jSONPath0 = new JSONPath("{F`/35vADpE1uhBzr");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {F`/35vADpE1uhBzr
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      String string0 = null;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      String string0 = "(Ljava/lang/String;Z)V";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("(Ljava/lang/String;Z)V", (-1067L), jSONPath_Operator0);
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JSONPath.compile(stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = new JSONPath("d0Q[#*x");
      jSONPath0.init();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONValidator$ReaderValidator");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.compile("dyQ[#*x");
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("null", string0);
      
      JSONPath.compile("null");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      JSONPath.compile("null");
      String string1 = jSONPath_JSONPathParser0.readName();
      assertEquals("l", string1);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$ValueSegment");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. com.alibaba.fastjson.JSONPath$ValueSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("S~!qL6gs?mZ30@+Lr");
      Class<Float> class0 = Float.class;
      JSONPath.isInt(class0);
      JSONPath.compile("S~!qL6gs?mZ30@+Lr");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("S~!qL6gs?mZ30@+Lr");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.deny.internal", "SafeMode", 36);
      sQLTransientException0.spliterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}", "lUh*tvt#Wwx", sQLTransientException0);
      parserConfig0.addAccept("craete instance error");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("}", serializeConfig0, parserConfig0);
      jSONPath0.init();
      assertEquals("}", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      String string0 = "v";
      String[] stringArray0 = new String[5];
      stringArray0[1] = null;
      stringArray0[2] = "v";
      stringArray0[3] = "parent";
      String string1 = "aj1";
      stringArray0[4] = "aj1";
      boolean boolean0 = true;
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.JSONPath$MaxSegment", (String) null, "v", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/stackTrace/8";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("nM-o]f/#(/y3')q");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : nM-o]f/#(/y3')q
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("unsupported set operation.");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("unsupported set operation.");
      boolean boolean0 = jSONPath0.removePropertyValue(sQLTransientConnectionException0, "d8FYl~", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "H%aG*)xpam0v";
      stringArray0[1] = "";
      stringArray0[2] = "g";
      String string0 = "";
      stringArray0[3] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.Operator.values();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = null;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = new JSONPath("max");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Ngn9EaCe`");
      jSONPath_JSONPathParser0.readName();
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/9");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JSONPath.paths((Object) sQLSyntaxErrorException0, serializeConfig0);
      Integer integer0 = new Integer(933);
      jSONPath1.size((Object) integer0);
      JSONPath.compile("/stackTrace/9");
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath1.removePropertyValue(jSONPath_WildCardSegment1, "iL'o)Y5^ghY[c", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("dyQ[#*x");
      jSONPath0.getPath();
      Collection<Object> collection0 = jSONPath0.getPropertyValues(jSONPath_SizeSegment0);
      assertFalse(collection0.contains("dyQ[#*x"));
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("T.E kLm+q@");
      UUID uUID0 = MockUUID.fromString("parent");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) serializeConfig0;
      objectArray0[1] = (Object) "T.E kLm+q@";
      objectArray0[2] = (Object) uUID0;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) uUID0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : T.E kLm+q@
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("IN");
      int int0 = jSONPath0.size((Object) "IN");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("/asmFactory/classLoader/parent/classLoader/packages/com.thoughtworks.xstream.core", "`~zBz", "F\"VPTiw$[vGZGm9!", (String[]) null, false);
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/com.thoughtworks.xstream.core");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`~zBz");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "jsonpath can not be null", jSONPath0, sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("e1ey");
      int int0 = jSONPath0.evalSize("e1ey");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nll");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      jSONPath0.remove((Object) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("xV", "T", "xV", (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      String string0 = "Y\\/X-E2a'Q.mhb";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Y/X-E2a'Q.mhb");
      String string1 = "[k[gCVn;j:+ +bxkLJR";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[k[gCVn;j:+ +bxkLJR";
      stringArray0[1] = "Y/X-E2a'Q.mhb";
      stringArray0[2] = "[k[gCVn;j:+ +bxkLJR";
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("unsupported set operation.");
      JSONPath.compile("d8FYl~");
      Object object0 = new Object();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      boolean boolean0 = JSONPath.containsValue(object0, "d8FYl~", (Object) propertyNamingStrategy0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      int int0 = JSONPath.size((Object) jSONPath_MultiIndexSegment0, "nin");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("/stackTrace/7", "/stackTrace/7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny");
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = null;
      try {
        jSONPath_NullSegement0 = new JSONPath.NullSegement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".(9lv");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. .(9lv
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("B");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "B";
      objectArray0[1] = (Object) "B";
      JSONPath jSONPath1 = new JSONPath("Tv[-m(>kt>!%%(J5JN");
      JSONPath jSONPath2 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/ch.qos.logback.core.joran.conditional");
      jSONPath2.init();
      assertFalse(jSONPath2.equals((Object)jSONPath0));
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("M|Fj}T4A7ike MX$RG", "%%");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3M|Fj}T4A7ike MX$RG
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      int int0 = jSONPath0.size((Object) parserConfig0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("value is null");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "value is null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("lang", "lang");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      String string0 = ".(v";
      JSONPath jSONPath0 = new JSONPath(".(v");
      Double double0 = new Double((-1751.6));
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. .(v
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }
}
