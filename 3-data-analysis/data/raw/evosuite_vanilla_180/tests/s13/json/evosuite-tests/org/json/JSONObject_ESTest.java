/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 16:13:27 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Proxy;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.sql.JDBCType;
import java.sql.RowIdLifetime;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.function.BiFunction;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.tools.JavaFileObject;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.isDecimalNotation("du");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)1;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Double double0 = new Double((byte)1);
      JSONObject jSONObject2 = jSONObject0.putOpt("du", double0);
      JSONObject.stringToValue("K.");
      jSONObject2.optBoolean("du", false);
      jSONObject0.optNumber("du");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JSONObject.stringToValue("trim");
      JSONObject.stringToValue("(g]^!;.axlo^;z");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3252);
      JSONTokener jSONTokener0 = new JSONTokener(pipedInputStream0);
      JSONObject jSONObject0 = new JSONObject(3252);
      jSONObject0.optString(".la[84? Xy;x<%", (String) null);
      jSONObject0.length();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      jSONObject1.put("ts_Ps", 101);
      jSONObject1.put("hf^!", 114);
      jSONObject1.optDouble("Zn`P*iR/n", Double.NaN);
      jSONObject0.keys();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "po";
      stringArray0[1] = "javax.";
      stringArray0[2] = "WrT8\"bu'NpEI9";
      stringArray0[3] = "' and instead saw ''";
      stringArray0[4] = "gettoArray";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optNumber("isremove", (Number) null);
      jSONObject1.append("WrT8\"bu'NpEI9", "po");
      try { 
        jSONObject1.getInt("' and instead saw ''");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "org.json.JSONObject$Null";
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONObject$Null", (-1732));
      jSONObject1.get("org.json.JSONObject$Null");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optLong("org.json.JSONObject$Null");
      try { 
        jSONObject1.getBigDecimal("org.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "w=<>B#7fmT <dCskwB";
      boolean boolean0 = false;
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, bigInteger0, (-3526), (-3526));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String string0 = "1..";
      // Undeclared exception!
      try { 
        JSONObject.quote((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("gettryLock");
      jSONObject0.has("gettryLock");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("%=4fY-YP.{mpY");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.optQuery(jSONPointer0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "is";
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)56;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-239), 2674);
      byteArrayInputStream0.reset();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      JSONTokener jSONTokener0 = new JSONTokener(sequenceInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Duplicate key \"");
      JSONObject.stringToValue("p[}pV");
      JSONObject.stringToNumber("-0");
      JSONObject.stringToValue("-0");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.doubleToString(3257.1007373812);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<MockPrintWriter> linkedList0 = new LinkedList<MockPrintWriter>();
      JSONObject.wrap(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("] is not a Boolean.", "] is not a Boolean.");
      jSONObject1.optFloat("3257.1007373812", (-1.0F));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Locale locale0 = Locale.JAPAN;
      JSONObject.stringToValue("org.json.JSONPointerException");
      try { 
        JSONObject.stringToNumber("0M*{B+VY$k):2|m25");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"";
      HashMap<JSONObject, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<JSONObject, MultipleGradientPaint.ColorSpaceType>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(hashMap0);
      Double double0 = new Double(2726.20228003);
      JSONObject jSONObject1 = new JSONObject();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      Boolean boolean0 = new Boolean("\"");
      jSONObject0.put("ke", (Collection<?>) null);
      MockFile mockFile0 = new MockFile(")");
      byteArrayOutputStream0.write((-87));
      Long long0 = new Long(1013L);
      Long.getLong("has", (Long) null);
      Long.getLong("Nesting error.", long0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Object, KeyRep.Type> hashMap0 = new HashMap<Object, KeyRep.Type>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      MockFile mockFile0 = new MockFile("8iH%");
      mockFile0.setReadable(true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vjKcc*@y!JUxi?7]?");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      MockFile mockFile1 = new MockFile(mockFile0, "8iH%");
      mockFile0.renameTo(mockFile1);
      mockFileWriter0.write("org.json.JSONPointerException");
      mockFile0.mkdirs();
      mockFileWriter0.append('z');
      MockFileWriter mockFileWriter1 = new MockFileWriter("vjKcc*@y!JUxi?7]?");
      mockFileWriter1.flush();
      MockFileWriter mockFileWriter2 = new MockFileWriter("8iH%");
      try { 
        JSONObject.stringToNumber("8iH%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8iH%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.append("", hashMap0);
      jSONObject1.names();
      JSONObject.stringToValue("");
      jSONObject0.toMap();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      jSONObject0.optString("B`*'?", "");
      jSONObject0.similar(hashMap0);
      jSONObject1.opt("");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = new BigDecimal((-1341));
      jSONObject1.optNumber("mk&?/0Y>N~g)nN`N", (Number) bigDecimal0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        jSONObject1.getInt("mk&?/0Y>N~g)nN`N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      jSONObject0.optString((String) null);
      jSONObject1.put("", (float) (-104L));
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      Month month0 = Month.OCTOBER;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.WRITE;
      hashMap0.put(month0, processBuilder_Redirect_Type0);
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.put("] could not convert to BigInteger.", (Map<?, ?>) hashMap0);
      jSONObject0.increment("3");
      jSONObject2.optJSONObject("MI6kz:Ea");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("un");
      // Undeclared exception!
      jSONObject1.write((Writer) mockPrintWriter0, (-1882548362), (-1882548362));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected '";
      JSONObject jSONObject1 = jSONObject0.increment("Expected '");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject1.optBigDecimal("ik", (BigDecimal) null);
      try { 
        jSONObject1.getBoolean("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject.quote("9");
      Object object0 = JSONObject.stringToValue("9");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9";
      stringArray0[1] = "9";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optString("false", "");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONObject jSONObject1 = jSONObject0.put("exi", 147.838F);
      jSONObject1.query("/17GD");
      jSONObject0.toString();
      String string0 = "Substring bounds error";
      String string1 = "isA";
      try { 
        jSONObject0.getJSONObject("isA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      try { 
        jSONObject1.getJSONObject("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      WebParam.Mode webParam_Mode0 = WebParam.Mode.OUT;
      Long long0 = new Long(272L);
      hashMap0.put(webParam_Mode0, long0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optFloat("((x@Www4M~i\"w.Mrg", (-2785.9F));
      jSONObject0.optJSONArray("~");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Float float0 = new Float((-3415.2546F));
      JSONObject.wrap(float0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.append("R1", hashMap0);
      JSONArray jSONArray0 = jSONObject1.names();
      JSONObject.stringToValue("R1");
      Map<String, Object> map0 = jSONObject0.toMap();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      JSONObject jSONObject2 = new JSONObject(map0);
      JSONObject jSONObject3 = new JSONObject(jSONArray0);
      HashMap<BigDecimal, CryptoPrimitive> hashMap1 = new HashMap<BigDecimal, CryptoPrimitive>();
      JSONObject jSONObject4 = new JSONObject((Map<?, ?>) hashMap0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.increment("");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONObject.stringToValue("1");
      Map<String, Object> map0 = jSONObject0.toMap();
      JSONObject jSONObject1 = new JSONObject(map0);
      JSONObject jSONObject2 = new JSONObject(jSONArray0);
      HashMap<BigDecimal, CryptoPrimitive> hashMap1 = new HashMap<BigDecimal, CryptoPrimitive>();
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject.doubleToString((-1820.0977426531163));
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-1820.0977426531163";
      stringArray0[1] = "-1820.0977426531163";
      stringArray0[2] = "-1820.0977426531163";
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-773));
      jSONObject0.optBigDecimal("-1820.0977426531163", bigDecimal0);
      jSONObject0.put("-1820.0977426531163", false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "getkeys";
      jSONObject0.put("getkeys", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("getkeys");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list1);
      jSONObject0.optQuery(jSONPointer0);
      jSONObject0.optBigInteger("-F<L8~nl6T`Lx:?gP", bigInteger0);
      try { 
        jSONObject0.getFloat("tr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.append("", hashMap0);
      jSONObject1.names();
      JSONObject.stringToValue("");
      jSONObject0.toMap();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      jSONObject0.optDouble("");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject.stringToValue("");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.wrap(jSONObject0);
      jSONObject0.putOnce("is", object0);
      jSONObject0.optFloat("is", 2207.051F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPAN;
      JSONObject.stringToValue("p[}RV");
      JSONObject.stringToNumber("-0");
      JSONObject.stringToValue("-0");
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.put("-0", (Object) bigInteger0);
      jSONObject0.remove("-0");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.append("", hashMap0);
      Integer integer0 = new Integer(70);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      JSONObject jSONObject1 = new JSONObject(integer0, stringArray0);
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency0 = GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSPARENT;
      jSONObject0.optEnum(class0, "", graphicsDevice_WindowTranslucency0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject jSONObject1 = jSONObject0.put("", (-1906.478F));
      MockFile mockFile0 = new MockFile("$)K2sgGv8p;=hd", "Zn`P*iR/n");
      String string0 = "] could not be converted to BigInteger.";
      MockFile mockFile1 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      mockFile1.mkdir();
      JSONObject.getNames((Object) jSONObject0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Boolean boolean0 = new Boolean((String) null);
      mockFile0.renameTo(mockFile1);
      mockFile0.createNewFile();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.flush();
      JSONObject jSONObject2 = jSONObject1.putOnce("$)K2sgGv8p;=hd", mockFileWriter0);
      JSONObject jSONObject3 = jSONObject1.accumulate("Zn`P*iR/n", jSONObject0);
      jSONObject1.getNumber("");
      JSONObject.isDecimalNotation("");
      JSONObject.stringToValue("");
      JSONObject.valueToString(jSONObject3);
      jSONObject0.query("");
      try { 
        jSONObject2.putOnce("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      byte[] byteArray0 = new byte[3];
      Float float0 = new Float((-3.0));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BiFunction<Object, BufferedInputStream, BufferedInputStream> biFunction0 = (BiFunction<Object, BufferedInputStream, BufferedInputStream>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(bufferedInputStream0).when(biFunction0).apply(any() , any(java.io.BufferedInputStream.class));
      hashMap0.compute(float0, biFunction0);
      byteArray0[1] = (byte)1;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category.values();
      jSONObject0.append("du", locale_Category0);
      jSONObject0.names();
      JSONObject.stringToValue("Unable to preserve stream position");
      jSONObject0.toMap();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      jSONObject0.put("Zn`P*iR/n", true);
      try { 
        jSONObject0.append("Zn`P*iR/n", "a JSON pointer should start with '/' or '#/'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Zn`P*iR/n] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject.doubleToString((-1820.0977426531163));
      int int0 = 296;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.stringToValue("-1820.0977426531163");
      JSONTokener jSONTokener0 = new JSONTokener("o]-.,r.2Ru2kA");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      String string0 = "a JSON pointer should start with '/' or '#/'";
      jSONObject1.put("a JSON pointer should start with '/' or '#/'", (-1732));
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject1.getBigDecimal("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "org.json.JSONObject$Null";
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONObject$Null", (-1732));
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject1.getBigDecimal("org.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOnce("F<SdK*j&sws7/", (Object) null);
      try { 
        jSONObject0.getNumber("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("gz8`WNBmQ:M8}` GiI", stringArray0);
      jSONObject0.keys();
      JSONObject.stringToValue("null");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optBoolean("F jz;]gaMZG|(", false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject.stringToValue("null");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("F jz;]gaMZG|(", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      MockFile mockFile0 = new MockFile("toUpperCase", "irNzXU1w!$-P\"]+i");
      Long long0 = new Long(9L);
      JSONObject.getNames((Object) long0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.json.JSONObject$Null", false);
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("toUpperCase", "org.json.JSONObject$Null");
      jSONObject1.write((Writer) mockFileWriter0, (-1134), 125);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject.getNames((Object) dataInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Short short0 = new Short((short)47);
      JSONObject.wrap(short0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/$n", true);
      jSONObject0.optString("Zn`P*iR/$n");
      jSONObject1.put("java.lang.Boolean@0000000003", (float) (-104L));
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      Month month0 = Month.FEBRUARY;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      hashMap0.put(month0, processBuilder_Redirect_Type0);
      jSONObject1.accumulate("Zn`P*iR/$n", (Object) null);
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.quote("Zn`P*iR/$n");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      jSONObject1.optDouble("java.lang.Boolean@0000000003", (double) (-104L));
      jSONObject1.optJSONObject("java.lang.Boolean@0000000003");
      jSONObject0.optString((String) null, "getlength");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      jSONObject1.optString("Zn`P*iR/n");
      jSONObject1.optFloat("k(vTc-k8:y*s@Qk07?K", (float) (-106L));
      JSONObject jSONObject2 = jSONObject1.put("Error reading value at index position ", (-1906.478F));
      MockFile mockFile0 = new MockFile((String) null, "~");
      JSONObject.getNames((Object) null);
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      Month month0 = Month.FEBRUARY;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      hashMap0.put(month0, processBuilder_Redirect_Type0);
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject2.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject.wrap(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1421.1F);
      JSONObject jSONObject1 = new JSONObject(float0);
      jSONObject1.optInt("u{gp^'ivB8<N{8", 54);
      Double double0 = new Double(1421.1F);
      try { 
        jSONObject0.getJSONObject("xkTdh]Ok");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(96);
      jSONObject0.optFloat("Misplaced array.", 3511.2F);
      jSONObject0.optJSONArray("`~[=O3Y0ijaIx");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      HashMap<PipedOutputStream, Window.Type> hashMap1 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject1 = new JSONObject((Object) "");
      JSONObject jSONObject2 = jSONObject1.append("", "");
      MockFile mockFile0 = new MockFile("", "] is not a valid number.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      int int0 = (-1329);
      jSONObject1.write((Writer) mockPrintWriter0, 1344, (-1329));
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap2 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      MockFileReader mockFileReader0 = new MockFileReader(mockFile0);
      hashMap2.remove((Object) "", (Object) mockPrintWriter0);
      Month month0 = Month.NOVEMBER;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.INHERIT;
      hashMap2.put(month0, processBuilder_Redirect_Type0);
      HashMap<KeyRep.Type, KeyRep.Type> hashMap3 = new HashMap<KeyRep.Type, KeyRep.Type>();
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) hashMap3);
      jSONObject2.put("", (Map<?, ?>) hashMap3);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(fileDescriptor0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      String string0 = "";
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("gz8`WNBmQ:M8}` GiI");
      JSONObject jSONObject0 = new JSONObject(mockPrintStream0);
      Short short0 = new Short((short)1663);
      jSONObject0.append("gz8`WNBmQ:M8}` GiI", short0);
      JSONObject jSONObject1 = new JSONObject(58);
      JSONObject.getNames(jSONObject1);
      String string0 = "getremove";
      MockFile mockFile0 = new MockFile("zd-PATpMB<65u0N(@");
      String string1 = "~{j";
      MockFile mockFile1 = new MockFile(mockFile0, "~{j");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      jSONObject0.put("", (-1906.478F));
      MockFile mockFile0 = new MockFile("~");
      MockFile mockFile1 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      JSONObject.getNames((Object) jSONObject0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      jSONObject0.write((Writer) mockPrintWriter0, 87, 87);
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      Month month0 = Month.FEBRUARY;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      hashMap0.put(month0, processBuilder_Redirect_Type0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a valid number.", (Map<?, ?>) hashMap0);
      jSONObject0.increment("Zn`P*iR/n");
      jSONObject1.isNull("] is not a valid number.");
      jSONObject0.optNumber("] could not be converted to BigInteger.");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "XZ:PF";
      stringArray0[3] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Double double0 = new Double(0.0);
      jSONObject0.optLong("&Hmx ey~GRYpe");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "EKR1x^");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject2 = jSONObject1.append("is", stringArray0[4]);
      JSONObject jSONObject3 = jSONObject2.put("iQDU%o+7@? /;", 0.0F);
      JSONObject.stringToValue("(,)xL3k5ycUe3A%H");
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      JSONObject.numberToString(bigDecimal0);
      JSONObject.stringToValue("JSONObject[");
      jSONObject3.toMap();
      jSONObject3.names();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject.stringToValue("true");
      try { 
        jSONObject0.getInt("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject.stringToValue("true");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.abs();
      JSONObject.numberToString(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale.getISOLanguages();
      Float float0 = new Float((-4064.2869F));
      StringReader stringReader0 = new StringReader("Duplicate key \"");
      JSONObject jSONObject0 = new JSONObject(stringReader0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getUnicodeLocaleKeys();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.stringToValue("MuJ=njM>/)m");
      jSONObject0.optJSONObject("2f+$oPD~!");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject.stringToValue("1iEy2-gH'&rn'");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject.isDecimalNotation("-XJgwuJ7NHmEvH");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale.getISOCountries();
      locale0.getUnicodeLocaleKeys();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.stringToValue("-XJgwuJ7NHmEvH");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JSONObject.getNames((Object) dataOutputStream0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.isDecimalNotation("");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("E:", bigDecimal0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      bufferedOutputStream0.write((int) (byte)1);
      linkedList0.remove((Object) bufferedOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Double double0 = new Double((byte)1);
      JSONObject jSONObject1 = jSONObject0.putOpt("\t", bigDecimal1);
      JSONObject jSONObject2 = jSONObject0.put("e+?b{W:G0E\"++=", (Collection<?>) list0);
      jSONObject2.put("d;nXaE3jz<heIPD", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject.stringToValue("\t");
      jSONObject1.optString("", "\"Z&DVB)b^");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(fileDescriptor0);
      HashMap<CharArrayWriter, Proxy.Type> hashMap0 = new HashMap<CharArrayWriter, Proxy.Type>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optInt("y^i");
      jSONObject1.toString();
      JSONObject.isDecimalNotation("Expected a ',' or '}'");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale.getISOCountries();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gettoLowerCase");
      JSONObject.getNames((Object) mockPrintWriter0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1052.1674134284));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\b";
      stringArray0[1] = "=K,Wb{W[][jEVROe";
      stringArray0[2] = "6;:t*BCSblC-nUr";
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.accumulate("ZJ\"h9!IS:", (Object) null);
      jSONObject0.put("=K,Wb{W[][jEVROe", false);
      jSONObject0.toMap();
      jSONObject0.entrySet();
      try { 
        jSONObject0.getString(";%*Th`QEnUbdS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject1 = jSONObject0.append("Substring bounds error", "Substring bounds error");
      jSONObject0.names();
      JSONObject.stringToValue("");
      jSONObject1.toMap();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      jSONObject1.optBoolean("Zn`P*iR/n");
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      String string1 = null;
      jSONObject0.optString((String) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      JSONObject jSONObject2 = jSONObject1.put("", (-1906.478F));
      jSONObject2.has((String) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JSONObject.getNames((Object) dataOutputStream0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.isDecimalNotation("");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optBigDecimal("E:", bigDecimal0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      linkedList0.remove((Object) bufferedOutputStream0);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Double double0 = new Double((byte)1);
      JSONObject.stringToValue("get");
      jSONObject0.keySet();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1421.1F);
      JSONObject jSONObject1 = new JSONObject(float0);
      Double double0 = new Double(1421.1F);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      Float float1 = new Float(0.0);
      JSONObject.stringToValue("\"\"");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      jSONObject0.increment("\"\"");
      jSONObject0.optFloat("\"\"", 0.0F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale.getISOLanguages();
      Float float0 = new Float((-4062.8372F));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getUnicodeLocaleKeys();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.stringToValue("92QwUs6=8`jk9Yj&;k");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString("Zn`P*iR/n");
      jSONObject0.optFloat("Zn`P*iR/n", (float) (-106L));
      JSONObject jSONObject1 = jSONObject0.put("", (-1906.478F));
      MockFile mockFile0 = new MockFile("~");
      JSONObject.getNames((Object) jSONObject0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      jSONObject0.putOpt("] could not be converted to BigInteger.", "Zn`P*iR/n");
      jSONObject0.write((Writer) mockPrintWriter0, 87, 87);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONObject1.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      jSONObject0.put("", 1763.8967F);
      stringArray0[1] = "].";
      String string0 = "P.'QgN+wZ@W,5_L`";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "'LV2 YGt2O%!2";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      Float float0 = new Float((double) 0L);
      JSONObject jSONObject2 = jSONObject1.append("] could not convert to BigInteger.", "].");
      JSONObject jSONObject3 = jSONObject2.put("P.'QgN+wZ@W,5_L`", 0.0F);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject3.optEnum(class1, "8CBK*'IlHZp3s^gUtq");
      JSONObject.stringToValue("0~d.I2Lo0)vu1xN");
      JSONObject.getNames((Object) "].");
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"", (-2051));
      jSONObject1.optDouble("\"", 2325.1986668137);
      JSONObject.doubleToString(812.7098);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject.quote("H:,c1Wg!!6G3\"");
      JSONObject.stringToValue("~1");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("] is not a number.");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a number.";
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject.wrap(stringReader0);
      linkedList0.remove((Object) "java.io.StringReader@0000000001");
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Double double0 = new Double((-398.4029386));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "] is not a number.");
      LinkedList<CharArrayWriter> linkedList1 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject2 = jSONObject1.put(";l$n+k&f^QI~", (Collection<?>) set0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject2.optBigInteger("] is not a number.", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JSONObject.getNames((Object) dataOutputStream0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.isDecimalNotation("");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("E:", bigDecimal0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      linkedList0.remove((Object) bufferedOutputStream0);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Double double0 = new Double((byte)1);
      jSONObject0.putOpt("\t", bigDecimal1);
      LinkedList<CharArrayWriter> linkedList1 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("e+?b{W:G0E\"++=", (Collection<?>) list0);
      jSONObject1.put("d;nXaE3jz<heIPD", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject1.optBigInteger("e+?b{W:G0E\"++=", bigInteger0);
      try { 
        jSONObject0.getFloat("d;nXaE3jz<heIPD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000024] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.isDecimalNotation("9w");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      jSONObject0.optBigDecimal("0", bigDecimal0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList1.remove((Object) "9w");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0, locale_FilteringMode2);
      Double double0 = new Double(0.0);
      jSONObject0.putOpt("has", locale_FilteringMode0);
      LinkedList<CharArrayWriter> linkedList2 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("has", (Collection<?>) list0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger("5j%S", bigInteger0);
      jSONObject1.optBigDecimal("has", bigDecimal0);
      JSONObject.getNames(jSONObject1);
      JSONObject.stringToValue("5j%S");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JSONObject.getNames((Object) fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.isDecimalNotation("] not a string.");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getUnicodeLocaleKeys();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.stringToValue("] not a string.");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      HashMap<PipedOutputStream, Window.Type> hashMap1 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject1 = new JSONObject((Object) "");
      JSONObject jSONObject2 = jSONObject1.append("", "");
      MockFile mockFile0 = new MockFile("", "] is not a valid number.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      jSONObject0.write((Writer) mockPrintWriter0, (-1329), (-294));
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap2 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      MockFileReader mockFileReader0 = new MockFileReader(mockFile0);
      hashMap2.remove((Object) hashMap1, (Object) mockPrintStream0);
      Month month0 = Month.NOVEMBER;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      hashMap2.put(month0, processBuilder_Redirect_Type0);
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) hashMap1);
      JSONObject jSONObject4 = jSONObject1.put("] is not a valid number.", (Map<?, ?>) hashMap1);
      JSONObject jSONObject5 = jSONObject2.increment("tr");
      jSONObject4.isEmpty();
      jSONObject5.optInt("", (-1329));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(fileDescriptor0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject1 = jSONObject0.put("y^i", true);
      JSONObject jSONObject2 = jSONObject0.increment("Xo6%-+2!luM");
      jSONObject2.isEmpty();
      jSONObject1.optInt("y^i", 3666);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JSONObject.getNames((Object) dataOutputStream0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.isDecimalNotation("");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("E:", bigDecimal0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      linkedList0.remove((Object) bufferedOutputStream0);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Double double0 = new Double((byte)1);
      jSONObject0.putOpt("\t", bigDecimal1);
      LinkedList<CharArrayWriter> linkedList1 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("e+?b{W:G0E\"++=", (Collection<?>) list0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject1.optBigInteger("e+?b{W:G0E\"++=", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      jSONObject0.put("4'7huUz!>&MhjE", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger("4'7huUz!>&MhjE", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject1 = jSONObject0.put("toArray", 0.0F);
      jSONObject1.optInt("toArray", (-178));
      MockFile mockFile0 = new MockFile("x_vD^x(H");
      MockFile mockFile1 = new MockFile(" line ", "x_vD^x(H");
      JSONObject.getNames((Object) "] could not be converted to BigInteger.");
      MockFile mockFile2 = new MockFile(mockFile1, "~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      Boolean boolean0 = new Boolean("q1a-~]KgD[4:6:");
      LinkedList<BufferedReader> linkedList0 = new LinkedList<BufferedReader>();
      jSONObject0.put("x_vD^x(H", (Collection<?>) linkedList0);
      MockFile mockFile3 = new MockFile("FRfE~");
      try { 
        JSONObject.stringToNumber("XtE8ra2|n!bssU~Z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [XtE8ra2|n!bssU~Z] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      jSONObject1.put("Zn`P*iR/n", true);
      jSONObject1.increment("ishashCode");
      jSONObject0.isEmpty();
      jSONObject0.optInt("ishashCode", 1529);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.append("y^i", linkedList0);
      JSONObject.getNames(jSONObject0);
      jSONObject1.accumulate("getremove", "y^i");
      RoundingMode roundingMode0 = RoundingMode.UP;
      JSONObject.stringToValue("0");
      HashMap<LineNumberReader, JavaFileObject.Kind> hashMap0 = new HashMap<LineNumberReader, JavaFileObject.Kind>();
      hashMap0.keySet();
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("javaxU.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ishashCode");
      linkedList0.addLast("hashCode");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.query(jSONPointer0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{6*KR<8F;xklL=x");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(580);
      jSONObject0.toMap();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("javax.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      jSONObject0.entrySet();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      jSONObject0.optLong("32`69c!", (-1904L));
      Boolean boolean0 = new Boolean("javax.");
      JSONObject jSONObject1 = jSONObject0.put("javax.", (Collection<?>) linkedList0);
      String string0 = "XtE8ra2|n!bssU~Z";
      Integer integer0 = new Integer(34);
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "YF$RqD-!Q";
      JSONObject.valueToString(hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "YF$RqD-!Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.append("", hashMap0);
      jSONObject1.names();
      JSONObject.stringToValue("");
      jSONObject0.toMap();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      JSONObject.stringToValue("toS");
      try { 
        jSONObject1.putOnce("", locale_FilteringMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<FilterOutputStream> linkedList0 = new LinkedList<FilterOutputStream>();
      jSONObject0.optLong((String) null, 837L);
      Class<Window.Type> class0 = Window.Type.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      LinkedList<CardTerminals.State> linkedList1 = new LinkedList<CardTerminals.State>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      jSONObject0.names();
      jSONObject1.toJSONArray((JSONArray) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "{V;Wi0";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{V;Wi0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      JSONObject jSONObject2 = jSONObject1.put("", (-1906.478F));
      jSONObject2.optBoolean((String) null, false);
      String string0 = "~";
      MockFile mockFile0 = new MockFile("~");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)56;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)10, 62);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject.doubleToString((-1820.0977426531163));
      RoundingMode roundingMode0 = RoundingMode.UP;
      JSONObject.wrap(roundingMode0);
      Double double0 = new Double((-784.3285));
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YL5PV38/");
      String string0 = "&uK>kYC /";
      Boolean boolean0 = new Boolean("rY;-]_DAM");
      JSONObject jSONObject1 = jSONObject0.put("-1820.0977426531163", (Collection<?>) null);
      MockFile mockFile0 = new MockFile("-1820.0977426531163");
      jSONObject1.toMap();
      try { 
        JSONObject.stringToNumber("ke");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [ke] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.append(".", linkedList0);
      jSONObject1.getJSONArray(".");
      try { 
        jSONObject0.getInt(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "XZ:PF";
      stringArray0[3] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Double double0 = new Double(0.0);
      jSONObject0.optLong("&Hmx ey~GRYpe");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "EKR1x^");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject2 = jSONObject1.append("is", stringArray0[4]);
      jSONObject2.put("iQDU%o+7@? /;", 0.0F);
      String string0 = "(,)xL3k5ycUe3A%H";
      JSONObject.stringToValue("(,)xL3k5ycUe3A%H");
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      JSONObject.numberToString(bigDecimal0);
      try { 
        jSONObject1.getJSONArray("iQDU%o+7@? /;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000022] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "XZ:PF";
      stringArray0[2] = "'LV2 YGt2O%!2";
      stringArray0[3] = "XZ:PF";
      stringArray0[5] = "'LV2 YGt2O%!2";
      stringArray0[5] = "'LV2 YGt2O%!2";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Double double0 = new Double(0.0);
      jSONObject0.optLong("&Hmx ey~GRYpe");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "EKR1x^");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject2 = jSONObject1.append("is", stringArray0[4]);
      jSONObject2.put("iQDU%o+7@? /;", 0.0F);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject1.optEnum(class1, "XZ:PF");
      String string0 = "(,)xL3k5ycUe3A%H";
      JSONObject.stringToValue("(,)xL3k5ycUe3A%H");
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      JSONObject.numberToString(bigDecimal0);
      try { 
        jSONObject1.getJSONArray("iQDU%o+7@? /;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000022] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONObject0.put("toArray", 0.0F);
      MockFile mockFile0 = new MockFile("x_vD^x(H");
      MockFile mockFile1 = new MockFile(" line ", "x_vD^x(H");
      JSONObject.getNames((Object) "] could not be converted to BigInteger.");
      MockFile mockFile2 = new MockFile(mockFile1, "~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(dataOutputStream0);
      jSONObject0.write((Writer) mockPrintWriter1, 87, 87);
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap1 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      Month month0 = Month.FEBRUARY;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("javax.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      jSONObject0.optLong("32`69c!", (-1904L));
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "get");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      jSONArray0.put(580);
      jSONObject0.toMap();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("9");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject.numberToString(number0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      PipedReader pipedReader0 = new PipedReader();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(byteArrayOutputStream0);
      Double double0 = new Double(70);
      JSONObject jSONObject2 = new JSONObject();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.io.ByteArrayOutputStream@0000000003");
      Boolean boolean0 = new Boolean("ke");
      jSONObject0.put("9", (Collection<?>) null);
      MockFile mockFile0 = new MockFile("9");
      jSONObject2.toMap();
      JSONObject.stringToNumber("9");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("^/9=- Ul1");
      try { 
        JSONObject.stringToNumber("null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [null] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "-";
      try { 
        JSONObject.stringToNumber("-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(byteArrayOutputStream0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.entrySet();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string0 = "org.json.JSONObject$Null";
      jSONObject1.optLong("org.json.JSONObject$Null", (long) 70);
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "false");
      LinkedList<MockPrintStream> linkedList0 = new LinkedList<MockPrintStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toMap();
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "false", (-1276), (-3535));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4342);
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      JSONObject.testValidity(pushbackReader0);
      HashMap<Character, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Character, ProcessBuilder.Redirect.Type>();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.READ;
      hashMap0.put((Character) null, processBuilder_Redirect_Type0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.append("y^i", linkedList0);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getInt("y^i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject.doubleToString((-1820.0977426531163));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-1820.0977426531163";
      stringArray0[1] = "islongValue";
      stringArray0[2] = "-1820.0977426531163";
      stringArray0[3] = "-1820.0977426531163";
      stringArray0[4] = "islongValue";
      JSONObject jSONObject0 = new JSONObject("-1820.0977426531163", stringArray0);
      jSONObject0.optBigInteger("] is not a JSONObject.", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale.getISOLanguages();
      Float float0 = new Float((-4049.1F));
      StringReader stringReader0 = new StringReader("Duplicate key \"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      HashMap<Byte, Dialog.ModalExclusionType> hashMap0 = new HashMap<Byte, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("Duplicate key \"", 2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optNumber("gettryLock");
      jSONObject0.has("gettryLock");
      jSONObject0.similar("gettryLock");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ":";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject.stringToValue(":");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('9');
      jSONObject0.similar(":");
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, (-3594), 62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringReader stringReader0 = new StringReader("getnames");
      JSONObject jSONObject1 = new JSONObject((Object) ".");
      jSONObject1.toString();
      jSONObject0.names();
      JSONObject.stringToValue("gettoMap");
      try { 
        jSONObject1.getString("RK5uHNXHe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Object, KeyRep.Type> hashMap0 = new HashMap<Object, KeyRep.Type>();
      MockFile mockFile0 = new MockFile("8iH%");
      MockFile mockFile1 = new MockFile(mockFile0, "8iH%");
      mockFile0.mkdirs();
      MockFileWriter mockFileWriter0 = new MockFileWriter("' and instead saw '", true);
      mockFile0.createNewFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "~0";
      objectArray0[1] = (Object) hashMap0;
      objectArray0[2] = (Object) "' and instead saw '";
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("~0", objectArray0);
      JSONObject jSONObject0 = new JSONObject(objectArray0[0]);
      jSONObject0.write((Writer) mockPrintWriter0, (-3783), 2839);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.testValidity((Object) null);
      jSONObject0.remove(":Go]C");
      JSONObject jSONObject1 = new JSONObject((int) (byte)47);
      try { 
        jSONObject1.getJSONArray("LHg3v$If!W9Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.append("y^i", linkedList0);
      try { 
        jSONObject0.getInt("y^i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.append(".", linkedList0);
      try { 
        jSONObject0.getInt(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.valueToString(jSONObject0);
      PipedReader pipedReader0 = new PipedReader();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(byteArrayOutputStream0);
      Double double0 = new Double(70);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.entrySet();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      jSONObject2.optInt("org.json.JSONObject@0000000001", (-1934759703));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P*iR/n", true);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(2);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "";
      HashMap<PipedOutputStream, Window.Type> hashMap1 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.append("", "");
      jSONObject1.toJSONArray((JSONArray) null);
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject1.getEnum(class0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not an enum of type java.io.StringWriter@0000000011.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      PipedReader pipedReader0 = new PipedReader();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(byteArrayOutputStream0);
      Double double0 = new Double(70);
      JSONObject jSONObject2 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject2.entrySet();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      jSONObject2.optLong("get", (-1904L));
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.io.ByteArrayOutputStream@0000000003");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      jSONObject2.toMap();
      jSONObject0.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "{V;Wi0";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("{V;Wi0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<JTable.PrintMode, Month> hashMap0 = new HashMap<JTable.PrintMode, Month>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        jSONObject0.getBigDecimal("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject.quote("YF$RqD-!Q");
      String string0 = "true";
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) null);
      jSONObject1.optFloat("YF$RqD-!Q");
      try { 
        JSONObject.stringToNumber("Null pointer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [Null pointer] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "XZ:PF";
      stringArray0[2] = "'LV2 YGt2O%!2";
      stringArray0[3] = "XZ:PF";
      stringArray0[4] = "'LV2 YGt2O%!2";
      stringArray0[5] = "'LV2 YGt2O%!2";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Double double0 = new Double(0.0);
      jSONObject1.optBigInteger("&Gp'=uL36TN-D)HlYkk", (BigInteger) null);
      jSONObject0.optLong("&Hmx ey~GRYpe");
      JSONObject.quote("'LV2 YGt2O%!2");
      jSONObject0.isNull("h:");
      jSONObject0.put("Vv|U5>KEHmJ6-rHFanw", (Object) jSONObject1);
      jSONObject1.optFloat(".hC)1a,(:tuio%");
      String string0 = "\\u";
      try { 
        JSONObject.stringToNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [\\u] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "getlength");
      JSONObject jSONObject1 = jSONObject0.append("is", class0);
      JSONObject jSONObject2 = jSONObject1.put("oU", (float) (byte)47);
      jSONObject2.accumulate("", (Object) null);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject1.optEnum(class1, "getlength");
      JSONObject.stringToValue("0");
      jSONObject1.put("oU", false);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject.quote("YF$RqD-!Q");
      String string0 = "true";
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) null);
      jSONObject1.optFloat("YF$RqD-!Q");
      try { 
        JSONObject.stringToNumber("Null pointer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [Null pointer] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Z/`P*iR/n";
      JSONObject jSONObject1 = jSONObject0.put("Z/`P*iR/n", true);
      try { 
        jSONObject1.getJSONObject("Z/`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      jSONObject1.put("", (-1906.478F));
      MockFile mockFile0 = new MockFile("~");
      MockFile mockFile1 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      Month month0 = Month.FEBRUARY;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      hashMap0.put(month0, processBuilder_Redirect_Type0);
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject2.getJSONObject("~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "";
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      // Undeclared exception!
      try { 
        JSONObject.quote("1..", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Character character0 = Character.valueOf('G');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.increment("Ll,G)fJuLq.*v");
      jSONObject0.has("{");
      JSONObject jSONObject1 = new JSONObject(2203);
      try { 
        jSONObject1.getInt("(g_z\"s|-dJj6(RtWCV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.isDecimalNotation("du");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.optBigDecimal("92QwUs6=8`jk9Yj&;k", bigDecimal0);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)1;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Double double0 = new Double((byte)1);
      jSONObject0.putOpt("du", double0);
      LinkedList<CharArrayWriter> linkedList1 = new LinkedList<CharArrayWriter>();
      jSONObject0.put("du", (Collection<?>) list0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "is");
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.append("", hashMap0);
      jSONObject1.names();
      JSONObject.stringToValue("");
      jSONObject0.toMap();
      try { 
        jSONObject0.increment("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000026].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      jSONObject1.put("", (-1906.478F));
      MockFile mockFile0 = new MockFile("~");
      MockFile mockFile1 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      JSONObject.getNames((Object) jSONObject0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      jSONObject0.write((Writer) mockPrintWriter0, 87, 87);
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      Month month0 = Month.FEBRUARY;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      hashMap0.put(month0, processBuilder_Redirect_Type0);
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.put("] is not a valid number.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.increment("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000030].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "j}|1;n:VZ");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "y^i");
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, Float.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = "y^i";
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.append("y^i", linkedList0);
      try { 
        jSONObject0.getLong("y^i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONObject0.optString("siz");
      HashMap<JSONObject, ProcessBuilder.Redirect.Type> hashMap1 = new HashMap<JSONObject, ProcessBuilder.Redirect.Type>();
      hashMap1.entrySet();
      JSONObject jSONObject1 = jSONObject0.put("siz", (Map<?, ?>) hashMap1);
      JSONObject jSONObject2 = jSONObject1.put("", (Map<?, ?>) hashMap0);
      MockFile mockFile0 = new MockFile("", "f,]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      jSONObject2.write((Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      jSONObject1.put("", (-1906.478F));
      MockFile mockFile0 = new MockFile("~", "Zn`P*iR/n");
      MockFile mockFile1 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      JSONObject.getNames((Object) jSONObject0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-120);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger.valueOf((byte)93);
      jSONObject0.optBigInteger("] could not be converted to BigInteger.", bigInteger0);
      jSONObject0.optFloat("null");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('r');
      JSONObject.doubleToString(0.4115353405251193);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "0.4115353405251193");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      JSONObject jSONObject1 = new JSONObject(stringWriter2);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      PipedReader pipedReader0 = new PipedReader(64);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Double double0 = new Double(2844.0905773317027);
      JSONObject.writeValue(pipedWriter0, double0, 64, 64);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<FilterOutputStream> linkedList1 = new LinkedList<FilterOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 3644);
      JSONObject jSONObject1 = new JSONObject(lineNumberReader0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null);
      JSONObject.stringToNumber("-0");
      JSONObject.stringToValue("getClass");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 0;
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.optBoolean("5eeJal8\"_xUVI&");
      JSONObject jSONObject1 = jSONObject0.put("5eeJal8\"_xUVI&", false);
      try { 
        jSONObject1.getDouble("5eeJal8\"_xUVI&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.toString(200);
      try { 
        jSONObject0.getDouble(":z9r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "SdL6";
      try { 
        jSONObject0.getJSONObject("SdL6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONObject0.optLong((String) null);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "mbW}AZu");
      Float float0 = new Float((double) (byte)47);
      JSONObject jSONObject1 = jSONObject0.append("] could n1t convert to BigInteger.", (Object) null);
      jSONObject1.put("getChannel", 0.0);
      jSONObject0.put("] could n1t convert to BigInteger.", (float) (byte)47);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject0.optEnum(class1, "] could n1t convert to BigInteger.");
      JSONObject.stringToValue("] could n1t convert to BigInteger.");
      MockPrintStream mockPrintStream0 = new MockPrintStream("] could n1t convert to BigInteger.");
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("mbW}AZu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.mbW}AZu
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject.doubleToString((-1.0));
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.getJSONObject(267);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[267] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(Double.NaN);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.stringToValue("sI[Pvlw^]1!Fl6y");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 114, (-228));
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('r');
      JSONObject.doubleToString(1.0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "1");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      JSONObject jSONObject1 = new JSONObject(stringWriter2);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToNumber("-0");
      JSONObject.stringToValue("-0");
      String string0 = jSONObject0.optString("-0", "-0");
      assertEquals("-0", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Object, KeyRep.Type> hashMap0 = new HashMap<Object, KeyRep.Type>();
      MockFile mockFile0 = new MockFile("8iH%");
      MockFile mockFile1 = new MockFile(mockFile0, "8iH%");
      mockFile0.mkdirs();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      mockFileWriter0.append('F');
      MockFileWriter mockFileWriter1 = new MockFileWriter("' and instead saw '", true);
      mockFile0.toURL();
      mockFile0.createNewFile();
      MockFile.createTempFile("Unable to increment [", "Unable to increment [");
      mockFileWriter1.write("ge{9)d(81'J7O!P+q");
      try { 
        JSONObject.stringToNumber("' and instead saw '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [' and instead saw '] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      HashMap<PipedOutputStream, Window.Type> hashMap1 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject1.append((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optNumber("get");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 34, 2212);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected '";
      JSONObject jSONObject1 = jSONObject0.increment("Expected '");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject0.remove("Expected '");
      jSONObject1.optBigDecimal("ik", (BigDecimal) null);
      try { 
        jSONObject1.getBoolean("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      MockFile mockFile0 = new MockFile("'LV2 YGt2O%!2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "size");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      mockFileWriter0.write("size");
      mockFile0.mkdirs();
      char char0 = 'z';
      mockFileWriter0.append('z');
      MockFileWriter mockFileWriter1 = new MockFileWriter("Misplaced object.", false);
      mockFileWriter0.flush();
      JSONObject.quote("!\"N", (Writer) mockFileWriter1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2336));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      PipedReader pipedReader0 = new PipedReader();
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject.testValidity(">br u;r3R!d/2~$q8");
      JSONObject.numberToString(bigInteger0);
      jSONObject0.putOnce("java.math.BigInteger@0000000007", fileDescriptor0);
      jSONObject0.toString();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "y^i";
      jSONObject0.append("y^i", "y^i");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("-='B'4%@", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<Object, KeyRep.Type> hashMap0 = new HashMap<Object, KeyRep.Type>();
      MockFile mockFile0 = new MockFile("8iH%");
      MockFile mockFile1 = new MockFile(mockFile0, "8iH%");
      mockFile0.mkdirs();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      mockFileWriter0.append('F');
      MockFileWriter mockFileWriter1 = new MockFileWriter("' and instead saw '", true);
      mockFile0.createNewFile();
      MockFile.createTempFile("Unable to increment [", "Unable to increment [");
      mockFileWriter1.write("ge{9)d(81'J7O!P+q");
      MockFileWriter mockFileWriter2 = new MockFileWriter(mockFile1, true);
      mockFileWriter2.flush();
      JSONObject.quote("8iH%", (Writer) mockFileWriter1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject.testValidity(mockFileWriter0);
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("ge{9)d(81'J7O!P+q", long0);
      Long.getLong("Vlgx3xp`c", long1);
      JSONObject.numberToString(long1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 70);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
      jSONObject0.remove("P8@cg!");
      JSONObject jSONObject2 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject1.entrySet();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      FileDescriptor fileDescriptor2 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor2);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      jSONObject2.toMap();
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Character character0 = Character.valueOf('`');
      JSONObject.testValidity(character0);
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("OZ\"bo#UqvAASr]h*/", true);
      JSONObject.valueToString(mockFileWriter0);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 2663;
      JSONObject jSONObject0 = new JSONObject(2663);
      String string0 = "P.'QgN+wZ@W,5_L`";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      Long long0 = new Long(2663);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(long0, stringArray0);
      String string1 = "get";
      jSONObject1.put("get", 3166L);
      try { 
        jSONObject0.getNumber("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", (-1732));
      Object object0 = JSONObject.NULL;
      jSONObject1.has("Zn`P*iR/n");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("y^i", false);
      jSONObject1.has("y^i");
      char[] charArray0 = new char[3];
      charArray0[1] = 'k';
      jSONObject0.put("y^i", true);
      charArray0[2] = 'q';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, (-4280), (-4280));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"";
      JSONObject jSONObject1 = new JSONObject("org.json.JSONObject$1", stringArray0);
      assertTrue(jSONObject1.isEmpty());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject1.optBigDecimal("ha", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      jSONObject0.names();
      stringArray0[0] = "";
      stringArray0[1] = "].";
      JSONObject jSONObject1 = new JSONObject((Object) "].");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)71;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.optBigDecimal("92QwUs6=8`jk9Yj&;k", bigDecimal0);
      byteArray0[5] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger.valueOf(371L);
      jSONObject0.optBigInteger("islongValue", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(fileDescriptor0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.put("y^i", true);
      JSONObject jSONObject1 = jSONObject0.increment("Xo6%-+2!luM");
      jSONObject1.isEmpty();
      JSONObject.stringToValue("toU");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optBigDecimal("Xo6%-+2!luM", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject1.getEnum(class0, "Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONObject0.optLong((String) null);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "mbW}AZu");
      Float float0 = new Float((double) (byte)47);
      jSONObject0.append("] could not convert to BigInteger.", (Object) null);
      jSONObject0.put("] could not convert to BigInteger.", (float) (byte)47);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject0.optEnum(class1, "] could not convert to BigInteger.");
      JSONObject.stringToValue("] could not convert to BigInteger.");
      MockPrintStream mockPrintStream0 = new MockPrintStream("] could not convert to BigInteger.");
      JSONObject.getNames((Object) mockPrintStream0);
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("mbW}AZu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.mbW}AZu
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<Object, KeyRep.Type> hashMap0 = new HashMap<Object, KeyRep.Type>();
      MockFile mockFile0 = new MockFile("8iH%");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vjKcc*@y!JUxi?7]?");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.write("org.json.JSONPointerException");
      MockFile mockFile1 = new MockFile(mockFile0, "8iH%");
      mockFile1.mkdirs();
      Writer writer0 = mockFileWriter0.append('d');
      MockFileWriter mockFileWriter1 = new MockFileWriter("vjKcc*@y!JUxi?7]?", true);
      File file0 = MockFile.createTempFile("Illegal escape.", "ge{9)d(81'J7O!P+q");
      MockFileWriter mockFileWriter2 = new MockFileWriter(file0, true);
      mockFileWriter2.flush();
      JSONObject.quote("]", writer0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject.testValidity(mockFileWriter2);
      String string0 = "\\u";
      Long long0 = new Long(0L);
      Long long1 = Long.getLong(string0, long0);
      JSONObject.numberToString(long1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(fileDescriptor0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      Float float0 = new Float(3202.365F);
      JSONObject.numberToString(float0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "'LV2 YGt2O%!2";
      jSONObject0.toMap();
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      LinkedList<BufferedInputStream> linkedList0 = new LinkedList<BufferedInputStream>();
      jSONObject1.put("", (Collection<?>) linkedList0);
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject2 = jSONObject1.append("] could not convert to BigInteger.", "].");
      JSONObject jSONObject3 = jSONObject2.put("P.'QgN+wZ@W,5_L`", 0.0F);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject3.optEnum(class1, "'LV2 YGt2O%!2");
      JSONObject.stringToValue("0~d.I2Lo0)vu1xN");
      JSONObject.getNames((Object) "].");
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject.stringToValue("hK{A@pvuUd");
      JSONObject jSONObject0 = new JSONObject();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      JSONObject.wrap(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        jSONObject0.getInt("mk&?/0Y>N~g)nN`N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONObject0;
      objectArray0[1] = (Object) outputStreamWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "P.'QgN+wZ@W,5_L`", objectArray0);
      jSONObject0.write((Writer) printWriter0, 2663, 14);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XZ:PF");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A JSONArray text must start with '['");
      Float float0 = new Float((-1708.38797253261));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.getNames((Object) null);
      try { 
        jSONObject0.getInt("] could not convert to BigInteger.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      PipedReader pipedReader0 = new PipedReader();
      int int0 = 70;
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 70);
      JSONObject.wrap(jSONObject0);
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
      jSONObject0.remove("P8@cg!");
      jSONObject0.optDouble("\"", Double.NaN);
      try { 
        jSONObject0.getJSONArray("2l_THSke_5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.getISOCountries();
      jSONObject0.has("W");
      JSONObject.stringToValue("a1+ieC[b;|AQ<\"d;");
      jSONObject0.put("W", 0.0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"";
      JSONObject.wrap(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P*iR/n", true);
      jSONObject0.toMap();
      JSONObject.stringToValue("(2e'h|Gm`p");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.toMap();
      JSONObject.stringToValue(">br u;r3R!d/2~$q8");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      Object object0 = JSONObject.NULL;
      jSONObject0.optFloat((String) null, (float) (-106L));
      JSONObject jSONObject2 = jSONObject1.put("", (-1906.478F));
      MockFile mockFile0 = new MockFile("~", "Zn`P*iR/n");
      MockFile mockFile1 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      JSONObject.getNames((Object) jSONObject0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "] is not an enum of type ");
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject2.query(jSONPointer0);
      Boolean boolean0 = new Boolean("~");
      LinkedList<GroupLayout.Alignment> linkedList1 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("] could not be converted to BigInteger.", (Collection<?>) linkedList1);
      mockFile0.renameTo(mockFile1);
      jSONObject0.toMap();
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject.quote("y");
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "javax.";
      jSONObject0.optDouble("javax.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONPointer0.toString();
      linkedList0.toArray();
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject0.getEnum(class0, "J--|s~RJB$\bJun.?qK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] is not an enum of type java.io.StringWriter@0000000004.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      charArrayWriter1.write(0);
      charArrayWriter1.append((CharSequence) "");
      JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(set0);
      jSONObject0.remove("?yWf");
      jSONObject0.optDouble("JSON does not allow non-finite numbers.", (double) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optNumber("", (Number) bigInteger0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      jSONObject0.optDouble("}R`zT", 2102.0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong("OC)h");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject1.optEnum(class0, "mbW}AZu");
      Float float0 = new Float(0.0);
      String string0 = "] could not convert to BigInteger.";
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "] could not convert to BigInteger.", (-1695), (-1695));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject.quote("9");
      JSONObject.stringToValue("9");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.io.StringWriter@0000000001", (-3000L));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(bufferedOutputStream0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Character character0 = Character.valueOf('G');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      String string0 = "";
      jSONObject0.has("");
      JSONObject jSONObject2 = jSONObject0.putOpt("Ll,G)fJuLq.*v", jSONObject1);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      jSONObject2.put(string0, (Collection<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      PipedReader pipedReader0 = new PipedReader();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(byteArrayOutputStream0);
      Double double0 = new Double(74);
      JSONObject jSONObject2 = new JSONObject();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.io.ByteArrayOutputStream@0000000003");
      Boolean boolean0 = new Boolean("ke");
      jSONObject0.put("9", (Collection<?>) null);
      MockFile mockFile0 = new MockFile("9");
      byteArrayOutputStream0.write(74);
      Long long0 = new Long(74);
      Long.getLong("names", long0);
      Long long1 = Long.getLong("ke", long0);
      JSONObject.numberToString(long1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HashMap<Object, KeyRep.Type> hashMap0 = new HashMap<Object, KeyRep.Type>();
      MockFile mockFile0 = new MockFile("8iH%");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vjKcc*@y!JUxi?7]?");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.write("org.json.JSONPointerException");
      mockFile0.mkdirs();
      Writer writer0 = mockFileWriter0.append('z');
      MockFileWriter mockFileWriter1 = new MockFileWriter("!\"N", true);
      mockFileWriter1.flush();
      JSONObject.quote("}Yl//VxdcNh!h,m", writer0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject.testValidity(bigInteger0);
      JSONObject.numberToString(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue(" kX=_9_T'w");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "XZ:PF";
      stringArray0[1] = "'LV2 YGt2O%!2";
      stringArray0[2] = "'LV2 YGt2O%!2";
      stringArray0[3] = "XZ:PF";
      stringArray0[4] = "'LV2 YGt2O%!2";
      stringArray0[5] = "'LV2 YGt2O%!2";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      double double0 = new Double(0.0);
      jSONObject0.optLong("&Hmx ey~GRYpe");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "EKR1x^");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject2 = jSONObject1.append("is", "'LV2 YGt2O%!2");
      jSONObject2.put("iQDU%o+7@? /;", 0.0F);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject1.optEnum(class1, "XZ:PF");
      JSONObject.stringToValue("(,)xL3k5ycUe3A%H");
      JSONObject.getNames((Object) "mbW}AZu");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.append("R1", hashMap0);
      JSONArray jSONArray0 = jSONObject1.names();
      JSONObject.stringToValue("R1");
      Map<String, Object> map0 = jSONObject0.toMap();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      JSONObject jSONObject2 = new JSONObject(map0);
      JSONObject jSONObject3 = new JSONObject(jSONArray0);
      jSONObject3.optLong("R1", 1614L);
      jSONObject1.toString(34);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      jSONObject0.names();
      stringArray0[0] = "";
      stringArray0[1] = "].";
      JSONObject jSONObject1 = new JSONObject((Object) "].");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("islongValue", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.stringToValue("");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "y^i");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.stringToValue("y^i");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      LinkedList<CardTerminals.State> linkedList1 = new LinkedList<CardTerminals.State>(linkedList0);
      jSONObject0.names();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.getNames((Object) jSONObject0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)10;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("q", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      JSONObject.stringToValue("0000");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("d1+G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "";
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject.stringToValue("4/");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      String string0 = "'LV2 YGt2O%!2";
      stringArray0[3] = "'LV2 YGt2O%!2";
      String string1 = "XZ:PF";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, 2663);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "to");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      jSONObject0.optInt(" WZ~#5dQg$a$");
      Integer integer0 = new Integer(1863);
      MockFileWriter mockFileWriter0 = new MockFileWriter("]}@K-");
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = " WZ~#5dQg$a$";
      stringArray0[1] = " WZ~#5dQg$a$";
      stringArray0[2] = " WZ~#5dQg$a$";
      stringArray0[3] = " WZ~#5dQg$a$";
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      jSONObject1.opt(" WZ~#5dQg$a$");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(" WZ~#5dQg$a$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Double double0 = new Double(0.0);
      String string0 = "&Hmx ey~GRYpe";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      try { 
        jSONObject1.getInt(stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPAN;
      JSONObject.stringToValue("p[}pV");
      JSONObject.stringToNumber("-0");
      JSONObject.stringToValue("-0");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "-";
      JSONObject.stringToValue("-");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('9');
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, (-3594), 62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "'LV2 YGt2O%!2";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject2 = jSONObject1.append("] could not convert to BigInteger.", "].");
      JSONObject jSONObject3 = jSONObject2.put("P.'QgN+wZ@W,5_L`", 0.0F);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject3.optEnum(class1, "8CBK*'IlHZp3s^gUtq");
      JSONObject.stringToValue("0~d.I2Lo0)vu1xN");
      JSONObject.getNames((Object) "].");
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject.doubleToString((-1820.0977426531163));
      JSONObject.quote("-1820.0977426531163");
      JSONObject.stringToValue("-1820.0977426531163");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("?N2mm8iI>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [?N2mm8iI>] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("?N2miI>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [?N2miI>] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HashMap<CharArrayWriter, Proxy.Type> hashMap0 = new HashMap<CharArrayWriter, Proxy.Type>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "h~PD0B'Kc|@(jNOu!](";
      jSONObject0.optInt("h~PD0B'Kc|@(jNOu!](");
      jSONObject0.toString();
      try { 
        jSONObject1.getNumber("h~PD0B'Kc|@(jNOu!](");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-16));
      String string0 = "Og:";
      long long0 = 0L;
      jSONObject0.optLong(string0, long0);
      Iterator<String> iterator0 = jSONObject0.keys();
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, boolean0);
      String string1 = " line ";
      mockFileWriter0.write(string1);
      mockFileWriter0.flush();
      String string2 = "4\\\"";
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      JSONObject jSONObject1 = jSONObject0.putOnce(string2, pushbackInputStream0);
      String string3 = "try";
      jSONObject1.accumulate(string3, iterator0);
      String string4 = "";
      try { 
        jSONObject1.getNumber(string4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000027] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Pai;Hu5Ia'D5OoW", "to");
      try { 
        jSONObject1.getBigInteger("Pai;Hu5Ia'D5OoW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      try { 
        jSONObject0.getBoolean("(s06d3PW?T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Zn`P*iR/n", (-106L));
      String string0 = null;
      jSONObject0.optString((String) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("", (-1906.478F));
      String string1 = "$)K2sgGv8p;=hd";
      MockFile mockFile0 = new MockFile("$)K2sgGv8p;=hd", "Zn`P*iR/n");
      MockFile mockFile1 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      mockFile1.mkdir();
      JSONObject.getNames((Object) jSONObject0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Boolean boolean0 = new Boolean((String) null);
      mockFile0.renameTo(mockFile1);
      mockFile0.createNewFile();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.flush();
      jSONObject1.putOnce("$)K2sgGv8p;=hd", mockFileWriter0);
      jSONObject1.accumulate("Zn`P*iR/n", jSONObject0);
      try { 
        jSONObject1.getNumber("$)K2sgGv8p;=hd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000717] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M.K8");
      JSONObject.wrap("13gk>VfG-|T@7");
      BigDecimal bigDecimal0 = new BigDecimal((double) (-29));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      assertEquals(0, hashMap0.size());
      
      try { 
        jSONObject0.getBigInteger("ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HashMap<JDBCType, SequenceInputStream> hashMap0 = new HashMap<JDBCType, SequenceInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "z<gJwah1BwH=&fY!s");
      jSONObject0.append("toString", "toString");
      JSONObject jSONObject1 = jSONObject0.put("{}1gr:_59", 0.0F);
      JSONObject jSONObject2 = jSONObject1.accumulate("toString", jSONObject0);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject2.optEnum(class1, "1,WibOixhz$CYK");
      JSONObject.stringToValue("re");
      jSONObject0.put("", false);
      jSONObject0.put("1,WibOixhz$CYK", (Object) "1,WibOixhz$CYK");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("javax.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      jSONObject0.entrySet();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      jSONObject0.optLong("32`69c!", (-1904L));
      Boolean boolean0 = new Boolean("javax.");
      jSONObject0.put("javax.", (Collection<?>) linkedList0);
      MockFile mockFile0 = new MockFile("XtE8ra2|n!bssU~Z");
      jSONObject0.toMap();
      Short short0 = new Short((short)107);
      JSONObject.numberToString(short0);
      try { 
        jSONObject0.putOnce("javax.", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"javax.\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P*iR/n", false);
      JSONObject jSONObject1 = jSONObject0.accumulate("Zn`P*iR/n", (Object) null);
      try { 
        jSONObject1.getBigInteger("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(fileDescriptor0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject1 = jSONObject0.put("y^i", true);
      JSONObject jSONObject2 = jSONObject0.increment("Xo6%-+2!luM");
      jSONObject2.isEmpty();
      jSONObject0.getNumber("Xo6%-+2!luM");
      jSONObject1.optInt("y^i", 3666);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.query(jSONPointer0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Z/`P*iR/n", true);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "%s is not an array index";
      try { 
        jSONObject1.getBigDecimal("%s is not an array index");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("islongValue", bigInteger0);
      assertFalse(fileDescriptor0.valid());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 70);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertFalse(fileDescriptor0.valid());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      JSONObject.testValidity(">br u;r3R!d/2~$q8");
      String string0 = JSONObject.numberToString(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(string0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("gettryLock", fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      
      String string1 = jSONObject0.toString();
      assertFalse(fileDescriptor0.valid());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      File file0 = MockFile.createTempFile("y^i", "y^i");
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/y^i0y^i", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals("y^i0y^i", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      
      JSONObject.indent(mockPrintWriter0, 4);
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/y^i0y^i", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals("y^i0y^i", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.length();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = JSONObject.numberToString(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(string0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("java.math.BigInteger@0000000004", ">br u;r3R!d/2~$q8");
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      
      String string1 = jSONObject1.toString();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotNull(string1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      assertEquals((-656.522F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      JSONObject jSONObject0 = new JSONObject(float0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString((-16));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      long long0 = jSONObject0.optLong("Og:", 0L);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0L, long0);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(iterator0);
      
      MockFile mockFile0 = new MockFile("Og:");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      mockFileWriter0.write(" line ");
      assertTrue(mockFile0.canRead());
      assertEquals("Og:", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("Og:", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(mockFile0.canRead());
      assertEquals("Og:", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("Og:", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(boolean0);
      
      Writer writer0 = mockFileWriter0.append('P');
      assertTrue(mockFile0.canRead());
      assertEquals("Og:", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("Og:", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertNotNull(writer0);
      
      mockFileWriter0.flush();
      assertTrue(mockFile0.canRead());
      assertEquals("Og:", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("Og:", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(7L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertSame(mockFileWriter0, writer0);
      
      Writer writer1 = JSONObject.quote("Og:", (Writer) mockFileWriter0);
      assertTrue(mockFile0.canRead());
      assertEquals("Og:", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("Og:", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(7L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertSame(mockFileWriter0, writer1);
      assertSame(mockFileWriter0, writer0);
      assertSame(writer1, mockFileWriter0);
      assertSame(writer1, writer0);
      assertNotNull(writer1);
      
      try { 
        jSONObject0.getBoolean("cLAj`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 55);
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) pipedReader0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      String string0 = "java.";
      float float0 = jSONObject0.optFloat("java.");
      assertFalse(fileDescriptor0.valid());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Float.NaN, float0, 0.01F);
      assertSame(jSONObject0, jSONObject1);
      
      try { 
        JSONObject.stringToNumber("java.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [java.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashMap<CharArrayWriter, Proxy.Type> hashMap0 = new HashMap<CharArrayWriter, Proxy.Type>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      
      int int0 = jSONObject0.optInt("h~PD0B'Kc|@(jNOu!](");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, int0);
      assertNotSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      
      String string0 = jSONObject0.toString();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      
      boolean boolean1 = jSONObject0.isNull("java.io.StringWriter@0000000003");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(boolean1);
      assertNotSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSONObject0.query("h~PD0B'Kc|@(jNOu!](");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)93;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)47, (byte)110, (byte)93}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string0 = JSONObject.quote("is");
      assertNotNull(string0);
      
      boolean boolean1 = jSONObject0.isNull("h:");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put("h:", true);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      float float0 = jSONObject0.optFloat("] is not a Boolean.");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Float.NaN, float0, 0.01F);
      assertSame(jSONObject0, jSONObject1);
      
      String string1 = "VG[";
      // Undeclared exception!
      try { 
        jSONObject0.query("VG[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = "Zn`P*iR/n";
      try { 
        jSONObject0.get("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = JSONObject.quote("H:,c1Wg!!6G3\"");
      assertNotNull(string0);
      
      Object object0 = JSONObject.stringToValue("java.io.StringWriter@0000000001");
      assertNotNull(object0);
      assertTrue(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = " WZ~#5dQg$a$";
      int int0 = jSONObject0.optInt(" WZ~#5dQg$a$");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, int0);
      
      float float0 = new Integer(1863);
      assertEquals(1863, float0, 0.01F);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("]}@K-");
      assertNotNull(mockFileWriter0);
      
      String string1 = "33p? ?;3a2Ih";
      try { 
        jSONObject0.getFloat("33p? ?;3a2Ih");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      HashMap<ByteArrayOutputStream, KeyRep.Type> hashMap0 = new HashMap<ByteArrayOutputStream, KeyRep.Type>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      StringReader stringReader0 = new StringReader(" mg$MgfJ");
      assertNotNull(stringReader0);
      
      String[] stringArray0 = JSONObject.getNames((Object) stringReader0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject();
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      
      boolean boolean0 = JSONObject.isDecimalNotation("s*ff/@nPe%Sy]");
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("s*ff/@nPe%Sy]"));
      assertNotNull(set0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Object object0 = JSONObject.stringToValue("/#;pssxA!6tZR ");
      assertEquals("/#;pssxA!6tZR ", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9");
      assertEquals(9, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("(s06d3PW?T");
      assertFalse(boolean0);
      
      String string0 = "#Wcwi74994v>yukh";
      try { 
        jSONObject0.getDouble("#Wcwi74994v>yukh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "ms\"-.";
      Object object0 = JSONObject.wrap("ms\"-.");
      assertEquals("ms\"-.", object0);
      assertNotNull(object0);
      assertTrue(object0.equals((Object)string0));
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      charArrayWriter0.close();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('~');
      assertEquals("~", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("~", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      
      CharArrayWriter charArrayWriter2 = (CharArrayWriter)JSONObject.quote("?yWf", (Writer) charArrayWriter1);
      assertEquals("~\"?yWf\"", charArrayWriter0.toString());
      assertEquals(7, charArrayWriter0.size());
      assertEquals("~\"?yWf\"", charArrayWriter1.toString());
      assertEquals(7, charArrayWriter1.size());
      assertEquals(7, charArrayWriter2.size());
      assertEquals("~\"?yWf\"", charArrayWriter2.toString());
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertNotNull(charArrayWriter2);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("[v1qvMi.T![C&{");
      assertEquals("[v1qvMi.T![C&{", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<Integer, ByteArrayOutputStream> hashMap0 = new HashMap<Integer, ByteArrayOutputStream>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
      
      boolean boolean0 = jSONObject0.has("");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("d1+G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "'LV2 YGt2O%!2";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(5, stringArray0.length);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      
      double double0 = jSONObject1.optDouble("", 0.0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(5, stringArray0.length);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      
      long long0 = jSONObject1.optLong("mbW}AZu");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(0L, long0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(5, stringArray0.length);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      
      Float float0 = new Float((-1708.38797253261));
      assertEquals((-1708.388F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      JSONObject jSONObject2 = jSONObject1.append("] could not convert to BigInteger.", "].");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(5, stringArray0.length);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      
      JSONObject jSONObject3 = jSONObject2.put("P.'QgN+wZ@W,5_L`", 0.0F);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertEquals(5, stringArray0.length);
      assertNotNull(jSONObject3);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject3.optEnum(class1, "8CBK*'IlHZp3s^gUtq");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertEquals(5, stringArray0.length);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      
      Object object0 = JSONObject.stringToValue("sFY``LQX^u<`H?");
      assertEquals("sFY``LQX^u<`H?", object0);
      assertNotNull(object0);
      
      String[] stringArray1 = JSONObject.getNames((Object) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertNull(jSONObject0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      Object object0 = JSONObject.stringToValue("0000");
      assertEquals("0000", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.increment("");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)JSONObject.writeValue(charArrayWriter0, jSONObject1, 1980, 1980);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(65, charArrayWriter0.size());
      assertEquals(65, charArrayWriter1.size());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      
      CharArrayWriter charArrayWriter2 = new CharArrayWriter(1980);
      assertEquals(0, charArrayWriter2.size());
      assertEquals("", charArrayWriter2.toString());
      assertNotNull(charArrayWriter2);
      assertFalse(charArrayWriter2.equals((Object)charArrayWriter0));
      assertFalse(charArrayWriter2.equals((Object)charArrayWriter1));
      
      long long0 = jSONObject0.optLong("gettoMap");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.increment("");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      LinkedList<FilterOutputStream> linkedList0 = new LinkedList<FilterOutputStream>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = jSONObject0.has("] is not an int.");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("`o-", 1545);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      jSONObject0.has("");
      jSONObject0.putOpt("Ll,G)fJuLq.*v", jSONObject1);
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      jSONObject0.opt((String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      String string0 = null;
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Locale locale0 = Locale.ITALIAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "GlY[VAEU+GCw<Hi";
      stringArray0[1] = "K";
      stringArray0[2] = "";
      stringArray0[3] = "Unable to increment [";
      stringArray0[4] = "] could not convert to BigInteger.";
      JSONObject jSONObject0 = new JSONObject(mockFileReader0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      long long0 = jSONObject1.optLong((String) null, (-86L));
      assertEquals((-86L), long0);
      
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = jSONObject0.optString("] could not convert to BigInteger.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString((String) null);
      jSONObject0.isNull(">");
      jSONObject0.entrySet();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.testValidity(byteArrayOutputStream0);
      jSONObject0.optDouble("JSON does not allow non-finite numbers.", 160.0);
      JSONObject.quote("");
      jSONObject0.putOpt("", (Object) null);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      HashMap<RoundingMode, Month> hashMap0 = new HashMap<RoundingMode, Month>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("mCZ", hashMap0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      jSONObject0.put("FL:m&-OZ'C", (Collection<?>) linkedList0);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Character character0 = Character.valueOf('g');
      JSONObject jSONObject0 = new JSONObject(character0);
      jSONObject0.putOpt("", "");
      String string0 = "";
      int int0 = (-1843);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1843
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.entrySet();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.testValidity(byteArrayOutputStream0);
      try { 
        jSONObject0.getJSONArray("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HashMap<CharArrayWriter, Proxy.Type> hashMap0 = new HashMap<CharArrayWriter, Proxy.Type>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optInt("h~PD0B'Kc|@(jNOu!](");
      jSONObject0.toString();
      boolean boolean0 = jSONObject0.isNull("java.io.StringWriter@0000000003");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("is", false);
      jSONObject0.remove("`t^9)4cCRE");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Z/`P*iR/n");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(set0);
      jSONObject0.remove("?yWf");
      jSONObject0.optDouble("JSON does not allow non-finite numbers.", (double) 0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 70);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
      jSONObject0.remove("P8@cg!");
      jSONObject1.toString(70);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.writeValue(charArrayWriter0, charArrayWriter0, 0, 0);
      String string0 = "\\f";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\f", "\f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      String string0 = " WZ~#5dQg$a$";
      jSONObject0.optInt(" WZ~#5dQg$a$");
      String string1 = "isfloatValue";
      try { 
        JSONObject.stringToNumber("isfloatValue");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [isfloatValue] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      String string0 = " WZ~#5dQg$a$";
      jSONObject0.optInt(" WZ~#5dQg$a$");
      String string1 = "]}@K-";
      jSONObject0.optFloat("]}@K-", (-2107.9443F));
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("na");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = true;
      String string0 = "mL5^{BWYK,vLFde";
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("mL5^{BWYK,vLFde");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(hashMap0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONObject[";
      stringArray0[1] = "Unable to write JSONArray value at index: ";
      stringArray0[2] = "}o?Y]hUK'Iw6heT*Yk&";
      stringArray0[3] = "zX\"Pj1]lY>><I2}";
      stringArray0[4] = "org.json.JSONTokener";
      stringArray0[5] = "";
      stringArray0[6] = "^\"}GwIt#bw";
      stringArray0[7] = "";
      stringArray0[8] = "%s is not an array index";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject1.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("((x@Www4M~i\"w.Mrg");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Locale.getISOLanguages();
      Float float0 = new Float((-4064.2869F));
      StringReader stringReader0 = new StringReader("Duplicate key \"");
      JSONObject jSONObject0 = new JSONObject(stringReader0);
      JSONObject jSONObject1 = jSONObject0.put("Duplicate key \"", false);
      jSONObject1.toString(277);
      jSONObject0.optFloat("Duplicate key \"", 0.0F);
      try { 
        jSONObject1.getJSONObject("java.io.StringWriter@0000000008");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("((x@Www4M~i\"w.Mrg");
      assertNull(number0);
      
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = jSONObject1.optNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", true);
      jSONObject1.optLong("Zn`P*iR/n", (-18L));
      assertFalse(jSONObject0.isEmpty());
      
      Object object0 = JSONObject.stringToValue("Zn`P*iR/n");
      assertEquals("Zn`P*iR/n", object0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      String string0 = "";
      jSONObject0.has("");
      jSONObject0.putOpt("Ll,G)fJuLq.*v", jSONObject1);
      JSONObject.stringToValue(string0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String[] stringArray0 = JSONObject.getNames((Object) byteArrayOutputStream0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(96);
      jSONObject0.optFloat("S~1sb_8!gt", (float) 96);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Null pointer");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      boolean boolean0 = false;
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      jSONObject1.put("", (-1906.478F));
      String string1 = "=$)K25sgGv8p;u=d";
      MockFile mockFile0 = new MockFile("~", "Zn`P*iR/n");
      MockFile mockFile1 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      JSONObject.getNames((Object) jSONObject0);
      mockFile0.mkdirs();
      mockFile0.renameTo(mockFile1);
      mockFile0.createNewFile();
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter(mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = "toMap";
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("toMap", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name toMap, locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = "Unable to write JSONObject value for key: ";
      Locale locale0 = Locale.PRC;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Unable to write JSONObject value for key: ", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name Unable to write JSONObject value for key: , locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.names();
      JSONObject.stringToValue("");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Float float0 = new Float(1829.16);
      JSONObject.wrap(float0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.optBigDecimal("isisNaN", bigDecimal0);
      jSONObject0.optNumber("((x@Www4M~i\"w.Mrg");
      boolean boolean0 = jSONObject0.has("((x@Www4M~i\"w.Mrg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.wrap(jSONArray0);
      JSONObject jSONObject2 = jSONObject0.putOnce("Zn`P*iR/n", (Object) null);
      jSONObject1.optFloat("Zn`P*iR/n", 0.0F);
      jSONObject2.optFloat("Zn`P*iR/n", 0.0F);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 2506);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = "ms\"-.";
      JSONObject.wrap("ms\"-.");
      String string1 = "[9u&=Ek";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("[9u&=Ek");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("javax.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("<P:Pb!6j>A%Iz");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      HashMap<StandardLocation, Locale.FilteringMode> hashMap0 = new HashMap<StandardLocation, Locale.FilteringMode>();
      jSONObject0.put("z#$$o$9%^RW)536", (Map<?, ?>) hashMap0);
      jSONObject0.optJSONObject("Z/`P*iR/n");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      try { 
        jSONObject0.getFloat("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StringReader stringReader0 = new StringReader("] is not a number.");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a number.";
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter>();
      jSONObject0.put("] is not a number.", (Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("U.78Hj|D(O5W@", (-2587.257));
      assertEquals(1, jSONObject0.length());
      assertEquals((-2587.257), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JSONObject.stringToValue("trim");
      HashMap<RowIdLifetime, Dialog.ModalExclusionType> hashMap0 = new HashMap<RowIdLifetime, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      hashMap0.keySet();
      jSONObject0.put("null", 1.0F);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(96);
      jSONObject0.putOnce("-0", (Object) null);
      jSONObject0.optFloat((String) null, 3511.2F);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0, 1980, 2281);
      assertEquals(65, charArrayWriter0.size());
      
      long long0 = jSONObject0.optLong("gettoMap");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Zn`P*iR/n";
      stringArray0[1] = "Zn`P*iR/n";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = JSONObject.stringToValue("Zn`P*iR/n");
      assertEquals("Zn`P*iR/n", object0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P*iR/n", true);
      long long0 = jSONObject0.optLong("0|Fwm,", (-18L));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-18L), long0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject.numberToString(bigInteger0);
      JSONObject jSONObject1 = jSONObject0.putOnce("5PSS'J[po2FZR/a", "java.math.BigInteger@0000000002");
      jSONObject1.toString();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      double double0 = jSONObject0.optDouble("getpoll");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("org.json.JSONPointer", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject0.getEnum(class0, "Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "'LV2 YGt2O%!2";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      Float float0 = new Float((-1708.38797253261));
      jSONObject1.optNumber("'LV2 YGt2O%!2", (Number) float0);
      jSONObject1.put("].", 3908.5278F);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("P  R3L^(H$:|");
      try { 
        jSONObject0.getBoolean("P  R3L^(H$:|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("7)7hEzb2}a2=*T3c9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "13gk>Vf\\G-|T@7";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("13gk>VfG-|T@7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4884);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Character character0 = Character.valueOf('`');
      JSONObject.testValidity(character0);
      HashMap<Month, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Month, ProcessBuilder.Redirect.Type>();
      Month month0 = Month.MAY;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.APPEND;
      hashMap0.put(month0, processBuilder_Redirect_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("islongValue", (Map<?, ?>) hashMap0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 70);
      JSONObject jSONObject1 = new JSONObject(lineNumberReader0);
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
      jSONObject0.remove("P8@cg!");
      jSONObject1.toString(70);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      JSONObject jSONObject1 = new JSONObject(locale_FilteringMode0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<FilterOutputStream> linkedList0 = new LinkedList<FilterOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      
      Float float0 = new Float(0.0);
      JSONObject.stringToValue("\"\"");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      jSONObject0.increment("\"\"");
      double double0 = jSONObject0.getDouble("\"\"");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = JSONObject.wrap(fileDescriptor0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      String string0 = "?q-BA";
      jSONObject0.put("?q-BA", true);
      try { 
        jSONObject0.getDouble("-%lzVS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("?q-BA", false);
      try { 
        jSONObject0.getDouble("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Locale.getISOLanguages();
      JSONObject jSONObject0 = new JSONObject((Object) "Zn`P*iR/n");
      jSONObject0.put("Zn`P*iR/n", false);
      try { 
        jSONObject0.getFloat("getDeclaringClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000023] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Locale.getISOLanguages();
      Float float0 = new Float((-4064.2869F));
      StringReader stringReader0 = new StringReader("Duplicate key \"");
      JSONObject jSONObject0 = new JSONObject(stringReader0);
      jSONObject0.put("Duplicate key \"", false);
      try { 
        jSONObject0.getDouble("Duplicate key \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = "";
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      WebParam.Mode webParam_Mode0 = WebParam.Mode.OUT;
      hashMap0.put(webParam_Mode0, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optNumber("((x@Www4M~i\"w.Mrg");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P*iR/n", true);
      String string0 = "a JSON pointer should start with '/' or '#/'";
      try { 
        jSONObject0.append("Zn`P*iR/n", "a JSON pointer should start with '/' or '#/'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Zn`P*iR/n] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = JSONObject.stringToValue("hashCode");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = "AV";
      jSONObject0.append("AV", hashMap0);
      try { 
        jSONObject0.getLong("AV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P*iR/n", true);
      try { 
        jSONObject0.getFloat("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject.numberToString(bigInteger0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("java.math.BigInteger@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("y^i", "y^i");
      try { 
        jSONObject0.getLong("y^i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P*iR/n", true);
      assertFalse(jSONObject0.isEmpty());
      
      Object object0 = JSONObject.stringToValue("Zn`P*iR/n");
      assertEquals("Zn`P*iR/n", object0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Zn`P*iR/n", (Object) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      jSONObject1.toMap();
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.keys();
      try { 
        jSONObject0.get("F jz;]gaMZG|(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 70);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.optBigDecimal("TNYxxm8k", bigDecimal0);
      HashMap<PipedOutputStream, Window.Type> hashMap0 = new HashMap<PipedOutputStream, Window.Type>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(hashMap0, stringArray0);
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      String string0 = null;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an enum of type java.io.StringWriter@0000000010.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = JSONObject.quote("");
      Object object0 = JSONObject.stringToValue("");
      assertFalse(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Z/`P*iR/n");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = JSONObject.quote("b");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = "9";
      JSONObject.quote("9");
      JSONObject.stringToValue("9");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-645));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -645
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      try { 
        JSONObject.stringToNumber("org.json.JSONException");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [org.json.JSONException] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = (-1929);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1929));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1929
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
