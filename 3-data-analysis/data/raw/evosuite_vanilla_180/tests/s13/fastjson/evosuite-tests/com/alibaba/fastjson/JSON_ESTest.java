/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 16:28:52 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.GenericArrayTypeImpl;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamClass;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.sql.Date;
import java.time.ZoneId;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSON_ESTest extends JSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      Integer integer0 = new Integer(11);
      JSONObject jSONObject1 = jSONObject0.fluentPut((String) null, integer0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "1.2.68";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter3;
      SimplePropertyPreFilter simplePropertyPreFilter4 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter4;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[5] = (SerializeFilter) pascalNameFilter0;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[6] = (SerializeFilter) pascalNameFilter1;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[3] = serializerFeature3;
      String string0 = JSON.toJSONString((Object) jSONObject1, serializeConfig0, serializeFilterArray0, (String) null, (-22), serializerFeatureArray0);
      assertEquals("{@type:'com.alibaba.fastjson.JSONObject'\n}", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.toJSONString();
      int int0 = 15;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        JSON.parse("[]", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parse((String) null, parserConfig0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(744, false);
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(linkedHashMap0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      String string0 = JSON.toJSONString((Object) jSONObject1, (-3634), serializerFeatureArray0);
      assertEquals("{@type:'com.alibaba.fastjson.JSONObject'}", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig();
      Charset charset0 = Charset.defaultCharset();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) parameterizedTypeImpl0, parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.MapSortField;
      serializerFeatureArray0[5] = serializerFeature5;
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, charset0, (Object) propertyNamingStrategy0, serializerFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vS=vd;igD0. IpRm\"");
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      TreeMap<JSONValidator.Type, GenericArrayTypeImpl> treeMap0 = new TreeMap<JSONValidator.Type, GenericArrayTypeImpl>();
      LinkedHashSet<JSON> linkedHashSet1 = new LinkedHashSet<JSON>();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportAutoType;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.NonStringKeyAsString;
      featureArray0[3] = feature3;
      AbstractMap.SimpleImmutableEntry<Object, JSONObject> abstractMap_SimpleImmutableEntry0 = JSON.parseObject("", (Type) null, featureArray0);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.toJSONString();
      ParserConfig.getGlobalInstance();
      boolean boolean0 = JSON.isValid("[]");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1.2.68";
      stringArray0[1] = "fastjson.parser.autoTypeSupport";
      stringArray0[2] = "fastjson.parser.autoTypeSupport";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature4;
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(simplePropertyPreFilter0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.serializer.SimplePropertyPreFilter, write javaBean error, fastjson version 1.2.68, class java.lang.String, fieldName : 0, [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Type[] typeArray0 = new Type[5];
      typeArray0[1] = (Type) class0;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSON.toJSON((Object) parameterizedTypeImpl0, parserConfig0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeConfig.getGlobalInstance();
      StringWriter stringWriter0 = new StringWriter(14);
      JSON.toJSON((Object) stringWriter0, serializeConfig0);
      int int0 = 707;
      JSONArray jSONArray0 = new JSONArray(707);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("@type", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.SortField;
      serializerFeatureArray0[5] = serializerFeature5;
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(jSONArray0, (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = JSON.isValid("com.alibaba.fastjson.util.ServiceLoader");
      boolean boolean1 = JSON.isValid("7HWh<ExTd");
      assertTrue(boolean1 == boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1198);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[5] = serializerFeature5;
      int int0 = JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Object) pascalNameFilter0, (-24), serializerFeatureArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      boolean boolean0 = JSON.isValidArray("[long");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject((String) null);
      assertNull(jSONObject0);
      
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = "1.2.68";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowArbitraryCommas;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowArbitraryCommas;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableASM;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowSingleQuotes;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.InitStringFieldAsEmpty;
      featureArray0[6] = feature6;
      Integer integer0 = JSON.parseObject((InputStream) sequenceInputStream0, (Charset) null, (Type) null, featureArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.isValid("");
      Class<JSONPObject> class0 = JSONPObject.class;
      JSON.parseObject((String) null, class0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      bufferedInputStream0.mark((-2490));
      String string0 = JSON.toJSONString((Object) bufferedInputStream0, serializerFeatureArray0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature1;
      JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray1 = new SerializerFeature[5];
      serializerFeatureArray1[0] = serializerFeature0;
      serializerFeatureArray1[1] = serializerFeature0;
      serializerFeatureArray1[2] = serializerFeature1;
      serializerFeatureArray1[3] = serializerFeature0;
      serializerFeatureArray1[4] = serializerFeature0;
      JSON.toJSONString((Object) "\"NotWriteDefaultValue\"", serializeConfig0, (SerializeFilter[]) null, "1.2.68", 3089, serializerFeatureArray1);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-870));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      Type type0 = null;
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowISO8601DateFormat;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableCircularReferenceDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowISO8601DateFormat;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowSingleQuotes;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableCircularReferenceDetect;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.SafeMode;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.AllowComment;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.AllowUnQuotedFieldNames;
      featureArray0[8] = feature8;
      JSON.parseObject("", (Type) null, 31, featureArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(18);
      JSON.isValid((String) null);
      // Undeclared exception!
      try { 
        JSON.parseObject("e#pD/G*Ux}fpBhy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3e#pD/G*Ux}fpBhy
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig.getGlobalInstance();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 13);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      Feature feature0 = Feature.NonStringKeyAsString;
      Feature[] featureArray0 = new Feature[7];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) bufferedInputStream0, (Charset) null, (Type) class0, (ParserConfig) null, (ParseProcess) null, 13, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      JSON.isValidObject("");
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class0);
      JSON.addMixInAnnotations(class1, (Type) null);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) null, 31, serializerFeatureArray0);
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      JSON.addMixInAnnotations((Type) null, (Type) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JSON.getMixInAnnotations(class0);
      Class<JSONObject> class1 = JSONObject.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "AGj.5bTbUH+";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class0);
      JSON.addMixInAnnotations((Type) null, (Type) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Feature feature0 = Feature.DisableASM;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      boolean boolean0 = JSON.isValidObject("f?!Sx#r_&\"p.9f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.ErrorOnEnumNotMatch;
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      featureArray0[1] = feature1;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.reset();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig1 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) parameterizedTypeImpl0, parserConfig1, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JSON.getMixInAnnotations(class0);
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature1;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) javaBeanSerializer0, 31, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.serializer.JavaBeanSerializer, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : type, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : 0, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : 0, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : 0, write javaBean error, fastjson version 1.2.68, class java.lang.Package, fieldName : package, write javaBean error, fastjson version 1.2.68, class java.lang.String, fieldName : implementationTitle, [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[0];
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.SafeMode;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      Class<Annotation> class0 = Annotation.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.toJSON((Object) javaBeanSerializer0, serializeConfig0);
      String string0 = "1.2.68";
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(string0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, mockFileInputStream0);
      JSON.toJSONString((Object) sequenceInputStream0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      JSON.isValidObject("");
      JSON.isValid("");
      SerializeConfig.getGlobalInstance();
      TreeMap<JSONValidator.Type, GenericArrayTypeImpl> treeMap0 = new TreeMap<JSONValidator.Type, GenericArrayTypeImpl>();
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.toJSON((Object) treeMap0, parserConfig0);
      LinkedHashSet<JSON> linkedHashSet1 = new LinkedHashSet<JSON>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig.getGlobalInstance();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-31);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 13);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      Feature feature0 = Feature.NonStringKeyAsString;
      Feature[] featureArray0 = new Feature[7];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      TreeMap<PascalNameFilter, JSONArray> treeMap0 = JSON.parseObject((InputStream) bufferedInputStream0, (Charset) null, (Type) class0, (ParserConfig) null, (ParseProcess) null, 13, featureArray0);
      assertNull(treeMap0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.toJSONString();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowISO8601DateFormat;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableCircularReferenceDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SortFeidFastMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowSingleQuotes;
      featureArray0[4] = feature4;
      JSON.parseObject((String) null, (Type) null, 989, featureArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1824);
      JSON.isValid("[]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-949), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -949
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Feature feature0 = Feature.DisableASM;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      JSONObject jSONObject0 = new JSONObject(27, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) parameterizedTypeImpl0, parserConfig0, featureArray0);
      jSONObject0.fluentPut("fastjson.parser.autoTypeAccept", byteArrayInputStream0);
      ParserConfig parserConfig1 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.autoTypeSupport", (Type) parameterizedTypeImpl0, parserConfig1, (int) 29, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      JSON.isValidObject("a(!ObDN@");
      JSON.isValid("(6(O+\"A8j");
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-14));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      ParserConfig.getGlobalInstance();
      boolean boolean0 = JSON.isValid("(C)Ljava/util/Date;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<String> class0 = String.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'Q';
      charArray0[2] = 'G';
      charArray0[3] = 'Q';
      Feature[] featureArray0 = new Feature[4];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.DisableASM;
      featureArray0[2] = feature1;
      featureArray0[3] = feature0;
      AbstractMap.SimpleEntry<JSONArray, GenericArrayTypeImpl> abstractMap_SimpleEntry0 = JSON.parseObject(charArray0, 0, (Type) null, featureArray0);
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      JSON.isValid("Negative initial size: ");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.unmappableCharacterAction();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      // Undeclared exception!
      try { 
        JSON.parse((byte[]) null, 989, 354, charsetDecoder0, 3089);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSON.toJSON((Object) serializeConfig0, serializeConfig0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1.2.68";
      stringArray0[1] = "1.2.68";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[3] = "1.2.68";
      stringArray0[4] = "@type";
      stringArray0[5] = "1.2.68";
      stringArray0[6] = "1.2.68";
      stringArray0[7] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      boolean boolean0 = JSON.isValidObject("1.2.68");
      boolean boolean1 = JSON.isValid("true");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      boolean boolean0 = JSON.isValidObject("");
      boolean boolean1 = JSON.isValid((String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Feature feature0 = Feature.DisableASM;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      JSONObject jSONObject0 = new JSONObject(27, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) parameterizedTypeImpl0, parserConfig0, featureArray0);
      jSONObject0.fluentPut("aod+w<$T Y/,dA!", (Object) null);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      typeArray0[3] = (Type) parameterizedTypeImpl0;
      TypeReference<JSONPath.Operator> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<JSONPath.Operator>(typeArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<JSONValidator.Type> linkedList0 = new LinkedList<JSONValidator.Type>();
      JSONArray jSONArray0 = new JSONArray(27);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONValidator.Type jSONValidator_Type0 = JSONValidator.Type.Value;
      linkedList0.add(jSONValidator_Type0);
      Object object0 = JSON.toJSON((Object) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(57, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSON.isValidArray((String) null);
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      Class<InputStream> class0 = InputStream.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = null;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) javaBeanSerializer0, serializeConfig0, (-1), serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      TreeMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, Annotation> treeMap0 = new TreeMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, Annotation>();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[1] = serializerFeature1;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", (SerializeConfig) null, serializeFilterArray0, "", (-2481), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 65535;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SafeMode;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject(" ,zK}|+", (Type) null, 65535, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3 ,zK}|+
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.componentType;
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lxo7");
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SupportArrayToBean;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowComment;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SortFeidFastMatch;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowISO8601DateFormat;
      featureArray0[6] = feature6;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", (Type) null, 1124075009, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray(", ");
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ", ";
      stringArray0[1] = ", ";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      boolean boolean1 = JSON.isValidObject(", ");
      assertFalse(boolean1);
      
      boolean boolean2 = JSON.isValid("~qo");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCircularReferenceDetect;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingToString;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      serializerFeatureArray0[0] = serializerFeature1;
      serializerFeatureArray0[1] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature4;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature2;
      SerializerFeature serializerFeature5 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[6] = serializerFeature5;
      serializerFeatureArray0[7] = serializerFeature3;
      SerializerFeature serializerFeature6 = SerializerFeature.SortField;
      serializerFeatureArray0[8] = serializerFeature6;
      JSON.toJSONBytes(charset0, (Object) serializerFeature1, serializeConfig0, (SerializeFilter[]) null, "false", 8, serializerFeatureArray0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<String, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // map is null.
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature2;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONScanner jSONScanner0 = new JSONScanner("yyyy-MM-dd HH:mm:ss", 25);
      parserConfig0.getDeserializer((Type) class0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      byte[] byteArray0 = new byte[0];
      JSON.parseObject(byteArray0, charset0, (Type) class1, parserConfig0, (ParseProcess) null, 65, featureArray0);
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      byte[] byteArray1 = JSON.toJSONBytes(charset0, (Object) pascalNameFilter1, serializeConfig0, (SerializeFilter[]) null, (String) null, 25, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) null, 31, serializerFeatureArray0);
      String string0 = "fastjson.parser.features.ErrorOnEnumNotMatch";
      // Undeclared exception!
      try { 
        JSON.parseArray("fastjson.parser.features.ErrorOnEnumNotMatch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<JSONValidator.Type> linkedList0 = new LinkedList<JSONValidator.Type>();
      JSON.toJSON((Object) null);
      TreeMap<SimplePropertyPreFilter, SimplePropertyPreFilter> treeMap0 = new TreeMap<SimplePropertyPreFilter, SimplePropertyPreFilter>();
      Integer integer0 = new Integer((-20));
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.SortField;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[7] = serializerFeature7;
      String string0 = JSON.toJSONStringWithDateFormat(integer0, "parseArray", serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InitStringFieldAsEmpty;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowSingleQuotes;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportNonPublicField;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableASM;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.IgnoreAutoType;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.SafeMode;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.IgnoreNotMatch;
      featureArray0[8] = feature8;
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JSON.getMixInAnnotations(class0);
      ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[1];
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = ", ";
      JSON.isValidArray(", ");
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ", ";
      stringArray0[1] = ", ";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature4;
      JSONObject jSONObject0 = new JSONObject(169, false);
      ConcurrentHashMap<String, JSONPath.Operator> concurrentHashMap0 = new ConcurrentHashMap<String, JSONPath.Operator>(989);
      jSONObject0.fluentPutAll(concurrentHashMap0);
      TreeMap<JSONPObject, JSONObject> treeMap0 = new TreeMap<JSONPObject, JSONObject>();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) treeMap0, 27, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedHashMap<InputStream, BufferedInputStream> linkedHashMap0 = new LinkedHashMap<InputStream, BufferedInputStream>();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1.2.68";
      stringArray0[1] = "create asm serializer error, verson 1.2.68, class ";
      stringArray0[2] = "fastjson.parser.features.ErrorOnEnumNotMatch";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "O2IA;Si$Pd[^kWyxoB";
      stringArray0[6] = "{QTG,R$M^v";
      stringArray0[7] = "Op";
      stringArray0[8] = "Wt!t(.(c0{m";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[3] = (SerializeFilter) pascalNameFilter1;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) linkedHashMap0, serializeFilterArray0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONArray jSONArray0 = new JSONArray(2143);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSON.toJSON((Object) class0);
      Integer integer0 = new Integer(jSONArray1.DEFAULT_GENERATE_FEATURE);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(jSONArray0.DEFAULT_GENERATE_FEATURE, (Object) integer0);
      jSONArray0.fluentRemoveAll(jSONArray2);
      String string0 = "0LYO93J)@*Jr:\\4m8(6";
      JSON.isValidArray(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-29));
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("abY:_yFj8/", (Type) null, parserConfig0, (ParseProcess) null, 19, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2abY:_yFj8/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserSecure;
      JSONObject jSONObject0 = new JSONObject(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature3;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature3;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature2;
      SerializerFeature serializerFeature4 = SerializerFeature.QuoteFieldNames;
      jSONObject0.put("70Yy,I?/", (Object) "70Yy,I?/");
      serializerFeatureArray0[6] = serializerFeature4;
      // Undeclared exception!
      try { 
        jSONObject0.toString(serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, fieldName : 70Yy,I?/, [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig.getGlobalInstance();
      JSON.isValid("@type");
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AutoCloseSource;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InitStringFieldAsEmpty;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSON.isValidArray(", ");
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ", ";
      stringArray0[1] = ", ";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[6] = serializerFeature6;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Charset) null, (Object) "", (SerializeConfig) null, serializeFilterArray0, "", 169, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      boolean boolean0 = JSON.isValidObject("");
      boolean boolean1 = JSON.isValid("7ZEY#l");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserSecure;
      JSONObject jSONObject0 = new JSONObject(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature3;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature3;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature2;
      SerializerFeature serializerFeature4 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[6] = serializerFeature4;
      String string0 = jSONObject0.toString(serializerFeatureArray0);
      assertEquals("{}", string0);
      
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JSONScanner jSONScanner0 = new JSONScanner("@type", (-1207));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(serializerFeature3, jSONScanner0, parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowSingleQuotes;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.ErrorOnEnumNotMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableSpecialKeyDetect;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowISO8601DateFormat;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.InitStringFieldAsEmpty;
      featureArray0[6] = feature6;
      // Undeclared exception!
      try { 
        JSON.parseObject("{}", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse enum com.alibaba.fastjson.JSONValidator$Type error, value : {}
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<JSONValidator.Type> linkedList0 = new LinkedList<JSONValidator.Type>();
      JSONArray jSONArray0 = new JSONArray(27);
      jSONArray0.fluentClear();
      ParserConfig.getGlobalInstance();
      boolean boolean0 = JSON.isValid("8+RM:;P");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "can not cast to JSONObject.";
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("can not cast to JSONObject.", (Type) null, parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      List<Object> list0 = javaBeanSerializer0.getFieldValues("false");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-44);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = jSONArray0.fluentSet((byte)127, (Object) null);
      jSONArray1.toJSONString();
      ParserConfig.getGlobalInstance();
      boolean boolean0 = JSON.isValid("[{tQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<JSONPObject> class0 = JSONPObject.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      byte[] byteArray0 = new byte[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (-2955), 55, (CharsetDecoder) uTF8Decoder0, 55);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<JSONValidator.Type> linkedList0 = new LinkedList<JSONValidator.Type>();
      JSONArray jSONArray0 = new JSONArray(27);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Object object0 = JSON.toJSON((Object) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(57, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      JSON.isValidObject("");
      JSON.isValid("");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      LinkedHashSet linkedHashSet1 = (LinkedHashSet)JSON.toJSON((Object) linkedHashSet0, serializeConfig0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONValidator.Type> linkedList0 = new LinkedList<JSONValidator.Type>();
      jSONArray0.fluentRemoveAll(linkedList0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = new ParserConfig();
      JSON.toJSON((Object) parserConfig0, parserConfig1);
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      FieldInfo[] fieldInfoArray0 = new FieldInfo[0];
      SerializeBeanInfo serializeBeanInfo0 = new SerializeBeanInfo(class0, (JSONType) null, (String) null, "can not cast to JSONObject.", (-70), fieldInfoArray0, fieldInfoArray0);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      SerializeWriter serializeWriter0 = new SerializeWriter(3089);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      javaBeanSerializer0.writeAsArray(jSONSerializer0, jSONArray0, (Object) null, class0, (-70));
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("");
      assertFalse(boolean0);
      
      Class<JSONArray> class0 = JSONArray.class;
      JSON.getMixInAnnotations(class0);
      // Undeclared exception!
      try { 
        JSON.parseObject("-y`73e m:N-cgtWC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(1344, true);
      jSONObject0.getDate("");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.getBoolean("yyyy-MM-dd HH:mm:ss");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[8];
      Class<JSONPObject> class0 = JSONPObject.class;
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      String[] stringArray1 = new String[4];
      stringArray1[0] = "isEnabled";
      stringArray1[1] = "1.2.68";
      stringArray1[2] = "1.2.68";
      stringArray1[3] = "1.2.68";
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray1);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[2] = (SerializeFilter) pascalNameFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray1);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter3;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[5] = (SerializeFilter) pascalNameFilter1;
      PascalNameFilter pascalNameFilter2 = new PascalNameFilter();
      serializeFilterArray0[6] = (SerializeFilter) pascalNameFilter2;
      PascalNameFilter pascalNameFilter3 = new PascalNameFilter();
      serializeFilterArray0[7] = (SerializeFilter) pascalNameFilter3;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONString((Object) jSONObject1, serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
      jSONObject2.clone();
      jSONObject2.remove((Object) jSONObject1);
      JSON.toJSON((Object) jSONObject2);
      Date date0 = jSONObject0.getSqlDate("/j8Po'I#J!oBj");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSON.isValidArray("");
      Class<JSONArray> class0 = JSONArray.class;
      JSON.getMixInAnnotations(class0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'O';
      charArray0[2] = 'e';
      charArray0[3] = 'K';
      charArray0[4] = '-';
      charArray0[5] = 'X';
      int int0 = 5;
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 5, (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSON.isValidArray("");
      Class<JSONArray> class0 = JSONArray.class;
      JSON.getMixInAnnotations(class0);
      String string0 = "A";
      // Undeclared exception!
      try { 
        JSON.parseObject("A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = JSON.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSON.isValidArray(" _,Uz3Kt}+");
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray0[2] = feature2;
      JSON.parseObject("", (Type) class0, parserConfig0, 22, featureArray0);
      JSON.setDefaultTypeKey("javax.xml.bind.annotation.XmlAccessType");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = new JSONArray(list0);
      jSONArray0.fluentRemoveAll(jSONArray1);
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      JSONObject jSONObject0 = new JSONObject(false);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(class0);
      JSONObject jSONObject1 = jSONObject0.fluentPut("fastjson.properties", genericArrayTypeImpl0);
      JSONObject jSONObject2 = jSONObject1.fluentClear();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      serializerFeatureArray0[8] = serializerFeature0;
      // Undeclared exception!
      try { 
        jSONObject2.toString(serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.clearMixInAnnotations();
      boolean boolean0 = JSON.isValid("1.2.68");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(65536);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      JSON.clearMixInAnnotations();
      treeMap0.put("1.2.68", "w&]@TV|baq@Wl");
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, treeMap0);
      jSONArray0.fluentRemove((Object) javaBeanSerializer0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      Class<com.alibaba.fastjson.util.ParameterizedTypeImpl> class1 = com.alibaba.fastjson.util.ParameterizedTypeImpl.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1.2.68";
      stringArray0[1] = "1.2.68";
      stringArray0[2] = "1.2.68";
      stringArray0[3] = "1.2.68";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      Class<com.alibaba.fastjson.util.ParameterizedTypeImpl> class2 = com.alibaba.fastjson.util.ParameterizedTypeImpl.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class2, stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      Class<Object> class3 = Object.class;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(class3, stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter3;
      SimplePropertyPreFilter simplePropertyPreFilter4 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter4;
      SimplePropertyPreFilter simplePropertyPreFilter5 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter5;
      SimplePropertyPreFilter simplePropertyPreFilter6 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[6] = (SerializeFilter) simplePropertyPreFilter6;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) "w&]@TV|baq@Wl", serializeFilterArray0, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[0];
      JSON.removeMixInAnnotations((Type) null);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONBytes((Object) null, serializeFilterArray0, serializerFeatureArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      LinkedList<JSONValidator.Type> linkedList0 = new LinkedList<JSONValidator.Type>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      jSONArray1.toJSONString();
      SerializeConfig serializeConfig1 = new SerializeConfig(true);
      TreeMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, Annotation> treeMap0 = new TreeMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, Annotation>();
      Class<JSONObject> class0 = JSONObject.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      SerializeConfig serializeConfig2 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[3] = serializerFeature3;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) javaBeanSerializer0, serializeConfig2, (SerializeFilter[]) null, "Metaspace", 35, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.addMixInAnnotations(class1, class0);
      assertFalse(class1.isEnum());
      
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(24, false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter1;
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      serializeConfig0.clearSerializers();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      pascalNameFilter0.process("yyyy-MM-dd HH:mm:ss", "%{$$8*7O$aY2dO=", serializeFilterArray0[0]);
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[1] = serializerFeature1;
      byte[] byteArray0 = JSON.toJSONBytes((Object) pascalNameFilter0, serializeConfig0, serializeFilterArray0, (-24), serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)93}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Type[] typeArray0 = new Type[9];
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[2]);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSON.toJSON((Object) typeArray0[2], parserConfig0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(93, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 93, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile((File) null, "fsXMRWl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "fsXMRWl");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[6] = serializerFeature6;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockPrintStream0, (Charset) null, (Object) printStream0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = JSON.isValid("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = JSON.isValid("1.2.68");
      assertFalse(boolean0);
      
      Type type0 = jSONArray0.componentType;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.68", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowComment;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSON.parseObject("sK @WI*=a$", (Type) null, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2sK @WI*=a$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "j/B\"-$1`JgHbm", 13, serializerFeatureArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      boolean boolean0 = JSON.isValid("null");
      assertTrue(boolean0);
      
      Feature[] featureArray0 = new Feature[0];
      JSON.parse("null", featureArray0);
      byte[] byteArray0 = JSON.toJSONBytes((Object) "null", serializeConfig0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)110, (byte)117, (byte)108, (byte)108, (byte)34}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      int int0 = 93;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSON.toJSON((Object) parameterizedTypeImpl0, parserConfig0);
      parameterizedTypeImpl0.getTypeName();
      int int1 = 2;
      javaBeanSerializer0.writeAsArray(jSONSerializer0, object0, parameterizedTypeImpl0, typeArray0[0], int1);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(int0, (Collection<?>) list0);
      Integer integer0 = new Integer(jSONArray1.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, class0, typeArray0[2]);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSON.toJSON((Object) typeArray0[8], parserConfig0);
      Collection<JSONPObject> collection0 = null;
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(collection0);
      int int0 = 128;
      javaBeanSerializer0.writeAsArray(jSONSerializer0, jSONArray1, serializeConfig0, typeArray0[7], int0);
      int int1 = 8;
      JSONArray jSONArray2 = jSONArray0.fluentAddAll(int1, (Collection<?>) jSONArray1);
      Integer integer0 = new Integer(jSONArray2.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "parser.features.ErrorOnEnumNotMatch");
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "parser.features.ErrorOnEnumNotMatch";
      stringArray0[1] = "parser.features.ErrorOnEnumNotMatch";
      stringArray0[2] = "parser.features.ErrorOnEnumNotMatch";
      stringArray0[3] = "parser.features.ErrorOnEnumNotMatch";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      simplePropertyPreFilter0.setMaxLevel(26);
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, (SerializeFilter) simplePropertyPreFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[0];
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseObjectArray;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowSingleQuotes;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseBigDecimal;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowISO8601DateFormat;
      featureArray0[4] = feature4;
      Object object0 = JSON.parse("2", featureArray0);
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile((File) null, "fsXMRWl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append((CharSequence) "fsXMRWl");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      ParserConfig.getGlobalInstance();
      JSON.isValid("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        JSON.parseArray("|jyfE5<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSON.isValidArray("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[5] = serializerFeature5;
      int int0 = JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Object) "", serializerFeatureArray0);
      assertEquals("{}", byteArrayOutputStream0.toString());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature2;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONScanner jSONScanner0 = new JSONScanner("yyyy-MM-dd HH:mm:ss", 25);
      parserConfig0.getDeserializer((Type) class0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      byte[] byteArray0 = new byte[0];
      JSON.parseObject(byteArray0, charset0, (Type) class1, parserConfig0, (ParseProcess) null, 65, featureArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[4] = serializerFeature4;
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, (Object) pascalNameFilter0, 4096, serializerFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2128);
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      String string0 = "";
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.CalendarCodec", linkedHashMap0);
      int int0 = (-19);
      FieldInfo fieldInfo0 = new FieldInfo("", class0, class0, class0, (Field) null, 35, (-126), (-19));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      jSONArray0.fluentSet(2128, (Object) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 1540, 55296, charset0, fieldInfo0.fieldType, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TreeMap<SimplePropertyPreFilter, Method> treeMap0 = new TreeMap<SimplePropertyPreFilter, Method>();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      pascalNameFilter0.process(treeMap0, "9DW", treeMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W}OU|pL}`";
      stringArray0[1] = "@type";
      stringArray0[2] = "9DW";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      pascalNameFilter0.process(treeMap0, "@type", simplePropertyPreFilter0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString((Object) treeMap0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      JSONObject jSONObject0 = new JSONObject(6241);
      StringWriter stringWriter0 = new StringWriter(6241);
      StringWriter stringWriter1 = stringWriter0.append('w');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "{'1.2.68':'java.util.TreeMap'}");
      JSONObject jSONObject1 = jSONObject0.fluentRemove(stringWriter2);
      JSONObject jSONObject2 = jSONObject1.fluentClear();
      SerializerFeature[] serializerFeatureArray1 = new SerializerFeature[1];
      serializerFeatureArray1[0] = serializerFeature0;
      jSONObject2.toString(serializerFeatureArray1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)114;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      LinkedHashMap<PascalNameFilter, SimplePropertyPreFilter> linkedHashMap0 = JSON.parseObject(byteArray0, 922, (int)  (-15), charset0, (Type) null, featureArray0);
      assertNull(linkedHashMap0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature1;
      JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      SerializeConfig.getGlobalInstance();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      // Undeclared exception!
      try { 
        MockFile.createTempFile("22", "1.2.68");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("", "", serializerFeatureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.ArraySerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = JSON.isValid("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      LinkedList<JSONValidator.Type> linkedList0 = new LinkedList<JSONValidator.Type>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      jSONArray1.toJSONString();
      ParserConfig.getGlobalInstance();
      boolean boolean0 = JSON.isValid("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "/**/";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      Class<JSONObject> class0 = JSONObject.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      Class<GenericArrayTypeImpl> class1 = GenericArrayTypeImpl.class;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class1, stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter2;
      Class<JavaBeanSerializer> class2 = JavaBeanSerializer.class;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(class2, stringArray0);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter3;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONPObject0, (SerializeConfig) null, serializeFilterArray0, "", 35, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature serializerFeature2 = SerializerFeature.QuoteFieldNames;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "javax.xml.bind.annotation.XmlAccessorType";
      stringArray0[2] = "j/B\"-$1`JgHbm";
      stringArray0[3] = "mZbx0N^Su&N|c";
      stringArray0[4] = "(Ljava/util/List;)V";
      stringArray0[5] = "true";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature2;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature0;
      JSON.toJSONString((Object) simplePropertyPreFilter0, serializeConfig0, serializeFilterArray0, "*;7mYfP1WPh;Pw]", 14, serializerFeatureArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2835);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedHashMap<PascalNameFilter, JSONPath.Operator> linkedHashMap0 = new LinkedHashMap<PascalNameFilter, JSONPath.Operator>();
      JSON.toJSON((Object) linkedHashMap0);
      ParserConfig parserConfig0 = ParserConfig.global;
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Function<Object, JSON> function0 = (Function<Object, JSON>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      linkedHashMap1.computeIfAbsent("%`)", function0);
      JSONObject jSONObject0 = new JSONObject(linkedHashMap1);
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.68", (Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : float
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedHashMap<PascalNameFilter, JSONPath.Operator> linkedHashMap0 = new LinkedHashMap<PascalNameFilter, JSONPath.Operator>();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      linkedHashMap0.put(pascalNameFilter0, jSONPath_Operator0);
      JSON.toJSON((Object) linkedHashMap0);
      ParserConfig parserConfig0 = ParserConfig.global;
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(linkedHashMap1);
      jSONObject0.getString("fastjson.parser.safeMode");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowISO8601DateFormat;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportArrayToBean;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.OrderedField;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.deny.internal", class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      SerializeConfig.getGlobalInstance();
      TreeMap<JSONValidator.Type, GenericArrayTypeImpl> treeMap0 = new TreeMap<JSONValidator.Type, GenericArrayTypeImpl>();
      JSONValidator.Type jSONValidator_Type0 = JSONValidator.Type.Object;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      treeMap0.put(jSONValidator_Type0, genericArrayTypeImpl0);
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) treeMap0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray(" ,zKt}|+");
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      Feature feature0 = Feature.AllowISO8601DateFormat;
      Feature feature1 = Feature.IgnoreAutoType;
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[8];
      featureArray0[0] = feature1;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature1;
      featureArray0[4] = feature0;
      featureArray0[5] = feature1;
      featureArray0[6] = feature1;
      Feature feature2 = Feature.CustomMapDeserializer;
      featureArray0[7] = feature2;
      JSON.parse((String) null, parserConfig0, 2408);
      boolean boolean1 = JSON.isValid("Dm/k,g4#I;%,}/_pu'");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSON.isValidArray(" _,Uz3Kt}+");
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray0[2] = feature2;
      JavaBeanSerializer javaBeanSerializer0 = JSON.parseObject("", (Type) class0, parserConfig0, 22, featureArray0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSON.parseArray((String) null);
      JSON.isValidArray("fastjson.asmEnable");
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InitStringFieldAsEmpty;
      featureArray0[1] = feature1;
      JSON.parse("", parserConfig1, featureArray0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      Class<Integer> class0 = Integer.class;
      Class<JSONPObject> class1 = JSONPObject.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class1, treeMap0);
      JSONScanner jSONScanner0 = new JSONScanner("DBO =S{:QE6<8ET");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.autoTypeAccept", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TreeMap<SimplePropertyPreFilter, Method> treeMap0 = new TreeMap<SimplePropertyPreFilter, Method>();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      pascalNameFilter0.process(treeMap0, "9DW", treeMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W}OU|pL}`";
      stringArray0[1] = "@type";
      stringArray0[2] = "9DW";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      pascalNameFilter0.process(treeMap0, "@type", simplePropertyPreFilter0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      JSONObject jSONObject0 = new JSONObject(6241);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('w');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "@type");
      JSONObject jSONObject1 = jSONObject0.fluentRemove(stringWriter2);
      JSONObject jSONObject2 = jSONObject1.fluentClear();
      SerializerFeature[] serializerFeatureArray1 = new SerializerFeature[1];
      serializerFeatureArray1[0] = serializerFeature0;
      jSONObject2.toString(serializerFeatureArray1);
      Class<JSONObject> class0 = JSONObject.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.CustomMapDeserializer;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportNonPublicField;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableASM;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 3, line 1, column 41.2.68
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      String string0 = "SortField";
      pascalNameFilter0.process(class0, "SortField", "9DW");
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string1 = "r7+Bl.'V";
      pascalNameFilter1.process(pipedInputStream0, "r7+Bl.'V", "9DW");
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "yyyy-MM-dd HH:mm:ss", (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.ArraySerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<String> class0 = String.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      uTF8Decoder0.onMalformedInput(codingErrorAction0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.toJSON((Object) parserConfig0, serializeConfig0);
      Feature[] featureArray0 = new Feature[7];
      classLoader1.setDefaultAssertionStatus(true);
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowArbitraryCommas;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.IgnoreAutoType;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.CustomMapDeserializer;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.IgnoreNotMatch;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowISO8601DateFormat;
      featureArray0[6] = feature6;
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.deny.internal", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = new JSONArray(35);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parse("1.2.68", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        JSON.parseArray("\")'XnNQ k)0{e", typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[0];
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature1;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      featureArray0[3] = feature2;
      JSON.parseObject(charArray0, 79, (Type) class0, featureArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      // Undeclared exception!
      try { 
        JSON.parseArray("not match enum value, ", typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSON.isValidObject("");
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      Feature feature0 = Feature.NonStringKeyAsString;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, (Charset) null, (Type) class0, (ParserConfig) null, (ParseProcess) null, 16, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature1;
      JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.toJSON((Object) jSONArray1, serializeConfig0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-26);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-5), (-85));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.read(byteArray0);
      JSON.toJSONString((Object) bufferedInputStream0, true);
      LinkedHashSet<JSON> linkedHashSet1 = new LinkedHashSet<JSON>();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SafeMode;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AutoCloseSource;
      featureArray0[3] = feature3;
      TreeMap<PascalNameFilter, JSONArray> treeMap0 = JSON.parseObject((InputStream) byteArrayInputStream0, (Charset) null, (Type) class1, (ParserConfig) null, (ParseProcess) null, 16, featureArray0);
      assertNull(treeMap0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = JSON.isValid("VTj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      ParserConfig.getGlobalInstance();
      boolean boolean0 = JSON.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      jSONArray0.fluentRemove((Object) serializerFeature0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature1;
      String string0 = JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      assertEquals("\"WriteNonStringKeyAsString\"", string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      jSONArray1.toJSONString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSON.parse("22", parserConfig0, 35);
      boolean boolean0 = JSON.isValid("uz]]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      int int0 = 14;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[10];
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "", 13, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedHashMap<PascalNameFilter, JSONPath.Operator> linkedHashMap0 = new LinkedHashMap<PascalNameFilter, JSONPath.Operator>();
      JSON.toJSON((Object) linkedHashMap0);
      ParserConfig parserConfig0 = ParserConfig.global;
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(linkedHashMap1);
      String string0 = jSONObject0.getString("fastjson.parser.safeMode");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashMap<PascalNameFilter, JSONPath.Operator> linkedHashMap0 = new LinkedHashMap<PascalNameFilter, JSONPath.Operator>();
      JSON.toJSON((Object) linkedHashMap0);
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[0];
      JSON.parse("", parserConfig0, 35);
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(linkedHashMap1);
      String string0 = jSONObject0.getString("fastjson.parser.safeMode");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TreeMap<PascalNameFilter, Annotation> treeMap0 = new TreeMap<PascalNameFilter, Annotation>();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSON.toJSON((Object) treeMap0, serializeConfig0);
      JSONObject jSONObject0 = JSON.parseObject("");
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig();
      Charset charset0 = Charset.defaultCharset();
      int int0 = 19;
      PipedInputStream pipedInputStream0 = new PipedInputStream(19);
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, charset0, (Type) parameterizedTypeImpl0, parserConfig0, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Object> class0 = Object.class;
      JSON.parseArray("", class0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(11);
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig(false);
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, charset0, (Type) class0, parserConfig0, (Feature[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature2;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      JSON.toJSON((Object) propertyNamingStrategy0, serializeConfig0);
      JSONObject.SecureObjectInputStream jSONObject_SecureObjectInputStream0 = null;
      try {
        jSONObject_SecureObjectInputStream0 = new JSONObject.SecureObjectInputStream((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONObject$SecureObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      JSON.toJSON((Object) propertyNamingStrategy0, serializeConfig0);
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature1;
      JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      TreeMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, Annotation> treeMap0 = new TreeMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, Annotation>();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseArray(";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ;, pos 1, line 1, column 2;Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      Class<JSONValidator.Type> class1 = JSONValidator.Type.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D0V:.y,}(WRU|M\"Uk";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      Class<String> class2 = String.class;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class2, stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter3;
      SimplePropertyPreFilter simplePropertyPreFilter4 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter4;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[7] = serializerFeature7;
      String string0 = JSON.toJSONString((Object) javaBeanSerializer0, serializeFilterArray0, serializerFeatureArray0);
      assertEquals("[null,null,null,null,null,null,null,null,null]", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile((File) null, "fsXMRWl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "fsXMRWl");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      int int0 = JSON.writeJSONString((OutputStream) printStream0, charset0, (Object) null, serializerFeatureArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TreeMap<SimplePropertyPreFilter, Method> treeMap0 = new TreeMap<SimplePropertyPreFilter, Method>();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Class<String> class0 = String.class;
      Class<SimplePropertyPreFilter> class1 = SimplePropertyPreFilter.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      int int0 = 2204;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-25);
      Feature[] featureArray0 = new Feature[0];
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.clone();
      jSONArray0.toJSONString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        JSON.parse("-qVhB!6p", 85);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(35);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("", (TypeReference<Annotation>) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = new JSONArray(list0);
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", (TypeReference<Annotation>) null, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSON.isValidArray(" ,zKt}|+");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Object object0 = JSON.parse("", parserConfig0, 1797);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TreeMap<SimplePropertyPreFilter, Method> treeMap0 = new TreeMap<SimplePropertyPreFilter, Method>();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      pascalNameFilter0.process(treeMap0, "9DW", treeMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W}OU|pL}`";
      stringArray0[1] = "@type";
      stringArray0[2] = "9DW";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      pascalNameFilter0.process(treeMap0, "@type", simplePropertyPreFilter0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString((Object) treeMap0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      Feature feature0 = Feature.IgnoreAutoType;
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[3];
      parserConfig0.compatibleWithJavaBean = false;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      JSON.parse("{'1.2.68':'java.util.TreeMap'}", parserConfig0, featureArray0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(linkedHashMap0);
      String string0 = jSONObject0.getString(stringArray0[1]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray0.containsAll(linkedHashSet0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "fas", serializeConfig0, serializeFilterArray0, "1.2.68", 35, serializerFeatureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.ArraySerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray0.containsAll(linkedHashSet0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      // Undeclared exception!
      JSON.toJSONString((Object) "false", serializeConfig0, serializeFilterArray0, "1.2.68", 35, serializerFeatureArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSON.isValidArray(" ,zKt}|+");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      serializeConfig0.setAsmEnable(false);
      JSON.toJSON((Object) "fastjson.parser.safeMode", serializeConfig0);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "fastjson.parser.safeMode", false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.ArraySerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse enum com.alibaba.fastjson.JSONValidator$Type error, value : 1.2
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "=i3V|*Lgv`k,(.f6n";
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("=i3V|*Lgv`k,(.f6n", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2=i3V|*Lgv`k,(.f6n
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("", "|O1U\"", serializerFeatureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.ArraySerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<String> class0 = String.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      uTF8Decoder0.onMalformedInput(codingErrorAction0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 2460, 2204, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-124);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.malformedInputAction();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte) (-124), (int) (byte) (-22), charsetDecoder0, 18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature2;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONScanner jSONScanner0 = new JSONScanner("", 25);
      parserConfig0.getDeserializer((Type) class0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      byte[] byteArray0 = new byte[0];
      JSON.parseObject(byteArray0, charset0, (Type) class1, parserConfig0, (ParseProcess) null, 65, featureArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      jSONArray0.fluentRemove((Object) serializerFeature0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature1;
      JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      jSONArray1.toJSONString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSON.parse((String) null, (-1698));
      // Undeclared exception!
      try { 
        jSONArray1.getShort(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) serializeConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) serializeConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        JSON.parse("E%Mn{([~FP]qc2G-", parserConfig0, 1039);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2E%Mn{([~FP]qc2G-
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TreeMap<SimplePropertyPreFilter, Method> treeMap0 = new TreeMap<SimplePropertyPreFilter, Method>();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      pascalNameFilter0.process(treeMap0, "9DW", treeMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W}OU|pL}`";
      stringArray0[1] = "@type";
      stringArray0[2] = "9DW";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      pascalNameFilter0.process(treeMap0, "@type", simplePropertyPreFilter0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) treeMap0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals("{\"@type\":\"java.util.TreeMap\"}", string0);
      
      JSONObject jSONObject0 = new JSONObject(6241);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('w');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "{'1.2.68':'java.util.TreeMap'}");
      JSONObject jSONObject1 = jSONObject0.fluentRemove(stringWriter2);
      JSONObject jSONObject2 = jSONObject1.fluentClear();
      SerializerFeature[] serializerFeatureArray1 = new SerializerFeature[1];
      serializerFeatureArray1[0] = serializerFeature0;
      String string1 = jSONObject2.toString(serializerFeatureArray1);
      assertEquals("{\"@type\":\"com.alibaba.fastjson.JSONObject\"}", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      char[] charArray0 = new char[0];
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowUnQuotedFieldNames;
      featureArray0[3] = feature3;
      JSON.parseObject(charArray0, 93, (Type) class0, featureArray0);
      // Undeclared exception!
      try { 
        JSON.parse("", (ParserConfig) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) parameterizedTypeImpl0, parserConfig0, featureArray0);
      JSONObject jSONObject0 = new JSONObject();
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      typeArray0[3] = (Type) parameterizedTypeImpl0;
      TypeReference<JSONPath.Operator> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<JSONPath.Operator>(typeArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      char[] charArray0 = new char[0];
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowUnQuotedFieldNames;
      featureArray0[3] = feature3;
      JSON.parseObject(charArray0, 93, (Type) class0, featureArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-69);
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONScanner jSONScanner0 = new JSONScanner("}/^k_Yg>P|sk\u0001't", 2281);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      JSON.parseObject(byteArray0, charset0, (Type) class1, parserConfig0, (ParseProcess) null, 2281, featureArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      byte byte0 = (byte)47;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) parameterizedTypeImpl0, parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "hFkbugM1h/";
      Feature[] featureArray0 = new Feature[1];
      JavaBeanInfo.getBuilderClass((JSONType) null);
      // Undeclared exception!
      try { 
        JSON.parseObject("hFkbugM1h/", (Type) null, 1331, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature2;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature2;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature2;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature2;
      JSON.toJSONBytes((Object) pascalNameFilter0, serializeConfig0, serializeFilterArray0, "(", 25, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        JSON.parseObject("", (Type) class0, 25, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.ErrorOnEnumNotMatch;
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      featureArray0[1] = feature1;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.reset();
      ParserConfig parserConfig1 = ParserConfig.global;
      ParserConfig parserConfig2 = ParserConfig.global;
      Feature[] featureArray1 = new Feature[2];
      Feature feature2 = Feature.SupportNonPublicField;
      featureArray1[0] = feature2;
      featureArray1[1] = feature1;
      JSON.parse((String) null, parserConfig2, featureArray1);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(linkedHashMap0);
      String string0 = jSONObject0.getString("true");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = JSON.parseArray((String) null, class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(16, false);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      serializeConfig0.setPropertyNamingStrategy(propertyNamingStrategy0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[5] = serializerFeature5;
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)122;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      String string0 = "";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      char[] charArray0 = new char[9];
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = null;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) class1, serializeConfig0, serializeFilterArray0, 55, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JSON.getMixInAnnotations(class0);
      ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject("");
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.asmEnable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.UseObjectArray;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableCircularReferenceDetect;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableCircularReferenceDetect;
      featureArray0[4] = feature4;
      JSON.parseObject((String) null, featureArray0);
      String string0 = "p.5jh^\"";
      // Undeclared exception!
      try { 
        JSON.parseObject("p.5jh^\"", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2p.5jh^\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "OF", serializerFeatureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.ArraySerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "";
      JSON.parse("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1943));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1943
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[6] = serializerFeature6;
      JSON.toJSONBytes((Object) propertyNamingStrategy0, serializeConfig0, serializerFeatureArray0);
      JSON.isValidObject("1.2.68");
      // Undeclared exception!
      try { 
        jSONArray0.get((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSON.isValidArray("");
      Class<JSONArray> class0 = JSONArray.class;
      JSON.getMixInAnnotations(class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      String string0 = "%Q4\"6$XOo}K";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("%Q4\"6$XOo}K", parserConfig0, 125);
      defaultJSONParser0.getFieldTypeResolver();
      Feature feature0 = Feature.InternFieldNames;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature1;
      featureArray0[1] = feature1;
      featureArray0[2] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.deny.internal", (Type) null, parserConfig0, (ParseProcess) null, 979, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = new JSONArray(list0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      jSONArray2.fluentClear();
      Class<StringWriter> class1 = StringWriter.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONArray0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.StringWriter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      TreeMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, Annotation> treeMap0 = new TreeMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, Annotation>();
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) serializerFeature0, serializeConfig0, (SerializeFilter[]) null, (String) null, (-1957), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4526);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1.2.68";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.CustomMapDeserializer;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreAutoType;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseObjectArray;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.ErrorOnEnumNotMatch;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.InternFieldNames;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowUnQuotedFieldNames;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.SortFeidFastMatch;
      featureArray0[7] = feature7;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", (Type) null, parserConfig0, 35, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Feature feature0 = Feature.DisableASM;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = " ,zKt}|+";
      // Undeclared exception!
      try { 
        JSON.parseArray(" ,zKt}|+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ,, pos 1, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object object0 = null;
      JSON.toJSONString((Object) null);
      // Undeclared exception!
      try { 
        JSON.parseObject("null", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowUnQuotedFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseBigDecimal;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AutoCloseSource;
      featureArray0[5] = feature5;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) "", serializeConfig0, (SerializeFilter[]) null, "", 93, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)34}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature1;
      String string0 = JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      assertEquals("\"NotWriteDefaultValue\"", string0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      TreeMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, Annotation> treeMap0 = new TreeMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, Annotation>();
      byte[] byteArray0 = JSON.toJSONBytes((Object) treeMap0, serializeConfig0, (SerializeFilter[]) null, "", 35, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = new JSONArray(list0);
      jSONArray0.fluentRemoveAll(jSONArray1);
      Class<StringWriter> class1 = StringWriter.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONArray0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.StringWriter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature1;
      JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.toJSON((Object) jSONArray1, serializeConfig0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-26);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-5), (-85));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JSON.toJSONString((Object) bufferedInputStream0, true);
      LinkedHashSet<JSON> linkedHashSet1 = new LinkedHashSet<JSON>();
      assertTrue(linkedHashSet1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.toJSON((Object) jSONArray0, (SerializeConfig) null);
      // Undeclared exception!
      try { 
        JSON.parseObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSON.toJSON((Object) null, serializeConfig0);
      Integer integer0 = new Integer((-1255));
      JSON.toJSONString((Object) integer0, true);
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      // Undeclared exception!
      try { 
        JSON.parseArray("VKE2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.isValid("1.2.68");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) jSONArray0, serializerFeatureArray0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[0];
      Feature[] featureArray0 = new Feature[8];
      JavaBeanInfo.getBuilderClass((JSONType) null);
      AbstractMap.SimpleEntry<JSONArray, GenericArrayTypeImpl> abstractMap_SimpleEntry0 = JSON.parseObject(charArray0, 2147483645, (Type) null, featureArray0);
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(1882);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject0.getJSONArray("writeClassName");
      jSONObject0.keySet();
      SerializeConfig serializeConfig0 = new SerializeConfig(1, false);
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONPObject0, serializeConfig0, 1882, serializerFeatureArray0);
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      String string0 = "\\oA}:L\"";
      Class<PascalNameFilter> class1 = PascalNameFilter.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", concurrentSkipListMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        JSON.parse("1.2.68", 35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature1;
      JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      Class<StringWriter> class0 = StringWriter.class;
      String string0 = "";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[2] = "1.2.68";
      stringArray0[3] = "isWriteClassName";
      // Undeclared exception!
      try { 
        JSON.parse("isWriteClassName", 35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2isWriteClassName
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSON> class0 = JSON.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1.2.68";
      stringArray0[1] = "1.2.68";
      stringArray0[2] = "1.2.68";
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Y$(6;][IS[", parserConfig0, 1166);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowISO8601DateFormat;
      featureArray0[2] = feature2;
      JSON.parseObject((String) null, (Type) class0, (ParseProcess) null, featureArray0);
      stringArray0[3] = "1.2.68";
      stringArray0[4] = "1.2.68";
      stringArray0[5] = "1.2.68";
      stringArray0[6] = "1.2.68";
      stringArray0[7] = "1.2.68";
      stringArray0[8] = "1.2.68";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullListAsEmpty;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      SerializerFeature serializerFeature3 = SerializerFeature.BeanToArray;
      SerializerFeature serializerFeature4 = SerializerFeature.DisableCheckSpecialChar;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullListAsEmpty;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature3;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature4;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature5;
      serializerFeatureArray0[6] = serializerFeature2;
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.MapSortField;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[4] = serializerFeature3;
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(pascalNameFilter0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.MapSortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[4] = serializerFeature4;
      String string0 = JSON.toJSONStringZ(pascalNameFilter0, serializeConfig0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)93;
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte)8, (int) (byte)8, (CharsetDecoder) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      featureArray0[1] = feature0;
      byte[] byteArray0 = new byte[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 6, 12, charsetDecoder0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(1832);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject0.getJSONArray("writeClassName");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-30);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.reset();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 2147483645, 1832, charsetDecoder0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<String> class0 = String.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.unmappableCharacterAction();
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 2460, 2204, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JSON.getMixInAnnotations(class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("%Q4\"6$XOo}K", parserConfig0, (-19));
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("J=D{`<29N\"[@", (Type) null, parserConfig0, (ParseProcess) null, 19, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2J=D{`<29N\"[@
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSON.isValidArray(" _,Uz3Kt}+");
      Class<JSONArray> class0 = JSONArray.class;
      JSON.getMixInAnnotations(class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Set", parserConfig0, 539);
      defaultJSONParser0.getFieldTypeResolver();
      Feature feature0 = Feature.AutoCloseSource;
      Feature feature1 = Feature.InternFieldNames;
      Feature feature2 = Feature.DisableCircularReferenceDetect;
      Feature feature3 = Feature.ErrorOnEnumNotMatch;
      Feature feature4 = Feature.SortFeidFastMatch;
      Feature[] featureArray0 = new Feature[7];
      featureArray0[0] = feature3;
      featureArray0[1] = feature2;
      featureArray0[2] = feature1;
      featureArray0[3] = feature0;
      featureArray0[4] = feature1;
      featureArray0[5] = feature4;
      featureArray0[6] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.autoTypeSupport", (Type) class0, parserConfig0, (ParseProcess) null, 2, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      LinkedHashMap<PropertyNamingStrategy, BufferedInputStream> linkedHashMap0 = new LinkedHashMap<PropertyNamingStrategy, BufferedInputStream>();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) linkedHashMap0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      Type type0 = null;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1.2.68";
      stringArray0[1] = "1.2.68";
      stringArray0[2] = "1.2.68";
      stringArray0[3] = "1.2.68";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[7] = serializerFeature7;
      JSON.toJSONString((Object) jSONObject0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      Feature feature0 = Feature.SupportNonPublicField;
      Feature feature1 = Feature.UseBigDecimal;
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = ']';
      Feature[] featureArray0 = new Feature[5];
      featureArray0[0] = feature1;
      featureArray0[1] = feature1;
      featureArray0[2] = feature0;
      featureArray0[4] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, (-5), (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Feature feature0 = Feature.DisableASM;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("false", featureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      Type type0 = jSONArray0.componentType;
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPObject jSONPObject0 = JSON.parseObject((String) null, (Type) null, parserConfig0, (-123001), (Feature[]) null);
      assertNull(jSONPObject0);
      
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSON.isValidArray(" ,zKt}|+");
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.toJSON((Object) "fastjson.parser.safeMode", serializeConfig0);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "fastjson.parser.safeMode", false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.ArraySerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "j/B\"-$1`JgHbm", 13, serializerFeatureArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeConfig serializeConfig0 = new SerializeConfig(77, false);
      JSON.toJSONString((Object) "", serializeConfig0, serializerFeatureArray0);
      String string0 = JSON.VERSION;
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(35);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.isValidArray("1.2.68");
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(4425);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSON.isValidArray((String) null);
      // Undeclared exception!
      try { 
        JSON.parseArray("IgnoreAutoType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      boolean boolean0 = JSONObject.SecureObjectInputStream.fields_error;
      boolean boolean1 = JSON.isValid("");
      SerializeConfig.getGlobalInstance();
      boolean boolean2 = JSON.isValidArray((String) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSON.toJSONString((Object) null, false);
      // Undeclared exception!
      try { 
        JSON.parseArray("KS-z^M0h>_ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSON.isValidArray(" ,zKt}|+");
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = ']';
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("fastjson.parser.safeMode");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("1.2.68", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      int int0 = 93;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.deny", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = null;
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSON.parseObject((String) null);
      // Undeclared exception!
      try { 
        JSON.parse("]K:\"'RkF[s/Jvls5u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2]K:\"'RkF[s/Jvls5u
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = JSONObject.SecureObjectInputStream.fields_error;
      int int0 = 4096;
      // Undeclared exception!
      try { 
        JSON.parse("1.2.68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPObject jSONPObject0 = new JSONPObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Class<StringWriter> class0 = StringWriter.class;
      JSON.toJavaObject((JSON) jSONObject1, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseArray("", class0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCheckSpecialChar;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullListAsEmpty;
      Class<Object> class1 = Object.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature4;
      serializerFeatureArray0[1] = serializerFeature2;
      serializerFeatureArray0[2] = serializerFeature3;
      serializerFeatureArray0[3] = serializerFeature1;
      simplePropertyPreFilter0.setMaxLevel(65536);
      SerializerFeature serializerFeature5 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[4] = serializerFeature5;
      serializerFeatureArray0[5] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) serializerFeature1, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Feature feature0 = Feature.InternFieldNames;
      Feature feature1 = Feature.AllowUnQuotedFieldNames;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      Class<PascalNameFilter> class1 = PascalNameFilter.class;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[1] = feature2;
      JSON.parseObject("", class1, featureArray0);
      int int0 = (-876);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(feature1, (JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      JSON.getMixInAnnotations((Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.68", parserConfig0, 35);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.AutoCloseSource;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableCircularReferenceDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SupportArrayToBean;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseBigDecimal;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.ErrorOnEnumNotMatch;
      featureArray0[5] = feature5;
      featureArray0[6] = feature0;
      Feature feature6 = Feature.NonStringKeyAsString;
      featureArray0[7] = feature6;
      JSON.parseObject("", (Type) null, parserConfig0, (ParseProcess) null, 2, featureArray0);
      Class<JSONObject> class0 = JSONObject.class;
      JSONObject jSONObject1 = jSONObject0.toJavaObject(class0);
      MockFile mockFile0 = new MockFile("writer not null");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.format(jSONObject1.defaultLocale, "fastjson.parser.deny.internal", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.writeJSONString((Writer) mockPrintWriter0, (Object) feature6, serializerFeatureArray0);
      assertFalse(feature6.equals((Object)feature2));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Feature feature0 = Feature.DisableASM;
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      SerializeWriter serializeWriter0 = new SerializeWriter(1355);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[6] = serializerFeature6;
      JSON.writeJSONStringTo(feature0, serializeWriter0, serializerFeatureArray0);
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      Type type0 = jSONArray0.componentType;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        JSON.parseObject("$", (Type) null, parserConfig0, 14, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)0;
      Object object0 = JSON.parse(byteArray0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.ArraySerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("vY2a)^O=@hIpDFo");
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      String string0 = JSON.toJSONString((Object) serializeConfig0, false);
      assertEquals("{\"asmEnable\":true,\"typeKey\":\"@type\"}", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<StringWriter> class0 = StringWriter.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.StringWriter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPObject jSONPObject0 = new JSONPObject();
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONStringWithDateFormat(jSONPObject0, "1.2.68", serializerFeatureArray0);
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      Class<StringWriter> class1 = StringWriter.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "1.2.68";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) simplePropertyPreFilter0);
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONArray1, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.StringWriter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      char[] charArray0 = new char[1];
      Feature[] featureArray0 = new Feature[8];
      JavaBeanInfo.getBuilderClass((JSONType) null);
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 2147483645, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSON.isValidArray(" _,Uz3Kt}+");
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = ']';
      charArray0[2] = '{';
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, (-2147483645), (Type) class0, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature1;
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      Feature feature1 = Feature.SupportNonPublicField;
      Feature feature2 = Feature.InternFieldNames;
      Feature feature3 = Feature.DisableFieldSmartMatch;
      Feature feature4 = Feature.UseBigDecimal;
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Feature[] featureArray0 = new Feature[5];
      featureArray0[0] = feature2;
      featureArray0[1] = feature3;
      Feature feature5 = Feature.AllowSingleQuotes;
      featureArray0[3] = feature5;
      featureArray0[4] = feature4;
      // Undeclared exception!
      try { 
        JSON.parseObject("Kd2GVtS1F6dao5i", class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPObject jSONPObject0 = new JSONPObject();
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      String string0 = "WriteNullBooleanAsFalse";
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("WriteNullBooleanAsFalse", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2WriteNullBooleanAsFalse
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      JSON.addMixInAnnotations(class1, class0);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      JSON.getMixInAnnotations((Type) null);
      ParserConfig.getGlobalInstance();
      PipedInputStream pipedInputStream0 = new PipedInputStream(35);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.ErrorOnEnumNotMatch;
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      featureArray0[1] = feature1;
      JSON.parseObject((String) null, (Type) javaBeanInfo0.clazz, parserConfig0, (ParseProcess) null, 317, featureArray0);
      JSONObject jSONObject0 = new JSONObject(false);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Feature feature0 = Feature.DisableASM;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      boolean boolean0 = JSON.isValidObject("");
      boolean boolean1 = JSON.isValid("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<JSONPObject> class0 = JSONPObject.class;
      Feature[] featureArray1 = new Feature[1];
      featureArray1[0] = feature0;
      JSONPObject jSONPObject0 = JSON.parseObject("", class0, featureArray1);
      assertNull(jSONPObject0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("~puT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2~puT
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedHashSet<JSON> linkedHashSet1 = new LinkedHashSet<JSON>();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      JSON.toJSONBytes((Object) linkedHashSet1, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        JSON.parseArray("22");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual int, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(189);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.SortField;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[8] = serializerFeature8;
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, serializeConfig0, (SerializeFilter) null, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[1];
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 1226, (Type) class0, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.ErrorOnEnumNotMatch;
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowISO8601DateFormat;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowComment;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.IgnoreAutoType;
      featureArray0[4] = feature4;
      // Undeclared exception!
      try { 
        JSON.parse("yQq|M,ss", parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yQq|M,ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Feature feature0 = Feature.DisableASM;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.autoTypeSupport", parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parse("false", parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSON.isValidObject("false");
      Class<Object> class0 = Object.class;
      List<Object> list0 = JSON.parseArray("", class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Object> list0 = JSON.parseArray((String) null, class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.68", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but float, pos 3, line 1, column 41.2.68
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseArray("", class0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((List<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list is null.
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSON.toJSON((Object) class0, parserConfig0);
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Class<String> class0 = String.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.toJSON((Object) parserConfig0, serializeConfig0);
      // Undeclared exception!
      try { 
        PropertyNamingStrategy.valueOf("{3XI}a 2_hI25y|t+DU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.PropertyNamingStrategy.{3XI}a 2_hI25y|t+DU
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSON.toJSON((Object) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      int int0 = 93;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSON.toJSON((Object) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSON.toJSON((Object) serializeConfig0, serializeConfig0);
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("hFkbugM1h/", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2hFkbugM1h/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("Rq", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.OrderedField;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowArbitraryCommas;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.NonStringKeyAsString;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowArbitraryCommas;
      featureArray0[4] = feature4;
      // Undeclared exception!
      try { 
        JSON.parseObject("isWriteClassName", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2isWriteClassName
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("false");
      boolean boolean1 = JSON.isValid("false");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.isValidObject("1.2.68");
      int int0 = 4096;
      // Undeclared exception!
      try { 
        jSONArray0.get(4096);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4096, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature1;
      JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      Class<StringWriter> class0 = StringWriter.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "1.2.68";
      stringArray0[3] = "isWriteClassName";
      stringArray0[4] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      jSONArray1.fluentAdd((Object) serializerFeature0);
      Class<StringWriter> class1 = StringWriter.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONArray0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.StringWriter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      String string0 = "Ml=FYgS_";
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature1;
      JSON.toJSONStringWithDateFormat(serializerFeature0, "Ml=FYgS_", serializerFeatureArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.68", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but float, pos 3, line 1, column 41.2.68
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<SimplePropertyPreFilter> linkedHashSet0 = new LinkedHashSet<SimplePropertyPreFilter>();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature1;
      JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.68", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but float, pos 3, line 1, column 41.2.68
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONStringWithDateFormat(jSONArray0, "nM=Q0\"Q!#;&", serializerFeatureArray0);
      Integer integer0 = new Integer(35);
      jSONArray0.lastIndexOf(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      int int0 = 0;
      JSONObject jSONObject0 = new JSONObject(0);
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      jSONObject0.toJavaObject((Type) class1);
      jSONObject0.getSqlDate((String) null);
      Class<JSONPath.Operator> class2 = JSONPath.Operator.class;
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class2);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(class2);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeWriter) null, serializeConfig0);
      // Undeclared exception!
      try { 
        javaBeanSerializer1.writeDirectNonContext(jSONSerializer0, (Object) null, (Object) null, genericArrayTypeImpl0, 268435456);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.CustomMapDeserializer;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.NonStringKeyAsString;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableFieldSmartMatch;
      featureArray0[4] = feature4;
      // Undeclared exception!
      try { 
        JSON.parseObject("parseBoolean error, field : ", class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JSON.getMixInAnnotations(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("%Q4\"6$XOo}K", parserConfig0, 125);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.safeMode", (Type) null, parserConfig0, (ParseProcess) null, 19, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1165;
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableSpecialKeyDetect;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowUnQuotedFieldNames;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableASM;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.DisableFieldSmartMatch;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.AllowUnQuotedFieldNames;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.UseBigDecimal;
      featureArray0[8] = feature8;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      boolean boolean0 = JSON.isValidArray("[long");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray(" ,zK}|+");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) " ,zK}|+", (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullListAsEmpty;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1.2.68";
      stringArray0[1] = "1.2.68";
      stringArray0[2] = "1.2.68";
      stringArray0[3] = "1.2.68";
      stringArray0[4] = "98~.1M<x4;X";
      stringArray0[5] = "1.2.68";
      stringArray0[6] = "1.2.68";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature1;
      serializerFeatureArray0[1] = serializerFeature2;
      byte[] byteArray0 = JSON.toJSONBytes((Object) serializerFeature0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      assertEquals(25, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      TreeMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, Annotation> treeMap0 = new TreeMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, Annotation>();
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, serializeConfig0, serializeFilterArray0, "j/B\"-$1`JgHbm", 5931, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      jSONObject1.getJSONObject("1.2.68");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Map<String, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // map is null.
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations((Type) null);
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      LinkedHashSet<JSON> linkedHashSet0 = new LinkedHashSet<JSON>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "M{R(RyHk?8W9jlZ,3Y";
      stringArray0[1] = "";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSON.isValidArray(" _,Uz3Kt}+");
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[6] = serializerFeature6;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) " _,Uz3Kt}+", (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      JSON.removeMixInAnnotations(class0);
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      serializeConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      serializerFeatureArray0[8] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) feature0, serializeConfig0, (SerializeFilter[]) null, "D>P{k%", 10, serializerFeatureArray0);
      assertEquals(21, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = ')';
      charArray0[2] = ']';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = 'e';
      charArray0[6] = '{';
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, (-2147483645), (Type) null, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Object object0 = JSON.toJSON((Object) null, serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, 1215, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      char[] charArray0 = new char[0];
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowUnQuotedFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseBigDecimal;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AutoCloseSource;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.SafeMode;
      featureArray0[7] = feature6;
      AbstractMap.SimpleEntry<JSONArray, GenericArrayTypeImpl> abstractMap_SimpleEntry0 = JSON.parseObject(charArray0, 93, (Type) class0, featureArray0);
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      AbstractMap.SimpleEntry<JSONArray, GenericArrayTypeImpl> abstractMap_SimpleEntry0 = JSON.parseObject((char[]) null, 93, (Type) class0, featureArray0);
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      JSON.getMixInAnnotations((Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.68", parserConfig0, 35);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.AutoCloseSource;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableCircularReferenceDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SupportArrayToBean;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseBigDecimal;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.ErrorOnEnumNotMatch;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.SortFeidFastMatch;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.NonStringKeyAsString;
      featureArray0[7] = feature7;
      JSON.parseObject("", (Type) null, parserConfig0, (ParseProcess) null, 450, featureArray0);
      Class<JSONObject> class0 = JSONObject.class;
      JSONObject jSONObject1 = jSONObject0.toJavaObject(class0);
      assertEquals(0, jSONObject1.size());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      JSON.getMixInAnnotations(genericArrayTypeImpl0);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowArbitraryCommas;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableCircularReferenceDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.ErrorOnEnumNotMatch;
      featureArray0[3] = feature3;
      JSON.parseObject((char[]) null, 1, (Type) null, featureArray0);
      JSONObject jSONObject0 = new JSONObject(1, false);
      JSONObject jSONObject1 = jSONObject0.fluentPut("mm8iI>SGw", feature3);
      jSONObject1.getShortValue("HGc");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[7] = serializerFeature7;
      byte[] byteArray0 = JSON.toJSONBytes((Object) feature3, serializerFeatureArray0);
      assertEquals(21, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, 20, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("fase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSON.parseArray((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(35);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("E+:e@I,N%T&]K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
