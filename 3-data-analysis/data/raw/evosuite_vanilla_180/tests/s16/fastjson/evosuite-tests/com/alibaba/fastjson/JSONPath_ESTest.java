/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 21:09:23 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.time.chrono.MinguoDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Object object0 = JSONPath.eval((Object) hashMap0, "/stackTrace/12");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("lenb7tYh");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      boolean boolean0 = jSONPath0.set((Object) hashMap0, (Object) "lenb7tYh", true);
      assertFalse(hashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long((-65L));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/stackTrace/0";
      stringArray0[1] = "/stackTrace/0";
      stringArray0[2] = "/stackTrace/11";
      stringArray0[3] = "/stackTrace/0";
      stringArray0[4] = "c";
      stringArray0[5] = "/stackTrace/11";
      stringArray0[6] = "$<pAldNi-rpi[L}Y ";
      stringArray0[7] = "$<pAldNi-rpi[L}Y ";
      stringArray0[8] = "$<pAldNi-rpi[L}Y ";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = JSONPath.set((Object) long0, "/stackTrace/11", (Object) jSONPath_MultiPropertySegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-188), (-188), (-188));
      Integer integer0 = new Integer(93);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "%", integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("getBeanContext");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3174, 0, 1085);
      SQLDataException sQLDataException0 = new SQLDataException();
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "ndSQ,{1^", sQLDataException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(";Ljava/lang/Object;I)Z");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("Ljava/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("E3A8Wr>m|vk<7HVAl!");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("z");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0US0_?+G");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" ine ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}[D+m2kR");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("Sb$");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      assertSame(jSONPath_NullSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("bLddIpu(]I$l}n");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      assertSame(jSONPath_NotNullSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("gRAw");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(12, true, true, (-743), (-478));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A";
      stringArray0[1] = ".([_S;c$uCe_1=~";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(dataTruncation0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Feature[] featureArray0 = new Feature[8];
      // Undeclared exception!
      try { 
        JSONPath.extract("u", "com.alibaba.fastjson.JSONPath$IntInSegement", (ParserConfig) null, (-2104), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[e");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("4~bZAr<qRwu");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("b2'");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("8S7#`2nbFOM%");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.safeMode", "CjV", false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3506));
      JSONPath jSONPath0 = JSONPath.compile("Z9AWv3*qG7c_o0s/6.8");
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath_ValueSegment0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("w");
      jSONPath0.init();
      assertEquals("w", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-0=\"");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Short short0 = new Short((short)7);
      jSONPath0.deepGetPropertyValues(short0, arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("DPt=");
      Float float0 = new Float(0.75F);
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, float0, "DPt=");
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("G", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation((-2584), true, false, (-2584), (-2584));
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("fastjson.parser.deny", jSONPath_KeySetSegment0, jSONPath_Operator0);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeSupport", "3Q", dataTruncation0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, dataTruncation0, sQLDataException0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[e");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("bLddIpu(]I$l}n");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("bLddIpu", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$IntOpSegement");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('C');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("4~bZAr<qRwu");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("<_0=OB;:JnUhiz#+uD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<_0=OB;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/12");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('g');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'g, but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5");
      JSONPath jSONPath0 = JSONPath.compile("5");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(34);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_JSONPathParser0, jSONPath_ArrayAccessSegment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(996);
      JSONPath jSONPath0 = new JSONPath("\":", serializeConfig0, (ParserConfig) null);
      SQLDataException sQLDataException0 = new SQLDataException("stackTrace");
      LinkedHashSet<MockCalendar> linkedHashSet0 = new LinkedHashSet<MockCalendar>(110);
      LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashSet0);
      jSONPath0.deepScan(sQLDataException0, "\":", linkedList0);
      assertEquals("java.sql.SQLDataException: stackTrace", sQLDataException0.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NOT_RLIKE";
      stringArray0[1] = "}@QZmH;]Y1XTO";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(47);
      JSONPath jSONPath0 = new JSONPath(":%Gq|TFX^0");
      String string0 = jSONPath0.toJSONString();
      assertEquals("\":%Gq|TFX^0\"", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("r)W'##r; ys*-s&w[[#", ";3bR)6]I)lf", 265, sQLTransientConnectionException0);
      int int0 = JSONPath.size((Object) sQLRecoverableException0, "com");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("CM\"SUv3/l");
      boolean boolean0 = jSONPath0.setPropertyValue("CM\"SUv3/l", "CM\"SUv3/l", 6390L, "CM\"SUv3/l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      boolean boolean0 = JSONPath.set((Object) "z", "d", (Object) propertyNamingStrategy0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = JSONPath.read("\r", "7G4!X|xf0/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double((-65.0));
      Set<?> set0 = JSONPath.keySet((Object) double0, "GT");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/5");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, sQLNonTransientConnectionException0);
      Set<?> set0 = jSONPath0.keySet((Object) sQLSyntaxErrorException0);
      assertNotNull(set0);
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("c0");
      Object object0 = jSONPath0.getPropertyValue(jSONPath0, "c0", (-109L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("V/n", serializeConfig0, parserConfig0);
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("58]B00hy{AbF?phl");
      Class<JSONPath.MultiPropertySegment> class0 = JSONPath.MultiPropertySegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("x");
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("between");
      Class<UUID> class0 = UUID.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("wHQqlx");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("`$&xCmJDs");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      int int0 = jSONPath0.evalSize(jSONPath_Segment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("MY`JpPu$");
      int int0 = jSONPath0.evalSize("MY`JpPu$");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("c0");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      int int0 = jSONPath0.evalSize(jSONPath_Operator0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("58]B00hy{AbF?phl");
      MockDate mockDate0 = new MockDate(0);
      Set<?> set0 = jSONPath0.evalKeySet(mockDate0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath jSONPath0 = new JSONPath("month");
      Set<?> set0 = jSONPath0.evalKeySet(bigDecimal0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_Y");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("g0l9_-HhBh", "H,<Ss7p9GmG", 54);
      Set<?> set0 = jSONPath0.evalKeySet(sQLTransientConnectionException0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ArrayList arrayList0 = (ArrayList)JSONPath.eval((Object) sQLTimeoutException0, "*");
      assertEquals(7, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("x");
      Vector<Object> vector0 = new Vector<Object>(24);
      Object object0 = jSONPath0.eval((Object) vector0);
      assertFalse(vector0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MinguoDate minguoDate0 = MockMinguoDate.now();
      int int0 = JSONPath.compare(minguoDate0, minguoDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      int int0 = JSONPath.compare(bigInteger0, bigInteger1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        JSONPath.size((Object) class0, "@@i<w7H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("2");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("2", serializeConfig0, parserConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("lb~x,D%Dx!)F*]", "fastjson.parser.deny", 274, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) sQLRecoverableException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.)SONPath$MultiPropertySegment");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "com.alibaba.fastjson.)SONPath$MultiPropertySegment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. com.alibaba.fastjson.)SONPath$MultiPropertySegment
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" .xp>", "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", (-1535));
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9", serializeConfig0, parserConfig0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(class0, " .xp>", (-1535), sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("x6RGC[?\",[B");
      // Undeclared exception!
      jSONPath0.setPropertyValue(jSONPath0, "C1z;q#=+/H;", 26, "C1z;q#=+/H;");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/7");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(propertyNamingStrategy0, "!Bo#=", (-1615L), "/stackTrace/7");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("packages");
      Byte byte0 = new Byte((byte) (-85));
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "pA", 3297575290085482416L, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-0=\"");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 0, "-0=\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      JSONPath.set((Object) locale0, "IN", (Object) jSONPath_MultiIndexSegment0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("deny");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("I_VdO3?`88A'(Vy:1 ", "deny");
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) sQLTransactionRollbackException0, false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Am|z0/ p695CD>");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) propertyNamingStrategy0, (Object) jSONPath_WildCardSegment0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("between");
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) "between");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("[.vTN@tF;", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "com.alibaba.fastjson.JSONPath$IntInSegement", (Object) serializeConfig0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntInSegement");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("u", "u", 9);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "u", (Object) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(46);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("]RcQ'", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "]RcQ'", (Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ]RcQ'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ObjectSerializer objectSerializer0 = serializeConfig0.getObjectWriter(class0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com.alibaba.fastjson.serializer.PrimitiveArraySerializer";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(objectSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_WildCardSegment0, "com.alibaba.fastjson.serializer.BeforeFilter", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("!wz3s#m+v1");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigDecimal0, "w={7\"O0~M}o0", false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONPath jSONPath0 = new JSONPath("/beanInfo/creatorConstructor/parameters/0");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(propertyNamingStrategy0, "/beanInfo/creatorConstructor/annotatedReturnType", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.util.FieldInfo", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue("com.alibaba.fastjson.util.FieldInfo", "com.alibaba.fastjson.util.FieldInfo", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("EU%,A+,VO,", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, 200);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("B");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "D:");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) map0, "gRAw");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("IOF~>@HbJ<c", "[.vTN@tF;");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      SQLWarning sQLWarning0 = new SQLWarning("||$", "moduleVersion", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLWarning0, "[.vTN@tF;");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Short short0 = new Short((short)39);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) short0, "@");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_Y");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_RLIKE");
      Class<JSONPath.MultiPropertySegment> class0 = JSONPath.MultiPropertySegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      jSONPath0.remove((Object) javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("util", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = new BigDecimal((-811277319855450459L));
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) bigDecimal0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath.read((String) null, "");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.ga.populationlimit");
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) sQLTransientConnectionException0, "1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("2");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(33);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("wHQqlx");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("I<<ax(d=");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      jSONPath0.keySet((Object) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.)SONPath$MultiPropertySegment");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" +y-8y\"wX\"ctvYN.9F");
      jSONPath0.init();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("null]", (SerializeConfig) null, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      JSONPath jSONPath0 = new JSONPath("?if505");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(class0, "?if505", 3472L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.shaded.org.hamcrest");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("gRAw");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(109);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, (ParserConfig) null);
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("!?t>`9");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("!?t>`9", 163);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract("/stackTrace/3", "/stackTrace/3", parserConfig0, 56, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("get", "get", parserConfig0, 120, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract("-", "-", parserConfig0, 12, featureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("=Axj*_i5", "=Axj*_i5", parserConfig0, 1583, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3=Axj*_i5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "F}g:BiUI*|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%");
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23, 93);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.)SONPath$MultiPropertySegment");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.)SONPath$MultiPropertySegment");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2com.alibaba.fastjson.)SONPath$MultiPropertySegment
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "\"", "2");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("1");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("1", "getSymbolTable");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("!?t> 9");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("!?t> 9", "!?t> 9");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. !?t> 9
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer integer0 = new Integer(99);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(integer0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath jSONPath0 = JSONPath.compile("between");
      Short short0 = new Short((short)1038);
      // Undeclared exception!
      jSONPath0.deepSet(bigInteger0, "between", 1373108974232286686L, short0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(996);
      JSONPath jSONPath0 = new JSONPath("\":", serializeConfig0, (ParserConfig) null);
      Float float0 = new Float((double) 996);
      Class<Byte> class0 = Byte.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(float0, "userTypeDeser", 996, javaBeanSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("<f", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(parserConfig0, "Lw|h7F=c#G]*K\"", (-1010L), date0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path <f, segement Lw|h7F=c#G]*K\"
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("}@QZmH;]Y1XTO");
      Class<Calendar> class0 = Calendar.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(javaBeanSerializer0, "]}?U}?(F0", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-0=\"");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("w]]=D3j5c/!B eb", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("/stackTrace/4", "-", 1498);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/stackTrace/4", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) sQLFeatureNotSupportedException0, "-", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double(2085.90776);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) double0, (String) null, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9");
      SerializeConfig serializeConfig0 = new SerializeConfig(997);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) jSONPath_WildCardSegment0, (Object) serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("sb", (SerializeConfig) null, parserConfig0);
      Double double0 = new Double((-2450));
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(";Ljaa/lang/Object;C)C", true);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "sb", (Object) null);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) double0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("c0");
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) jSONPath0, "A*`~|?j'.7JQUELa9<;");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "9");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "sb);|6Hsg";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("sb);|6Hsg", "sb);|6Hsg", "sb);|6Hsg", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("sb);|6Hsg");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_MatchSegement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : sb);|6Hsg
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("9");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement(".=B\"tDM");
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_NotNullSegement0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J", 6);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/stackTrace/0";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(defaultJSONParser0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Wu`:x`N~X(fQ>K4");
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("T_4>z", sQLDataException0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLTimeoutException0, "r'uFm", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath jSONPath0 = new JSONPath("_Y");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("_Y", true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_Operator0, aSMDeserializerFactory0);
      assertEquals("_Y", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("x");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("B[1b10f9>QV6dh%n", false);
      jSONPath0.deepSet((Object) null, "u", (-1407L), jSONPath_PropertySegment0);
      assertEquals("x", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("jWbX?)M");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, jSONPath0, 15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("get", "get", intArray0);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("get", false);
      JSONPath jSONPath0 = JSONPath.compile("get");
      jSONPath_PropertySegment0.setValue(jSONPath0, batchUpdateException0, jSONPath_MultiIndexSegment0);
      assertEquals("get", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("2", "2", true);
      JSONPath jSONPath0 = new JSONPath("2");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("L$E..J{$Wva", false);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, jSONPath_RlikeSegement0, jSONPath_RlikeSegement0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/asmFactory/classLoader/parent/classLoader/parent/packages/sun.util.resources.it");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(10, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(804);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("H,<Ss7`/9GmGR");
      JSONPath.set((Object) jSONPath_JSONPathParser0, "JLC<X(!;", (Object) jSONPath_ArrayAccessSegment0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("KnlM*P.4*q10`)&8|");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("KnlM*P.4*q10`)&8|", "KnlM*P.4*q10`)&8|");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("value is null", sQLIntegrityConstraintViolationException0);
      jSONPath0.containsValue((Object) sQLIntegrityConstraintViolationException0, (Object) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" error, value : ");
      jSONPath_JSONPathParser0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(694L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      Double double0 = new Double((-2994.0));
      Integer integer0 = new Integer(59);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) integer0, (Object) double0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(13, false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$JSONPathParser", serializeConfig0, parserConfig0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeSupport", "fastjson.parser.safeMode", "fastjson.parser.deny", (String[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      Byte byte0 = new Byte((byte)99);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_FilterSegment0, (Object) byte0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bX\u0005.CjV!~<bv(`=");
      SQLDataException sQLDataException0 = new SQLDataException("evalKeySet error : ", "null");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLDataException0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_MaxSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/12", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(63, 63, 63);
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$KeySetSegment", (SerializeConfig) null, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ggXRY.,");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1043, true);
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/5");
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) serializeConfig0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path /cause/stackTrace/5
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(I)Ljava/lang/Enum;");
      String[] stringArray0 = new String[0];
      jSONPath0.arrayAdd((Object) "(Ljava/util/Collection;", (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("c0");
      boolean boolean0 = jSONPath0.contains((Object) "c0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntOpSegement");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`W+f[Z");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%");
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23, 93);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("parser");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // (
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("javax.xml.datatype.XMLGregorianCalendar");
      Object object0 = jSONPath0.eval((Object) "javax.xml.datatype.XMLGregorianCalendar");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("idJZ}@A$g(%CfcPc 0V");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0US0_?+G");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      JSONPath jSONPath0 = JSONPath.compile("BF0e");
      SQLWarning sQLWarning0 = new SQLWarning("H,<Ss7p9GmG", "X#`C!Z_>c6<];T}T$$");
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("", 6607618197526598121L, jSONPath_Operator0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(131072);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove((JSONPath) null, jSONPath_IntOpSegement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/beanInfo/creatorConstructor/annotatedParameterTypes");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-10));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, jSONPath0, "/beanInfo/creatorConstructor/annotatedParameterTypes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "get";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("get", stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("1");
      String[] stringArray0 = new String[0];
      JSONPath jSONPath1 = (JSONPath)JSONPath.reserveToObject(jSONPath0, stringArray0);
      assertEquals("1", jSONPath1.getPath());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.shaded.org.hamcrest";
      stringArray0[1] = "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.shaded.org.hamcrest";
      stringArray0[2] = "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.shaded.org.hamcrest";
      stringArray0[3] = "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.shaded.org.hamcrest";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(fileSystemHandling0, stringArray0);
      assertEquals(4, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("\"", stringArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(");
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(46);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("]RcQ'", serializeConfig0, parserConfig0);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      Set<?> set0 = jSONPath0.evalKeySet(map0);
      assertFalse(set0.contains("]RcQ'"));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("z", serializeConfig0, parserConfig0);
      Double double0 = new Double((-798.897225));
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(57, 14, 1001);
      Object object0 = JSONPath.reserveToArray(serializeConfig0, (String[]) null);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, double0, object0);
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("_AS\"nA>^[Ss");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("NOXT_RLIKE", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLClientInfoException0, "_AS\"nA>^[Ss", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=}!dDZgHg");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      boolean boolean0 = jSONPath0.removePropertyValue(hashMap0, "XeY=3M", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLTransientException0, "/stackTrace/11", (Object) jSONPath_MinSegment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("NE", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jSONPath0.deepSet(parserConfig0, "Lw|h7F=c#G]*K\"", (-1010L), date0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath jSONPath0 = JSONPath.compile("~%B2ABc2Ui<`va");
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("(", "(", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path ~%B2ABc2Ui<`va, segement (
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("deny");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONPath0);
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepScan(linkedList0, "'", vector0);
      assertFalse(linkedList0.contains("'"));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("c0");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "c0");
      jSONPath0.deepScan(linkedList0, "h;Zv [_", linkedList0);
      assertEquals("c0", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("/sT%&tackTrace,13");
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, (Object) null, (Object) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("@type", "1.2.68");
      jSONPath0.deepScan(hashMap0, "illegal", jSONArray0);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = JSONPath.remove((Object) mockGregorianCalendar0, "/stackTrace/0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("$<pAldNi-rpi[L}Y ", 4647432019745535567L, 4647432019745535567L, false);
      JSONPath jSONPath0 = new JSONPath("$<pAldNi-rpi[L}Y ");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath_Operator0, jSONPath0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(57, true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.shaded.org.hamcrest", serializeConfig0, parserConfig0);
      long[] longArray0 = new long[3];
      SQLDataException sQLDataException0 = new SQLDataException("z9^}+_H*%/M*>+HL5", "icInSH_Zs", 57);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.deny.internal", "B>c8@i^3On4EiKHk7", 57, sQLDataException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$NullSegement", "not support jsonpath : ", 165, longArray0, sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      boolean boolean0 = jSONPath0.set((Object) serializeConfig0, (Object) sQLRecoverableException0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(4944);
      Double double0 = new Double(3);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Double double0 = new Double((-2994.0));
      BigDecimal bigDecimal0 = new BigDecimal(161);
      boolean boolean0 = JSONPath.eq(double0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Float float0 = new Float((-1976.0F));
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Float float0 = new Float(3965.0F);
      Short short0 = new Short((short)101);
      boolean boolean0 = JSONPath.eqNotNull(float0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-65));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(byte0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(989, 3089);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Integer integer0 = new Integer(951);
      boolean boolean0 = JSONPath.eqNotNull(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, (byte)16);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Short short0 = new Short((short)139);
      Double double0 = new Double((short)139);
      boolean boolean0 = JSONPath.eq(short0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("scanTypeName", (Throwable) null);
      boolean boolean0 = JSONPath.eq(sQLFeatureNotSupportedException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      boolean boolean0 = JSONPath.eq((Object) null, batchUpdateException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "com.alibaba.fastjson.JSONPath$JSONPathParser");
      boolean boolean0 = JSONPath.eq(sQLTransactionRollbackException0, sQLTransactionRollbackException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("wHD')iQ~D[)");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wHD')iQ~D[)");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(jSONReaderScanner0, arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // sun.util.calendar.ZoneInfo
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ggXRY.,");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(map0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLTimeoutException0, arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("/stackTrace/12");
      Collection<Object> collection1 = jSONPath0.getPropertyValues(collection0);
      assertSame(collection0, collection1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(46);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("]RcQ'", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues("]RcQ'");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(43);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("}", serializeConfig0, parserConfig0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Object object0 = JSONPath.reserveToArray(" Ic6q4[gLL<{1", (String[]) null);
      JSONPath jSONPath0 = new JSONPath("L3Si8l~6");
      boolean boolean0 = jSONPath0.removeArrayItem(jSONPath0, object0, 1273);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/0");
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/0");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLClientInfoException0, (Object) jSONPath_JSONPathParser0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = JSONPath.compile("-0=\"");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath_MinSegment0, 3071, jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$MinSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 92, (-1374));
      JSONPath jSONPath0 = JSONPath.compile("<_0=OB;:JnUhiz#+uD");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[ypPA0w2", "(B)Ljava/lang/Byte;", 92);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "[ypPA0w2", sQLTimeoutException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Sb$");
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) bigInteger0, serializeConfig0);
      jSONPath0.getArrayItem(map0, (-1903));
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ggXRY.,");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = jSONPath0.getArrayItem(arrayList0, (-1898));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("B");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("z9C@@*");
      SQLWarning sQLWarning0 = new SQLWarning("iYqsH5\"Mk", sQLNonTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLWarning0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("<rd)rE?HmKzTmf:c4G");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLClientInfoException0, jSONPath_SizeSegment0);
      assertSame(object0, jSONPath_SizeSegment0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/5");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/cause/stackTrace/5", jSONPath_Operator0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("hdnAEr", "/cause/stackTrace/5", 1043);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLRecoverableException0, jSONPath_MultiIndexSegment0);
      assertSame(object0, jSONPath_MultiIndexSegment0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 5751393439502795295L, 358L, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", jSONPath_ArrayAccessSegment0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("!wz3s#m+v1", 5751393439502795295L, 5751393439502795295L, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      JSONPath jSONPath0 = new JSONPath("-i;@RKXUUJgA!X");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, jSONPath0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("oL{U6GP\"T!");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("Z", serializeConfig0, parserConfig0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, sQLTransientException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      JSONPath jSONPath0 = JSONPath.compile("mYj_fPs74I,&G&Kq&qf");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("(I)Ljava/lang/Enum;");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLIntegrityConstraintViolationException0, "\"j9lKQ&P~NV.N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("x");
      SerializeConfig serializeConfig0 = new SerializeConfig(8);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, serializeConfig0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("puarser", 542L, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("puarser");
      SQLWarning sQLWarning0 = new SQLWarning("puarser", "wC|", (Throwable) null);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "puarser", sQLWarning0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("5E\"B", "5E\"B", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      Object object0 = jSONPath_FilterSegment0.eval((JSONPath) null, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("XeY=3eM");
      Pattern pattern0 = Pattern.compile("Kq");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("XeY=3eM", pattern0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath0, pattern0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("bLddIpu(]I$l}n", "':", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("%", serializeConfig0, (ParserConfig) null);
      SQLException sQLException0 = new SQLException("DeA98ULhoCi");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("DeA98ULhoCi", "bLddIpu(]I$l}n", 124, sQLException0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, serializeConfig0, jSONPath_MultiIndexSegment0, sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("org");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("org", "org", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "org", (Object) null, "org");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("org");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("arg", "org", true);
      Integer integer0 = new Integer(45);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, integer0, "org", "org");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-0=\"");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("qvR%!", "-0=\"", true);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("-0=\"", true);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "qvR%!", jSONPath_RlikeSegement0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, sQLTransientException0, jSONPath_WildCardSegment0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "sb);|6Hsg";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("sb);|6Hsg", "sb);|6Hsg", "sb);|6Hsg", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("sb);|6Hsg");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "sb);|6Hsg", "sb);|6Hsg", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeAccept", "", (String) null, (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("B", (String) null, "B", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("illegal str, ", 1.0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("illegal str, ");
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, "illegal str, ", jSONPath0, "illegal str, ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      SerializeConfig serializeConfig0 = new SerializeConfig(3386);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("(", (-109L), jSONPath_Operator0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(587);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, serializeConfig0, jSONPath_SizeSegment0, jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/asmFactory/classLoader/defaultDomain/codesource", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = new JSONPath("~/x7N16o");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(36, 36, 36);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_RangeSegment0, ";Ljaa/lang/Object;C)C");
      assertEquals(";Ljaa/lang/Object;C)C", object0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONPath jSONPath0 = new JSONPath("can not cast to byte[], value : ");
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("xe/8O-$", stringArray0, true);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Long long0 = new Long(2147483647L);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath_SizeSegment0, "com.alibaba.fastjson.JSONPath$KeySetSegment", long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".{e";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement(".{e", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = new JSONPath("NOXT_RLIKE");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, mockGregorianCalendar0, ".{e");
      assertEquals(".{e", object0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(":%Gq|TFX^0");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long[] longArray0 = new Long[2];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(":%Gq|TFX^0", longArray0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("getMethodType");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, linkedList0, sQLTransientConnectionException0, map0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(":%Gq|TFX^0");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(47);
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(":%Gq|TFX^0", longArray0, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(":%Gq|TFX^0");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, linkedList0, sQLTransientConnectionException0, map0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(":%Gq|TFX^0");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long[] longArray0 = new Long[2];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(":%Gq|TFX^0", longArray0, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(":%Gq|TFX^0");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, linkedList0, sQLTransientConnectionException0, map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SerializeConfig serializeConfig0 = new SerializeConfig(64, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("\"", serializeConfig0, parserConfig0);
      Long[] longArray0 = new Long[3];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("step must greater than zero : ", longArray0, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"");
      SQLWarning sQLWarning0 = new SQLWarning("s", sQLTransientConnectionException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, sQLWarning0, longArray0[1], linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("get");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("get");
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/cause/stackTrace/9", (long[]) null, false);
      SQLDataException sQLDataException0 = new SQLDataException("get", "x|!$nbY+p7p", 37, sQLTransactionRollbackException0);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, sQLDataException0, "get", sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SerializeConfig serializeConfig0 = new SerializeConfig(64, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("\"", serializeConfig0, parserConfig0);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.parser.autoTypeSupport", (long[]) null, true);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, "\"", (Object) null, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V", aSMDeserializerFactory0, false);
      JSONPath jSONPath0 = new JSONPath("(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V", false);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V", classLoader0, jSONPath_PropertySegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("w");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(35, (-1915), (-1792));
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("w", jSONPath_RangeSegment0, true);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "w", (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("G!vXUenQo^;\"vR", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("jWbX?)M");
      JSONPath jSONPath0 = new JSONPath("jWbX?)M");
      Long long0 = new Long((-701L));
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, long0, jSONPath0, "jWbX?)M");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("jP1PC+");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("K}dAi5u@ts");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath0, jSONPath_FilterSegment0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/0");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/stackTrace/0");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("gQB");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(989, 1224736769, 1224736769);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "gQB", "gQB");
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2034, (-3751), 2034);
      JSONPath jSONPath0 = JSONPath.compile("`(u& Y:30u`");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("y<3j*? JY", "(", 64);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, sQLNonTransientConnectionException0, sQLTimeoutException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3639), 1996, (-3639));
      JSONPath jSONPath0 = JSONPath.compile("Uq{I[i7d^vVk0MIB9W");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("5$", "fC2PdvYFm&4", 1996);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, ":", sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1765), (-2070), 36);
      JSONPath jSONPath0 = JSONPath.compile("R*Se@}UeeI!n1g.O");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLRecoverableException0, "R*Se@}UeeI!n1g.O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract(" +y-8y\"wX\"ctvYN.9F", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[ypPA0w2", "lentJh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[ypPA0w2
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(46);
      // Undeclared exception!
      try { 
        JSONPath.compare(serializeConfig0, serializeConfig0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.serializer.SerializeConfig cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.)SONPath$MultiPropertySegment");
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath0, uUID0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.JSONSerializableSerializer");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      MockDate mockDate0 = new MockDate((-1953), (-1953), (-556), (-556), (-556), (-556));
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath0, mockDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\",+<|1(N%vGZ ntyIS");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Double double0 = new Double(13.71721003);
      boolean boolean0 = JSONPath.remove((Object) double0, "/asmFactory/classLoader/parent/classLoader/parent/domains/0/codesource");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. -
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("gQB", "Qf8faaJ?8C[]IC_");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2gQB
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("can not cast to byte[], value : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("e2<[:[@1L@");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'w'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("DBRf=~e&t@=4");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nin
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'}~f9+a");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but 'a'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/8'3#>@vpj");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(6508908997418063466L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9LS");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(3089L);
      assertEquals(3098.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Oi=+e+A{-yCXs!");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("WZb[#TtcV,");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("()F\"aru}MyIL3%|5.g&");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("]RcQ'");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("b><u'?Hp2");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[W]r-aw");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '), but 'r'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@o%pz");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 'o'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("/stackTrace/12");
      SerializeConfig serializeConfig0 = new SerializeConfig(91);
      Map<String, Object> map0 = JSONPath.paths((Object) collection0, serializeConfig0);
      assertEquals(17, map0.size());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      SerializeConfig serializeConfig0 = new SerializeConfig(64, true);
      Map<String, Object> map1 = JSONPath.paths((Object) map0, serializeConfig0);
      assertEquals(29, map1.size());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) serializeConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "*", (Object) jSONPath_SizeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) uUID0, "fastjson.parser.deny", (Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("V/n", (-2962L), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("gRAw");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4";
      stringArray0[1] = "gRAw";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "4", jSONPath_IntOpSegement0);
      boolean boolean0 = jSONPath0.set((Object) arrayList0, (Object) arrayList0);
      assertEquals(2, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Float float0 = new Float((-1.58038606568347264E18));
      boolean boolean0 = JSONPath.set((Object) ";", ";", (Object) float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("toString");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) "toString");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) linkedList0, "org");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("EW");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.JSONPath$KeySetSegment", "com.alibaba.fastjson.JSONPath$KeySetSegment", sQLTimeoutException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransactionRollbackException0);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLSyntaxErrorException0, ";", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Object[] objectArray0 = new Object[4];
      JSONPath.arrayAdd((Object) sQLClientInfoException0, "*", objectArray0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "*", "kotlin.jvm.internal.DefaultConstructorMarker", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path kotlin.jvm.internal.DefaultConstructorMarker
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.shaded.org.hamcrest");
      Object[] objectArray0 = new Object[5];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) serializeConfig0, (Object[]) null);
      assertTrue(serializeConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("h/urs");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("B");
      int int0 = jSONPath0.size((Object) "B");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("J");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      int int0 = jSONPath0.size((Object) "(");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("*", sQLClientInfoException0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLTransactionRollbackException0, (Object) "*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("sb", "/stackTrace/9", 23);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("sb", (String) null, 23);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLSyntaxErrorException0, (Object) sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      boolean boolean0 = jSONPath0.containsValue((Object) serializeConfig0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("lenb7tYh");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("lenb7tYh", "lenb7tYh", 5040);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lenb7tYh";
      stringArray0[1] = "lenb7tYh";
      stringArray0[2] = "VSP{@){L[5(I-2/_`";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("nP");
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, sQLFeatureNotSupportedException0);
      boolean boolean0 = jSONPath0.contains((Object) arrayList0);
      assertFalse(boolean0);
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("<<.Mp&T:");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("]RcQ'", "fastjson.parser.deny");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Object object0 = JSONPath.extract("]Z\"Ya>^s.l_mU@K3X7", "gQB");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("B");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("R\",dQ%>jljpK");
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) "R\",dQ%>jljpK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("1");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("get");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(804);
      JSONPath jSONPath0 = new JSONPath("*");
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_ArrayAccessSegment0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("ikJCe6", serializeConfig0, parserConfig0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Short short0 = new Short((short)9);
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, short0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("H,<Ss7`/9GmGR");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals(',', char0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackT4afe/0");
      JSONPath jSONPath0 = JSONPath.compile("/stackT4afe/0");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean0 = jSONPath0.set((Object) sQLClientInfoException0, (Object) jSONPath_JSONPathParser0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("9");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(54, false, true, 54, 1430);
      Set<?> set0 = JSONPath.keySet((Object) dataTruncation0, "/stackTrace/8");
      assertFalse(set0.contains("/stackTrace/8"));
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int[] intArray0 = new int[3];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      stringArray0[2] = "2";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_MultiIndexSegment0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = JSONPath.compile("-0=\"");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("/", "/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2435, 2435, 40);
      JSONPath jSONPath0 = new JSONPath("_asm_flag_");
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath0, "_asm_flag_", (Object) jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int int0 = JSONPath.size((Object) "#*n\"n", "~");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.JSONSerializableSerializer");
      String string0 = jSONPath0.getPath();
      assertEquals("com.alibaba.fastjson.serializer.JSONSerializableSerializer", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("c*");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("$<pAldNi-rpi[L}Y ", "$<pAldNi-rpi[L}Y ");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2$<pAldNi-rpi[L}Y 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("z");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "z", "in", (Object[]) jSONPath_SegmentArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path in
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      //  // Unstable assertion: assertEquals(87, map0.size());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("XeY=3M");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("", jSONPath_MaxSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("GT", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny", "OD4Y`9v\"%H", (-773));
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, sQLDataException0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }
}
