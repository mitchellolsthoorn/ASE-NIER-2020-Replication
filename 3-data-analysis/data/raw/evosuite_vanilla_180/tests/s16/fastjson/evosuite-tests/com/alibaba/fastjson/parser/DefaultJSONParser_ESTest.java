/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 21:16:12 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.Time;
import java.text.BreakIterator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@9cu3a(");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('@', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName com.alibaba.fastjson.parser.JSONScanner@1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) defaultJSONParser0, (Object) defaultJSONParser0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, parseContext0.level);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(parseContext0);
      
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "[a}@kr-}B |0");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, parseContext0.level);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser_ResolveTask0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";s$UQ)V_,6");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 987);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("#D578kE4");
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Class<Time> class0 = Time.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 15, (-886), 0, 2875, (-2297));
      assertNotNull(mockGregorianCalendar0);
      
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockGregorianCalendar0, (Object) class0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, parseContext0.level);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=15,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-886,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2875,SECOND=-2297,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(parseContext0);
      
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) pageAttributes0, (Object) pageAttributes0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, parseContext1.level);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(parseContext1);
      assertNotSame(parseContext1, parseContext0);
      assertFalse(parseContext1.equals((Object)parseContext0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7", parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      ArrayList<RuleBasedCollator> arrayList0 = new ArrayList<RuleBasedCollator>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual int, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ;, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Class<Time> class0 = Time.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      Month month0 = Month.SEPTEMBER;
      assertEquals(Month.SEPTEMBER, month0);
      
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(month0, jSONReaderScanner0, parserConfig0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser1.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser1.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser1.getDateFomartPattern());
      assertNotNull(defaultJSONParser1);
      assertFalse(defaultJSONParser1.equals((Object)defaultJSONParser0));
      
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".C~IZ");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698);
      assertEquals(2, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertEquals(2, charArray0.length);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(defaultJSONParser0);
      
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Type[] typeArray0 = new Type[9];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".Vf$XSsB?s7XxGk&/z`", parserConfig0, (-2927));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ., pos 1, line 1, column 2.Vf$XSsB?s7XxGk&/z`
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)[[F", parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Class<MockDate> class0 = MockDate.class;
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      assertNotNull(javaObjectDeserializer0);
      
      parserConfig0.putDeserializer(class0, javaObjectDeserializer0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Long long0 = defaultJSONParser0.parseObject((Type) null);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 18);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Object object0 = defaultJSONParser0.parseKey();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 3774);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Feature feature0 = Feature.SortFeidFastMatch;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "");
      assertNotNull(defaultJSONParser_ResolveTask0);
      
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask1 = defaultJSONParser0.getLastResolveTask();
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser_ResolveTask1);
      assertSame(defaultJSONParser_ResolveTask1, defaultJSONParser_ResolveTask0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(14, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Class<Time> class0 = Time.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 0);
      assertNotNull(mockGregorianCalendar0);
      
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockGregorianCalendar0, (Object) class0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, parseContext0.level);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(14, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(parseContext0);
      
      ParseContext parseContext1 = defaultJSONParser0.getContext();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, parseContext1.level);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(14, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(parseContext1);
      assertSame(parseContext1, parseContext0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698);
      assertEquals(2, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertEquals(2, charArray0.length);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(defaultJSONParser0);
      
      defaultJSONParser0.setConfig((ParserConfig) null);
      assertEquals(2, charArray0.length);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      ParserConfig parserConfig1 = defaultJSONParser0.getConfig();
      assertEquals(2, charArray0.length);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNull(parserConfig1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)[[F", parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      defaultJSONParser0.parseObject((Object) defaultJSONParser0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 669);
      assertEquals(1, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      assertEquals(1, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      defaultJSONParser0.parseObject(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698);
      assertEquals(2, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertEquals(2, charArray0.length);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(defaultJSONParser0);
      
      defaultJSONParser0.setConfig((ParserConfig) null);
      assertEquals(2, charArray0.length);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l-jG4=");
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2l-jG4=
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("clazz");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra("clazz", "clazz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - l, info : pos 1, line 1, column 2clazz
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '[');
      assertEquals(2, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertEquals(2, charArray0.length);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Class<BigInteger> class0 = BigInteger.class;
      HashSet<Time> hashSet0 = new HashSet<Time>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      TreeSet<Time> treeSet0 = new TreeSet<Time>(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      defaultJSONParser0.parseArray((Class<?>) class0, (Collection) treeSet0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[a}@kr-}B |0", parserConfig0, (-2904));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      defaultJSONParser0.parseArray(class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", (-1777));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-1777), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals((-1777), jSONReaderScanner0.getFeatures());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      jSONReaderScanner0.bp = (-889275714);
      assertEquals((-1777), jSONReaderScanner0.getFeatures());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Object object0 = defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals((-1777), jSONReaderScanner0.getFeatures());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-SEc", parserConfig0, 90);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}Z>#4ga;<Cj");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}Z>#4ga;<Cj", jSONScanner0, parserConfig0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(13, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "fastjson.parser.autoTypeAccept", (Object) "}Z>#4ga;<Cj");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, parseContext0.level);
      assertEquals(13, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(parseContext0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.getObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";s$UQ)V_,6", parserConfig0, 24180);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      defaultJSONParser0.close();
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'x';
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig0, (-884));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      char[] charArray0 = new char[0];
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig0, 23);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 2, parserConfig0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport", parserConfig0, (-2927));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null, parserConfig0, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("syntax error :", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny.internal");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")?:8!s2S64");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(')', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.bp = (-2349);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(')', jSONScanner0.getCurrent());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONScanner0, parserConfig0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IdentityHashMap<StringCharacterIterator, Properties> identityHashMap0 = new IdentityHashMap<StringCharacterIterator, Properties>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(identityHashMap0, (JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nSVw1Wx");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[1];
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698, '\u0014');
      assertEquals(1, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONReaderScanner0, parserConfig0);
      assertEquals(1, charArray0.length);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}Z>#4ga;<Cj");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", jSONScanner0, parserConfig0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(13, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2}Z>#4ga;<Cj
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null,", parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Object object0 = defaultJSONParser0.parse((Object) "null,");
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698, '(');
      assertEquals(1, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'('}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONReaderScanner0, parserConfig0);
      assertEquals(1, charArray0.length);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(10, jSONReaderScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'('}, charArray0);
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")?:8!s2S64", 810);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(810, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(class0, jSONScanner0, parserConfig0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('?', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(810, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(11, jSONScanner0.token());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2)?:8!s2S64
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T0[9`6T<9HOkGdsR");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals(1, gridBagConstraints0.gridheight);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals(10, gridBagConstraints0.anchor);
      assertNotNull(gridBagConstraints0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3T0[9`6T<9HOkGdsR
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{", parserConfig0, 5);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Date date0 = new Date(2);
      assertNotNull(date0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) date0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 117);
      assertEquals(2, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Insets insets0 = new Insets(0, 5, 39, 203);
      assertEquals(203, insets0.right);
      assertEquals(5, insets0.left);
      assertEquals(0, insets0.top);
      assertEquals(39, insets0.bottom);
      assertNotNull(insets0);
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(117, 0, (-1400), 39, 1.0, 157.7, 19, (-3126), insets0, 5, 22);
      assertEquals(203, insets0.right);
      assertEquals(5, insets0.left);
      assertEquals(0, insets0.top);
      assertEquals(39, insets0.bottom);
      assertEquals(39, gridBagConstraints0.gridheight);
      assertEquals(157.7, gridBagConstraints0.weighty, 0.01);
      assertEquals(0, gridBagConstraints0.gridy);
      assertEquals(1.0, gridBagConstraints0.weightx, 0.01);
      assertEquals(19, gridBagConstraints0.anchor);
      assertEquals((-3126), gridBagConstraints0.fill);
      assertEquals((-1400), gridBagConstraints0.gridwidth);
      assertEquals(117, gridBagConstraints0.gridx);
      assertEquals(5, gridBagConstraints0.ipadx);
      assertEquals(22, gridBagConstraints0.ipady);
      assertNotNull(gridBagConstraints0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(gridBagConstraints0, jSONReaderScanner0, parserConfig0);
      assertEquals(2, charArray0.length);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(203, insets0.right);
      assertEquals(5, insets0.left);
      assertEquals(0, insets0.top);
      assertEquals(39, insets0.bottom);
      assertEquals(39, gridBagConstraints0.gridheight);
      assertEquals(157.7, gridBagConstraints0.weighty, 0.01);
      assertEquals(0, gridBagConstraints0.gridy);
      assertEquals(1.0, gridBagConstraints0.weightx, 0.01);
      assertEquals(19, gridBagConstraints0.anchor);
      assertEquals((-3126), gridBagConstraints0.fill);
      assertEquals((-1400), gridBagConstraints0.gridwidth);
      assertEquals(117, gridBagConstraints0.gridx);
      assertEquals(5, gridBagConstraints0.ipadx);
      assertEquals(22, gridBagConstraints0.ipady);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(defaultJSONParser0);
      
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("0", parserConfig0, 2);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser1.resolveStatus);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser1.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser1.getDateFomartPattern());
      assertNotNull(defaultJSONParser1);
      assertFalse(defaultJSONParser1.equals((Object)defaultJSONParser0));
      
      Object object0 = defaultJSONParser1.parse((Object) defaultJSONParser0);
      assertEquals(2, charArray0.length);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(203, insets0.right);
      assertEquals(5, insets0.left);
      assertEquals(0, insets0.top);
      assertEquals(39, insets0.bottom);
      assertEquals(39, gridBagConstraints0.gridheight);
      assertEquals(157.7, gridBagConstraints0.weighty, 0.01);
      assertEquals(0, gridBagConstraints0.gridy);
      assertEquals(1.0, gridBagConstraints0.weightx, 0.01);
      assertEquals(19, gridBagConstraints0.anchor);
      assertEquals((-3126), gridBagConstraints0.fill);
      assertEquals((-1400), gridBagConstraints0.gridwidth);
      assertEquals(117, gridBagConstraints0.gridx);
      assertEquals(5, gridBagConstraints0.ipadx);
      assertEquals(22, gridBagConstraints0.ipady);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser1.resolveStatus);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser1.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser1.getDateFomartPattern());
      assertEquals(0, object0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(object0);
      assertNotSame(defaultJSONParser0, defaultJSONParser1);
      assertNotSame(defaultJSONParser1, defaultJSONParser0);
      assertFalse(defaultJSONParser0.equals((Object)defaultJSONParser1));
      assertFalse(defaultJSONParser1.equals((Object)defaultJSONParser0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONReaderScanner0, parserConfig0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Object object0 = defaultJSONParser0.parse((Object) "");
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 3774);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) null);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[a}@kr-}B |0");
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      ArrayDeque<HttpCookie> arrayDeque0 = new ArrayDeque<HttpCookie>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayDeque0, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[a}@kr-}B |0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[52iV[/ 0d,D9I_", parserConfig0, '\u0000');
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      HashSet<MockDate> hashSet0 = new HashSet<MockDate>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Class<Float> class0 = Float.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) hashSet0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, line 1, column 5[52iV[/ 0d,D9I_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Vector<DecimalFormatSymbols> vector0 = new Vector<DecimalFormatSymbols>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) vector0, (Object) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName []
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      ArrayDeque<ParameterizedTypeImpl> arrayDeque0 = new ArrayDeque<ParameterizedTypeImpl>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      defaultJSONParser0.checkListResolve(arrayDeque0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", 29);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(29, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(29, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      HashSet<Point> hashSet0 = new HashSet<Point>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) hashSet0, (Object) "[52iV[/ 0d,D9I_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : 1
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      char[] charArray0 = new char[10];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698);
      assertEquals(10, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertEquals(10, charArray0.length);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(defaultJSONParser0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) jSONArray0, (Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) list0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, pos 0, line 1, column 1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TreeSet", parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertNotNull(class0);
      
      LinkedHashSet<Rectangle> linkedHashSet0 = new LinkedHashSet<Rectangle>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) linkedHashSet0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, pos 7, line 1, column 8TreeSet
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[52iV[/ 0d,D9I_", parserConfig0, '\u0000');
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      LinkedHashMap<StringCharacterIterator, JSONObject> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, JSONObject>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Class<Time> class0 = Time.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.sql.Time", class1.toString());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class1, (Object) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Integer integer0 = defaultJSONParser0.parseObject((Type) null, (Object) null);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      IdentityHashMap<StringCharacterIterator, Properties> identityHashMap0 = new IdentityHashMap<StringCharacterIterator, Properties>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null,", parserConfig0, 32);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Object object0 = defaultJSONParser0.parse();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      TreeMap<MockGregorianCalendar, PageAttributes> treeMap0 = new TreeMap<MockGregorianCalendar, PageAttributes>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, line 1, column 1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      IdentityHashMap<Integer, BigInteger> identityHashMap0 = new IdentityHashMap<Integer, BigInteger>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) "{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      IdentityHashMap<StringCharacterIterator, Properties> identityHashMap0 = new IdentityHashMap<StringCharacterIterator, Properties>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null,", parserConfig0, 32);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("GuMtkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      Object object0 = defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) dateFormatSymbols0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("GuMtkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("i");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.parser.DefaultJSONParser", parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals("long", class0.toString());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2com.alibaba.fastjson.parser.DefaultJSONParser
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3@7$2\"9@VD~ o", parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      int int0 = defaultJSONParser0.getResolveStatus();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("%)(H,?YvjLn.{x");
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException((-855));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 1, line 1, column 20
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[a}@kr-}B |0", parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[a}@kr-}B |0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SMs");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "SMs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident, pos 0, fieldName SMs
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '[');
      assertEquals(2, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertEquals(2, charArray0.length);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(defaultJSONParser0);
      
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) parserConfig0);
      assertEquals(2, charArray0.length);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, parseContext0.level);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(parseContext0);
      
      Object object0 = defaultJSONParser0.resolveReference("fastjson.parser.safeMode");
      assertEquals(2, charArray0.length);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[a}6@kr-}B |0");
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 18);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      defaultJSONParser0.close();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-2927));
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".Y[`'4jh$LUsT<r", parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      assertNotNull(breakIterator0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2.Y[`'4jh$LUsT<r
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";8`o", parserConfig0, (-713));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2;8`o
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TreeSet", parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")?:8!s2S64");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONScanner0, parserConfig0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals(11, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2)?:8!s2S64
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TkW", parserConfig0, (-1));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Object object0 = defaultJSONParser0.parseKey();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals("TkW", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", 2192);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2192, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2192, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) decimalFormat0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2192, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Class<Time> class0 = Time.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 0);
      assertNotNull(mockGregorianCalendar0);
      
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockGregorianCalendar0, (Object) class0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, parseContext0.level);
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(parseContext0);
      
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser1.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser1.getDateFomartPattern());
      assertEquals(0, defaultJSONParser1.getResolveStatus());
      assertNotNull(defaultJSONParser1);
      assertFalse(defaultJSONParser1.equals((Object)defaultJSONParser0));
      
      defaultJSONParser1.setContext(parseContext0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, parseContext0.level);
      assertEquals(0, defaultJSONParser1.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser1.getDateFomartPattern());
      assertEquals(0, defaultJSONParser1.getResolveStatus());
      assertNotSame(defaultJSONParser0, defaultJSONParser1);
      assertNotSame(defaultJSONParser1, defaultJSONParser0);
      assertFalse(defaultJSONParser0.equals((Object)defaultJSONParser1));
      assertFalse(defaultJSONParser1.equals((Object)defaultJSONParser0));
      
      defaultJSONParser1.popContext();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser1.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser1.getDateFomartPattern());
      assertEquals(0, defaultJSONParser1.getResolveStatus());
      assertNotSame(defaultJSONParser0, defaultJSONParser1);
      assertNotSame(defaultJSONParser1, defaultJSONParser0);
      assertFalse(defaultJSONParser0.equals((Object)defaultJSONParser1));
      assertFalse(defaultJSONParser1.equals((Object)defaultJSONParser0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) defaultJSONParser0, (Object) defaultJSONParser0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, parseContext0.level);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(parseContext0);
      
      defaultJSONParser0.popContext();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";s$UQ)V_,6", parserConfig0, 24180);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      defaultJSONParser0.popContext();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{", parserConfig0, 5);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<ExtraTypeProvider> list1 = defaultJSONParser0.getExtraTypeProviders();
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "");
      assertNotNull(defaultJSONParser_ResolveTask0);
      
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(list0.contains(defaultJSONParser_ResolveTask0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '[');
      assertEquals(2, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '['}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertEquals(2, charArray0.length);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(14, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertArrayEquals(new char[] {'\u0000', '['}, charArray0);
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[4] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698);
      assertEquals(10, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', 'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      
      Class<Time> class0 = Time.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertEquals(10, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', 'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", (-227));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-227), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals((-227), jSONReaderScanner0.getFeatures());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '[';
      charArray0[1] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      jSONReaderScanner0.charAt(3266);
      Type[] typeArray0 = new Type[2];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // array level > 512
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[a}@kr-}B |0");
      defaultJSONParser0.setContext((Object) defaultJSONParser0, (Object) defaultJSONParser0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "[a}@kr-}B |0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[a}@kr-}B |0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      LinkedHashMap<StringCharacterIterator, JSONObject> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, JSONObject>();
      defaultJSONParser0.checkMapResolve(linkedHashMap0, linkedHashMap0);
      assertEquals(16, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)[[F");
      Properties properties0 = new Properties();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "([C)[[F", (Object) properties0);
      assertNotNull(parseContext0);
      
      Object object0 = defaultJSONParser0.getObject("fastjson.parser.safeMode");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getObject("");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO : ", 58);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("TODO : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      LinkedHashMap<StringCharacterIterator, JSONObject> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, JSONObject>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, line 1, column 2{
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.Collections$EmptyMap");
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", 29);
      Class<Integer> class0 = Integer.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error :error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<Integer> class0 = Integer.TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[52iV[/ 0d,D9I_", parserConfig0, '\u0000');
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*c8)@b4p;VL<Jwt");
      Type[] typeArray0 = new Type[8];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<Integer> class0 = Integer.TYPE;
      LinkedHashSet<ImageCapabilities> linkedHashSet0 = new LinkedHashSet<ImageCapabilities>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      defaultJSONParser0.handleResovleTask("{");
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, line 1, column 2{
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null,", parserConfig0, 32);
      Class<Boolean> class0 = Boolean.class;
      defaultJSONParser0.parseObject(class0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      Vector<Short> vector0 = new Vector<Short>();
      IdentityHashMap<JobAttributes, Point> identityHashMap0 = new IdentityHashMap<JobAttributes, Point>();
      HashMap<JobAttributes, Point> hashMap0 = new HashMap<JobAttributes, Point>(identityHashMap0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0, (Object) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null,", parserConfig0, 32);
      defaultJSONParser0.parse();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}Z>#4ga;<Cj");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", jSONScanner0, parserConfig0);
      assertEquals(13, jSONScanner0.token());
      
      LinkedHashMap<ChronoLocalDate, DateFormatSymbols> linkedHashMap0 = new LinkedHashMap<ChronoLocalDate, DateFormatSymbols>();
      BitSet bitSet0 = new BitSet();
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) bitSet0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null,", parserConfig0, 32);
      defaultJSONParser0.parseObject();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[6];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig0, 1004);
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u");
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":true");
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      defaultJSONParser0.getDateFormat();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("M:B`", parserConfig0, 0);
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3p!~0I", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(parserConfig0, defaultJSONParser0.lexer, parserConfig0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 33p!~0I
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*c8)@b4p;VL<Jwt");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Feature feature0 = Feature.OrderedField;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      defaultJSONParser0.config(feature0, true);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?Iz", 1438);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(25, 25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ., actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      defaultJSONParser0.setResolveStatus(20);
      assertEquals(20, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[a}@kr-}B 0");
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("default constructor not found. ");
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertNotNull(jSONLexer0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, jSONLexer0.token());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("default constructor not found. ");
      defaultJSONParser0.setDateFormat("default constructor not found. ");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
