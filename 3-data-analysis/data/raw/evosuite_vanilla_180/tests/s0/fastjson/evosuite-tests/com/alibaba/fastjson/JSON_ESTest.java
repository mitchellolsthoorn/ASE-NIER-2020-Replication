/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 14:50:13 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.GenericArrayTypeImpl;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamClass;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSON_ESTest extends JSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = JSON.isValid("");
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject((TypeReference) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(concurrentSkipListMap0);
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(concurrentSkipListMap0);
      JSONObject jSONObject2 = jSONObject1.fluentClear();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "?p");
      // Undeclared exception!
      try { 
        jSONObject2.writeJSONString((Appendable) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      boolean boolean0 = JSONObject.SecureObjectInputStream.fields_error;
      JSONObject jSONObject0 = new JSONObject(false);
      StringWriter stringWriter0 = new StringWriter(16);
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSON.writeJSONString((Writer) stringWriter0, (Object) javaBeanSerializer0, 3089, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?p");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) mockFileOutputStream0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.global;
      Charset.defaultCharset();
      JSONArray jSONArray0 = new JSONArray(20);
      jSONArray0.getComponentType();
      Feature feature0 = Feature.SupportNonPublicField;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-912), 3089);
      Feature[] featureArray0 = new Feature[7];
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature1;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      byteArrayInputStream0.mark((-468));
      byteArrayInputStream0.mark((-1588));
      featureArray0[6] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) null, (ParserConfig) null, (ParseProcess) null, (-912), featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashMap<JSONPath.Operator, Annotation> linkedHashMap0 = new LinkedHashMap<JSONPath.Operator, Annotation>();
      JSONObject jSONObject0 = new JSONObject(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?p";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "1.2.68";
      stringArray0[4] = "1.2.68";
      stringArray0[5] = "?p";
      stringArray0[6] = null;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      jSONObject0.put("1.2.68", (Object) simplePropertyPreFilter0);
      // Undeclared exception!
      try { 
        jSONObject0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      SerializerFeature serializerFeature3 = SerializerFeature.BeanToArray;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature serializerFeature5 = SerializerFeature.DisableCircularReferenceDetect;
      SerializerFeature serializerFeature6 = SerializerFeature.BrowserSecure;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Hby7g<|sQ=", true);
      Charset charset0 = Charset.defaultCharset();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      Class<Field> class0 = Field.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter3;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      serializerFeatureArray0[0] = serializerFeature3;
      serializerFeatureArray0[1] = serializerFeature5;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature4;
      serializerFeatureArray0[4] = serializerFeature2;
      serializerFeatureArray0[5] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[6] = serializerFeature7;
      serializerFeatureArray0[7] = serializerFeature0;
      int int0 = JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) serializerFeature1, serializeConfig0, serializeFilterArray0, "com.alibaba.fastjson.JSON", 1, serializerFeatureArray0);
      assertEquals(1, int0);
      
      Integer integer0 = new Integer((-1743));
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) integer0, (SerializeConfig) null, serializeFilterArray0, "", 46, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      jSONArray0.add((Object) class0);
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject((Class<PascalNameFilter>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clazz is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("");
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      serializeConfig0.setPropertyNamingStrategy(propertyNamingStrategy0);
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[6] = serializerFeature6;
      String string0 = JSON.toJSONString((Object) "", serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("illegal state : ");
      File file0 = MockFile.createTempFile("Fes", "Fes", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.format("(.(a[]={hE0$oqW/", (Object[]) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      LinkedHashMap<String, JSONValidator.Type> linkedHashMap0 = new LinkedHashMap<String, JSONValidator.Type>();
      SerializeConfig serializeConfig0 = new SerializeConfig(268435455, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[8] = serializerFeature8;
      int int0 = JSON.writeJSONString((OutputStream) printStream0, charset0, (Object) linkedHashMap0, serializeConfig0, (SerializeFilter[]) null, "fastjson.parser.features.ErrorOnEnumNotMatch", (-2371), serializerFeatureArray0);
      assertEquals(48L, file0.length());
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "?)u=z|9p4w:^d$<2";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "4PD)1%9";
      stringArray0[4] = "?p";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      SimplePropertyPreFilter simplePropertyPreFilter4 = new SimplePropertyPreFilter(stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, charset0, (Object) "?p", serializeConfig0, serializeFilterArray0, "", 40, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "+*B5nywGQ;IvXi";
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[7] = serializerFeature7;
      // Undeclared exception!
      JSON.toJSONStringWithDateFormat("", "+*B5nywGQ;IvXi", serializerFeatureArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "wP70A7r*Y[!";
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wP70A7r*Y[!");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("wP70A7r*Y[!", (Type) null, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2wP70A7r*Y[!
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      LinkedHashMap<GenericArrayTypeImpl, JSON> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSON>();
      Class<SimplePropertyPreFilter> class1 = SimplePropertyPreFilter.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[6] = serializerFeature1;
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat(simplePropertyPreFilter0, "m`<#iri", serializerFeatureArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-120), 1345);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[5] = serializerFeature5;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) byteArrayInputStream0, (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookup(class0);
      objectStreamClass0.getSerialVersionUID();
      Class<?> class1 = objectStreamClass0.forClass();
      objectStreamClass0.getSerialVersionUID();
      JSONArray jSONArray0 = new JSONArray(2);
      JSON.addMixInAnnotations(class1, class1);
      ParserConfig.getGlobalInstance();
      StringWriter stringWriter0 = new StringWriter(3089);
      StringWriter stringWriter1 = stringWriter0.append('\'');
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) stringWriter1, (SerializeConfig) null, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2824);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte) (-11);
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreAutoType;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowISO8601DateFormat;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportNonPublicField;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowArbitraryCommas;
      featureArray0[5] = feature5;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte)1, (int) (byte)1, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2I
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      LinkedHashMap<GenericArrayTypeImpl, JSON> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSON>();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)60;
      byteArray0[1] = (byte)60;
      JSON.isValidArray("[C");
      JSONObject jSONObject0 = new JSONObject(7);
      JSON.defaultLocale = jSONObject0.defaultLocale;
      jSONObject0.getInnerMap();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.add((int) (byte)0, (Object) class0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) javaBeanSerializer0, serializeConfig0, 3089, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSON.isValid("(S`=~G");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ("(S`=~G", serializeConfig0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "(S`=~G";
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(999999, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[7] = serializerFeature7;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Charset) null, (Object) pascalNameFilter0, serializeConfig0, serializeFilterArray0, "(S`=~G", 31, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[3] = serializerFeature2;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONObject0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      LinkedHashMap<GenericArrayTypeImpl, JSON> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSON>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      JSON.isValidArray("[C");
      JSONObject jSONObject0 = new JSONObject(7);
      JSON.defaultLocale = jSONObject0.defaultLocale;
      jSONObject0.getInnerMap();
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)60, 1475);
      byteArrayInputStream0.markSupported();
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      objectStreamClass0.getSerialVersionUID();
      objectStreamClass0.forClass();
      Type type0 = JSON.getMixInAnnotations(class0);
      String string0 = JSON.parseObject((InputStream) byteArrayInputStream0, type0, (Feature[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSON.isValidArray("[C");
      JSON.addMixInAnnotations(class0, class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = JSONObject.SecureObjectInputStream.fields_error;
      SerializeConfig serializeConfig0 = new SerializeConfig(1030, false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[8];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[";
      stringArray0[1] = "";
      stringArray0[2] = "unixtime";
      stringArray0[3] = "[";
      stringArray0[4] = "[";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[2] = (SerializeFilter) pascalNameFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter1;
      PascalNameFilter pascalNameFilter2 = new PascalNameFilter();
      serializeFilterArray0[4] = (SerializeFilter) pascalNameFilter2;
      Class<Integer> class0 = Integer.class;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter2;
      PascalNameFilter pascalNameFilter3 = new PascalNameFilter();
      serializeFilterArray0[6] = (SerializeFilter) pascalNameFilter3;
      PascalNameFilter pascalNameFilter4 = new PascalNameFilter();
      serializeFilterArray0[7] = (SerializeFilter) pascalNameFilter4;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "[", serializeConfig0, serializeFilterArray0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      javaBeanSerializer0.getAfterFilters();
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.SortField;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[5] = serializerFeature5;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) javaBeanSerializer0, 841, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?p", true);
      LinkedHashMap<String, JSONPath.Operator> linkedHashMap0 = new LinkedHashMap<String, JSONPath.Operator>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.MapSortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[7] = serializerFeature7;
      int int0 = JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) linkedHashMap0, serializerFeatureArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONObject jSONObject1 = new JSONObject(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) jSONObject1, serializeConfig0, (SerializeFilter[]) null, (String) null, 3089, serializerFeatureArray0);
      double double0 = jSONObject0.getDoubleValue((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.isValid("true");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Integer integer0 = new Integer(8);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[8] = serializerFeature8;
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, (Object) integer0, 8, serializerFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookup(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      JSONArray jSONArray0 = new JSONArray(2);
      JSON.addMixInAnnotations(class1, class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      String string0 = "fastjson.parser.features.ErrorOnEnumNotMatch";
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.writeJSONString((Writer) null, (Object) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)51);
      Class<String> class0 = String.class;
      byteArrayInputStream0.markSupported();
      ObjectStreamClass.lookupAny(class0);
      JSON.isValid("");
      MockFile mockFile0 = new MockFile("r,+].>^Qy810Y");
      File file0 = MockFile.createTempFile("com.alibaba.fastjson.JSONValidator$UTF16Validator", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.SortField;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[4] = serializerFeature4;
      mockPrintStream0.println((-1341.1F));
      SerializerFeature serializerFeature5 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[5] = serializerFeature5;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockPrintStream0, (Object) class0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<String> class0 = String.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableASM;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SafeMode;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SupportAutoType;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.InitStringFieldAsEmpty;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SupportNonPublicField;
      featureArray0[5] = feature5;
      // Undeclared exception!
      try { 
        JSON.parseObject("?p", (Type) class1, (ParserConfig) null, 1, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray(")f:HL>(w82v6fJFRCu");
      boolean boolean1 = JSON.isValid("{8");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = JSON.isValid("{8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "tZ~oo`=?kr;Zg-u@wL";
      stringArray0[3] = "yEn";
      stringArray0[4] = "true";
      stringArray0[5] = "unclosed jsonArray";
      stringArray0[6] = "1.2.68";
      stringArray0[7] = "getInstance";
      stringArray0[8] = "com.alibaba.fastjson.JSON";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[2] = (SerializeFilter) pascalNameFilter0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) pascalNameFilter0, serializeConfig0, serializeFilterArray0, (-801), (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONArray jSONArray0 = new JSONArray();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1.2.68";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "NJGLNb9b&=Sdt";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) javaBeanSerializer0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        jSONArray1.toString(serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getBytes("context");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      jSONObject0.getFloat("aL'R>7");
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONStringWithDateFormat(jSONObject0, "context", serializerFeatureArray0);
      jSONObject0.entrySet();
      Class<Method> class0 = Method.class;
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowISO8601DateFormat;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableSpecialKeyDetect;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseBigDecimal;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.UseBigDecimal;
      featureArray0[5] = feature5;
      Method method0 = JSON.parseObject((String) null, class0, (ParseProcess) null, featureArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("tue", 1248);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookup(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      JSONArray jSONArray0 = new JSONArray(2);
      JSON.addMixInAnnotations(class1, class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      LinkedHashMap<StringWriter, JSONPath.Operator> linkedHashMap0 = new LinkedHashMap<StringWriter, JSONPath.Operator>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONStringWithDateFormat(linkedHashMap0, "fastjson.parser.deny", serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookup(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      JSONArray jSONArray0 = new JSONArray(2);
      JSON.addMixInAnnotations(class1, class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      LinkedHashMap<StringWriter, JSONPath.Operator> linkedHashMap0 = new LinkedHashMap<StringWriter, JSONPath.Operator>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[4] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[5] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[6] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[7] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[8] = serializerFeature7;
      JSON.toJSONStringWithDateFormat(linkedHashMap0, "fastjson.parser.deny", serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      List<Object> list0 = jSONPObject0.getParameters();
      JSONArray jSONArray0 = new JSONArray(list0);
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONArray jSONArray1 = new JSONArray(list0);
      jSONPObject0.addParameter(jSONArray1);
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.serializer.PascalNameFilter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSON.isValid("");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[3] = serializerFeature3;
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ("", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Integer integer0 = new Integer(65536);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(R.Bic";
      stringArray0[1] = "4PD)1%9";
      stringArray0[2] = "(R.Bic";
      stringArray0[3] = "~.o%-iUS2ezu{HB";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "(R.Bic";
      stringArray0[7] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter3;
      SimplePropertyPreFilter simplePropertyPreFilter4 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter4;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[7] = serializerFeature7;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, charset0, (Object) integer0, serializeConfig0, serializeFilterArray0, "", 40, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Integer integer0 = new Integer(65536);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(R.Bic";
      stringArray0[1] = "4PD)1%9";
      stringArray0[2] = "cn}J";
      stringArray0[3] = "~.o%-iUS2ezu{HB";
      stringArray0[4] = "";
      stringArray0[5] = "{AMzF%} \"$B~e@u/kK";
      stringArray0[6] = "h*";
      stringArray0[7] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter3;
      SimplePropertyPreFilter simplePropertyPreFilter4 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter4;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[7] = serializerFeature7;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, charset0, (Object) integer0, serializeConfig0, serializeFilterArray0, "", 40, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      SerializerFeature serializerFeature3 = SerializerFeature.BeanToArray;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature serializerFeature5 = SerializerFeature.DisableCircularReferenceDetect;
      SerializerFeature serializerFeature6 = SerializerFeature.BrowserSecure;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Hby7g<|sQ=", true);
      Charset charset0 = Charset.defaultCharset();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      Class<Field> class0 = Field.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter3;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      serializerFeatureArray0[0] = serializerFeature3;
      serializerFeatureArray0[1] = serializerFeature5;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature4;
      serializerFeatureArray0[4] = serializerFeature2;
      serializerFeatureArray0[5] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[6] = serializerFeature7;
      serializerFeatureArray0[7] = serializerFeature0;
      int int0 = JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) serializerFeature1, serializeConfig0, serializeFilterArray0, "com.alibaba.fastjson.JSON", 1, serializerFeatureArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseObject("", (Type) class0, (Feature[]) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserSecure;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      int int0 = JSON.writeJSONString((OutputStream) byteArrayOutputStream0, charset0, (Object) null, serializeConfig0, (SerializeFilter[]) null, "", (-2079), serializerFeatureArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = JSON.isValid("[B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(170);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      char[] charArray0 = new char[6];
      charArray0[2] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?p";
      stringArray0[1] = "?p";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "1.2.68";
      stringArray0[5] = null;
      stringArray0[6] = "?p";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature4;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) typeArray0[1], serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "true";
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      ParserConfig parserConfig0 = ParserConfig.global;
      int int0 = 51;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "true", (SerializeConfig) null, 51, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Charset.defaultCharset();
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature1;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) typeArray0[0], serializeConfig0, (SerializeFilter[]) null, "", 62, serializerFeatureArray0);
      assertEquals("'com.alibaba.fastjson.serializer.PascalNameFilter'", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Charset.defaultCharset();
      StringWriter stringWriter0 = new StringWriter();
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      Object object0 = null;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) null, (SerializeFilter[]) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookup(class0);
      objectStreamClass0.getSerialVersionUID();
      Class<?> class1 = objectStreamClass0.forClass();
      objectStreamClass0.getSerialVersionUID();
      JSONArray jSONArray0 = new JSONArray(2);
      JSON.addMixInAnnotations(class1, class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(170);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[5] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) typeArray0[0], serializeConfig0, (SerializeFilter[]) null, (String) null, 3089, serializerFeatureArray0);
      assertEquals("\"com.alibaba.fastjson.JSONPath$Operator\"", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("");
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("GHB`5?>4dl.I", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[1] = serializerFeature1;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) serializerFeature0, serializeConfig1, (SerializeFilter[]) null, "", (-13), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.writeJSONString((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(170);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
      FieldInfo.getFieldType((Class<?>) class0, (Type) parameterizedTypeImpl0, (Type) class0);
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = '0';
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) parameterizedTypeImpl0, (ParserConfig) null, (ParseProcess) null, 3089, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Type[] typeArray0 = new Type[4];
      typeArray0[3] = (Type) class0;
      char[] charArray0 = new char[0];
      Feature[] featureArray0 = new Feature[21];
      JSON.parseObject(charArray0, (-698), typeArray0[3], featureArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Charset.defaultCharset();
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
      Class<JSONPObject> class1 = JSONPObject.class;
      FieldInfo.getFieldType(class1, typeArray0[3], typeArray0[2]);
      Feature feature0 = Feature.IgnoreAutoType;
      Feature feature1 = Feature.InternFieldNames;
      char[] charArray0 = new char[0];
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature1;
      JSON.parseObject(charArray0, (-679), typeArray0[1], featureArray0);
      // Undeclared exception!
      try { 
        JSON.parseObject("not match enum value, ", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      Class<StringWriter> class0 = StringWriter.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "40d\"A{fqg(o2[s=(-T";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "fastjson.serializerFeatures.MapSortField";
      stringArray0[5] = "I";
      stringArray0[6] = "X,Ib?B%p^*[m'fi";
      stringArray0[7] = "";
      stringArray0[8] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      Class<PascalNameFilter> class1 = PascalNameFilter.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class1, stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[2] = (SerializeFilter) pascalNameFilter0;
      Class<JSONArray> class2 = JSONArray.class;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class2, stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter3;
      SimplePropertyPreFilter simplePropertyPreFilter4 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter4;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[7] = serializerFeature7;
      String string0 = JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, "build object error", 153, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashMap<JSONPath.Operator, Annotation> linkedHashMap0 = new LinkedHashMap<JSONPath.Operator, Annotation>();
      Class<Field> class0 = Field.class;
      Class<Method> class1 = Method.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.68", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("?p", class0, class1, class0, (Field) null, (-761), 3089, (-761));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class2 = beanContext0.getBeanClass();
      // Undeclared exception!
      try { 
        JSON.parseObject("?p", (Type) class2, (ParserConfig) null, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OutputStream outputStream0 = null;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      JSON.isValid(")f:HL>(7w82v6fJFRCu");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[3] = serializerFeature3;
      String string0 = JSON.toJSONStringWithDateFormat(charset0, ")f:HL>(7w82v6fJFRCu", serializerFeatureArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray(")f:HL>(w82v6fJFRCu");
      boolean boolean1 = JSON.isValid(")f:HL>(w82v6fJFRCu");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashMap<JSONPath.Operator, Annotation> linkedHashMap0 = new LinkedHashMap<JSONPath.Operator, Annotation>();
      Class<Object> class0 = Object.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      long long0 = new Integer(3089);
      Class<?> class1 = objectStreamClass0.forClass();
      PipedInputStream pipedInputStream0 = new PipedInputStream(109);
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, (Type) class1, (Feature[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)3;
      JSONObject jSONObject0 = new JSONObject(true);
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowSingleQuotes;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InitStringFieldAsEmpty;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableCircularReferenceDetect;
      featureArray0[4] = feature4;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, type0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) class0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JSON.parseObject((char[]) null, 114, (Type) class0, (Feature[]) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("8!zyw62`$G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "dd-MM-yyyy";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      Feature[] featureArray0 = new Feature[4];
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseArray(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ;, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = 'F';
      charArray0[2] = 'E';
      charArray0[3] = '>';
      charArray0[4] = 'C';
      charArray0[5] = '9';
      charArray0[6] = '-';
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableASM;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.IgnoreAutoType;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.IgnoreAutoType;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SupportAutoType;
      featureArray0[5] = feature5;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 3, (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2.FE
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookup(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      JSONArray jSONArray0 = new JSONArray(2);
      JSON.addMixInAnnotations(class1, class1);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.MapSortField;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONBytes((Object) jSONArray0, serializeConfig0, serializeFilterArray0, (String) null, (-19), serializerFeatureArray0);
      JSON.toJSON((Object) serializeConfig0, serializeConfig0);
      String string0 = jSONArray0.toJSONString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringWriter stringWriter0 = new StringWriter();
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.writeJSONString((Writer) stringWriter0, (Object) null, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) charset0, (-1188), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookup(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      JSONArray jSONArray0 = new JSONArray(2);
      JSON.addMixInAnnotations(class1, class1);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSON.toJSON((Object) serializeConfig0, serializeConfig0);
      String string0 = jSONArray0.toJSONString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JSONArray jSONArray0 = new JSONArray();
      JSON.addMixInAnnotations(class0, class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashMap<JSONPath.Operator, Annotation> linkedHashMap0 = new LinkedHashMap<JSONPath.Operator, Annotation>();
      jSONArray0.spliterator();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONString((Object) jSONArray0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.toString((SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "b";
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "b", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSON.isValid(")f:HL>(w82v6fJFRCu");
      String string0 = "P{8";
      JSON.isValid("P{8");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.features.ErrorOnEnumNotMatch", (Type) parameterizedTypeImpl0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) jSONObject0, serializerFeatureArray0);
      jSONObject1.getLongValue("5h-1");
      BigInteger bigInteger0 = jSONObject0.getBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSON.isValid("1.2.68");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte)121);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Class<Integer> class0 = Integer.class;
      Class<JSONPObject> class1 = JSONPObject.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.68", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("", class0, class1, class0, (Field) null, (-2764), 1675, (byte)121);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class2 = beanContext0.getBeanClass();
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.SafeMode;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SortFeidFastMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableFieldSmartMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AutoCloseSource;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableSpecialKeyDetect;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.OrderedField;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.AllowUnQuotedFieldNames;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.CustomMapDeserializer;
      featureArray0[8] = feature8;
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) class2, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-104);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Class<String> class0 = String.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreAutoType;
      featureArray0[1] = feature1;
      String string0 = JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class1, featureArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(true);
      String string0 = jSONObject0.toJSONString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSON.isValid("M,J9");
      jSONObject1.getFloat("1.2.68");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject1.toJSONString();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Charset.defaultCharset();
      TreeMap<JSONArray, ParameterizedTypeImpl> treeMap0 = new TreeMap<JSONArray, ParameterizedTypeImpl>();
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      LinkedHashMap<GenericArrayTypeImpl, JSON> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSON>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONStringWithDateFormat(linkedHashMap0, "", serializerFeatureArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Object object0 = new Object();
      JSON.toJSON(object0, serializeConfig0);
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      assertTrue(serializeConfig1.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(170);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
      FieldInfo.getFieldType((Class<?>) class0, (Type) parameterizedTypeImpl0, (Type) class0);
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 3089, (Type) class0, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Feature[] featureArray0 = new Feature[6];
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      LinkedHashMap<GenericArrayTypeImpl, JSON> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSON>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byte byte0 = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yyyy-MM-dd HH:mm:ss");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.getFieldTypeResolver();
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int) byte0, (int) byteArray0[0], charset0, (Type) class0, parserConfig0, (ParseProcess) fieldTypeResolver0, (int) byteArray0[1], featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Feature[] featureArray0 = new Feature[6];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      LinkedHashMap<GenericArrayTypeImpl, JSON> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSON>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byte byte0 = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yyyy-MM-dd HH:mm:ss");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.getFieldTypeResolver();
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int) byte0, (int) byteArray0[0], charset0, (Type) class0, parserConfig0, (ParseProcess) fieldTypeResolver0, (int) byteArray0[1], featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('R');
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.writeJSONString((Appendable) stringWriter0);
      assertEquals(3089, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.isValid("false");
      JSONObject jSONObject0 = new JSONObject(469, true);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONObject1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "";
      Class<StringWriter> class0 = StringWriter.class;
      JSON.parseArray("", class0);
      SerializeConfig.getGlobalInstance();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      int int0 = 65536;
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject(string0, (Type) class0, int0, featureArray0);
      JSONObject jSONObject0 = JSON.parseObject(string0, featureArray0);
      Class<JSONArray> class1 = JSONArray.class;
      JSONArray jSONArray0 = JSON.toJavaObject((JSON) jSONObject0, class1);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      Feature[] featureArray0 = new Feature[4];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      JSON.parseObject((char[]) null, 2, (Type) class0, featureArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.getInteger("com.alibaba.fastjson.util.ASMClassLoader");
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = 'F';
      charArray0[2] = 'g';
      charArray0[3] = 'f';
      charArray0[4] = '0';
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[3]);
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) parameterizedTypeImpl0, typeArray0[0]);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, (-1801), type0, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      JSON.parseArray((String) null, typeArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((List<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list is null.
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "(FZ)V";
      stringArray0[2] = "Negative initial size: ";
      stringArray0[3] = "~~^PPX?[C,$k-J_";
      stringArray0[4] = null;
      stringArray0[5] = null;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      Class<?> class2 = simplePropertyPreFilter0.getClazz();
      typeArray0[1] = (Type) class2;
      JSON.parseArray((String) null, typeArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((List<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list is null.
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedHashMap<JSONPath.Operator, Annotation> linkedHashMap0 = new LinkedHashMap<JSONPath.Operator, Annotation>();
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.toJSONString();
      boolean boolean0 = JSON.isValidObject("{}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature1 = SerializerFeature.QuoteFieldNames;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) jSONArray0, serializeConfig0, (SerializeFilter[]) null, (String) null, 3089, serializerFeatureArray0);
      String string1 = jSONArray0.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSON.DEFAULT_TYPE_KEY = null;
      String string0 = "@type";
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      LinkedHashMap<GenericArrayTypeImpl, JSON> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSON>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONStringWithDateFormat(serializerFeature0, "", serializerFeatureArray0);
      assertEquals("\"WriteEnumUsingToString\"", string0);
      
      SerializeConfig.getGlobalInstance();
      boolean boolean0 = JSON.isValidObject("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-37);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "?:YQtj}L9gH";
      stringArray0[2] = "@type";
      stringArray0[3] = "?p";
      stringArray0[4] = "1.2.68";
      stringArray0[5] = "";
      stringArray0[6] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[5] = serializerFeature5;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parse("@type", (ParserConfig) null, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedHashMap<PascalNameFilter, JSON> linkedHashMap0 = new LinkedHashMap<PascalNameFilter, JSON>();
      MockFile mockFile0 = new MockFile("]GzO&MTUd", "]GzO&MTUd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.writeJSONStringTo(linkedHashMap0, outputStreamWriter0, serializerFeatureArray0);
      String string0 = "valueOf";
      // Undeclared exception!
      try { 
        JSON.parse("valueOf", (ParserConfig) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "";
      Class<StringWriter> class0 = StringWriter.class;
      JSON.parseArray("", class0);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      SerializeConfig.getGlobalInstance();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      int int0 = 65536;
      Feature[] featureArray0 = new Feature[0];
      TreeMap<JSONObject, InputStream> treeMap0 = JSON.parseObject(string0, (Type) class0, int0, featureArray0);
      assertNull(treeMap0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(44, false);
      jSONObject0.clear();
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      serializeConfig0.getObjectWriter(class0, false);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) genericArrayTypeImpl0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)32;
      Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      ParseProcess parseProcess0 = null;
      int int0 = (-2628);
      Feature[] featureArray0 = null;
      // Undeclared exception!
      try { 
        JSON.parseObject(jSONObject0.VERSION, (Type) class1, parserConfig0, parseProcess0, int0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)32;
      Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      ParseProcess parseProcess0 = null;
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(parserConfig0.DENY_PROPERTY_INTERNAL, (Type) class1, parserConfig0, parseProcess0, jSONObject0.DEFAULT_GENERATE_FEATURE, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("trhe");
      JSONObject jSONObject0 = new JSONObject(2126, false);
      float float0 = new Integer(3089);
      Integer integer0 = new Integer(2126);
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      TreeMap<Integer, String> treeMap0 = new TreeMap<Integer, String>();
      JSON.toJSON((Object) treeMap0, serializeConfig0);
      boolean boolean1 = JSON.isValid("@type");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      serializeConfig0.setAsmEnable(false);
      Class<Object> class0 = Object.class;
      serializeConfig0.getObjectWriter(class0, false);
      JSON.toJSON((Object) class0, serializeConfig0);
      int int0 = 958;
      JSONObject jSONObject0 = new JSONObject(int0);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      JSON.toJSON((Object) pascalNameFilter0, serializeConfig1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) byteArrayInputStream0, serializeConfig0);
      assertEquals(3089, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "7>";
      Feature[] featureArray0 = null;
      // Undeclared exception!
      try { 
        JSON.parseObject("7>", (TypeReference<GenericArrayTypeImpl>) null, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(26);
      jSONObject0.getInnerMap();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.CustomMapDeserializer;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.serializerFeatures.MapSortField", (TypeReference<GenericArrayTypeImpl>) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, (Object) propertyNamingStrategy0, 395, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      serializeConfig0.getObjectWriter(class0, true);
      TreeMap<Integer, String> treeMap0 = new TreeMap<Integer, String>();
      Integer integer0 = new Integer(125);
      treeMap0.put(integer0, "SX$c@sw\"nusiw`o(k");
      TreeMap treeMap1 = (TreeMap)JSON.toJSON((Object) treeMap0, serializeConfig0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Charset.defaultCharset();
      StringWriter stringWriter0 = new StringWriter();
      JSON.getMixInAnnotations((Type) null);
      JSON.addMixInAnnotations((Type) null, (Type) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreNotMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableCircularReferenceDetect;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowComment;
      featureArray0[4] = feature4;
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse("-:", featureArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 44;
      int int1 = 3;
      StringWriter stringWriter0 = new StringWriter(3);
      Object object0 = null;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) null, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      List<StringWriter> list0 = JSON.parseArray("", class0);
      assertNull(list0);
      
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = true;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean2);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.global;
      ParseProcess parseProcess0 = null;
      int int0 = 20;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.OrderedField;
      featureArray0[1] = feature1;
      try { 
        JSON.parseObject((InputStream) mockFileInputStream0, charset0, (Type) class0, parserConfig0, parseProcess0, int0, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("");
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(41, false);
      JSONObject jSONObject1 = jSONObject0.fluentPut("", "");
      File file0 = null;
      boolean boolean1 = true;
      jSONObject0.getBytes("?p");
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1.2.68";
      stringArray0[1] = "";
      stringArray0[2] = "@type";
      stringArray0[3] = "1.2.68";
      stringArray0[4] = "?p";
      stringArray0[5] = "?p";
      stringArray0[6] = "?p";
      stringArray0[7] = "parser.features.ErrorOnEnumNotMatch";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[2] = serializerFeature2;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONObject1, (SerializeConfig) null, serializeFilterArray0, 3089, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n$Gh\"|w%Yw8w4!+h");
      JSON.parseArray((String) null);
      Class<InputStream> class0 = InputStream.class;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(class0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) genericArrayTypeImpl0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        JSON.parseObject("?p", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = JSON.parseArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      int int0 = (-451);
      simplePropertyPreFilter0.setMaxLevel((-451));
      serializerFeatureArray0[0] = serializerFeature0;
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeConfig) null);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      LinkedHashMap<SimplePropertyPreFilter, JSONArray> linkedHashMap0 = new LinkedHashMap<SimplePropertyPreFilter, JSONArray>();
      TreeMap<SimplePropertyPreFilter, JSONValidator.Type> treeMap0 = new TreeMap<SimplePropertyPreFilter, JSONValidator.Type>();
      pascalNameFilter0.process(treeMap0, "", "9k5y*<MSGI\"#kS2");
      pascalNameFilter0.process(linkedHashMap0, "9k5y*<MSGI\"#kS2", "");
      simplePropertyPreFilter0.apply(jSONSerializer0, pascalNameFilter0, "");
      SerializerFeature serializerFeature1 = SerializerFeature.MapSortField;
      serializerFeatureArray0[1] = serializerFeature1;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) simplePropertyPreFilter0, (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = JSON.isValid("true");
      assertTrue(boolean0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.getJSONObject("]ouG,WqR|bmS9IM9");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, charset0, (Object) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      JSON.addMixInAnnotations(class0, typeArray0[3]);
      assertEquals(4, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Charset.defaultCharset();
      JSON.getMixInAnnotations((Type) null);
      JSON.addMixInAnnotations((Type) null, (Type) null);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSON.toJSON((Object) null, serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Charset.defaultCharset();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(1509950721, false);
      JSON.getMixInAnnotations((Type) null);
      JSON.addMixInAnnotations((Type) null, (Type) null);
      ConcurrentHashMap<String, PascalNameFilter> concurrentHashMap0 = new ConcurrentHashMap<String, PascalNameFilter>(14, 3089);
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(concurrentHashMap0);
      jSONObject1.toJSONString();
      boolean boolean0 = JSON.isValidObject("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      JSON.removeMixInAnnotations((Type) null);
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      serializeFilterArray0[0] = (SerializeFilter) null;
      serializeFilterArray0[1] = (SerializeFilter) null;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[5] = serializerFeature5;
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONArray0, serializeConfig0, serializeFilterArray0, 20, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(C)F");
      String string0 = null;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.addDenyInternal("vx|k2L?dY`4");
      int int0 = 31;
      JSON.parse(string0, parserConfig0, int0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      byte byte1 = (byte)82;
      byteArray0[1] = byte1;
      byte byte2 = (byte)20;
      byteArray0[2] = byte2;
      byte byte3 = (byte)84;
      byteArray0[3] = byte3;
      byte byte4 = (byte)48;
      byteArray0[4] = byte4;
      byte byte5 = (byte)10;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      byte byte7 = (byte)9;
      byteArray0[7] = byte7;
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.NonStringKeyAsString;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableASM;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowSingleQuotes;
      featureArray0[5] = feature5;
      HashMap<PropertyNamingStrategy, JSONArray> hashMap0 = JSON.parseObject(byteArray0, (Type) class1, featureArray0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.writeJSONString((Writer) null, (Object) null, 3, serializerFeatureArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'b';
      charArray0[2] = 'g';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 3, (ParserConfig) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.writeJSONString((Appendable) stringWriter0);
      assertEquals(0, jSONObject0.size());
      
      JSON.isValidArray("1.2.68");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      JSON.parseArray("", class0);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      SerializeConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.Class, write javaBean error, fastjson version 1.2.68, class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl, fieldName : annotatedSuperclass, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : type, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : 0, write javaBean error, fastjson version 1.2.68, class java.lang.reflect.Method, fieldName : 0, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : 0, write javaBean error, fastjson version 1.2.68, class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl, fieldName : annotatedSuperclass, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : type, write javaBean error, fastjson version 1.2.68, class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl, fieldName : annotatedSuperclass, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : type, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : 0, write javaBean error, fastjson version 1.2.68, class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl, fieldName : annotatedSuperclass, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : type, write javaBean error, fastjson version 1.2.68, class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl, fieldName : annotatedSuperclass, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : type, write javaBean error, fastjson version 1.2.68, class java.lang.reflect.Method, fieldName : 1, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : 0, write javaBean error, fastjson version 1.2.68, class java.lang.reflect.Constructor, fieldName : 1, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : 0, write javaBean error, fastjson version 1.2.68, class java.lang.Class, fieldName : 0, Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSON.isValid("yyyy-MM-dd HH:mm:ss");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[1] = serializerFeature1;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "yyyy-MM-dd HH:mm:ss", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1290);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<Object> class0 = Object.class;
      serializeConfig0.getObjectWriter(class0, false);
      JSON.toJSON((Object) null, serializeConfig0);
      JSONObject jSONObject0 = new JSONObject(958);
      assertEquals(3089, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSON.isValidObject("EzT8}`Essn4rh_*N");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.MapSortField;
      serializerFeatureArray0[5] = serializerFeature5;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((Writer) stringWriter0, (Object) "EzT8}`Essn4rh_*N", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.writeJSONString((Writer) stringWriter1, (Object) stringWriter0, serializerFeatureArray0);
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertTrue(serializeConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<JSONPObject> class0 = JSONPObject.class;
      JSON.toJavaObject((JSON) null, class0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      Class<Object> class1 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/**/";
      stringArray0[1] = "/**/";
      stringArray0[2] = "/**/";
      stringArray0[3] = "/**/";
      stringArray0[4] = "&kT)/";
      stringArray0[5] = "error parse true";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      Class<Annotation> class2 = Annotation.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class2, stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) null, serializeConfig0, serializeFilterArray0, 3810, serializerFeatureArray0);
      StringWriter stringWriter0 = new StringWriter(5);
      JSON.toJSONBytes((Object) stringWriter0, serializeFilterArray0, serializerFeatureArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)5;
      Class<StringWriter> class0 = StringWriter.class;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      TreeMap<JSONObject, InputStream> treeMap0 = JSON.parseObject((String) null, (Type) class0, 16, (Feature[]) null);
      assertNull(treeMap0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject(6);
      jSONObject0.getFloatValue("&u'");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.DEFAULT_PARSER_FEATURE = 3089;
      SerializerFeature serializerFeature3 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "&u'", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(170);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      objectStreamClass0.forClass();
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.isValidObject("?p");
      SerializeConfig serializeConfig0 = new SerializeConfig(5, false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "?p";
      stringArray0[3] = "@type";
      stringArray0[4] = "1.2.68";
      stringArray0[5] = "?p";
      stringArray0[6] = "@type";
      stringArray0[7] = "@type";
      stringArray0[8] = "?p";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.MapSortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONBytes((Object) jSONObject0, serializeConfig0, serializeFilterArray0, "", 5, serializerFeatureArray0);
      JSON.isValidArray("?p");
      JSONArray jSONArray0 = new JSONArray(2126);
      jSONObject0.getShort("WEjtPxn;5U{F)R");
      jSONObject0.getFloatValue("1.2.68");
      Integer integer0 = new Integer(989);
      jSONObject0.getBytes("");
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      ConcurrentSkipListMap<String, SimplePropertyPreFilter> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, SimplePropertyPreFilter>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(concurrentSkipListMap0);
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig1);
      javaBeanSerializer0.writeAsArrayNonContext(jSONSerializer0, "", jSONObject1, class0, (-4));
      SerializerFeature[] serializerFeatureArray1 = new SerializerFeature[3];
      SerializerFeature serializerFeature9 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray1[0] = serializerFeature9;
      SerializerFeature serializerFeature10 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray1[1] = serializerFeature10;
      jSONObject0.getJSONObject("@type");
      SerializerFeature serializerFeature11 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray1[2] = serializerFeature11;
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat(javaBeanSerializer0, "UTF-8", serializerFeatureArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      ObjectStreamClass.lookup(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      JSONArray jSONArray0 = new JSONArray(2);
      byte[] byteArray0 = new byte[0];
      int int0 = 65536;
      int int1 = (-1829);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.68";
      stringArray0[1] = "1.2.68";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class1, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.toJSONString();
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookup(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      JSONArray jSONArray0 = new JSONArray(2);
      JSON.addMixInAnnotations(class1, class1);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreAutoType;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parseObject("?p", (Type) class1, (-204), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2?p
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      SerializeConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("tue", (Type) class0, 123, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.writeJSONString((Appendable) stringWriter0);
      boolean boolean0 = JSON.isValid("1.2.68");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSON.isValid("true");
      JSON.isValidArray("true");
      JSONObject jSONObject0 = new JSONObject(2126, false);
      jSONObject0.getFloatValue("Ha?__or`J&u");
      Integer integer0 = new Integer((-44));
      jSONObject0.getBytes((String) null);
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.toJSON((Object) linkedHashMap0, serializeConfig0);
      // Undeclared exception!
      try { 
        JSON.parseArray("hasPropertyFilters");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<JSONPObject> class0 = JSONPObject.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      Class<String> class1 = String.class;
      ObjectStreamClass.lookup(class1);
      objectStreamClass0.forClass();
      JSONArray jSONArray0 = new JSONArray(2);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)32;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 16, 3089, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      JSONArray jSONArray0 = new JSONArray(2);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 2, 64, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      StringWriter stringWriter0 = new StringWriter();
      serializeConfig0.clearSerializers();
      JSONObject jSONObject0 = new JSONObject(false);
      JSON.toJSON((Object) serializerFeature0);
      jSONObject0.getBytes("=`AMS");
      JSON.isValid("C)Ljaa/til/UUID;");
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, serializeConfig0, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      StringWriter stringWriter0 = new StringWriter();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "parser.features.NonStringKeyAsString";
      stringArray0[1] = "";
      stringArray0[2] = "com.alibaba.fastjson.JSON";
      stringArray0[3] = "";
      stringArray0[4] = "'ieB^:$`!2";
      stringArray0[5] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[3] = (SerializeFilter) pascalNameFilter0;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[4] = (SerializeFilter) pascalNameFilter1;
      JSON.toJSONBytes(charset0, (Object) serializeConfig0, serializeConfig0, serializeFilterArray0, (String) null, (-577), serializerFeatureArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -577
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSON.clearMixInAnnotations();
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "2Hc)=Ns7;Bz*s";
      stringArray0[1] = "A(l*abz$]?J;JA|f R";
      stringArray0[2] = "";
      stringArray0[3] = "f";
      stringArray0[4] = "";
      stringArray0[5] = "fastjson.asmEnable";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 44);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(simplePropertyPreFilter0, jSONReaderScanner0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JSONArray jSONArray0 = new JSONArray(2);
      JSON.clearMixInAnnotations();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[0];
      JSON.parse(byteArray0, 3089, 2, (CharsetDecoder) uTF8Decoder0, featureArray0);
      boolean boolean0 = jSONArray0.remove((Object) class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSON.parseObject("", (Type) null, (Feature[]) null);
      Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSON.parseObject("", (Type) null, (Feature[]) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Charset.defaultCharset();
      StringWriter stringWriter0 = new StringWriter();
      JSON.isValidArray("(C)Ljava/uti/UUID;");
      JSONPObject jSONPObject0 = new JSONPObject();
      JSONPObject jSONPObject1 = new JSONPObject();
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONPObject1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan null error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(36);
      jSONArray0.fluentRemoveAll(jSONArray0);
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) linkedHashMap0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      serializeConfig0.getObjectWriter(class0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject(false);
      jSONObject0.getBytes("com.alibaba.fastjson.JSON");
      JSON.isValid("_p");
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      String[] stringArray0 = new String[11];
      stringArray0[0] = "1.2.68";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.DisableCheckSpecialChar;
      FileSystemHandling.shouldAllThrowIOExceptions();
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[6] = serializerFeature6;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) class0, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(106, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-62);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3089, (byte) (-119));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject("");
      JSONArray jSONArray0 = new JSONArray(36);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(jSONArray0);
      jSONArray1.setRelatedArray(jSONArray0);
      boolean boolean0 = JSON.isValid("4L>R(_AU@cG^)Q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = JSON.isValid("1.2.68");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) null, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = JSON.isValid("8[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSON.isValid("");
      JSONObject jSONObject0 = new JSONObject(false);
      ParserConfig.getGlobalInstance();
      TreeMap<JSONArray, ParameterizedTypeImpl> treeMap0 = new TreeMap<JSONArray, ParameterizedTypeImpl>();
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(106, true);
      JSON.isValid("@type");
      JSONObject jSONObject1 = new JSONObject(false);
      ParserConfig.getGlobalInstance();
      TreeMap<JSONArray, ParameterizedTypeImpl> treeMap0 = new TreeMap<JSONArray, ParameterizedTypeImpl>();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      ParserConfig.getGlobalInstance();
      JSON.toJSON((Object) null, (ParserConfig) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = (-3992);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte) (-27);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write(byteArray0, 3997, (int) (byte) (-97));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSON.parseObject((String) null, (Type) class0, (-2079), (Feature[]) null);
      boolean boolean0 = JSON.isValidArray("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(106, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      jSONObject0.clear();
      byteArray0[1] = (byte) (-119);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      Feature feature0 = Feature.InternFieldNames;
      Feature feature1 = Feature.IgnoreAutoType;
      Feature feature2 = Feature.AllowComment;
      Feature[] featureArray0 = new Feature[6];
      featureArray0[0] = feature2;
      featureArray0[1] = feature0;
      Feature feature3 = Feature.AllowComment;
      featureArray0[2] = feature3;
      Feature feature4 = Feature.OrderedField;
      featureArray0[3] = feature4;
      featureArray0[4] = feature1;
      featureArray0[5] = feature2;
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", (Type) null, 121, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("toJSON error", (Type) class0, 123, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.isValidObject("?p");
      JSONObject jSONObject1 = new JSONObject();
      JSON.isValidObject("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 2147483645;
      String string0 = "c/\",GUnT 7S[6_}*";
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowSingleQuotes;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.InternFieldNames;
      featureArray0[5] = feature4;
      Feature feature5 = Feature.IgnoreAutoType;
      featureArray0[6] = feature5;
      Feature feature6 = Feature.SupportNonPublicField;
      featureArray0[7] = feature6;
      // Undeclared exception!
      try { 
        JSON.parseObject("true", (Type) genericArrayTypeImpl0, 2147483645, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("7Anh']Ic%=a}2(");
      assertFalse(boolean0);
      
      Feature[] featureArray0 = new Feature[18];
      Feature feature0 = Feature.UseBigDecimal;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[2] = feature1;
      Feature feature2 = Feature.UseBigDecimal;
      featureArray0[3] = feature2;
      Feature feature3 = Feature.AllowArbitraryCommas;
      featureArray0[4] = feature3;
      featureArray0[5] = feature0;
      Feature feature4 = Feature.SupportNonPublicField;
      featureArray0[6] = feature4;
      featureArray0[7] = feature1;
      Feature feature5 = Feature.IgnoreNotMatch;
      featureArray0[8] = feature5;
      JSON.toJSONString((Object) null, true);
      JSONObject jSONObject0 = new JSONObject(183);
      Locale locale0 = Locale.PRC;
      JSON.defaultLocale = locale0;
      jSONObject0.getInnerMap();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) feature0, serializeFilterArray0, serializerFeatureArray0);
      assertEquals("\"UseBigDecimal\"", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      boolean boolean0 = JSON.isValidObject("6");
      boolean boolean1 = JSON.isValidArray("");
      assertFalse(boolean1);
      
      JSONArray jSONArray0 = new JSONArray(2126);
      boolean boolean2 = JSON.isValid((String) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = JSON.isValid("@type");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(106, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.SortField;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[7] = serializerFeature7;
      JSON.toJSONString((Object) jSONObject0, serializerFeatureArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        JSON.parseArray("?p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Feature feature0 = Feature.AllowArbitraryCommas;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      Object object0 = JSON.parse("", featureArray0);
      assertNull(object0);
      
      int int0 = 960;
      Integer integer0 = new Integer(int0);
      int int1 = (-4779);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONString((Object) integer0, int1, serializerFeatureArray0);
      String string0 = "@type";
      Class<JSONObject> class0 = JSONObject.class;
      PipedOutputStream pipedOutputStream0 = null;
      int int2 = (-176);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)32;
      Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      ParseProcess parseProcess0 = null;
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      String string0 = ";[D";
      // Undeclared exception!
      try { 
        JSON.parseObject(string0, (Type) class1, parserConfig0, parseProcess0, jSONObject0.DEFAULT_PARSER_FEATURE, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(22, true);
      JSON.defaultTimeZone = jSONObject0.defaultTimeZone;
      jSONObject0.getLongValue("");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSON.toJSON((Object) set0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.isValidObject("?p");
      JSON.isValidArray("?p");
      JSONArray jSONArray0 = new JSONArray(2126);
      ParserConfig.getGlobalInstance();
      JSON.toJSON((Object) jSONArray0, (ParserConfig) null);
      jSONObject0.getShort("WEjtPxn;5U{F)R");
      jSONObject0.getFloatValue("1.2.68");
      Integer integer0 = new Integer(989);
      jSONObject0.getBytes("");
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      JSONArray jSONArray1 = new JSONArray(3089);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      Feature[] featureArray0 = new Feature[8];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      featureArray0[7] = feature0;
      JSON.parse((byte[]) null, 2126, 20, (CharsetDecoder) uTF8Decoder0, featureArray0);
      Object object0 = new Object();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      String string0 = jSONObject0.getString("1.2.68");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[1];
      JSON.parse((byte[]) null, (-520), 170, (CharsetDecoder) uTF8Decoder0, featureArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) null, (-2532), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(106, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      ParserConfig.getGlobalInstance();
      TreeMap<JSONArray, ParameterizedTypeImpl> treeMap0 = new TreeMap<JSONArray, ParameterizedTypeImpl>();
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      objectStreamClass0.forClass();
      JSONArray jSONArray0 = new JSONArray(2);
      byte[] byteArray0 = new byte[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      JSON.parse(byteArray0, 65536, (-1829), (CharsetDecoder) uTF8Decoder0, featureArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.add((-2050), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2050, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      JSONArray jSONArray0 = new JSONArray(2);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[0];
      Object object0 = JSON.parse(byteArray0, 3089, 2, (CharsetDecoder) uTF8Decoder0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-119), 8);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 8);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Feature feature0 = Feature.AllowArbitraryCommas;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      JSON.parse("", featureArray0);
      String string0 = "";
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      String string1 = "Z";
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, charset0, (Type) null, (Feature[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.writeJSONString((Appendable) stringWriter0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.getBoolean((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Class<JSONPObject> class0 = JSONPObject.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SupportArrayToBean;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportArrayToBean;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SupportAutoType;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.UseObjectArray;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.InternFieldNames;
      featureArray0[7] = feature7;
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, charset0, type0, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.isValidObject("?p");
      JSON.isValidArray("?p");
      JSONArray jSONArray0 = new JSONArray(2126);
      jSONObject0.getShort("WEjtPxn;5U{F)R");
      jSONObject0.getFloatValue("1.2.68");
      Integer integer0 = new Integer(989);
      jSONObject0.getBytes("");
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = JSON.isValid("(C)Ljava/lang/String;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      serializeConfig0.getObjectWriter(class1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes(charset0, (Object) null, serializeConfig0, (SerializeFilter[]) null, "", (-2079), serializerFeatureArray0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getBytes("=`AMS");
      boolean boolean0 = JSON.isValid("(C)Ljava/util/UUID;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      JSONPObject jSONPObject0 = new JSONPObject("1.2.68");
      jSONArray0.setRelatedArray("^tsPm2Pm<");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[2] = serializerFeature1;
      JSONArray jSONArray1 = JSON.parseArray("/**/");
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSON.isValidArray("\"$Y@");
      JSONArray jSONArray0 = new JSONArray();
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.serializer.PascalNameFilter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(170);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      Class<JSONArray> class1 = JSONArray.class;
      jSONArray0.toJavaObject(class1);
      charArray0[1] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 3089, (Type) class0, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.serializer.PascalNameFilter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      JSON.isValidObject("");
      JSON.isValidArray("");
      JSONArray jSONArray0 = new JSONArray(2126);
      int int0 = 2090;
      boolean boolean0 = true;
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.serializer.PascalNameFilter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "_/lom9k68XT";
      JSONScanner jSONScanner0 = new JSONScanner("_/lom9k68XT");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-13);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte) (-13), (int) (byte) (-13), charsetDecoder0, 2055);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(106, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-62);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3089, (byte)0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(193);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 1182, 3089, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = null;
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(type0);
      genericArrayTypeImpl0.getTypeName();
      int int0 = 1;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) genericArrayTypeImpl0, serializeConfig0, (SerializeFilter[]) null, "", 1, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.util.GenericArrayTypeImpl, create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      parserConfig0.checkAutoType(class0);
      String string0 = "([C)J";
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.toJSON((Object) string0, serializeConfig0);
      // Undeclared exception!
      try { 
        JSON.parseArray(parserConfig0.AUTOTYPE_SUPPORT_PROPERTY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("true", "true", (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LinkedHashMap<GenericArrayTypeImpl, JSON> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSON>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("fastjson.serializerFeatures.MapSortField", "true", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONStringWithDateFormat(jSONArray0, "@type", serializerFeatureArray0);
      SerializeConfig.getGlobalInstance();
      boolean boolean0 = JSON.isValidObject("?p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.isValidObject("?p");
      JSON.isValidArray("?p");
      JSONArray jSONArray0 = new JSONArray(2126);
      jSONObject0.getShort("WEjtPxn;5U{F)R");
      jSONObject0.getFloatValue("1.2.68");
      Integer integer0 = new Integer(989);
      jSONObject0.getBytes("");
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      SerializeConfig.getGlobalInstance();
      ConcurrentSkipListMap<String, SimplePropertyPreFilter> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, SimplePropertyPreFilter>();
      jSONObject0.fluentPutAll(concurrentSkipListMap0);
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[2] = serializerFeature2;
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat(javaBeanSerializer0, "UTF-8", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = JSON.isValid("Zp8mLu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.toJSONString();
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.writeJSONString((Appendable) stringWriter0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSON.parse("", 2147483645);
      Boolean boolean0 = jSONObject0.getBoolean(jSONArray0.DEFAULT_TYPE_KEY);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "";
      JSON.isValid("");
      JSONObject jSONObject0 = new JSONObject(false);
      JSON.isValidObject("1.2.68");
      SerializeConfig serializeConfig0 = new SerializeConfig(1207);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) "", serializeConfig0, 1207, serializerFeatureArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Feature[] featureArray0 = new Feature[29];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse("", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = null;
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes(charset0, (Object) null, serializeConfig0, (SerializeFilter[]) null, (String) null, 3, serializerFeatureArray0);
      Class<StringWriter> class1 = StringWriter.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("5d|1S80x:'[", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but int, pos 1, line 1, column 25d|1S80x:'[
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      JSON.isValidObject("");
      JSON.isValidArray("");
      JSONArray jSONArray0 = new JSONArray(2126);
      JSONObject jSONObject0 = new JSONObject(2090, true);
      jSONObject0.getFloatValue("cg[bpV{o=73? 3dAdm");
      Integer integer0 = new Integer(43);
      jSONObject0.getFloatValue("");
      jSONObject0.getLongValue("TK I`1FK>^*t3wXn");
      jSONObject0.getBytes("");
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPObject jSONPObject0 = new JSONPObject();
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONPObject0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan null error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)32;
      Charset.defaultCharset();
      ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AutoCloseSource;
      featureArray0[2] = feature2;
      featureArray0[3] = feature1;
      ParserConfig.getGlobalInstance();
      TreeMap<JSONArray, ParameterizedTypeImpl> treeMap0 = new TreeMap<JSONArray, ParameterizedTypeImpl>();
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) jSONArray0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-2542));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(99);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.writeJSONString((Appendable) stringWriter0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.fluentSet(99, (Object) null);
      String string0 = "";
      JSON.parse("true", 3089);
      short short0 = jSONObject0.getShortValue(string0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      JSON.isValidObject("");
      JSON.isValidArray("");
      JSONArray jSONArray0 = new JSONArray(2126);
      JSONObject jSONObject0 = new JSONObject(2090, true);
      jSONObject0.getFloatValue("cg[bpV{o=73? 3dAdm");
      Integer integer0 = new Integer(43);
      jSONObject0.getBytes("9ZK#*qa.aj");
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.toJSON((Object) serializeConfig0, serializeConfig0);
      // Undeclared exception!
      try { 
        JSON.parseArray("cg[bpV{o=73? 3dAdm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.isValidObject("?p");
      JSON.isValidArray("?p");
      JSONArray jSONArray0 = new JSONArray(2126);
      char[] charArray0 = new char[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[0] = '?';
      charArray0[1] = '1';
      charArray0[2] = 'O';
      JSON.toJSONString((Object) null);
      charArray0[3] = '9';
      ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 987, (ParserConfig) null, 65536);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.isValid("");
      JSONObject jSONObject1 = new JSONObject(false);
      JSON.isValidObject("@type");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Feature feature0 = Feature.SortFeidFastMatch;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      Object object0 = JSON.parse((String) null, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("@type", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      TreeMap<JSONArray, ParameterizedTypeImpl> treeMap0 = new TreeMap<JSONArray, ParameterizedTypeImpl>();
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.isValidObject("?p");
      JSONObject jSONObject1 = new JSONObject();
      JSON.isValidObject("");
      Class<JSONPObject> class0 = JSONPObject.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@type";
      stringArray0[1] = "?p";
      stringArray0[2] = "1.2.68";
      stringArray0[3] = "1.2.68";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) simplePropertyPreFilter0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.serializer.SimplePropertyPreFilter, create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      String string0 = "";
      JSONPObject jSONPObject0 = new JSONPObject("");
      jSONArray0.add((Object) jSONPObject0);
      JSONObject jSONObject0 = new JSONObject(1, false);
      JSONObject jSONObject1 = jSONObject0.fluentRemove(jSONArray0);
      JSONObject jSONObject2 = jSONObject1.fluentPutAll(jSONObject0);
      jSONObject2.getFloatValue("Ewg0");
      Integer integer0 = new Integer(3089);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1.2.68";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[3] = (SerializeFilter) pascalNameFilter1;
      PascalNameFilter pascalNameFilter2 = new PascalNameFilter();
      serializeFilterArray0[4] = (SerializeFilter) pascalNameFilter2;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONArray0, serializeFilterArray0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Charset.defaultCharset();
      LinkedHashMap<GenericArrayTypeImpl, JSON> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSON>();
      Feature[] featureArray0 = new Feature[0];
      JSON.parse((String) null, featureArray0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, serializeFilterArray0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowSingleQuotes;
      featureArray0[2] = feature2;
      JSON.parseObject(byteArray0, (-246), (-246), charset0, (Type) class0, featureArray0);
      JSON.toJSONString((Object) null, true);
      JSONObject jSONObject0 = new JSONObject(3049);
      JSONObject jSONObject1 = new JSONObject(false);
      Map<String, Object> map0 = jSONObject1.getInnerMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = JSON.isValid("false");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = JSON.isValid("[B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSON.isValid("");
      JSONObject jSONObject0 = new JSONObject(false);
      JSON.isValidObject("1.2.68");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Feature[] featureArray0 = new Feature[16];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse("", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashMap<JSONPath.Operator, Annotation> linkedHashMap0 = new LinkedHashMap<JSONPath.Operator, Annotation>();
      // Undeclared exception!
      try { 
        jSONArray0.toString((SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      JSONPObject jSONPObject0 = new JSONPObject("");
      jSONArray0.add((Object) jSONPObject0);
      jSONArray0.setRelatedArray("^tsPm2Pm<");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[2] = serializerFeature2;
      String string0 = jSONArray0.toString(serializerFeatureArray0);
      assertEquals("[/**/()]", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Feature feature0 = Feature.AllowArbitraryCommas;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      Object object0 = JSON.parse("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "7Anh'R]Ic%=a}2(";
      JSON.isValidArray("7Anh'R]Ic%=a}2(");
      JSON.isValidArray("fastjson.parser.features.ErrorOnEnumNotMatch");
      int int0 = 2126;
      JSONArray jSONArray0 = new JSONArray(2126);
      String string1 = "false";
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowISO8601DateFormat;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSON.parseObject("false", featureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      LinkedHashMap<GenericArrayTypeImpl, JSON> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSON>();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)60;
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      String string0 = "[C";
      JSON.isValidArray("[C");
      JSONObject jSONObject0 = new JSONObject(7);
      JSON.defaultLocale = jSONObject0.defaultLocale;
      jSONObject0.getInnerMap();
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class1 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class1);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd((-127), (Object) propertyNamingStrategy0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -127, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Charset.defaultCharset();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse((byte[]) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Feature feature0 = Feature.AllowArbitraryCommas;
      String string0 = "";
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      JSON.parse("", featureArray0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(string0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      defaultJSONParser0.setContext(parseContext0);
      JSONArray jSONArray0 = new JSONArray(defaultJSONParser0.NONE);
      JSON.handleResovleTask(defaultJSONParser0, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      charset0.newDecoder();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int) 0, (int) 0, (CharsetDecoder) uTF8Decoder0, (Type) null, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSON.isValidArray("7Anh'R]Ic%=a}2(");
      JSONObject jSONObject0 = new JSONObject();
      JSON.isValidObject("1.2.68");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSON.DEFFAULT_DATE_FORMAT = "?p";
      JSONArray jSONArray0 = new JSONArray(3089);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)10;
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowUnQuotedFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SupportAutoType;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.NonStringKeyAsString;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.ErrorOnEnumNotMatch;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.UseObjectArray;
      featureArray0[6] = feature6;
      JSON.parse(byteArray0, featureArray0);
      int int0 = 2822;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2822, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Charset.defaultCharset();
      ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      ParserConfig.getGlobalInstance();
      TreeMap<JSONArray, ParameterizedTypeImpl> treeMap0 = new TreeMap<JSONArray, ParameterizedTypeImpl>();
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)32;
      Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      parserConfig0.checkAutoType(class0);
      JSON.isValidObject(parserConfig0.AUTOTYPE_ACCEPT);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray(jSONObject0.DEFAULT_GENERATE_FEATURE);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(byteArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONObject jSONObject0 = new JSONObject(106, true);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      Class<JSONPObject> class0 = JSONPObject.class;
      Class<Field> class1 = Field.class;
      Class<Field> class2 = Field.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache(" g:JxA", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.68", class1, class2, class1, (Field) null, (byte)0, 989, (byte)0);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      linkedList0.add((Method) null);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      StringWriter stringWriter0 = new StringWriter(12);
      LinkedList linkedList1 = (LinkedList)JSON.toJSON((Object) linkedList0, serializeConfig0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(170);
      JSON.isValid("true");
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", 3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.writeJSONString((Appendable) stringWriter0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      jSONArray0.fluentSet(1081, pascalNameFilter0);
      // Undeclared exception!
      try { 
        JSON.parse("ZAqvf0(k?fn)p7LRn5", 172);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2ZAqvf0(k?fn)p7LRn5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      Object object0 = JSON.parse(byteArray0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSON.isValidArray("7Anh']Ic%=a}2(");
      Feature[] featureArray0 = new Feature[18];
      Feature feature0 = Feature.UseBigDecimal;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[2] = feature1;
      Feature feature2 = Feature.UseBigDecimal;
      featureArray0[3] = feature2;
      Feature feature3 = Feature.AllowArbitraryCommas;
      featureArray0[4] = feature3;
      featureArray0[5] = feature0;
      Feature feature4 = Feature.SupportNonPublicField;
      featureArray0[6] = feature4;
      featureArray0[7] = feature1;
      Feature feature5 = Feature.IgnoreNotMatch;
      featureArray0[8] = feature5;
      JSON.toJSONString((Object) null, true);
      JSONObject jSONObject0 = new JSONObject(183);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)1;
      JSON.parse(byteArray0, featureArray0);
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      jSONObject0.put("4G\"/m:ENrnQjR:`hSx", (Object) javaBeanSerializer0);
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[4] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[5] = serializerFeature5;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "yyyy-MM-dd HH:mm:ss", (SerializeConfig) null, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader.getSystemClassLoader();
      Feature feature0 = Feature.AllowArbitraryCommas;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@type";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      Class<Object> class0 = Object.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter3;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) jSONArray0, serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
      Feature feature1 = Feature.InternFieldNames;
      Feature[] featureArray0 = new Feature[9];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature1;
      featureArray0[4] = feature1;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      featureArray0[7] = feature1;
      featureArray0[8] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse("N!(hRWv~h;K'/X#", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2N!(hRWv~h;K'/X#
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      ParseProcess parseProcess0 = null;
      int int0 = (-2147483645);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AutoCloseSource;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseObjectArray;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableSpecialKeyDetect;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.InternFieldNames;
      featureArray0[5] = feature5;
      featureArray0[6] = feature3;
      JSON.parseObject(byteArray0, charset0, (Type) class1, parserConfig0, parseProcess0, int0, featureArray0);
      String string0 = null;
      jSONObject0.getDouble(string0);
      jSONObject0.getFloatValue(string0);
      JSONArray jSONArray0 = new JSONArray(byte0);
      int int1 = 1415;
      String string1 = "+5";
      Object object0 = JSON.parse(string1);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(int1, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1415, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(170);
      Type[] typeArray0 = new Type[2];
      char[] charArray0 = new char[3];
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 170, typeArray0[1], featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSON.isValidArray("");
      Type type0 = JSON.getMixInAnnotations((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Feature feature0 = Feature.AllowSingleQuotes;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      Class<Field> class0 = Field.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Feature[] featureArray0 = new Feature[9];
      featureArray0[0] = feature1;
      featureArray0[1] = feature1;
      featureArray0[2] = feature0;
      Feature feature2 = Feature.AllowComment;
      featureArray0[3] = feature2;
      featureArray0[4] = feature1;
      featureArray0[5] = feature1;
      featureArray0[6] = feature1;
      featureArray0[7] = feature1;
      featureArray0[8] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int) 2, (int) 2, charsetDecoder0, (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 2, line 1, column 3\u0002\u0002
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Type[] typeArray0 = new Type[9];
      char[] charArray0 = new char[1];
      Feature[] featureArray0 = new Feature[21];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, (-698), typeArray0[3], featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.writeJSONString((Appendable) stringWriter0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-2156), jSONObject0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2156, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)32;
      Charset.defaultCharset();
      JSONObject jSONObject1 = new JSONObject(true);
      ParserConfig.getGlobalInstance();
      TreeMap<JSONArray, ParameterizedTypeImpl> treeMap0 = new TreeMap<JSONArray, ParameterizedTypeImpl>();
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-104);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Class<String> class0 = String.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      objectStreamClass0.getSerialVersionUID();
      objectStreamClass0.forClass();
      String string0 = JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class0, (Feature[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(106, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-62);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3089, (byte) (-119));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookup(class0);
      objectStreamClass0.forClass();
      JSONArray jSONArray0 = new JSONArray(2);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onMalformedInput(codingErrorAction0);
      byte[] byteArray0 = new byte[0];
      JSON.parse(byteArray0, 3089, 2, (CharsetDecoder) uTF8Decoder0, featureArray0);
      Charset charset0 = uTF8Decoder0.charset();
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 2, 2283, charset0, (Type) class0, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONObject jSONObject0 = new JSONObject(106, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-62);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3089, (byte) (-119));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Charset.defaultCharset();
      sequenceInputStream0.markSupported();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONObject jSONObject0 = new JSONObject(106, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      StringWriter stringWriter0 = new StringWriter(12);
      LinkedList linkedList1 = (LinkedList)JSON.toJSON((Object) linkedList0, serializeConfig0);
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      jSONObject0.getObject("yyyy-MM-dd HH:mm:ss", (Type) class1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1.2.68";
      stringArray0[2] = "1.2.68";
      stringArray0[3] = "@type";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      JSONObject jSONObject1 = (JSONObject)JSON.toJSON((Object) simplePropertyPreFilter0, serializeConfig0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      serializeConfig0.createJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) class0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(106, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONObject> class0 = JSONObject.class;
      serializeConfig0.createJavaBeanSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Object object0 = JSON.toJSON((Object) jSONArray0, serializeConfig0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject("U.7");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) jSONPObject0, (-2602), serializerFeatureArray0);
      assertEquals("/**/U.7()", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSON.toJSONString((Object) null, false);
      JSONObject jSONObject0 = new JSONObject(999999999);
      jSONObject0.getInnerMap();
      // Undeclared exception!
      try { 
        JSON.parseArray("@type", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSON.isValidArray("7Anh']Ic%=a}2(");
      Feature[] featureArray0 = new Feature[18];
      Feature feature0 = Feature.UseBigDecimal;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[2] = feature1;
      Feature feature2 = Feature.UseBigDecimal;
      featureArray0[3] = feature2;
      Feature feature3 = Feature.AllowArbitraryCommas;
      featureArray0[4] = feature3;
      featureArray0[5] = feature0;
      Feature feature4 = Feature.SupportNonPublicField;
      featureArray0[6] = feature4;
      featureArray0[7] = feature1;
      Feature feature5 = Feature.IgnoreNotMatch;
      featureArray0[8] = feature5;
      JSON.toJSONString((Object) null, true);
      JSONObject jSONObject0 = new JSONObject(183);
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      JSON.toJSONString((Object) linkedList0, true);
      JSONObject jSONObject0 = new JSONObject(26);
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "";
      Class<StringWriter> class0 = StringWriter.class;
      JSON.parseArray("", class0);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      SerializeConfig.getGlobalInstance();
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      // Undeclared exception!
      try { 
        JSON.parseArray(string0, typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      Object object0 = JSON.toJSON((Object) propertyNamingStrategy0, serializeConfig0);
      assertEquals("NoChange", object0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      ParseProcess parseProcess0 = null;
      int int0 = (-2147483645);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AutoCloseSource;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseObjectArray;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableSpecialKeyDetect;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.InternFieldNames;
      featureArray0[5] = feature5;
      featureArray0[6] = feature3;
      JSON.parseObject(byteArray0, charset0, (Type) class1, parserConfig0, parseProcess0, int0, featureArray0);
      String string0 = null;
      jSONObject0.getDouble(string0);
      jSONObject0.getFloatValue(string0);
      String string1 = "";
      String string2 = "TK 1`1FK>^*t3wXn";
      jSONObject0.getFloatValue(string2);
      jSONObject0.getLongValue(string1);
      jSONObject0.getBytes(string1);
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.toJSON((Object) linkedHashMap0, serializeConfig0);
      JSON.getMixInAnnotations(class0);
      String string3 = "+1!kU8[k,#";
      Double double0 = jSONObject0.getDouble(string3);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Feature feature0 = Feature.AllowArbitraryCommas;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      JSON.parse("", featureArray0);
      String string0 = null;
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = JSON.parseObject(string0, class0);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Class<String> class0 = String.class;
      byteArrayInputStream0.markSupported();
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      objectStreamClass0.getSerialVersionUID();
      objectStreamClass0.forClass();
      String string0 = JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class0, (Feature[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, (Type) class1, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(106, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-62);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3089, (byte) (-119));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      JSON.isValidObject("yyyy-MM-dd HH:mm:ss");
      jSONObject0.isEmpty();
      JSONArray jSONArray0 = new JSONArray(999);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-432));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("3;Uhzl.+Yq~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("toJSON error");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)32;
      Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      parserConfig0.checkAutoType(class0);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AutoCloseSource;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseObjectArray;
      featureArray0[3] = feature3;
      ParserConfig.getGlobalInstance();
      TreeMap<JSONArray, ParameterizedTypeImpl> treeMap0 = new TreeMap<JSONArray, ParameterizedTypeImpl>();
      ParserConfig parserConfig1 = null;
      try {
        parserConfig1 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Feature feature0 = Feature.AllowArbitraryCommas;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse("R&9\"R@uz]P[w%lO", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2R&9\"R@uz]P[w%lO
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowISO8601DateFormat;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSON.parse("u%>yY[^jU>d a", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2u%>yY[^jU>d a
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) null, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashMap<JSONPath.Operator, Annotation> linkedHashMap0 = new LinkedHashMap<JSONPath.Operator, Annotation>();
      // Undeclared exception!
      try { 
        jSONArray0.toString((SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ParserConfig parserConfig0 = null;
      try {
        parserConfig0 = new ParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = "[MeFhq/V eb`&y~";
      // Undeclared exception!
      try { 
        JSON.parseArray("[MeFhq/V eb`&y~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[MeFhq/V eb`&y~
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      JSON.parseArray("", class0);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<JSON> class1 = JSON.class;
      parserConfig0.createJavaBeanDeserializer(class1, class0);
      parserConfig0.checkAutoType(class0);
      ParseProcess parseProcess0 = null;
      byte[] byteArray0 = null;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      int int0 = (-866);
      Feature[] featureArray0 = null;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, charset0, (Type) class1, parserConfig0, parseProcess0, int0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSON.toJSON((Object) stringWriter0, serializeConfig0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      JSON.removeMixInAnnotations((Type) null);
      // Undeclared exception!
      try { 
        JSON.setDefaultTypeKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = 191;
      ParserConfig parserConfig0 = new ParserConfig();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (-926), (-926), charsetDecoder0, (Type) null, (Feature[]) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.isValidObject("?p");
      JSON.isValidArray("?p");
      JSONArray jSONArray0 = new JSONArray(2128);
      jSONObject0.getFloatValue("1.2.68");
      long long0 = new Integer((-2182));
      jSONObject0.getBytes("");
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONObject jSONObject1 = (JSONObject)JSON.toJSON((Object) serializeConfig0, serializeConfig0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      serializeConfig0.setAsmEnable(false);
      Class<Object> class0 = Object.class;
      serializeConfig0.getObjectWriter(class0, false);
      JSON.toJSON((Object) class0, serializeConfig0);
      int int0 = 958;
      JSONObject jSONObject0 = new JSONObject(int0);
      String string0 = "AR";
      JSONArray jSONArray0 = jSONObject0.getJSONArray(string0);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      jSONArray1.getDouble(jSONArray0.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      ObjectStreamClass.lookup(class0);
      objectStreamClass0.forClass();
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) charset0, serializeConfig0, serializeFilterArray0, "?p", 2, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.toJSONString();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[0];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(32);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Feature feature0 = Feature.OrderedField;
      Integer integer0 = new Integer(6);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentPut("{Hzlolw:z_-<c`u", "");
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      JSON.parseObject("", featureArray0);
      boolean boolean0 = false;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.putAll(jSONObject0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSON.parseObject("");
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(jSONArray0.DEFAULT_PARSER_FEATURE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSON.isValidObject("true");
      JSON.isValidArray("true");
      JSONObject jSONObject0 = new JSONObject(2126, false);
      jSONObject0.getFloatValue("Ha?__orJ&u");
      Integer integer0 = new Integer((-44));
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONArray jSONArray0 = new JSONArray();
      linkedHashMap0.put(jSONObject0, jSONArray0);
      JSON.toJSON((Object) linkedHashMap0, serializeConfig0);
      assertEquals(1, linkedHashMap0.size());
      
      boolean boolean0 = JSON.isValid("?p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      ParseProcess parseProcess0 = null;
      int int0 = (-2147483645);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AutoCloseSource;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseObjectArray;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableSpecialKeyDetect;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.InternFieldNames;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowComment;
      featureArray0[6] = feature6;
      JSON.parseObject(byteArray0, charset0, (Type) class1, parserConfig0, parseProcess0, int0, featureArray0);
      String string0 = null;
      jSONObject0.getDouble(string0);
      jSONObject0.getFloatValue(string0);
      String string1 = "";
      String string2 = "TK 1`1FK>^*t3wXn";
      jSONObject0.getFloatValue(string2);
      jSONObject0.getLongValue(string1);
      byte[] byteArray1 = jSONObject0.getBytes(string1);
      assertNull(byteArray1);
      
      LinkedHashMap<Object, JSONArray> linkedHashMap0 = new LinkedHashMap<Object, JSONArray>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Object object0 = JSON.toJSON((Object) linkedHashMap0, serializeConfig0);
      assertNotSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      LinkedHashMap<JSONArray, Object> linkedHashMap0 = new LinkedHashMap<JSONArray, Object>();
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)JSON.toJSON((Object) linkedHashMap0, serializeConfig0);
      assertEquals(0, linkedHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      JSON.parseArray("", class0);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      int int0 = 6;
      StringWriter stringWriter0 = new StringWriter(int0);
      Object object0 = JSON.toJSON((Object) stringWriter0, serializeConfig0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      TreeMap<JSONArray, ParameterizedTypeImpl> treeMap0 = new TreeMap<JSONArray, ParameterizedTypeImpl>();
      ParserConfig parserConfig0 = new ParserConfig();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      ParseProcess parseProcess0 = null;
      int int0 = (-2147483645);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AutoCloseSource;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseObjectArray;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableSpecialKeyDetect;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.InternFieldNames;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowComment;
      featureArray0[6] = feature6;
      JSON.parseObject(byteArray0, charset0, (Type) class1, parserConfig0, parseProcess0, int0, featureArray0);
      JSONArray jSONArray0 = new JSONArray(byteArray0[0]);
      int int1 = 20;
      // Undeclared exception!
      try { 
        JSON.parseObject(jSONObject0.VERSION, (Class<Constructor<AbstractMap.SimpleEntry>>) class1, parseProcess0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Charset charset0 = Charset.defaultCharset();
      Class<Object> class0 = Object.class;
      JSONObject jSONObject0 = new JSONObject(6, true);
      jSONObject0.getShortValue("?p");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "?p";
      stringArray0[1] = "?p";
      stringArray0[2] = "_asm";
      stringArray0[3] = "?p";
      stringArray0[4] = "_asm";
      stringArray0[5] = "_asm";
      stringArray0[6] = "1.2.68";
      stringArray0[7] = "?p";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(32);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes(charset0, (Object) simplePropertyPreFilter0, serializeConfig0, (SerializeFilter[]) null, "_asm", 32, serializerFeatureArray0);
      Class<StringWriter> class1 = StringWriter.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("_asm", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2_asm
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes(charset0, (Object) null, serializeConfig0, (SerializeFilter[]) null, "", 2138, serializerFeatureArray0);
      Class<StringWriter> class1 = StringWriter.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("can not cast to JSONObject.", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = "WPS";
      Class<StringWriter> class0 = StringWriter.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        JSON.parseArray(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      List<PropertyNamingStrategy> list0 = new LinkedList<PropertyNamingStrategy>();
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Class<String> class0 = String.class;
      byteArrayInputStream0.markSupported();
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class1, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 1, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(967, true);
      jSONObject0.toJSONString();
      boolean boolean0 = JSON.isValidObject("{}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      JSON.isValidObject((String) null);
      jSONObject0.isEmpty();
      JSONArray jSONArray0 = new JSONArray(999);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-432));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("Ty5yT7ySy_{9],");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, line 1, column 5Ty5yT7ySy_{9],
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = "[MeFhq/V eb`&y~";
      // Undeclared exception!
      try { 
        JSON.parseObject("[MeFhq/V eb`&y~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[MeFhq/V eb`&y~
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Charset.defaultCharset();
      Class<Object> class0 = Object.class;
      JSONObject jSONObject0 = new JSONObject(6, true);
      jSONObject0.getShortValue("?p");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "?p";
      stringArray0[1] = "?p";
      stringArray0[2] = "_asm";
      stringArray0[3] = "?p";
      stringArray0[4] = "_asm";
      stringArray0[5] = "_asm";
      stringArray0[6] = "1.2.68";
      stringArray0[7] = "?p";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(32);
      JSON.removeMixInAnnotations(class0);
      // Undeclared exception!
      try { 
        JSON.parseArray("_asm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSON.removeMixInAnnotations((Type) null);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = null;
      JSON.parseObject("", class0, (Feature[]) null);
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      Type type0 = null;
      JSON.removeMixInAnnotations((Type) null);
      // Undeclared exception!
      try { 
        JSON.parseArray("t07;+q'~p0f]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes(charset0, (Object) null, serializeConfig0, (SerializeFilter[]) null, "QxF", (-2079), serializerFeatureArray0);
      JSONArray jSONArray0 = new JSONArray(62);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", (Type) class0, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("aXP6j5e<j'%=ng+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSON.parseObject((String) null);
      JSON.isValidArray((String) null);
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSON.isValidArray("7Anh']Ic%=a}2(");
      JSONObject jSONObject0 = new JSONObject(191, false);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      jSONObject1.getJSONObject("");
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.UseBigDecimal;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowISO8601DateFormat;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.UseBigDecimal;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseBigDecimal;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowArbitraryCommas;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.NonStringKeyAsString;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.SupportNonPublicField;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.NonStringKeyAsString;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.IgnoreNotMatch;
      featureArray0[8] = feature8;
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.features.ErrorOnEnumNotMatch", (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Feature feature0 = Feature.AllowSingleQuotes;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)2;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int)  (-95), 14, charsetDecoder0, (Type) class0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[15];
      byte byte0 = (byte)32;
      jSONObject0.DEFAULT_GENERATE_FEATURE = (int) (byte)32;
      Charset.defaultCharset();
      ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      String string0 = JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class0, (Feature[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("q\"?HzkYGC=J;wp@(_", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2q\"?HzkYGC=J;wp@(_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      JSON.parseArray((String) null, class0);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<StringWriter> class0 = StringWriter.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("_asm", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2_asm
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSON.isValidArray("unclosed string : ");
      JSON.toJSONString((Object) stringWriter0, false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"java.io.StringWriter@0000000005\"";
      stringArray0[1] = "\"java.io.StringWriter@0000000005\"";
      stringArray0[2] = "\"java.io.StringWriter@0000000005\"";
      stringArray0[3] = "\"java.io.StringWriter@0000000005\"";
      stringArray0[4] = "unclosed string : ";
      stringArray0[5] = "unclosed string : ";
      stringArray0[6] = "unclosed string : ";
      stringArray0[7] = "unclosed string : ";
      stringArray0[8] = "\"java.io.StringWriter@0000000005\"";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "\"java.io.StringWriter@0000000005\"", (SerializeFilter) simplePropertyPreFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "NOT_IN";
      stringArray0[1] = "can not cast to JSONObject.";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "`r>6[WD;Xtp;";
      stringArray0[5] = "h(m\"u+b|D*uj_|lG";
      stringArray0[6] = "@type";
      stringArray0[7] = "-Fa*_{";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[2] = serializerFeature2;
      String string0 = JSON.toJSONString((Object) propertyNamingStrategy0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      assertEquals("\"CamelCase\"", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = JSON.isValid((String) null);
      assertFalse(boolean0);
      
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.SortField;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.SortField;
      serializerFeatureArray0[4] = serializerFeature4;
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.toJSONString();
      SerializeConfig serializeConfig0 = new SerializeConfig(32);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) null, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      Class<JSONArray> class1 = JSONArray.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("hd", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("hd", class1, class0, class0, (Field) null, (-575), (-575), (-575));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONString((Object) null, serializeConfig0, serializerFeatureArray0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<String, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // map is null.
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Charset.defaultCharset();
      TreeMap<JSONArray, ParameterizedTypeImpl> treeMap0 = new TreeMap<JSONArray, ParameterizedTypeImpl>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      LinkedHashMap<GenericArrayTypeImpl, JSON> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSON>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONStringWithDateFormat(linkedHashMap0, "", serializerFeatureArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Object object0 = new Object();
      JSON.toJSON(object0, serializeConfig0);
      // Undeclared exception!
      try { 
        JSON.parseArray("9E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteRootClassName;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteDateUseDateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(serializerFeature2, (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(linkedHashMap0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializeConfig0.setAsmEnable(false);
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONStringZ(jSONObject0, serializeConfig0, serializerFeatureArray0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getShort((-2147483645));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(36);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(jSONArray0);
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) linkedHashMap0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      jSONArray1.setRelatedArray(jSONArray0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseObject((String) null, (Type) class0, (Feature[]) null);
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes(charset0, (Object) charset0, serializeConfig0, (SerializeFilter[]) null, "@d9vm\"3H6", (-718), serializerFeatureArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-2079));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2079
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", 4571, serializerFeatureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.ArraySerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(948, true);
      String string0 = jSONObject0.toJSONString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseObject("", (Type) class0, (Feature[]) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes(charset0, (Object) null, serializeConfig0, (SerializeFilter[]) null, "", (-2079), serializerFeatureArray0);
      // Undeclared exception!
      try { 
        JSON.parse("", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.toJSONString();
      String string0 = "^?N^<<)";
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[0];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(32);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[6] = serializerFeature6;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) javaBeanSerializer0, serializeConfig0, serializeFilterArray0, (String) null, 32, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = JSON.parseObject((String) null, class0, featureArray0);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = "";
      Class<Method> class0 = Method.class;
      JSONScanner jSONScanner0 = new JSONScanner("MM/dd/yyyy", 0);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(class0, jSONScanner0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseObject("", (Type) class0, (Feature[]) null);
      JSON.isValidObject("");
      // Undeclared exception!
      try { 
        JSON.parseObject("", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = "parser.features.NonStringKeyAsString";
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = null;
      // Undeclared exception!
      try { 
        JSON.parseObject("parser.features.NonStringKeyAsString", class0, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      jSONObject0.getObject("", (Type) class1);
      Class<SimplePropertyPreFilter> class2 = SimplePropertyPreFilter.class;
      JSON.parseObject((String) null, class2);
      JSONArray jSONArray0 = new JSONArray(2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.add((-2050), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2050, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) serializeConfig0, serializeConfig0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("0;;'J?ct40Wh4;", class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      String string0 = "sU*t)";
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableASM;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowComment;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowISO8601DateFormat;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.InternFieldNames;
      featureArray0[5] = feature5;
      concurrentHashMap0.put("q]Lm<?=/x5", feature0);
      // Undeclared exception!
      try { 
        JSON.parseObject("q]Lm<?=/x5", class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.OrderedField;
      featureArray0[1] = feature1;
      Integer integer0 = new Integer(6);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentPut("", "");
      // Undeclared exception!
      try { 
        JSON.parseObject("W", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2W
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("?~8<", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2?~8<
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parse("", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.safeMode", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.OrderedField;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject("unclosed.str.lit", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 8, line 1, column 9unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Object object0 = JSON.parse("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, line 1, column 1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("Wl(2LfDDJyhYBg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual true, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
