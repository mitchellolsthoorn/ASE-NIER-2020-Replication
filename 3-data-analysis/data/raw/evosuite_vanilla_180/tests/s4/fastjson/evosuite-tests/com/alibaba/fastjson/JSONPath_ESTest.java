/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 16:17:44 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.HijrahDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("~[6Qzf2}I.", "getName", false);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath(",  end ", serializeConfig0, parserConfig0);
      int[] intArray0 = new int[6];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath_MultiIndexSegment0, sQLClientInfoException0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]", hashMap0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("srY@", "zqPQocL", jSONPath_Operator0);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, bigInteger0, sQLClientInfoException0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray("vc)J2:l6>8pYh^$6!t", stringArray0);
      boolean boolean0 = JSONPath.eqNotNull(3089, ((JSON) object0).DEFAULT_PARSER_FEATURE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/stackTrace/0", "|");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLRecoverableException0, "/stackTrace/0", (Object) "/stackTrace/0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("KQ", "/", 92);
      SQLTransientException sQLTransientException0 = new SQLTransientException("R[bb~", "and", sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("t'P", "/cause/cause/stackTrace/12", sQLTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(2494, false, true, (-2054), 10, sQLRecoverableException0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/cause/stackTrace/0";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(dataTruncation0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "step must greater than zero : ";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("not", "step must greater than zero : ", "not", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("E_g");
      Byte byte0 = new Byte((byte)1);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte)1, (byte)1, 4);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, byte0, bigInteger0);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(36, 0, 2112);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("stackTrace", "fastjson.parser.safeMode", (Throwable) null);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLTimeoutException0, jSONPath0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("stackTrace");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, (-1596), 255);
      Byte byte0 = new Byte((byte)78);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, byte0, byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("illegal json : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'i, but ' '
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Rt=o");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!8cYd");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<696M<8(^O.U{");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1029L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Y0");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(3132L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k>0UV$00J%eFXBzEo");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-354L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$!u|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!JgFL(^ ");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("V|*8<~d&_>yK^U<X'p/");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : V|*8<~d&_>yK^U<X'p/
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_Operator0, "fastjson.parser.deny", (Object[]) jSONPath_OperatorArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/cause/cause/stackTrace/13");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("SkipTransientField");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath jSONPath0 = new JSONPath("SkipTransientField");
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, jSONPath_MultiIndexSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6qd}]Uy3");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(6L, object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9E}n,MeIel?x_,");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.ObjectArrayCodec");
      jSONPath0.init();
      assertEquals("com.alibaba.fastjson.serializer.ObjectArrayCodec", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(187);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("uRn{w3", serializeConfig0, parserConfig0);
      Long[] longArray0 = new Long[4];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.autoTypeAccept", longArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepGetPropertyValues(jSONPath_FilterSegment0, arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("50U`sr!pIGhZgts2\"T\"", false);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("zgk~p+p*U<4", jSONPath_PropertySegment0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$KeySetSegment", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, (Object) null, "zgk~p+p*U<4", jSONPath_Operator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_SizeSegment0.eval((JSONPath) null, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$SizeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("n7Zh^Lr w5KRl");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8IapOwMhQ");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('m');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("TODO");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('N');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'N, but 'T'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("SkipTransientField");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      JSONPath jSONPath0 = new JSONPath("SkipTransientField");
      DataTruncation dataTruncation0 = new DataTruncation(112, false, false, 0, (-1495));
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      DataTruncation dataTruncation1 = (DataTruncation)jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath_Segment0, dataTruncation0);
      assertEquals("22001", dataTruncation1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte) (-46), 60, (byte)48);
      SerializeConfig serializeConfig0 = new SerializeConfig(33, true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("s", serializeConfig0, parserConfig0);
      UUID uUID0 = MockUUID.fromString("BnjHV@CZr8@\"RCQoUF");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, uUID0, (Object) null);
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3UV=IW&2l~{T");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-7));
      assertEquals((-4.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\\-");
      jSONPath_JSONPathParser0.readName();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = JSONPath.size((Object) "SkipTransientField", "|");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("KQ", "/", 92);
      int int0 = JSONPath.size((Object) sQLFeatureNotSupportedException0, "/cause/stackTrace/0");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("@");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("\"", "\"");
      int int0 = jSONPath0.size((Object) sQLTransactionRollbackException0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("KE,X5Zz;Q^|4w![");
      boolean boolean0 = jSONPath0.setPropertyValue("KE,X5Zz;Q^|4w![", "KE,X5Zz;Q^|4w![", (-325L), "KE,X5Zz;Q^|4w![");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("and", "_'O4X{sdH*d4isM#wB", 61);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("and", "nin", sQLIntegrityConstraintViolationException0);
      boolean boolean0 = JSONPath.set((Object) "and", "and", (Object) sQLTransactionRollbackException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("@ ");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = JSONPath.read("", "x4aGBx15");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("fb{,b{@cCO+", "toJSON error", 1102);
      Set<?> set0 = JSONPath.keySet((Object) sQLDataException0, "@");
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]GvXJL(F,N+-Ctm6");
      Object object0 = jSONPath0.getPropertyValue((Object) null, "fastjson.parser.safeMode", (-510));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray("vc)J2:l6>8pYh^$6!t", stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("yyyy-MM-dd HH:mm:ss");
      Object object1 = jSONPath0.getPropertyValue(object0, "vc)J2:l6>8pYh^$6!t", (-4270347329889690746L));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("]*xlB_at8");
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("]*xlB_at8");
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/cause/cause/stackTrace/13");
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nCr!x<S=kp'j");
      Class<Double> class0 = Double.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = JSONPath.extract("", "like");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("8+E4\"p&IYedq.*wW");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_WildCardSegment0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("SkipTransientField");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("parseArray");
      Set<?> set0 = jSONPath0.evalKeySet(sQLTransientConnectionException0);
      assertFalse(set0.contains("SkipTransientField"));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Shu$]bb!", "fastjson.parser.deny.internal", (-2964));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      Object object0 = jSONPath0.eval((Object) sQLTimeoutException0);
      assertSame(object0, sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Short short0 = new Short((short)67);
      boolean boolean0 = JSONPath.containsValue((Object) short0, "fastjson.parser.safeMode", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = JSONPath.compare(integer0, integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = JSONPath.compare("\",", "RLIKE");
      assertEquals((-48), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rL'*H&;w");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1024);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/cause/cazse/stac'Trace/13");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "SkipTransientField");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : /cause/cause/cazse/stac'Trace/13
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("kotlin.Metadata");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.system(zoneOffset0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(clock0, "kotlin.Metadata", 2430L, "kotlin.Metadata");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class org.evosuite.runtime.mock.java.time.MockClock$MockSystemClock
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.OffsetTime");
      // Undeclared exception!
      jSONPath0.setPropertyValue(jSONPath0, "1_4yl", (-2L), "java.time.OffsetTime");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      Integer integer0 = new Integer(568434188);
      Byte byte0 = new Byte((byte)74);
      boolean boolean0 = jSONPath0.setPropertyValue(integer0, "fastjson.parser.deny.internal", 568434188, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("X_0ckQ", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "com.alibaba.fastjson.JSONPath$IntBetweenSegement", 989, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$Aq@VM|wZw");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("$Aq@VM|wZw", hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 83, sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      // Undeclared exception!
      JSONPath.set((Object) bigInteger0, "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", (Object) sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("<]'G%QEQAdnF");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<]'G%QEQAdnF");
      JSONPath.Operator jSONPath_Operator0 = jSONPath_JSONPathParser0.readOp();
      JSONPath.set((Object) sQLTransientException0, "L^}SKruRp[;:Qarcn", (Object) jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("b");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) jSONPath_WildCardSegment0, true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("%ErI<7d:^H-&0mY", false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONValidator$UTF8Validator");
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) jSONPath_PropertySegment0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.serializer.LongCodec");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "com", (Object) jSONPath_JSONPathParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "com.alibaba.fastjson.JSONPath$NotNullSegement", (Object) jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Zr-e~;GZ ?_");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "Zr-e~;GZ ?_", (Object) "cause");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Zr-e~;GZ ?_
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("E_g", false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "E_g";
      stringArray0[1] = "[Z";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_PropertySegment0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "%";
      TimeZone timeZone0 = TimeZone.getTimeZone("com.alibaba.fastjson.util.ASMClassLoader");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(mockGregorianCalendar0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$NullSegement";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$NullSegement";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("]*xlB_at8");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(class0, "]*xlB_at8", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Amd");
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      jSONPath0.removePropertyValue(javaBeanSerializer0, "=$M-}5_1cdC>+vxH", false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("wXl*w6l4i]7>u<4{cC", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath0, "%m~W0", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("@r8+ms?Bo");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "fastjson.parser.safeMode", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("VtMSUPlJMXI", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("cm");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "cm");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("/", 92, jSONPath_Operator0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_IntOpSegement0, "|");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("and");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("getClass");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      jSONPath0.remove((Object) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("8.xtm/*@]v/UJq", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<JSONPath.MultiIndexSegment> class0 = JSONPath.MultiIndexSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("SkipTransientField");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("vc)J2:l6>8pYh^$6!t");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : vc)J2:l6>8pYh^$6!t
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("q|+*f)S_}l<`x");
      jSONPath0.init();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("size");
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(javaBeanSerializer0, "UwX\"P#ME;,Pu.{L", (-1935L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("^XX", (SerializeConfig) null, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("QMGP{M");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(sQLInvalidAuthorizationSpecException0, "^XX", (-1580386065683472715L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("M?}*6-E5_ Y320", serializeConfig0, parserConfig0);
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$NotNullSegement");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("&g4'%=/a(", serializeConfig0, (ParserConfig) null);
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeSupport", "nin", parserConfig0, 745058059, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, ".8m=]=@*w~", parserConfig0, (-1994091956), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("kotlin.ranges.IntRange", "Bm95-Fu(v%3{1TO", parserConfig0, (-510), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2kotlin.ranges.IntRange
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "writeAsArray");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("OM", "h)GM}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2OM
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("?T+\u0000-1_p", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize("illegal getter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("scanFieldFloat");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("scanFieldFloat", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // evalSize error : scanFieldFloat
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\",");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      String[] stringArray0 = new String[8];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) sQLFeatureNotSupportedException0, "dV!MG;{_yTo[f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : dV!MG;{_yTo[f
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("nb", (SerializeConfig) null, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double double0 = new Double(1888.57);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("nin", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet("nin", "nin", 900L, "nin");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("and");
      MockDate mockDate0 = new MockDate(8, 8, 8, 8, 8, 8);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(mockDate0, "fastjson.parser.safeMode", (-4879L), mockDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path and, segement fastjson.parser.safeMode
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/11");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(javaBeanSerializer0, "/", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("b");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Object> class0 = Object.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(throwableDeserializer0, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("and");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("KQ", "and", (-1));
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLFeatureNotSupportedException0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/0");
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) jSONPath0, "*", (Object) "/stackTrace/0");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("\"}", "\"}", 503, sQLInvalidAuthorizationSpecException0);
      JSONPath jSONPath0 = JSONPath.compile("Po[;,\"o1y");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) sQLTransactionRollbackException0, (Object) "[s&RR/Gj68");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BnjHV@CZr8@\"RCQoUF");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "BnjHV@CZr8@\"RCQoUF", (Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : BnjHV@CZr8@\"RCQoUF
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath.contains((Object) "nin", "_w[:+? Vt%w[M7");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      // Undeclared exception!
      try { 
        JSONPath.compare(serializeConfig0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("VtMSUPlJMXI", serializeConfig0, parserConfig0);
      jSONPath0.deepSet("VtMSUPlJMXI", "*P~dr@9hY,K", (-2342L), "VtMSUPlJMXI");
      assertEquals("VtMSUPlJMXI", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("\\-", serializeConfig0, parserConfig0);
      jSONPath0.deepSet((Object) null, "", (-3851359326990528739L), (Object) null);
      assertEquals("\\-", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$NotNullSegement");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "/stackTrace/1", 29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("&g4'%=/a(", false);
      JSONPath jSONPath0 = JSONPath.compile("0J0:2:Z2[p0'=*>~");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("unclosed.str.lit");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("unclosed.str.lit");
      JSONPath jSONPath0 = JSONPath.compile("x.:>e=s{Q4a\"0ofGk");
      Object object0 = jSONPath_Segment0.eval(jSONPath0, "unclosed.str.lit", jSONPath_JSONPathParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/0");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",OYsV{=4_+");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ,OYsV{=4_+
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("expect '");
      jSONPath_JSONPathParser0.readName();
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("7[Al");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("7[Al", (-2481));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$NotNullSegement");
      Double double0 = new Double(1073.0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) double0, (Object) "com.alibaba.fastjson.JSONPath$NotNullSegement", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("between", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation(91, true, false, 91, (-3168));
      boolean boolean0 = jSONPath0.set((Object) null, (Object) dataTruncation0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]");
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "]", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("SkipTransientField");
      Object[] objectArray0 = new Object[3];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals("SkipTransientField", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("<]'G%QE*QAdnF");
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath0.arrayAdd((Object) jSONPath_MultiPropertySegment0, (Object[]) stringArray0);
      assertEquals("<]'G%QE*QAdnF", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("@");
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("o%nhjW", "cqBG", 42, sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLTransactionRollbackException0, (Object) jSONPath_MultiPropertySegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/cause/cause/stackTrace/13");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/cause/cause/stackTrace/12");
      DataTruncation dataTruncation0 = new DataTruncation(116, false, false, 255, 255, sQLTransientConnectionException0);
      boolean boolean0 = jSONPath0.contains((Object) dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("SkipTransientField");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("SkipTransientField");
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, "SkipTransientField", jSONPath_JSONPathParser0);
      boolean boolean0 = jSONPath0.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.compatibleWithJavaBean", 4960004821520561233L, (-4270347329889690732L), false);
      JSONPath jSONPath0 = new JSONPath("fastjson.compatibleWithJavaBean");
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_IntBetweenSegement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("null", serializeConfig0, parserConfig0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 981);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$NotNullSegement");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.JSONPath$NotNullSegement", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("h=!By");
      JSONScanner jSONScanner0 = new JSONScanner("h=!By", 546);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : h=!By
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("KQ", "KQ");
      JSONPath jSONPath0 = JSONPath.compile("KQ");
      Object object0 = jSONPath0.eval((Object) sQLSyntaxErrorException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("4ify)Kcz#aYb=ynQpT");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "4ify)Kcz#aYb=ynQpT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 4ify)Kcz#aYb=ynQpT
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("v6-1bX", serializeConfig0, (ParserConfig) null);
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(97, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("and");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(92);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, "R[bb~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/cause/cause/stackTrace/9", "/cause/cause/stackTrace/9", 1346, sQLNonTransientConnectionException0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/cause/cause/stackTrace/9";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLFeatureNotSupportedException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("uRn{w3", true);
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject(jSONPath_PropertySegment0, stringArray0);
      assertSame(jSONPath_PropertySegment0, object0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(parserConfig0, (String[]) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("%", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Set<?> set0 = jSONPath0.evalKeySet(bigInteger0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath jSONPath0 = new JSONPath("com");
      int int0 = jSONPath0.evalSize(jSONPath_Operator0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X_0cVc";
      stringArray0[1] = "X_0cVc";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("R[bb~", stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("X_0cVc");
      int int0 = jSONPath0.evalSize(jSONObject0);
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_Operator0, "KQ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Zr-e~;GZ ?_");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Zr-e~;GZ ?_", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Zr-e~;GZ ?_", "Zr-e~;GZ ?_", sQLSyntaxErrorException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLIntegrityConstraintViolationException0, "\\-", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/11");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/", "/cause/stackTrace/1", hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("/stackTrace/4", clientInfoStatus0);
      Long long0 = new Long(1619L);
      jSONPath0.deepSet(sQLClientInfoException0, "`]j$\"(n", 1619L, long0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("cd+7T)k Uv}>+", serializeConfig0, parserConfig0);
      Class<Annotation> class0 = Annotation.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("fastjson.parser.safeMode");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeSupport", sQLNonTransientException0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(classLoader0, "fastjson.parser.safeMode", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path cd+7T)k Uv}>+, segement fastjson.parser.safeMode
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan((Object) null, "fastjson.parser.safeMode", linkedList0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("xcbtMS@");
      JSONPath jSONPath0 = JSONPath.compile("_Dt{pBCt6HCWaQ=^<8");
      BigDecimal bigDecimal0 = new BigDecimal(523L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, bigDecimal0, (Object) null, mockGregorianCalendar0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      boolean boolean0 = vector0.add((Object) sQLRecoverableException0);
      boolean boolean1 = JSONPath.contains((Object) vector0, "com.alibaba.fastjson.serializer.CharArrayCodec");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Float float0 = new Float(0.75F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Double double0 = new Double(0.0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(double0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Double double0 = new Double(0.0);
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (byte)8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Double double0 = new Double(0.0);
      Byte byte0 = new Byte((byte) (-86));
      boolean boolean0 = JSONPath.eqNotNull(double0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(2, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-86));
      boolean boolean0 = JSONPath.eqNotNull(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Long long0 = new Long(386461436234701831L);
      Float float0 = new Float((float) 386461436234701831L);
      boolean boolean0 = JSONPath.eqNotNull(long0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1343L));
      longArray0[2] = long0;
      BigDecimal bigDecimal0 = new BigDecimal(36);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, longArray0[2]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[9];
      Short short0 = new Short((byte)26);
      boolean boolean0 = JSONPath.eq(intArray0[0], short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("vc)J2:l6>8pYh^$6!t", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "*", (-590), sQLDataException0);
      boolean boolean0 = JSONPath.containsValue((Object) sQLInvalidAuthorizationSpecException0, "*", (Object) "KQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      boolean boolean0 = JSONPath.eq(vector0, vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("e.sf.cglibproxy.Factory", serializeConfig0, parserConfig0);
      SQLException sQLException0 = new SQLException("/cause/stackTrace/6", "z");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLException0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(batchUpdateException0, vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("SkipTransientField");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("SkipTransientField");
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, "SkipTransientField", jSONPath_JSONPathParser0);
      Object object1 = jSONPath_WildCardSegment0.eval(jSONPath0, object0, object0);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("b");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("b");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("9En,MeIel$x?x_", (String) null, hashMap0);
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, sQLTimeoutException0, sQLClientInfoException0);
      HashSet hashSet0 = (HashSet)jSONPath_WildCardSegment0.eval(jSONPath0, sQLTimeoutException0, object0);
      assertEquals(5, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("aDlhhL2V>1");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Collection<Object> collection0 = jSONPath0.getPropertyValues(hashMap0);
      assertFalse(collection0.contains("aDlhhL2V>1"));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("parseArray");
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(localDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("KE,X5Zz;Q^|4w![");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("o#;*,4be", "and", 61);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("o#;*,4be", sQLIntegrityConstraintViolationException0);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLTransientConnectionException0, "/cause/stackTrace/12", (Object) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]", hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, sQLSyntaxErrorException0, 154, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("H^wWs1fdls\"peF#7e");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/0/stackTrace/7";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(uUID0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("SkipTransientField");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("SkipTransientField");
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, "SkipTransientField", jSONPath_JSONPathParser0);
      Object object1 = jSONPath0.getArrayItem(object0, (-1216));
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Long long0 = new Long(386461436234701831L);
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONPath$Context", longArray0, false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-971));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("fastjson.parser.autoTypeAccept", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_RefOpSegement0, false);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$Context");
      Short short0 = new Short((short)182);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, short0, long0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("8+E4\"p&IYedq.*wW");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("o>");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      Long long0 = new Long((-199L));
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, long0, sQLTransactionRollbackException0, batchUpdateException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("and");
      Long long0 = new Long((-7966123100503199569L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "com.alibaba.fastjson.util.IOUtils$1";
      stringArray0[1] = "KQ";
      stringArray0[2] = "com.alibaba.fastjson.util.IOUtils$1";
      stringArray0[3] = "and";
      stringArray0[4] = "and";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(long0, stringArray0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("com.alibaba.fastjson.util.IOUtils$1", "field_", true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RlikeSegement0, jSONPath_RlikeSegement0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "com.alibaba.fastjson.util.IOUtils$1", jSONArray0.DEFAULT_PARSER_FEATURE, bigInteger0);
      assertEquals(5, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/1");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("1.2.68");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, jSONPath_NullSegement0);
      assertSame(jSONPath_NullSegement0, object0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("SkipTransientField");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("SkipTransientField");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_SizeSegment0, sQLClientInfoException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]*xlB_at8");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("]*xlB_at8", "]*xlB_at8", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, serializeConfig0.propertyNamingStrategy, jSONPath_ValueSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("nGvbw", serializeConfig0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny", (String) null, 47, sQLDataException0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLInvalidAuthorizationSpecException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.compatibleWithJavaBean", 4960004821520561233L, (-4270347329889690732L), false);
      JSONPath jSONPath0 = new JSONPath("fastjson.compatibleWithJavaBean");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_IntBetweenSegement0, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "fastjson.parser.autoTypeAccept", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("kotlin.Metadata", (Pattern) null, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("scanFieldFloat");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.system(zoneOffset0);
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("scanFieldFloat", "@type");
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, hijrahDate0, (Object) null, sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("SkipTransientField");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("SkipTransientField", "SkipTransientField", jSONPath_Operator0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LE;
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Operator1, "rEh7v<C\"ZBG_7iV", "SkipTransientField");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("SkipTransientField");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("SkipTransientField", "/cause/stackTrace/6", jSONPath_Operator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      SQLWarning sQLWarning0 = new SQLWarning("/cause/stackTrace/6", "SkipTransientField");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, javaBeanSerializer0, "between", sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("@ ", "@ ", "@ ", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("@ ");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, (Object) null, jSONPath0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("'z<bb", "'z<bb", (String) null, (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("expect", (String) null, "array", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.OffsetTime");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("java.time.OffsetTime", jSONPath_KeySetSegment0, jSONPath_Operator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, sQLTransientConnectionException0, sQLSyntaxErrorException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("members", 2370.504110936593, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("members");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("members");
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_MinSegment0, sQLInvalidAuthorizationSpecException0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/cause/cause/stackTrace/13");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("/cause/cause/cause/stackTrace/13", 92, jSONPath_Operator0);
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, "/cause/cause/cause/stackTrace/13", (Object) null, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("@");
      String[] stringArray0 = new String[9];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("@", stringArray0, false);
      SQLDataException sQLDataException0 = new SQLDataException("@", stringArray0[2]);
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "@", jSONPath_MultiIndexSegment0, sQLNonTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nin";
      stringArray0[1] = "nin";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("nin", stringArray0, true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("wXl*w6l4i]7>u<4{cC", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V", "fastjson.parser.deny.internal");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "nin", serializeConfig0, sQLDataException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("a_g");
      Object object0 = new Object();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3UV=IW&2l~{T");
      Long[] longArray0 = new Long[3];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("RaKtjson", longArray0, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("RaKtjson", "kM8#t#L", hashMap0, sQLFeatureNotSupportedException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, object0, sQLClientInfoException0, sQLClientInfoException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-1951L));
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("!P<Midx^pI", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("Type: ");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("@v$CcIO;+md ");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, sQLTimeoutException0, longArray0[0], (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("9K", 4L, (-4333L), true);
      JSONPath jSONPath0 = JSONPath.compile("9K");
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "ctG>;]Jms?{Uqw", "KE,X5Zz;Q^|4wk[", vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Zr-e~;GZ ?_");
      long[] longArray0 = new long[5];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("cause", longArray0, true);
      Byte byte0 = new Byte((byte)91);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, (Object) null, byte0, jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("Zr-e~;GZ ?_");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Zr-e~;GZ ?_", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Zr-e~;GZ ?_", "Zr-e~;GZ ?_", sQLSyntaxErrorException0);
      long[] longArray0 = new long[5];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("cause", longArray0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, bigDecimal0, jSONPath_MinSegment0, sQLTransactionRollbackException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]*xlB_at8");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("]*xlB_at8", "]*xlB_at8", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]*xlB_at8");
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_ValueSegment0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("]*xlB_at8");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("]*xlB_at8", "]*xlB_at8", true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]*xlB_at8");
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_ValueSegment0, sQLInvalidAuthorizationSpecException0);
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("{Dh", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("and");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/stackTrace/8");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLSyntaxErrorException0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("and");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(277, 91, 91);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "[s&RR/Gj68", bigDecimal0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, hashMap0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("SkipTransientField");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("SkipTransientField");
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, "SkipTransientField", jSONPath_JSONPathParser0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("wp4>", "SkipTransientField", jSONPath_Operator0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("'Y");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SkipTransientField";
      stringArray0[1] = "wp4>";
      stringArray0[2] = "SkipTransientField";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath_StringOpSegement0, jSONPath_MultiPropertySegment0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^XX";
      stringArray0[1] = ",  end ";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("B:");
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, ",  end ");
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("uRn{w3", true);
      JSONPath jSONPath0 = JSONPath.compile("uRn{w3");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 116, 116, 116);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, classLoader0, date0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[MZ=:EUB2Ro7eNYUD", "VrS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[MZ=:EUB2Ro7eNYUD
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("uRn{w3", true);
      JSONPath jSONPath0 = JSONPath.compile("uRn{w3");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, jSONPath_SizeSegment0, jSONPath_SizeSegment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Float float0 = new Float(138.6850252984718);
      int[] intArray0 = new int[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException("?T+\u0000-1_p");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$NotNullSegement", "illegal getter", intArray0, sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("illegal getter", "illegal getter", 42, batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, sQLTimeoutException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTimeoutException cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Double double0 = new Double(1.0E8);
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, "q&iCrUOf$K,CBr");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Integer integer0 = new Integer(480);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, jSONPath_SizeSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$SizeSegment cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Short short0 = new Short((short)105);
      // Undeclared exception!
      try { 
        JSONPath.compare(short0, "/cause/cause/stackTrace/8");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Short
         //
         verifyException("java.lang.Short", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("vc)J2:l6>8pYh^$6!t");
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray("vc)J2:l6>8pYh^$6!t", stringArray0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      Object object1 = jSONPath_MinSegment0.eval(jSONPath0, object0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("4ify)Kcz#aYb=ynQpT");
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, (Object) null, "4ify)Kcz#aYb=ynQpT");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("and");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("KQ");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, "and", jSONPath_JSONPathParser0);
      assertNotNull(hashSet0);
      
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      HashSet hashSet1 = (HashSet)jSONPath_MaxSegment0.eval(jSONPath0, sQLNonTransientConnectionException0, hashSet0);
      assertNull(hashSet1);
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath(", fieldName : ", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, ", fieldName : ", ", fieldName : ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^&PF:");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"^&PF\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@v$CcIO;+md ");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("\"P<ez*V}u>`gmMB9U");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(":");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alZbaba.fastjsmn.JS/Nath");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("com", string0);
      
      String string1 = jSONPath_JSONPathParser0.readString();
      assertEquals("alZbaba", string1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "b";
      stringArray0[1] = "uRZ,";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("9E}n,MeIel?x_,", stringArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = JSONPath.contains((Object) fileSystemHandling0, "A.9o7lM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("can not cast to boolean, value : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$!u|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'u'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("9L]Cf[O#:,~:uG", 100L, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_FilterSegment0, "[MZ=:EUB2Ro7eNYUD", objectArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$FilterSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("n7Zh^Lr w5KRl");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // n7Zh^Lr w5KRl
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'7W03J7T~:e");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but 'e'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\",");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but ','
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("om.alibaba.fasjso.JSONPath$NotNullSegement");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("P%XG");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(530L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\\-");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+$!u|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("d");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Xla[</;4t");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bka[5dyPB!");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.serializer.LongCodec");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("]*xlB_at8");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@v$CcIO;+md ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 'v'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\\-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \\-
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?i&}/},w");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but 'i'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Gq>8'ZBI7bo$Vc8");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(0, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$!u|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $!u|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("L");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("]");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/cause/cause/stackTrace/13");
      int int0 = jSONPath0.size((Object) "/");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%");
      boolean boolean0 = jSONPath0.contains((Object) "%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) mockGregorianCalendar0, serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", "fastjszn.compatibleWithFieldName", (-478), hashMap0, sQLSyntaxErrorException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", sQLIntegrityConstraintViolationException0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLSyntaxErrorException1);
      //  // Unstable assertion: assertEquals(357, map0.size());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      vector0.add((Object) sQLRecoverableException0);
      vector0.add((Object) sQLRecoverableException0);
      Map<String, Object> map0 = JSONPath.paths((Object) vector0);
      //  // Unstable assertion: assertEquals(88, map0.size());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "$6U.Vz+>!NP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+$!u|");
      SerializeConfig serializeConfig0 = new SerializeConfig(960);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/12", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) serializeConfig0, (Object) jSONPath_JSONPathParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((byte)53);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "fastjson.parser.autoTypeSupport", (Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("unclosed.str.lit");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "unclosed.str.lit", "e.sf.cglibproxy.Factory", (Object) jSONPath_JSONPathParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("nin", "java.nio.file.Path", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLNonTransientConnectionException0, "/cause/stackTrace/8", (Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2147483629);
      JSONPath jSONPath0 = new JSONPath("SkipTransientField");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("parseArray");
      boolean boolean0 = jSONPath0.set((Object) jSONPath_ArrayAccessSegment0, (Object) sQLTransientConnectionException0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(84, 84, 2288);
      boolean boolean0 = jSONPath0.set((Object) "%", (Object) mockGregorianCalendar0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      boolean boolean0 = JSONPath.remove((Object) parserConfig0, "fastjson.parser.safeMode");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("parseArray");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$NotNullSegement");
      Float float0 = new Float(138.6850252984718);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) float0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$NotNullSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONPath.arrayAdd((Object) null, "fastjson.parser.deny.internal", (Object[]) stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "hv+Ef+|", "%", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      Float float0 = new Float((float) 187);
      jSONPath0.arrayAdd((Object) float0, (Object[]) null);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.ObjectArrayCodec");
      Set<?> set0 = jSONPath0.keySet((Object) "com.alibaba.fastjson.serializer.ObjectArrayCodec");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("@type");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Amd");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("@");
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath_MultiPropertySegment0, (Object) "@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.compatibleWithJavaBean");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.compatibleWithJavaBean");
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath_JSONPathParser0, (Object) "fastjson.compatibleWithJavaBean");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(503, (-971), (-971));
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_RangeSegment0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      boolean boolean0 = jSONPath0.containsValue((Object) map0, (Object) null);
      assertEquals(1, map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("b");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("ZfNYY2m4F'j=I.KRj;", "/StackTrace/4");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("lIrPrCQYy%tx!}I+", "/0/stackTrace/11");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract("]GvXJF,N+-Ctm6", "fastjson.parser.deny", parserConfig0, 2222, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[15];
      Object object0 = JSONPath.extract("]GvXJL(F,N+-Ctm6", "JSONPath$NotNullSegement", parserConfig0, (-510), featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("E_g");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) null, "RY>\"d@V|I-@3M.");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/11");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.google.common.collect.");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      SQLException sQLException0 = new SQLException((String) null, "/StackTrace/2");
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.google.common.collect.", "/StackTrace/2", 1382, sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("gLL[x(&3`$", "/StackTrace/2");
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, sQLSyntaxErrorException0, sQLRecoverableException0);
      int int0 = jSONPath0.evalSize(object0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("nin", stringArray0, true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("wXl*w6l4i]7>u<4{cC", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V", "fastjson.parser.deny.internal");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, stringArray0[1], serializeConfig0, sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$!u|");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('!', char0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("]*xlB_at8");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[0];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[double", "[double", intArray0, sQLSyntaxErrorException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("*", "[double", (-1439), batchUpdateException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[double", "*", hashMap0, sQLIntegrityConstraintViolationException0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3298));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, (Object) null, sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("vc)J2:l6>8pYh^$6!t");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&B'=DOnJUvRfL3V1Ju");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      assertSame(jSONPath_Filter0, jSONPath_NotNullSegement0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1), (-1), (-1));
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, "K#");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("d'@4UcZ{rT(Y%uPcoX&", "E}df7RD^K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2d'@4UcZ{rT(Y%uPcoX&
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("lineNumber");
      String string0 = jSONPath0.getPath();
      assertEquals("lineNumber", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(187);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("uRn{w3", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("Cvb|nSp# &F", ":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2Cvb|nSp# &F
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) "dctqhws>W;U~$$ ENK", "rlike");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("8-f~2b=AjF<Zz%lJ", true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) jSONPath_PropertySegment0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(75, (-658), (-658));
      boolean boolean0 = JSONPath.set((Object) null, "[-{XfP", (Object) jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("f|`AY2BkW.V&(]N9", 602, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("f|`AY2BkW.V&(]N9");
      Short short0 = new Short((short)115);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath0, short0, short0);
      assertFalse(boolean0);
  }
}
