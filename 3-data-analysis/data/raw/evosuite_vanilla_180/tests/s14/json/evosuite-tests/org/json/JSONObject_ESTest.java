/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 20:10:39 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.StandardProtocolFamily;
import java.security.KeyRep;
import java.text.Normalizer;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.swing.GroupLayout;
import javax.swing.SortOrder;
import javax.tools.JavaFileObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject1 = jSONObject0.put("haN9?p*]", 1061.513582);
      jSONObject1.write((Writer) charArrayWriter0, (-339), (-339));
      assertEquals(63, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(31.34642476605071);
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      hashMap0.put(double0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("java.lang.Float@000000000b.", 255);
      String string0 = jSONObject0.toString((-337));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9X722}3`iKQ");
      assertEquals("9X722}3`iKQ", object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("8!cAQOLE/<Q@0y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [+] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9Rv6rMBl`T:uF=^H");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9Rv6rMB\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("0KE/& E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<SortOrder, Short> hashMap0 = new HashMap<SortOrder, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("2EQb|Koosc{0qz(", true);
      try { 
        jSONObject0.getBigInteger("2EQb|Koosc{0qz(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "Unable to write JSONObject value for key: ");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("Unable to write JSONObject value for key: ", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      jSONObject0.write((Writer) mockPrintWriter0);
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0.0411568065855267");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("11.314597398642857");
      assertEquals((short)11, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("java.");
      HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.", stringReader0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("java.");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = jSONObject0.keySet();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("ci=p)7m", stringArray0);
      String string0 = jSONObject0.optString("java.", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.increment("isE");
      String string0 = jSONObject0.optString("isE");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.optQuery("/}*38!?j=MQh");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("java.", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      Number number0 = jSONObject0.optNumber("2EQb|Koosc{0qz(", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.valueOf(823.85335172029);
      Number number0 = jSONObject0.optNumber("", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (-1846L));
      Number number0 = jSONObject0.optNumber(",:]}/\"[{;=#", (Number) bigDecimal0);
      assertEquals((byte) (-54), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("*Z-.F=r", (-3840L));
      assertEquals((-3840L), long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap1 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      Double double0 = new Double(Double.NaN);
      hashMap1.put(formatter_BigDecimalLayoutForm0, double0);
      jSONObject0.put("java.", (Map<?, ?>) hashMap1);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("java.");
      assertNotSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("2EQb|Koosc{0qz(", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",:]}/\"[{;=#", (double) (-1846L));
      int int0 = jSONObject0.optInt(",:]}/\"[{;=#");
      assertEquals((-1846), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("java.lang.Long@0000000001", (float) (-1846L));
      assertEquals((-1846.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("t !{-J~I*5", 0.0F);
      float float0 = jSONObject1.optFloat("t !{-J~I*5");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("java.io.StringWriter@0000000002", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = jSONObject0.optBigInteger("", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = jSONObject0.optBigInteger("t !{-J~I*5", bigInteger1);
      assertSame(bigInteger1, bigInteger2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal(")W$B-VM!;mjp/[@W=", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("java.lang.Long@0000000001", bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-790.0));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("getspliterator", bigDecimal0);
      assertEquals((byte) (-22), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not an enum of type ", "getfloatValue");
      jSONObject1.opt("] is not an enum of type ");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(3683.816122110553);
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      hashMap0.put(double0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap1 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject1 = jSONObject0.put("java.", (Map<?, ?>) hashMap1);
      boolean boolean0 = jSONObject1.isNull("java.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("java.lang.Long@0000000001");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("#>bRvdS#g)sP2D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Long@0000000001", 0.0);
      long long0 = jSONObject0.getLong("java.lang.Long@0000000001");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Long@0000000001", 0.0);
      float float0 = jSONObject0.getFloat("java.lang.Long@0000000001");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        JSONObject.writeValue(pipedWriter0, jSONArray0, 4, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.json.JSONTokener", "[");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, mockFile0, 1060, 17);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(39);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 36, (-2690));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(47);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1", true);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      // Undeclared exception!
      jSONObject0.write((Writer) charArrayWriter0, 8192, 47);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, (-12437164), (-12437164));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "ehi*f_5ak6?l7ZC]");
      try { 
        jSONObject0.toString(1525);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("gkM[c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [gkM[c] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("-sjl^%OqYpFEO*zQ3Q2", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3);
      try { 
        jSONObject0.put("org.json.JSONWriter", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("-1", stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1497.8063F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 440.13317);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 42);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, jSONObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("}WI!;|:#dz");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 1459);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.UK;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" at ", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name  at , locale en_GB
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("8", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("jo7UB.y", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1500));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1500
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(1.0);
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      hashMap0.put(double0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.put("1", (-1337.40397132772));
      jSONObject0.write((Writer) charArrayWriter0, 0, 12);
      assertEquals(163, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      jSONObject0.write((Writer) charArrayWriter0, 1000000, (-3563));
      assertEquals(2, charArrayWriter0.size());
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(1.0);
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      hashMap0.put(double0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      jSONObject0.write((Writer) charArrayWriter0, 0, 12);
      assertEquals(65, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Month> class0 = Month.class;
      Object object0 = JSONObject.wrap(class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer(55);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(55, object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Byte byte0 = new Byte((byte)17);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)17, object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.wrap(",:]}/\"[{;=#");
      assertEquals(",:]}/\"[{;=#", object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      Object object0 = JSONObject.wrap(standardProtocolFamily0);
      assertEquals(StandardProtocolFamily.INET, object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float((float) (short)1187);
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("gkM[c");
      assertEquals("gkM[c", object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("/", (Writer) charArrayWriter0);
      assertEquals(3, charArrayWriter0.size());
      assertEquals("\"/\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile("i@L<p6VvzhJU\"u", "get");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      Writer writer0 = JSONObject.quote("i@L<p6VvzhJU\"u", (Writer) mockFileWriter0);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("L z}P[(3l4<<yY^<", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote((String) null, (Writer) charArrayWriter0);
      assertEquals("\"\"", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("c\"Zy", "c\"Zy");
      PipedReader pipedReader0 = new PipedReader();
      try { 
        jSONObject0.putOnce("c\"Zy", pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"c\"Zy\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("1682.15239736", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("+", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<SortOrder, Short> hashMap0 = new HashMap<SortOrder, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Double double0 = new Double(1525.74);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("getfloatValue", "getfloatValue");
      assertEquals("getfloatValue", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("isE");
      Short short0 = new Short((short) (-810));
      Number number0 = jSONObject1.optNumber("isE", (Number) short0);
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(603.029171);
      hashMap0.put(double0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("603.029171", (Number) double0);
      assertEquals(603.029171, number0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getfloatValue", "getfloatValue");
      long long0 = jSONObject1.optLong("getfloatValue", 1321L);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1321L, long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Long@0000000001", 0.0);
      long long0 = jSONObject0.optLong("java.lang.Long@0000000001", (-1846L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, Object> hashMap0 = new HashMap<Month, Object>();
      JSONObject jSONObject1 = jSONObject0.put("Null key.", (Map<?, ?>) hashMap0);
      int int0 = jSONObject1.optInt("Null key.", (-3280));
      assertEquals((-3280), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("isE");
      int int0 = jSONObject1.optInt("isE", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("java.", 0.0);
      float float0 = jSONObject0.optFloat("java.", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(3683.816122110553);
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      hashMap0.put(double0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("3683.816122110553", 3138.24F);
      assertEquals(3138.24F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getspliterator", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      JSONObject jSONObject0 = new JSONObject(dayOfWeek0);
      jSONObject0.increment("+");
      boolean boolean0 = jSONObject0.optBoolean("+", false);
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("+");
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.READ;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type1 = jSONObject1.optEnum(class0, "+", processBuilder_Redirect_Type0);
      assertSame(processBuilder_Redirect_Type0, processBuilder_Redirect_Type1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.READ;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type1 = jSONObject0.optEnum(class0, "lo", processBuilder_Redirect_Type0);
      assertEquals(ProcessBuilder.Redirect.Type.READ, processBuilder_Redirect_Type1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<RoundingMode, Integer> hashMap0 = new HashMap<RoundingMode, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.put("1", (-1337.40397132772));
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(3683.816122110553);
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      hashMap0.put(double0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.get("3683.816122110553");
      assertEquals(DayOfWeek.MONDAY, object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("$ytw.GTw]");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BufferedOutputStream, CharArrayReader> hashMap0 = new HashMap<BufferedOutputStream, CharArrayReader>();
      jSONObject0.put("java.lang.Float@0000000003.", (Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "2EQb|Koosc{0qz(");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1114);
      jSONObject0.write((Writer) charArrayWriter0, 12, 288);
      assertEquals(6746, charArrayWriter0.size());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("10.3526597644275680", (Object) "10.3526597644275680");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, 610, 610);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("n.");
      JSONObject.indent(mockFileWriter0, 8448);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      MockFileWriter mockFileWriter0 = new MockFileWriter(">U-DId");
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, hashMap0, 4, 4);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, KeyRep.Type> hashMap0 = new HashMap<String, KeyRep.Type>();
      jSONObject0.put("L z}P[(3l4<<yY^<", (Map<?, ?>) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 50, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "ehi*f_5ak6?l7ZC]");
      Map<String, Object> map0 = jSONObject0.toMap();
      String string0 = JSONObject.valueToString(map0);
      assertNotNull(string0);
      assertEquals(2, map0.size());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((short)10, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Double double0 = new Double((-3180.554516564984));
      Object object0 = JSONObject.wrap(double0);
      assertEquals((-3180.554516564984), object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("2EQb|Koosc{0qz(", 3L);
      Map<String, Object> map0 = jSONObject1.toMap();
      JSONObject jSONObject2 = jSONObject0.put("\"`gcFv6i9", map0);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Short short0 = Short.valueOf((short)4);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)4, object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Character character0 = new Character('Z');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('Z', object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(5015, (Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Float float0 = new Float(Float.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("ggG0/|UKg", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("11.314597398642857");
      assertEquals(11.314597398642857, object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-1");
      assertEquals((-1), object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("$}B;Nc");
      assertEquals("$}B;Nc", object0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("3");
      assertEquals(3, number0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("7|bR?eU8*B\"J@/");
      assertEquals("7|bR?eU8*B\"J@/", object0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-3.4370712875479925");
      assertEquals((byte) (-3), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.similar(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = JSONObject.quote("7|bR?eU8*B\"J@/");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("keySet", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Authenticator.RequestorType, JavaFileObject.Kind> hashMap0 = new HashMap<Authenticator.RequestorType, JavaFileObject.Kind>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, stringWriter0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3);
      HashMap<BufferedWriter, Boolean> hashMap0 = new HashMap<BufferedWriter, Boolean>(3, 2265.264F);
      jSONObject0.put("org.json.JSONWriter", (Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.json.JSONWriter";
      stringArray0[1] = "org.json.JSONWriter";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("true", "true");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Month> class0 = Month.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertEquals(34, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("L z}P[(3l4<<yY^<", "L z}P[(3l4<<yY^<");
      jSONObject1.optString("L z}P[(3l4<<yY^<", "] could not be converted to BigDecimal.");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getfloatValue", "getfloatValue");
      jSONObject1.optNumber("getfloatValue");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getfloatValue", "getfloatValue");
      long long0 = jSONObject1.optLong("getfloatValue");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Qkj ji3-t{Z\"", "Qkj ji3-t{Z\"");
      long long0 = jSONObject1.optLong("Qkj ji3-t{Z\"", 3L);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, KeyRep.Type> hashMap0 = new HashMap<String, KeyRep.Type>();
      JSONObject jSONObject1 = jSONObject0.put("L z}P[(3l4<<yY^<", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("L z}P[(3l4<<yY^<");
      assertNotSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      jSONObject0.optJSONObject((String) null);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(3683.816122110553);
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      hashMap0.put(double0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("3683.816122110553");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("isE");
      int int0 = jSONObject1.optInt("isE");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("getfloatValue", "getfloatValue");
      int int0 = jSONObject0.optInt("getfloatValue");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("isE");
      float float0 = jSONObject1.optFloat("isE");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Short short0 = new Short((short)2175);
      JSONObject jSONObject1 = jSONObject0.putOpt("7|bR?eU8*B\",J@/", short0);
      double double0 = jSONObject1.optDouble("7|bR?eU8*B\",J@/", (double) 1813L);
      assertEquals(2175.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, KeyRep.Type> hashMap0 = new HashMap<String, KeyRep.Type>();
      jSONObject0.put("L z}P[(3l4<<yY^<", (Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("L z}P[(3l4<<yY^<", (-1767.2439986456));
      assertEquals((-1767.2439986456), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.put("t !{-J~I*5", (-0.5861921F));
      BigInteger bigInteger1 = jSONObject0.optBigInteger("t !{-J~I*5", bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("^jrX2dy?`8EW_Y*%%:");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("^jrX2dy?`8EW_Y*%%:", bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(3683.816122110553);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("3683.816122110553", double0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("3683.816122110553", bigDecimal0);
      assertEquals((byte)99, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<Double, FilterOutputStream> hashMap0 = new HashMap<Double, FilterOutputStream>();
      JSONObject jSONObject0 = new JSONObject(3);
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONWriter", (Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(3);
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("org.json.JSONWriter", bigDecimal0);
      assertEquals((short)3, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Month> class0 = Month.class;
      jSONObject0.accumulate("getfloatValue", "getfloatValue");
      jSONObject0.optEnum(class0, "getfloatValue");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Long long0 = new Long((-1846L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1800.181504483807);
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("0", "0");
      JSONArray jSONArray0 = jSONObject0.names();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Long@0000000001", 0.0);
      JSONObject jSONObject1 = jSONObject0.increment("java.lang.Long@0000000001");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("2EQb|Koosc{0qz(", 3L);
      JSONObject jSONObject2 = jSONObject1.increment("2EQb|Koosc{0qz(");
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("'", 87);
      JSONObject jSONObject1 = jSONObject0.increment("'");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.putOpt("B)u:N", charArrayWriter0);
      try { 
        jSONObject0.increment("B)u:N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("Iull key.", "Iull key.");
      boolean boolean0 = jSONObject0.has("Iull key.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("Iull key.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.put("10.3526597644275680", (Object) "10.3526597644275680");
      JSONObject.getNames(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("St$QOfJfFalX", 464.0);
      long long0 = jSONObject1.getLong("St$QOfJfFalX");
      assertEquals(464L, long0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, '!');
      JSONObject jSONObject1 = jSONObject0.putOpt("isE", bufferedWriter0);
      try { 
        jSONObject1.getLong("isE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, KeyRep.Type> hashMap0 = new HashMap<String, KeyRep.Type>();
      JSONObject jSONObject1 = jSONObject0.put("L z}P[(3l4<<yY^<", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("L z}P[(3l4<<yY^<");
      assertNotSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("Iull key.");
      try { 
        jSONObject1.getJSONObject("Iull key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("'Cz", 1.0);
      try { 
        jSONObject0.getJSONArray("'Cz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("OZ8");
      int int0 = jSONObject0.getInt("OZ8");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Double double0 = new Double(0.0);
      HashMap<Month, Object> hashMap0 = new HashMap<Month, Object>();
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("ZPNZK_S@", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getInt("ZPNZK_S@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("isE");
      Number number0 = jSONObject1.getNumber("isE");
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getfloatValue", "getfloatValue");
      try { 
        jSONObject1.getNumber("getfloatValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("11.314597398642857", 11.314597398642857);
      float float0 = jSONObject0.getFloat("11.314597398642857");
      assertEquals(11.314597F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ull key.", false);
      try { 
        jSONObject0.getFloat("ull key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Eea`B6oIFE)j _ ", 2778.805104807);
      double double0 = jSONObject0.getDouble("Eea`B6oIFE)j _ ");
      assertEquals(2778.805104807, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getfloatValue", "getfloatValue");
      boolean boolean0 = jSONObject1.optBoolean("getfloatValue");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("'", 87);
      try { 
        jSONObject1.getString("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = JSONObject.doubleToString(23.011213475486983);
      assertEquals("23.011213475486983", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1075826758));
      assertEquals("-1.075826758E9", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("gkMyc", "gkMyc");
      try { 
        jSONObject0.getBigDecimal("gkMyc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Iull key.", false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        jSONObject0.append("Iull key.", bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Iull key.] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject0.toMap();
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, '!');
      JSONObject jSONObject1 = jSONObject0.putOpt("isE", bufferedWriter0);
      jSONObject1.accumulate("isE", map0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("isE");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(0.0);
      hashMap0.put(double0, (DayOfWeek) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      hashMap0.put((Double) null, dayOfWeek0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{ANvxD%2iI!JIe~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 15 [character 16 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      Object object1 = JSONObject.wrap(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("jU[q2fG7", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("l-[]\"q1yvk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("Expected a ',' or '}'");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, KeyRep.Type> hashMap0 = new HashMap<String, KeyRep.Type>();
      jSONObject0.put("L z}P[(3l4<<yY^<", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getDouble("L z}P[(3l4<<yY^<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("length", (Collection<?>) linkedList0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<KeyRep.Type> class0 = KeyRep.Type.class;
      try { 
        jSONObject0.getEnum(class0, "'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("false");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(20);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("isshortValue");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("RN?fnNn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull("2EQb|Koosc{0qz(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Eea`B6oIFE)j _ ", 2778.805104807);
      try { 
        jSONObject1.getBoolean("Eea`B6oIFE)j _ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertTrue(boolean0);
  }
}
