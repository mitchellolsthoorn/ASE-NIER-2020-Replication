/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 18:24:32 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.StandardProtocolFamily;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.security.CryptoPrimitive;
import java.sql.ClientInfoStatus;
import java.sql.JDBCType;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.smartcardio.CardTerminals;
import javax.swing.DropMode;
import javax.swing.JTable;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.stringToValue("%%RUf<+r");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject.stringToValue("9");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.stringToValue("0");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.stringToNumber("0");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{JNA%Z`h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 8 [character 9 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("71{L3Jb,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sho", "sho");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      JSONObject.indent(mockFileWriter0, (-1329));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = new Locale("8%RUf</r", "8%RUf</r", "8%RUf</r");
      JSONObject jSONObject0 = new JSONObject(locale0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONObject jSONObject0 = new JSONObject(set0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<FilterOutputStream, Dialog.ModalExclusionType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("qF:U7zTq;XzV_+n");
      try { 
        jSONObject1.getBigInteger("qF:U7zTq;XzV_+n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_REMOVAL;
      hashMap0.put((Integer) null, cardTerminals_State0);
      JSONObject.wrap(hashMap0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      jSONObject0.toString((-1551));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "(");
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      jSONObject0.put("2L(S.P", (Collection<?>) linkedList0);
      jSONObject0.remove("2L(S.P");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.query(jSONPointer0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Window.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Window.Type, ProcessBuilder.Redirect.Type>(32, 32);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.query("");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("no", 2057);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(1151.3932340201127);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optString("ishashCode", (String) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("pointer cannot be null", false);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      Set<String> set0 = jSONObject0.keySet();
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.optQuery(jSONPointer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Dialog.ModalityType, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<Dialog.ModalityType, MultipleGradientPaint.CycleMethod>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optNumber("?=bp:)k0K58_Z", (Number) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<StandardProtocolFamily, Authenticator.RequestorType> hashMap0 = new HashMap<StandardProtocolFamily, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte) (-32));
      jSONObject0.optNumber("JSON does not allow non-finite numbers.", (Number) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "(");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optNumber("2L(S.P", (Number) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("G*27]MrG_<M'`Lmf", 0L);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.put("Ilm|4es", (Object) bigInteger0);
      jSONObject0.optLong("Ilm|4es");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iG6sN", (-5376.0));
      jSONObject0.optLong("iG6sN");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(575);
      jSONObject0.optDouble((String) null, (-1.0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(910);
      jSONObject0.put(",/R4vZND1kWF_$wX", true);
      jSONObject0.optBoolean(",/R4vZND1kWF_$wX");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-107);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("zTy^", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0, stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-118);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("getkeys", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "(");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optBigDecimal("2L(S.P", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<PipedReader, BufferedInputStream> hashMap0 = new HashMap<PipedReader, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((-1170));
      jSONObject0.optBigDecimal("H\"P~", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<FilterOutputStream, Dialog.ModalExclusionType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("t4moiR|g0jBRG", "Duplicate key \"");
      jSONObject1.opt("t4moiR|g0jBRG");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.length();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Object, MockFileReader> hashMap0 = new HashMap<Object, MockFileReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("isN");
      jSONObject0.put(".", (Object) mockFileWriter0);
      jSONObject0.isNull(".");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject.isDecimalNotation("(");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(261);
      jSONObject0.put(".", (-1.0));
      jSONObject0.getFloat(".");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(581);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, jSONObject0, 47, (-421));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON does not allow non-finite numbers.");
      mockFileWriter0.close();
      try { 
        JSONObject.writeValue(mockFileWriter0, "JSON does not allow non-finite numbers.", 106, 34);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "zTy^");
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.write((Writer) stringWriter0, 1908, 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 323, 1349);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<MockFileOutputStream, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<MockFileOutputStream, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float float0 = new Float(Float.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "!q#*Ik%,R`jK63%");
      // Undeclared exception!
      jSONObject0.toString(2147483645);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(217);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(217, 1.0F);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("Q^_:uzQ", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("00J5B63LtdjEZj&8.8", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(217);
      Map<String, Object> map0 = jSONObject0.toMap();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<StringWriter, DataOutputStream> hashMap0 = new HashMap<StringWriter, DataOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(217);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("Rok :");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 53);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("abs", stringArray0);
      Float float0 = new Float(Float.NaN);
      try { 
        jSONObject0.accumulate("0D>cE?}h", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "`S9)ICfO\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(".");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("sho", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name sho, locale zh
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("java.lang.Short@0000000001", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -522
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.append("zTy^", "zTy^");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, (-522), 39);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(575);
      StringWriter stringWriter0 = new StringWriter(1962);
      jSONObject0.write((Writer) stringWriter0, 575, 1962);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.append("JSON does not allow non-finite numbers.", (Object) null);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jSONObject0.write((Writer) pipedWriter0, (-1088), 47);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("false", "false");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write((Writer) stringWriter0, 69, 2285);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("pointer cannot be null", false);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      jSONObject0.optInt("java.lang.Float@00000000100", (-1298));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(8);
      JSONObject.wrap(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(34);
      JSONObject.wrap(integer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject.wrap("l@r;U9/&");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(Float.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.testValidity(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double(1151.3932340201127);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";");
      JSONObject.quote("dn:\"l`sa(5^b ", (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1509);
      JSONObject.quote("`.1`)eX>/z", (Writer) charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      JSONObject.quote("", (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\f");
      JSONObject.quote((String) null, (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.putOnce("'Jj_", (Object) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.putOnce((String) null, boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<JDBCType, Window.Type> hashMap0 = new HashMap<JDBCType, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("8dmEv0Pce?2`z", (Object) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Character character0 = Character.valueOf('-');
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<FilterOutputStream, Dialog.ModalExclusionType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("l@r;U9/&", (long) 25);
      jSONObject1.optString("l@r;U9/&", "");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optString("54fEmW?(2liEB7J)}+%", "");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(217);
      BigDecimal bigDecimal0 = new BigDecimal((double) 217);
      jSONObject0.optNumber("Misplaced endArray.", (Number) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<RoundingMode, Character.UnicodeScript> hashMap0 = new HashMap<RoundingMode, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", (Object) "eTqo");
      jSONObject1.optLong("pointer cannot be null", (long) 1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("eTqo", (-7L));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optInt("q`D<'!]]XC{", 57);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double double0 = new Double(1151.3932340201127);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("", double0);
      jSONObject1.optInt("", 117);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("0");
      jSONObject0.optFloat("0", 1118.0F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optFloat("\n", 0.0F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Byte> hashMap0 = new HashMap<TrayIcon.MessageType, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optDouble("Misplaced endArray.", 0.0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("java.io.StringWriter@0000000002", false);
      jSONObject0.optBoolean("java.io.StringWriter@0000000002", false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Double double0 = new Double(1151.3932340201127);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("", double0);
      jSONObject0.optBoolean("", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, DataInputStream> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, DataInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optBoolean("V!C=p", false);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_DESCENT;
      jSONObject0.optEnum(class0, "0", component_BaselineResizeBehavior0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, DataInputStream> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, DataInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.opt("\"");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<FilterOutputStream, Dialog.ModalExclusionType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "(");
      jSONObject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("zTy^", hashMap0);
      try { 
        jSONObject1.getBoolean("zTy^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<FilterOutputStream, Dialog.ModalExclusionType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("t4moiR|g0jBRG", "Duplicate key \"");
      jSONObject1.get("t4moiR|g0jBRG");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("`i_BCS=@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double(1151.3932340201127);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      HashMap<FilterOutputStream, Dialog.ModalExclusionType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalExclusionType>();
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      hashMap0.put(filterOutputStream0, dialog_ModalExclusionType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      jSONObject0.optEnum(class0, "(G!%y-U\u0003>Yoy&8wxhO");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<FilterOutputStream, Dialog.ModalExclusionType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFile mockFile0 = new MockFile("gethashCode", "gethashCode");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      jSONObject0.toMap();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONObject jSONObject1 = jSONObject0.append("", bigInteger0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write((Writer) stringWriter0, 3, (-210053848));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "PJ<");
      try { 
        jSONObject0.toString(2267);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<FilterOutputStream, Dialog.ModalExclusionType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(";r}/wM|9/+DaToh:", (Object) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.writeValue(stringWriter0, jSONObject1, (short)26, (short)26);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, roundingMode0, 2332, 2332);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "istoUpperCase");
      jSONObject0.toString();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("B\"Gwi]`");
      Object object0 = JSONObject.wrap((Object) null);
      JSONObject.writeValue(mockPrintWriter0, object0, 102, 123);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, DataInputStream> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, DataInputStream>();
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(hashMap0);
      jSONObject0.entrySet();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      JSONObject.wrap(roundingMode0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(402.3520557994601);
      JSONObject.wrap(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject.wrap(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.wrap(double0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.wrap(float0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long long0 = new Long((-2456L));
      JSONObject.wrap(long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Short short0 = new Short((short)24254);
      JSONObject.wrap(short0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double(1151.3932340201127);
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Character character0 = new Character('*');
      linkedList0.add(character0);
      jSONObject0.put("getreadLine", (Collection<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Byte> hashMap0 = new HashMap<TrayIcon.MessageType, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.wrap(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("{5I1", stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("jD", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, DataInputStream> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, DataInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("isEmpty", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject.stringToValue("SazyU:j$C");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject.stringToValue("null");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject.stringToValue("false");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject.stringToValue("true");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject.stringToValue("");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject.stringToNumber("1");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject.stringToNumber("-0");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("2woQxSg{bY");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"woQxSg{bY\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(" VEDV(nVB<QHtN'a(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [ VEDV(nVB<QHtN'a(] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject.stringToValue("-0");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject.stringToValue("4QK#EdzYf7hF3fv");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject.isDecimalNotation("DV$pUbe>&D?x");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "PJ<");
      jSONObject0.similar(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      jSONObject0.similar(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\f");
      JSONObject.quote("r'DV?d#m:q7}\u0007oM", (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject.quote("8%RUf</r");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("\f", (-1102.1509F));
      jSONObject0.toString();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("yZW$?ejZX*TJj", (Object) null);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt((String) null, hashMap0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONObject jSONObject1 = jSONObject0.putOnce("zTy^", "zTy^");
      try { 
        jSONObject1.putOnce("zTy^", "\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"zTy^\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "GRUAHfTT k?sq,";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.accumulate("$&", (Object) null);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      inputStreamReader0.close();
      JSONObject jSONObject0 = new JSONObject(inputStreamReader0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("java.io.StringWriter@0000000002", false);
      jSONObject0.optString("java.io.StringWriter@0000000002");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("java.io.StringWriter@0000000002", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optNumber("java.io.StringWriter@0000000002", (Number) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONObject jSONObject1 = jSONObject0.putOnce("zTy^", "zTy^");
      jSONObject1.optNumber("zTy^", (Number) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, DataInputStream> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, DataInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("istoUpperCase");
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject1.optNumber("istoUpperCase", (Number) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      jSONObject0.append("X+%*V}!A", locale_FilteringMode0);
      jSONObject0.optLong("X+%*V}!A");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iG6sN", (-5376.0));
      jSONObject1.optLong("iG6sN", 1590L);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("javax.");
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("toS");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.accumulate("zTy^", jSONObject0);
      jSONObject0.optInt("zTy^");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iG6sN", (-5376.0));
      jSONObject0.optInt("iG6sN");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("zTy^", "zTy^");
      jSONObject1.optInt("zTy^");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.putOnce("zTy^", "zTy^");
      jSONObject0.optFloat("zTy^", (-1877.2362F));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", false);
      jSONObject1.optFloat("java.io.StringWriter@0000000002", (float) 20);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iG6sN", (-5376.0));
      jSONObject0.optFloat("iG6sN");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", false);
      jSONObject1.optDouble("java.io.StringWriter@0000000002", (double) 57);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, DataInputStream> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, DataInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("istoUpperCase");
      jSONObject1.optDouble("istoUpperCase", 0.0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("hY");
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject1.optBigInteger("hY", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONObject0.putOnce(";aTo^", pipedInputStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger(";aTo^", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<FilterOutputStream, Dialog.ModalExclusionType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.optBigInteger("1a35_|8mp3r1c|d5?", (BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Double double0 = new Double(1152.2435305358354);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOnce("U2$dl5J' o&SV", double0);
      jSONObject0.optBigDecimal("U2$dl5J' o&SV", (BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBigDecimal("", (BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      jSONObject0.putOnce("U2$dl5J' o&SV", dataInputStream0);
      jSONObject0.optBigDecimal("U2$dl5J' o&SV", (BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("java.io.StringWriter@0000000003", false);
      jSONObject0.optBoolean("java.io.StringWriter@0000000003");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.putOnce("zTy^", "zTy^");
      JTable.PrintMode jTable_PrintMode0 = JTable.PrintMode.FIT_WIDTH;
      Class<JTable.PrintMode> class0 = JTable.PrintMode.class;
      jSONObject0.optEnum(class0, "zTy^", jTable_PrintMode0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<CryptoPrimitive, JSONObject> hashMap0 = new HashMap<CryptoPrimitive, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.opt((String) null);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject.numberToString(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Short short0 = new Short((short) (-2784));
      JSONObject.numberToString(short0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HashMap<PipedOutputStream, DropMode> hashMap0 = new HashMap<PipedOutputStream, DropMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.names();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iG6sN", (-5376.0));
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject1.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("OcfaT|p7", 0.0F);
      jSONObject1.increment("OcfaT|p7");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONObject jSONObject1 = jSONObject0.putOnce("\b", pipedInputStream0);
      try { 
        jSONObject1.increment("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(47);
      jSONObject0.put("islength", (-2655.51416));
      jSONObject0.increment("islength");
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONObject jSONObject1 = jSONObject0.putOnce("zTy^", "zTy^");
      jSONObject1.has("zTy^");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("zTy^", hashMap0);
      try { 
        jSONObject0.getString("zTy^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject.getNames((Object) null);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.getNames((Object) charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("0");
      JSONObject.getNames(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Double double0 = new Double(1152.2435305358354);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("' and instead saw ''", double0);
      jSONObject1.getLong("' and instead saw ''");
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.putOnce("zT^", "zT^");
      try { 
        jSONObject0.getLong("zT^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<MockFileOutputStream, Object> hashMap0 = new HashMap<MockFileOutputStream, Object>();
      jSONObject0.put("iG6sN", (Map<?, ?>) hashMap0);
      jSONObject0.getJSONObject("iG6sN");
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce(";aTo^", "iG6sN");
      try { 
        jSONObject0.getJSONObject(";aTo^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, DataInputStream> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, DataInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("istoUpperCase");
      try { 
        jSONObject1.getJSONArray("istoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.increment("l@r;U9/&");
      jSONObject0.getInt("l@r;U9/&");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<FilterOutputStream, Dialog.ModalExclusionType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("l@r;U9/&", hashMap0);
      try { 
        jSONObject0.getInt("l@r;U9/&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("_,@O#6qtbj4[", (-5396.377840988078));
      jSONObject1.getNumber("_,@O#6qtbj4[");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.append("'Jj_", jSONObject0);
      jSONObject0.getNumber("'Jj_");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HashMap<FilterOutputStream, Dialog.ModalExclusionType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("4_;}| $l5mvnNPBLG~");
      float float0 = jSONObject1.getFloat("4_;}| $l5mvnNPBLG~");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HashMap<FilterOutputStream, Dialog.ModalExclusionType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("4_;}| $l5mvnNPBLG~", false);
      try { 
        jSONObject0.getFloat("4_;}| $l5mvnNPBLG~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("istrim");
      double double0 = jSONObject0.getDouble("istrim");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("zTy^", "zTy^");
      try { 
        jSONObject1.getDouble("zTy^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.putOnce("zTy^", "zTy^");
      try { 
        jSONObject0.getBigDecimal("zTy^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", true);
      boolean boolean0 = jSONObject1.getBoolean("java.io.StringWriter@0000000002");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.putOnce("zTy^", "zTy^");
      try { 
        jSONObject0.getBoolean("zTy^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", false);
      assertFalse(jSONObject0.isEmpty());
      
      boolean boolean0 = jSONObject1.getBoolean("java.io.StringWriter@0000000002");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iG6sN", (-5376.0));
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = JSONObject.doubleToString(651.5809973961781);
      assertEquals("651.5809973961781", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONObject0.putOnce("istrim", pipedInputStream0);
      try { 
        jSONObject0.append("istrim", pipedInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[istrim] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("SQwJAz.u'of0UuxT", (Object) null);
      jSONObject0.accumulate("SQwJAz.u'of0UuxT", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1865);
      jSONObject0.accumulate("6\">bToqg*BPs7-ZYn", jSONArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("Duplicate ke_ \"", "Duplicate ke_ \"");
      jSONObject1.accumulate("Duplicate ke_ \"", jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      HashMap<ClientInfoStatus, JDBCType> hashMap0 = new HashMap<ClientInfoStatus, JDBCType>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put(clientInfoStatus0, (JDBCType) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_PRESENT;
      hashMap0.put((Integer) null, cardTerminals_State0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "PJ<");
      Map<String, Object> map0 = jSONObject0.toMap();
      jSONObject0.put("T/=[V2'A", map0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      boolean boolean0 = jSONObject0.has("Fgl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{5I1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 4 [character 5 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(32, (float) 8);
      int int0 = jSONArray1.optInt(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("nextProbablePrime");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0, stringArray0);
      jSONObject0.write((Writer) charArrayWriter0);
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("-1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      try { 
        jSONObject0.getEnum(class0, "{5I1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      HashMap<StandardLocation, String> hashMap0 = new HashMap<StandardLocation, String>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      double double0 = jSONObject0.optDouble("getreadByte");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      HashMap<CryptoPrimitive, JSONObject> hashMap0 = new HashMap<CryptoPrimitive, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      // Undeclared exception!
      try { 
        jSONObject0.query("O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("jD", 4370.9F);
      jSONObject0.optBigInteger("jD", (BigInteger) null);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      HashMap<CryptoPrimitive, JSONObject> hashMap0 = new HashMap<CryptoPrimitive, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull("!Op_<m`^x04Ff");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("J K");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
