/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 17:46:17 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/stackTrace/7");
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$SizeSegment", ")0H\"4:K", true);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, hashMap0, jSONPath_NotNullSegement0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      boolean boolean0 = JSONPath.contains((Object) hashMap0, "fastjson.parser.deny");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long((-4798L));
      boolean boolean0 = JSONPath.eqNotNull((-3241), long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(113, 4, 16);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, jSONPath0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!\"vmu<");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '\"'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" !C[1bEQ1gg_R},O70");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  !C[1bEQ1gg_R},O70
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!\"vmu<");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8Fe}");
      jSONPath_JSONPathParser0.readValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1014497654951707614L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9wSni31C*PR*dZVBQ.");
      jSONPath_JSONPathParser0.readValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("02.AP0F`L)`");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(2L, object0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!BO");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(62);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("$&F5H", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("GSXW");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RefOpSegement0);
      assertSame(jSONPath_Filter0, jSONPath_RefOpSegement0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" !C[1bEQ1gg_R},O70");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("", (-1L), jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntOpSegement0);
      assertSame(jSONPath_Filter0, jSONPath_IntOpSegement0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$(3ho6FvDBmCMzAUfF");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $(3ho6FvDBmCMzAUfF
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) "/stackTrace/6", "com.alibaba.fastjson.JSONPath$Operator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nin");
      jSONPath0.init();
      assertEquals("nin", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/6");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.serializer.LongCodec");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("com", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NE");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('A');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[{m;*p");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('{', char0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("list_item_value");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('/');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '/, but 'l'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("3%Q$~Ve>I");
      Integer integer0 = new Integer(2286);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-5673));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, integer0, "3%Q$~Ve>I");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Short short0 = new Short((short)484);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, sQLClientInfoException0, short0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("IN", serializeConfig0, parserConfig0);
      Class<SQLWarning> class0 = SQLWarning.class;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("IN", true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("I>#P*[&V$&R+", "I>#P*[&V$&R+");
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, sQLRecoverableException0, javaBeanSerializer0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8Fe}");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(4972L);
      assertEquals(4980.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-/)!j}#TS");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("^", "/stackTrace/9");
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException0.spliterator();
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) spliterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // evalKeySet error : ^
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("~*td'E~<9qPRW%:H");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Locale locale0 = new Locale("xMcW2ZX~*", "7BNZS", "iq@'x+@8Uo5>Mp'(N");
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, "iq@'x+@8Uo5>Mp'(N", locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path ~*td'E~<9qPRW%:H
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("day", "", 0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLFeatureNotSupportedException0, ", class ", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path , class 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = JSONPath.size((Object) "/", "/");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      int int0 = jSONPath0.size((Object) jSONPath_SizeSegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("cause");
      JSONPath jSONPath0 = new JSONPath("cause");
      boolean boolean0 = jSONPath0.setPropertyValue(jSONPath_JSONPathParser0, "cause", 2252L, "cause");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(12);
      boolean boolean0 = JSONPath.set((Object) jSONPath_ArrayAccessSegment0, "list_i$em_value", (Object) jSONPath_ArrayAccessSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) null, "getFieldValue error.", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "?nh");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", class ");
      Set<?> set0 = JSONPath.keySet((Object) sQLIntegrityConstraintViolationException0, "'");
      assertEquals(4, set0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath(",", serializeConfig0, (ParserConfig) null);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.serializer.SerializerFeature", false);
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_PropertySegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("eU$");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      Object object0 = jSONPath0.getPropertyValue(jSONPath_Operator0, "eU$", (-1));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("!\"vmu<");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79, false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("IN", serializeConfig0, parserConfig0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6");
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(",n9=.E3P)", serializeConfig0, parserConfig0);
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("list_item_value", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.getArrayItem((Object) null, (-1056));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.#astjson.oSONPath$RefOpSegement");
      Object object0 = jSONPath0.getArrayItem("com.alibaba.#astjson.oSONPath$RefOpSegement", 0);
      assertEquals("com.alibaba.#astjson.oSONPath$RefOpSegement", object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~EE");
      int int0 = jSONPath0.evalSize("~EE");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1001, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("8]=", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("yyyy-MM-dd HH:mm:ss");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_SizeSegment0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("rlike");
      Set<?> set0 = jSONPath0.evalKeySet("rlike");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) "OgBA/sJUEzBW", ")");
      assertEquals("OgBA/sJUEzBW", object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) "/stackTrace/6", "/stackTrace/6", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      BigDecimal bigDecimal0 = new BigDecimal(993.8805);
      boolean boolean0 = JSONPath.containsValue((Object) propertyNamingStrategy0, "com.alibaba.fastjson.JSONPath$Operator", (Object) bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = JSONPath.contains((Object) sQLIntegrityConstraintViolationException0, "/stackTrace/6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = JSONPath.compare("q+R[~ZjIuCRy", "=}9=tXh/`B^");
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = JSONPath.compare("ll", "{");
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_Operator0, "'WA#~&0*_o1nIC@i", 490L, jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "/stackTrace", (-367L), "/stackTrace");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("~*td'E~<9qPRW%:H");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 3, "~*td'E~<9qPRW%:H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("eU$");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("between", "com.alibaba.fastjson.JSONPath$FilterSegment", (Throwable) null);
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "eU$", (Object) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", ",");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLNonTransientConnectionException0, "fastjson.parser.autoTypeAccept", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("SFa", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) jSONPath_Operator0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) aSMDeserializerFactory0, false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("iq@'x+@8Uo5>Mp'(N");
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "iq@'x+@8Uo5>Mp'(N", (Object) sQLDataException0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : iq@'x+@8Uo5>Mp'(N
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) classLoader0, (Object) bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Byte byte0 = new Byte((byte)116);
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) byte0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.#astjson.oONPath$RefOSegemet");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      jSONPath0.set((Object) bigInteger0, (Object) "com.alibaba.#astjson.oONPath$RefOSegemet");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[{m;*p";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "eF1psSxhB";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = new Integer(73);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(integer0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "GWV";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(bigDecimal0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("~*td'E~<9qPRW%:H");
      // Undeclared exception!
      jSONPath0.removePropertyValue(jSONPath0, "getFieldValue error.", true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(57, false);
      JSONPath jSONPath0 = new JSONPath("map is null.");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      boolean boolean0 = jSONPath0.removePropertyValue(sQLTransactionRollbackException0, "AI#Q5)c;0JjzLy+*3U", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("z8", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "z8", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-1227));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("il43JO");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "RYAq");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "/", "/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$)@o?");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath0, "$)@o?");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("j@");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("getClass");
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      jSONPath0.remove((Object) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "87x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(60, 60, 60);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_RangeSegment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = JSONPath.read("", "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Long long0 = new Long((-895));
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) long0, ".|5StH(&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. .|5StH(&
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("coq8o<_}O>WE) Y");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : coq8o<_}O>WE) Y
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(114);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("matchedCount", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(bigDecimal0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("02.AP0F+L)`", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue("02.AP0F+L)`", "'s*,s*'", (-1073));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("keySet", serializeConfig0, parserConfig0);
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("8", (SerializeConfig) null, parserConfig0);
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("SzB5P$%M,BXrV]");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fmH_xAyrRK i}rx/m4M");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fmH_xAyrRK i}rx/m4M", "m}2gWmq2", (-818));
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(sQLFeatureNotSupportedException0, (-818));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null, parserConfig0, (int) (byte)97, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSONPath.extract("A,H%pHMbzI7Y9P ", "A,H%pHMbzI7Y9P ", parserConfig0, 2453, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.safeMode", "fastjson.parser.deny.internal");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "ic+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("-", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("T\"h(a2[]k.=/s36ddR");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("#ulF.b/H");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : T\"h(a2[]k.=/s36ddR
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("aa.u&il.List", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(",()@s_Mk;1qdLB0dn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Class<DataTruncation> class0 = DataTruncation.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) javaBeanSerializer0, "$Rz8Yx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|\"VDcMB");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("writeFieldNameDirect", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath_Segment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.parser.JSONToken", "aa.u&il.List", 41);
      JSONPath jSONPath0 = JSONPath.compile("tE63&)~|!J");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : tE63&)~|!J
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((-1580386065683472715L), (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fG]D2G.agbhwu_");
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "/stackTrace/6", (-5808497499525986226L), "fastjson");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature feature0 = Feature.OrderedField;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(mockGregorianCalendar0, "fastjson.parser.autoTypeSupport", 2425, feature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path fastjson.parser.safeMode, segement fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = new Integer((-1073));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("02.AP0F+L)`", (SerializeConfig) null, parserConfig0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(integer0, "com.alibaba.fastjson.JSONPath$NotNullSegement", stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BrowserCompatible");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("BrowserCompatible", (List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("-");
      JSONPath jSONPath0 = JSONPath.compile("-");
      DataTruncation dataTruncation0 = new DataTruncation(32, false, false, 32, 120, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "[E!L%J", (Object) dataTruncation0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.JSONLexerBase");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[N?ZS+]L'LObhg>Fl", "hIdQ%|4H4*x NN", 3991);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "", (Object) sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.#astjson.oONPath$RefOSegemet");
      jSONPath0.containsValue((Object) jSONPath0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      JSONPath.contains((Object) sQLClientInfoException0, "@W~Bd{cb8R");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/6", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "/cause/stackTrace/6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$)@o?");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$)@o?");
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_JSONPathParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", (SerializeConfig) null, parserConfig0);
      Double double0 = new Double((-533.9117564427494));
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) double0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("map is null.");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      boolean boolean0 = jSONPath0.removePropertyValue(sQLTransactionRollbackException0, "AI#Q5)c;0JjzLy+*3U", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.#astjson.oONPath$RefOSegemet");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, jSONPath0, 1024);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("6Y{CXK(.y]x_a-/kxB");
      Stack<Object> stack0 = new Stack<Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, stack0, 108, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 108
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79, false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("IN", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning("java.time.Period");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny.internal", "fastjson.parser.safeMode", 79, sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLInvalidAuthorizationSpecException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("e*$8F=F4Ng'Y*E#@", "fastjson.parser.autoTypeSupport", 12, sQLNonTransientConnectionException0);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLWarning0, sQLTimeoutException0);
      assertNull(sQLWarning0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("list_item_value", false);
      JSONPath jSONPath0 = new JSONPath("mjP/6<e");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.alibaba.fastjson.JSONPath$NotNullSegement", "com.alibaba.fastjson.JSONPath$NotNullSegement");
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, sQLNonTransientConnectionException0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/4");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8Fe}");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(8L, object0);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[8];
      // Undeclared exception!
      try { 
        JSONPath.extract("yyyy-MM-dd HH:mm:ss", "yT/16%nUkaPAoz", parserConfig0, 32, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" !\"vmu<");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("r");
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      boolean boolean0 = jSONPath0.set((Object) batchUpdateException0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?xO%e|<Pc`eH$", "~lyX*)Vv~&IiL'( {X", 1579, (Throwable) null);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "com.aloWabD.fastjson.JSONPath$No|NullSegement", (Object) sQLIntegrityConstraintViolationException0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("org.springframework.security.web.savedrequest.DefaultSavedRequest");
      Long long0 = new Long(8838294710098435315L);
      Integer integer0 = new Integer(2565);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) long0, (Object) integer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      boolean boolean0 = jSONPath0.set((Object) "unsupported set operation.", (Object) "///stackTrace/11", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("rlike", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(14, false);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      JSONPath jSONPath0 = new JSONPath("!U:>'6\"3i.5WavPt_q", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      jSONPath0.arrayAdd((Object) parserConfig0, (Object[]) null);
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MultiIndexSegment");
      boolean boolean0 = jSONPath0.contains((Object) "com.alibaba.fastjson.JSONPath$MultiIndexSegment");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 85, (-3251));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true");
      defaultJSONParser0.parse();
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"xC^A{Dx`b*");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(14);
      SQLException sQLException0 = new SQLException("", "com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("!n2T``C#Hg/)r8", "com.alibaba.fastjson.serializer.AtomicCodec", 14, sQLException0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1269));
      SerializeConfig serializeConfig0 = new SerializeConfig(36);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("U0'kKz~o>~", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, "50iuR?]JfGUUQ!@7%", sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/stackTrace/6";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("/stackTrace/6", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "w";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("w", stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",()@s_Mk;1qdLB0dn", "aau&i.ist", 42);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",()@s_Mk;1qdLB0dn", ",()@s_Mk;1qdLB0dn", 1076, sQLIntegrityConstraintViolationException0);
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject(sQLNonTransientConnectionException0, stringArray0);
      assertSame(object0, sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("unsupported set operation.", stringArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath jSONPath0 = JSONPath.compile("n");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      int int0 = JSONPath.size((Object) jSONPath_Operator0, "/");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("list_item_value", 7, jSONPath_Operator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath jSONPath0 = new JSONPath("list_item_value");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(133, 133, 133);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_DoubleOpSegement0, hashMap0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.aloWabD.fastjson.JSONPath$No|NullSegement");
      Stack<Object> stack0 = new Stack<Object>();
      int int0 = jSONPath0.evalSize(stack0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\\-");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("\\-", true);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, "HU+B&T\"t>RQ-_a.H`ak");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("6Y{CXK(.y]x_a-/kxB");
      jSONPath0.deepSet("6Y{CXK(.y]x_a-/kxB", "6Y{CXK(.y]x_a-/kxB", 1779L, "6Y{CXK(.y]x_a-/kxB");
      assertEquals("6Y{CXK(.y]x_a-/kxB", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("illegal json.");
      jSONPath0.deepSet(map0, "/cause/cause/stackTrace/9", (-3928183487890302916L), map0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      JSONPath jSONPath0 = new JSONPath("list_item_value");
      jSONPath0.deepSet(hashMap0, "list_item_value", (-3928183487890302916L), map0);
      assertEquals(88, map0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      Integer integer0 = new Integer((-1073));
      jSONPath0.deepSet((Object) null, "null", 0L, integer0);
      assertEquals("null", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("list_i$em_value", sQLNonTransientException0);
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath jSONPath0 = JSONPath.compile("list_i$em_value");
      vector0.add((Object) sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(vector0, "list_i$em_value", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path list_i$em_value, segement list_i$em_value
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath jSONPath0 = JSONPath.compile("list_i$em_valuVe");
      jSONPath0.deepScan(vector0, "list_i$em_valuVe", vector0);
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_SizeSegment0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepScan(map0, ",", stack0);
      assertTrue(stack0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("IN");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IN";
      Object object0 = JSONPath.reserveToArray(jSONPath0, stringArray0);
      Object object1 = JSONPath.reserveToArray(object0, stringArray0);
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/stackTrace/7");
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, sQLRecoverableException0, "/stackTrace/7", hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Short short0 = new Short((short) (-2323));
      boolean boolean0 = JSONPath.eqNotNull(short0, 5614464919154503228L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Float float0 = new Float(1358.0F);
      Double double0 = new Double(8);
      boolean boolean0 = JSONPath.eqNotNull(float0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Float float0 = new Float(635.0164F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Float float0 = new Float((double) 284.1757F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(float0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Float float0 = new Float((float) 3991);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Float float0 = new Float(284.1757F);
      Integer integer0 = new Integer(62);
      boolean boolean0 = JSONPath.eqNotNull(float0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Long long0 = new Long((-233L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Float float0 = new Float((float) (-623));
      Long long0 = new Long((-895));
      boolean boolean0 = JSONPath.eqNotNull(long0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Long long0 = new Long(693);
      Byte byte0 = new Byte((byte) (-99));
      boolean boolean0 = JSONPath.eqNotNull(byte0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Long long0 = new Long(120);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(long0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, 989);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = new Integer((byte)80);
      Long long0 = new Long((byte)80);
      boolean boolean0 = JSONPath.eq(integer0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-99));
      boolean boolean0 = JSONPath.eq(byte0, "com.alibaba.fastjson.JSONPath$Operator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79, false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("IN", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.safeMode");
      boolean boolean0 = JSONPath.eq(jSONPath1, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Long long0 = new Long(5614464919154503228L);
      boolean boolean0 = JSONPath.eq(long0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      boolean boolean0 = JSONPath.eq((Object) null, sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("eU$");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLFeatureNotSupportedException0, linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepGetPropertyValues(linkedList0, linkedList0);
      assertFalse(linkedList0.contains("fastjson.parser.autoTypeSupport"));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$Operator");
      Long long0 = new Long((-4798L));
      Map<String, Object> map0 = JSONPath.paths((Object) long0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(map0);
      assertTrue(collection0.contains((-4798L)));
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stckrace/8");
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) jSONPath0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("create");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, "com.alibaba.fa6tjson.JSONPath$IntBetweenSegement", (-1073), (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.deny", "fastjson.parser.deny");
      Map<String, Object> map0 = JSONPath.paths((Object) sQLIntegrityConstraintViolationException0);
      int[] intArray0 = new int[9];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, map0, map0);
      assertEquals(83, map0.size());
      assertEquals(9, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("IN");
      SerializeConfig serializeConfig0 = new SerializeConfig(79, false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("IN", serializeConfig0, parserConfig0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, jSONPath_SizeSegment0, "java.time.Period");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("F1^WL^#<vYjh&", 4904007817188630457L, 4904007817188630457L, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      JSONPath jSONPath0 = new JSONPath("X:hX=");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", "fastjson.parser.safeMode", 105);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "73sd>E>j6wN", jSONPath_WildCardSegment0, sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("/stackTrace/6");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, (Object) null, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2";
      stringArray0[1] = "2";
      stringArray0[2] = "2";
      stringArray0[3] = "T)=ly9Pxz~K#^";
      stringArray0[4] = "2";
      stringArray0[5] = "2";
      stringArray0[6] = "2";
      stringArray0[7] = "2";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("2", "2", "2", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      SerializeConfig serializeConfig0 = new SerializeConfig(99);
      JSONPath jSONPath0 = new JSONPath("~txC?eog", serializeConfig0, (ParserConfig) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("T)=ly9Pxz~K#^", "a", 44, hashMap0);
      SQLDataException sQLDataException0 = new SQLDataException("~txC?eog", sQLClientInfoException0);
      DataTruncation dataTruncation0 = new DataTruncation(99, true, true, 99, 99, sQLDataException0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "~txC?eog", dataTruncation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("t!} fc;");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = new JSONPath("t!} fc;");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(">bC{~.L&*[{Uaw$qWA ", "/stackTrace/9");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, sQLIntegrityConstraintViolationException0, sQLTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("'3%(`~H[Hdtu&G*6V");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("'3%(`~H[Hdtu&G*6V", serializeConfig0, (ParserConfig) null);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(927);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_ArrayAccessSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("t>sG$");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, "or.joda.time.LocalDateTime");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("IN");
      SerializeConfig serializeConfig0 = new SerializeConfig(79, false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("IN", serializeConfig0, parserConfig0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(57);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, javaBeanSerializer0, jSONPath_ArrayAccessSegment0);
      assertSame(object0, jSONPath_ArrayAccessSegment0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.autoTypeAccept", ",", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?xO%e|<Pc`eH$", "~lyX*)Vv~&IiL'( {X", 1579, (Throwable) null);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, sQLIntegrityConstraintViolationException0);
      assertEquals(1, jSONArray0.size());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("(Ljava/lang/Object;Ljava/lang/Object;)", 3954, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, "/stackTrace/9", sQLInvalidAuthorizationSpecException0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(39);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("w!t^Bs+l;|pLLxS{:", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", serializeConfig0, parserConfig0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$ArrayAccessSegment", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("[{m;*p", 2493.4411259915, jSONPath_Operator0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("OcXZ?@Q%M", "fastjson.parser.autoTypeSupport", 0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLTransactionRollbackException0, aSMDeserializerFactory0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(114);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath jSONPath0 = JSONPath.compile("matchedCount");
      Pattern pattern0 = Pattern.compile("com.alibaba.fastjson.JSONPath$NullSegement");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("matchedCount", pattern0, jSONPath_Operator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLWarning0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("between", "*}Hnnb~ 7':{]\"*", 630);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, sQLRecoverableException0, serializeConfig0, sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$)@o?");
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("[", "@type", jSONPath_Operator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLWarning0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, sQLWarning0, "unsupported set operation.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("list_item_value", serializeConfig0, parserConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(",oC8QA!&irJ8e", "fastjson.parser.deny");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.deny", "@N(\" 8", jSONPath_Operator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, sQLClientInfoException0, sQLRecoverableException0, jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("IN");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("}>l", "[]", jSONPath_Operator0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, ".", jSONPath_SizeSegment0, "[]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("Q(@<30RF", "<<J:RY", "]WxiJO6m>h%&wNDqK", (String[]) null, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeAccept");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, parserConfig0, sQLFeatureNotSupportedException0, parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("(=yPjjI#Kn", "U/}LUO", (String) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("notWriteDefaultValue", (String) null, (String) null, stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.#astjson.oONPath$RefOSegemet");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("like", jSONPath_WildCardSegment0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, (Object) null, (Object) null, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("n", 1473.381522, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("n");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("n");
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, sQLRecoverableException0, jSONPath_Operator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("6Y{CXK(.y]x_a-/kxB");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("length", 1779L, jSONPath_Operator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6Y{CXK(.y]x_a-/kxB", "length");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, "length", sQLInvalidAuthorizationSpecException0, sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      String[] stringArray0 = new String[7];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("gndc{D_vXJ", stringArray0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "/stackTrace/2", (Object) null, bigInteger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("com.alibaba.fastjson.JSONPath$NullSegement", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("Q&\"O|IK.I#}g=");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Q&\"O|IK.I#}g=", true);
      Float float0 = new Float(0.0F);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, stringArray0[2], jSONPath_PropertySegment0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$NullSegement";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$NullSegement";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$NullSegement";
      stringArray0[3] = "com.alibaba.fastjson.JSONPath$NullSegement";
      stringArray0[4] = "Q&\"O|IK.I#}g=";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("com.alibaba.fastjson.JSONPath$NullSegement", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("Q&\"O|IK.I#}g=");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Q&\"O|IK.I#}g=", true);
      Float float0 = new Float(0.0F);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$NullSegement", jSONPath_PropertySegment0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3968, 3968, 3968);
      JSONPath jSONPath0 = JSONPath.compile("IN");
      Long long0 = new Long((-3975378478825053783L));
      Long[] longArray0 = new Long[9];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(">@ 9|`TQ2gH", longArray0, true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-895), 6, 1169, 1169, 6, 43);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, long0, jSONPath_RangeSegment0, mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-3385L));
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("\u0003.$|et", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("\u0003.$|et");
      UUID uUID0 = MockUUID.fromString("\u0003.$|et");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, uUID0, mockGregorianCalendar0, longArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("SFa", longArray0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("SFa", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, serializeConfig0, jSONPath_WildCardSegment0, jSONPath_WildCardSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("AUQ~m(Zcm'2", (-4502318152477668259L), (-4502318152477668259L), false);
      JSONPath jSONPath0 = JSONPath.compile("AUQ~m(Zcm'2");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("AUQ~m(Zcm'2", sQLTransientConnectionException0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, jSONPath0, sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("2y", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("list_item_mvalue");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("list_item_mvalue");
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, "list_item_mvalue", (Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3968, 3968, 3968);
      JSONPath jSONPath0 = new JSONPath("j@r");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(3968);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "j@r", jSONPath_ArrayAccessSegment0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("IN");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, sQLClientInfoException0, "j@r", object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("/stackTrace/7", "/stackTrace/7");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/stackTrace/7");
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, sQLRecoverableException0, "/stackTrace/7", hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1350, 112, 570);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("aa.u&il.ist", serializeConfig0, (ParserConfig) null);
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.parser.JSONToken", "");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, sQLDataException0, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("SupportArrayToBean");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-123008), (-529), 120);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, (Object) null);
      assertEquals(1021, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSONPath.extract("list_item_value", "*", parserConfig0, 128, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2list_item_value
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath jSONPath0 = JSONPath.compile("tYP^@=");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "b?";
      stringArray0[1] = "t";
      stringArray0[2] = "tYP^@=";
      stringArray0[3] = "/stackTrace/9";
      stringArray0[4] = "w";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "t", aSMDeserializerFactory0);
      assertEquals(5, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/0", true);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/1");
      Float float0 = new Float((-3268.10042601));
      // Undeclared exception!
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath0, float0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("[{m;*p", "fastjson.parser.autoTypeSupport", parserConfig0, (int) (byte) (-99), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSONPath.extract("[\"O?kwDG$", "/stackTrace/6", parserConfig0, 744, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("02.AP0F`L)`", "02.AP0F`L)`", 1822);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("02.AP0F`L)`", sQLWarning0);
      Float float0 = new Float((double) 1822);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Double double0 = new Double(3981);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, jSONPath_WildCardSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$WildCardSegment cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("WDv[E;q");
      // Undeclared exception!
      try { 
        JSONPath.compare("illegal json : ", jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(61, 61, 14, 14, 14, 14);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, mockGregorianCalendar0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = JSONPath.compare("/stackTrace", "/stackTrace");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Long long0 = new Long(8838294710098435310L);
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("B6imN=kJzQR=3v");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      Float float0 = new Float(2462.799F);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "B6imN=kJzQR=3v", float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(wPbQE{&A`@lV^{");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(":)I");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \")I\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement(",");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"1dMliR;N_");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("':M/.gUr{>&D=Fv,lV");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("':M/.gUr{>&D=Fv,lV");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"':M/.gUr{>&D=Fv\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" cHass");
      JSONPath jSONPath0 = new JSONPath("/type/annotatedSuperclass/type/annotatedSuperclass/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/2/type/declaredMethods/1/annotatedReturnType/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/methods/12/annotatedReturnType/type/rawType/declaredClasses/0/declaredConstructors/0/annotatedParameterTypes/0/type/rawType/classes/0/declaredMethods/5/annotatedParameterTypes/0/type/declaredConstructors/0/parameters/9/annotatedType");
      SQLDataException sQLDataException0 = new SQLDataException();
      boolean boolean0 = jSONPath0.containsValue((Object) sQLIntegrityConstraintViolationException0, (Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("astjson.parser.sa", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(";j-&ThL(8u\"");
      SQLTransientException sQLTransientException0 = new SQLTransientException("(w1s5*)y__~32wx;P3;");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("(w1s5*)y__~32wx;P3;", "(w1s5*)y__~32wx;P3;", sQLTransientException0);
      JSONPath.keySet((Object) sQLTransactionRollbackException0, "\\.");
      Float float0 = new Float(100000.0);
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepScan(float0, "/stackTrace/3", stack0);
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RLIKE");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LIKE");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<:LtYaz>Od[");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("t!} fc;");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '}'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("= V'vn57/Eo5<DQ57");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'T'");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("T'", object0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"xC^A{Dx`b*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but '*'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"1dMliR;N_");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-2967L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("o\"aVA$;");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2244L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-<E1PU`upM#");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" +2JUyHz(/(, {I");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(2L, object0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("(Ljava/lang/Object;Ljava/lang/Object;)", 3954, jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|Uh~^Xqrxun]iRavvF");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_DoubleOpSegement0);
      assertSame(jSONPath_DoubleOpSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*}Hnnb~ 7':{]\"*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*}Hnnb~ 7'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#ulF.b/H");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("YH>T0C");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[N?ZS+]L'LObhg>Fl");
      SQLWarning sQLWarning0 = new SQLWarning("[N?ZS+]L'LObhg>Fl", "[N?ZS+]L'LObhg>Fl");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. [N?ZS+]L'LObhg>Fl
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("XkXlVrRK DBK;");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[?z{A5L0`+C");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but 'z'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[+5Wv2=Y_xka%C");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5/O(p%$ezOIin*ZC^");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : 5/O(p%$ezOIin*ZC^
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("B");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLException0);
      JSONPath jSONPath0 = new JSONPath("{");
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLNonTransientException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      String[] stringArray0 = new String[4];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.deny.internal", "C", 2085);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransientConnectionException0);
      Map<String, Object> map1 = JSONPath.paths((Object) map0);
      //  // Unstable assertion: assertEquals(116, map1.size());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "com.alibaba.#astjson.oSONPath$RefOSegemet");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("autoTypeAccept");
      boolean boolean0 = jSONPath0.set((Object) "autoTypeAccept", (Object) "autoTypeAccept", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "n", (Object) classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/5", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLWarning0, (Object) jSONPath_SizeSegment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      Float float0 = new Float((-2170.1F));
      boolean boolean0 = jSONPath0.set((Object) float0, (Object) "unsupported set operation.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      DataTruncation dataTruncation0 = new DataTruncation(256, true, true, 887, 887);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) dataTruncation0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Object object0 = JSONPath.reserveToArray(mockGregorianCalendar0, (String[]) null);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      SQLDataException sQLDataException0 = new SQLDataException();
      boolean boolean0 = jSONPath0.remove((Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Locale locale0 = new Locale("NP+s6f!J.-?");
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) locale0, ",", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.util.Locale
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$Context");
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "com.alibaba.fastjson.JSONPath$Context", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$Context
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6");
      String[] stringArray0 = new String[8];
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath jSONPath0 = JSONPath.compile("tE63&)~|!J");
      jSONPath0.arrayAdd((Object) "tE63&)~|!J", (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Integer integer0 = new Integer((-1073));
      JSONPath.arrayAdd((Object) integer0, "fastjson.parser.deny.internal", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6");
      Set<?> set0 = jSONPath0.keySet((Object) "/stackTrace/6");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NE");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      int int0 = jSONPath0.size((Object) "8Fe}");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      int int0 = jSONPath0.size((Object) "^");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/stackTrace/8");
      JSONPath jSONPath0 = new JSONPath("/");
      boolean boolean0 = jSONPath0.containsValue((Object) "/cause/cause/stackTrace/9", (Object) sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" cHass");
      JSONPath jSONPath0 = new JSONPath("/");
      SQLDataException sQLDataException0 = new SQLDataException();
      boolean boolean0 = jSONPath0.containsValue((Object) sQLIntegrityConstraintViolationException0, (Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("PdaynwN1");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("T\"h(a2[]k.=/s36ddR", "T\"h(a2[]k.=/s36ddR");
      boolean boolean0 = jSONPath0.containsValue((Object) sQLInvalidAuthorizationSpecException0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1785, 1785, 1785);
      JSONPath jSONPath0 = JSONPath.compile(",viK.>gMfJ'XC{S4fw)");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_SizeSegment0, serializeConfig0);
      assertNotNull(object0);
      
      boolean boolean0 = JSONPath.contains(object0, "set");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/2");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "/stackTrace/2", (-1));
      boolean boolean0 = jSONPath0.contains((Object) sQLFeatureNotSupportedException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("eU$");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1732, 774);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Object object0 = JSONPath.extract("", "fastjson.parser.autoTypeAccept", parserConfig0, 2750, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Object object0 = JSONPath.extract("{", "X");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath(",", serializeConfig0, (ParserConfig) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) null, "fastjson.parser.deny.internal");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/6");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("list_item_value", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, false, false, 7, 23, sQLIntegrityConstraintViolationException0);
      JSONPath jSONPath0 = new JSONPath("*");
      ArrayList arrayList0 = (ArrayList)jSONPath0.eval((Object) dataTruncation0);
      assertEquals(13, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("r");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath_Operator0, sQLFeatureNotSupportedException0);
      assertFalse(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("96'OC**taNITW?=uNm1", "ii", false);
      JSONPath jSONPath0 = new JSONPath("create");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-10));
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, "create", jSONPath_ArrayAccessSegment0, jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/cause/cause/stackTrace/9", "/cause/cause/stackTrace/9", jSONPath_Operator0);
      boolean boolean0 = JSONPath.eq(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("LIKE", "LIKE");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2565, 2565, (-1982292595));
      boolean boolean0 = jSONPath0.set((Object) jSONPath_RangeSegment0, (Object) "ll", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeAccept", "fastjson.parser.deny.internal", sQLWarning0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("eU$");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("$)@o?");
      JSONPath jSONPath0 = new JSONPath("=6PT7p?");
      MockDate mockDate0 = new MockDate(1262, 9, (-1043));
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NullSegement0, true);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, mockDate0, jSONPath_NotNullSegement0, ",Ps&_U8O7O?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SerializeConfig serializeConfig0 = new SerializeConfig(114);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("matchedCount", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, serializeConfig0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("safeMode", "safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2safeMode
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("r");
      String string0 = jSONPath0.getPath();
      assertEquals("r", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Integer integer0 = new Integer(15);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) integer0, (String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("WDv[E;q", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("WDv[E;q");
      Byte byte0 = new Byte((byte)97);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, byte0, "WDv[E;q", jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("tj");
      jSONPath0.remove((Object) "tj");
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("com.alibaba.fastjson.util.IdentityHashMap$Entry", jSONPath_MaxSegment0, jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&quXICC");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RefOpSegement0);
      assertSame(jSONPath_RefOpSegement0, jSONPath_Filter0);
  }
}
