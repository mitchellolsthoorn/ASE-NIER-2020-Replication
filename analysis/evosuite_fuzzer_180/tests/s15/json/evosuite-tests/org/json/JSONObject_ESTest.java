/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 18:25:15 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.security.CryptoPrimitive;
import java.sql.JDBCType;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.LayoutStyle;
import javax.tools.JavaFileObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(",c|`bWs;FjuN=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [,c|`bWs;FjuN=] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("99");
      assertEquals(99, number0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("&d/=;/v}:1;@+R\")n{F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"6(lcbgk>\"|sbf\":99,\"utf-8\":7,\"a\":[],\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 12 [character 13 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 60, 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("3}%JG");
      assertEquals("3}%JG", object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, mockPrintWriter0, 0, 0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.write((Writer) stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("true");
      jSONObject0.append("true", mockPrintWriter0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("true");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("] is not a JSONArray.", 1472);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Desktop.Action, JDBCType> hashMap0 = new HashMap<Desktop.Action, JDBCType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1732.759194));
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      JSONObject jSONObject1 = jSONObject0.putOpt("MqjSF)u", "MqjSF)u");
      jSONObject1.optString("MqjSF)u");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<String, Thread.State> hashMap0 = new HashMap<String, Thread.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.optQuery("");
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-95L));
      Number number0 = jSONObject0.optNumber("true", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1732.759194));
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optNumber("s[fdzu(%4~", (Number) bigInteger0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4295);
      BigDecimal bigDecimal0 = new BigDecimal((long) 4295);
      Number number0 = jSONObject0.optNumber("}Y3fIRzcUGCD", (Number) bigDecimal0);
      assertEquals((byte) (-57), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      long long0 = jSONObject0.optLong("toString", (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("n,<z");
      long long0 = jSONObject0.optLong("n,<z");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{WnPgN/qi", (-21.579124F));
      long long0 = jSONObject0.optLong("{WnPgN/qi");
      assertEquals((-21L), long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Dt$crQIDa9\"-!AMH*E", (-995L));
      int int0 = jSONObject0.optInt("Dt$crQIDa9\"-!AMH*E");
      assertEquals((-995), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4295);
      double double0 = jSONObject0.optDouble("~1", 1071.6596);
      assertEquals(1071.6596, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1732.759194));
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("s[FdZu(%4~", bigInteger0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("\"\"", bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("nul7$o", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("6(lcbGK>\"|sBF", "6(lcbGK>\"|sBF");
      jSONObject0.opt("6(lcbGK>\"|sBF");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("{WnPgN/qi", "{WnPgN/qi");
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("[nNx.", (Collection<?>) linkedList0);
      boolean boolean0 = jSONObject1.isNull("[nNx.");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("+0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("$sL");
      int int0 = jSONObject1.getInt("$sL");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Duplicate key \"", (-840.0F));
      double double0 = jSONObject0.getDouble("Duplicate key \"");
      assertEquals((-840.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 1423, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", "] not found.");
      Character character0 = Character.valueOf('5');
      jSONObject1.append("java.io.StringWriter@0000000009", character0);
      // Undeclared exception!
      jSONObject1.toString(5569);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("{\"\f\":99,\"Expected a ',' or '}'\":[],\" at \":null,\"ut-8\":7,\"x\":[],\"] is not a valid number.\":99,\"xx\":false}", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Object, CardTerminals.State> hashMap0 = new HashMap<Object, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 3047L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(428);
      try { 
        jSONObject0.put("getlongValue", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-3457.89));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 4295);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("v");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("lZ^Hh.{MN=-s", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name lZ^Hh.{MN=-s, locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1935));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1935
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"astring\",\"ut-8\":7,\"wnpgn\":\"a string\",\" at \":[],\"istoBigInteger\":99,\"xx\":false}");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, 169, 48);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":{\"x\":null,\"xx\":null,\"gettoString\":99},\"utf-8\":7,\"wnpgn\":\"a string\",\" at \":99,\"java.\":99,\"xx\":99}");
      MockFile mockFile0 = new MockFile("{\"x\":{\"x\":null,\"xx\":null,\"gettoString\":99},\"utf-8\":7,\"wnpgn\":\"a string\",\" at \":99,\"java.\":99,\"xx\":99}");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 71);
      try { 
        jSONObject0.write((Writer) bufferedWriter0, 1863, 71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: java.lang.String@0000000003
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float(2057.898);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.write((Writer) stringWriter0, 8192, 3457);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4295);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, 4295, 1025);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M3R2$LY3|");
      JSONObject jSONObject1 = jSONObject0.append("{\"x\":\"hello\",\"y\":7,\"z\":false,\"Unable to write JSONArray value at index: 0\":[],\"b\":\"a string\"}", mockPrintWriter0);
      Writer writer0 = jSONObject1.write((Writer) mockPrintWriter0, (int) (byte) (-118), (-154));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Unable to write JSONObject value for key: \":\"a string\",\"\t\":[],\" at \":true,\"java.\":99,\"] not found.\":true,\"org.json.JSONPointer$Builder\":[],\"A JSONObject text must end with '}'\":false}");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, (-1), (-1));
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Object object0 = JSONObject.wrap(charset0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = JSONObject.wrap(pipedOutputStream0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(44);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(44, object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = JSONObject.wrap("{\"] is not an enum of type \":\"hello\",\"y\":7,\"z\":-99,\"a\":[99,99],\"getfloatValue\":\"a string\"}");
      assertEquals("{\"] is not an enum of type \":\"hello\",\"y\":7,\"z\":-99,\"a\":[99,99],\"getfloatValue\":\"a string\"}", object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      Object object0 = JSONObject.wrap(roundingMode0);
      assertSame(roundingMode0, object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = new Float(14.400493123185026);
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject.testValidity("E,E_Vewl$du`p");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = new Double(4295);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(11, Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("99");
      assertEquals(99, object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("{\"fruit\":\"Apple\",\"size\":\"WnPgN\",\"color\":[],\"value\":true,\"value2\":false,\"number\":true,\"isisInfinite\":{}}");
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"WnPgN\",\"color\":[],\"value\":true,\"value2\":false,\"number\":true,\"isisInfinite\":{}}", object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("&g=ZNi");
      assertEquals("&g=ZNi", object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("] is not a long.");
      Writer writer0 = JSONObject.quote("\"", (Writer) mockFileWriter0);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M3R2$LY3|");
      Writer writer0 = JSONObject.quote("`vQ/H}*]6K\\'", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M3R2$LY3|");
      Writer writer0 = JSONObject.quote("", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("{\"x\":\"get\",\"y\":7,\"z\":true,\"a\":[],\"b\":false}", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")!OUm*)ZQ", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "{Wn$gN2qi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}");
      jSONObject0.optString("", "");
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(650);
      Number number0 = jSONObject0.optNumber("nyW5pH[YH/%)", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<DataInputStream, WebParam.Mode> hashMap0 = new HashMap<DataInputStream, WebParam.Mode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("fKQZUbDstr,VnAR", "fKQZUbDstr,VnAR");
      long long0 = jSONObject0.optLong("fKQZUbDstr,VnAR", 592L);
      assertEquals(592L, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("6(lcbGK>\"|sBF", "6(lcbGK>\"|sBF");
      long long0 = jSONObject1.optLong("6(lcbGK>\"|sBF", (-934L));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-934L), long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("6(lcbGK>\"|sB6", "6(lcbGK>\"|sB6");
      int int0 = jSONObject1.optInt("6(lcbGK>\"|sB6", 1840);
      assertEquals(1, jSONObject0.length());
      assertEquals(1840, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("ishashCode", (-401));
      assertEquals((-401), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("gettoString", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M3R2$LY3|");
      jSONObject0.append("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":\"a string\"}", mockPrintWriter0);
      double double0 = jSONObject0.optDouble("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":\"a string\"}", (-2058.44177992));
      assertEquals((-2058.44177992), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      double double0 = jSONObject0.optDouble("0", 0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(57);
      Class<Window.Type> class0 = Window.Type.class;
      Window.Type window_Type0 = Window.Type.UTILITY;
      Window.Type window_Type1 = jSONObject0.optEnum(class0, "JJ$28j8", window_Type0);
      assertEquals(Window.Type.UTILITY, window_Type1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.opt("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float(2600.4081528744);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("99", "99");
      try { 
        jSONObject1.getBoolean("99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-3419.03));
      JSONObject jSONObject1 = jSONObject0.putOnce(")VL@t\"ty8ic(", double0);
      try { 
        jSONObject1.getBoolean(")VL@t\"ty8ic(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4295);
      jSONObject0.accumulate("Dt$cVQIDa9\"-!AMHZ=", "Dt$cVQIDa9\"-!AMHZ=");
      Object object0 = jSONObject0.get("Dt$cVQIDa9\"-!AMHZ=");
      assertEquals("Dt$cVQIDa9\"-!AMHZ=", object0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Month, MockPrintStream> hashMap0 = new HashMap<Month, MockPrintStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.get("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write((Writer) stringWriter0, 4, 169);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<Component.BaselineResizeBehavior, MultipleGradientPaint.ColorSpaceType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("K/1}SbhaH");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"plu\":\"hello\",\"y\":7,\"z\":-99,\"a\":[99],\"getfloatValue\":\"a string\"}");
      String string0 = jSONObject0.toString(45);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.indent(charArrayWriter0, 12);
      assertEquals("            ", charArrayWriter0.toString());
      assertEquals(12, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOnce("Misplaced object.", linkedList0);
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Object, CardTerminals.State> hashMap0 = new HashMap<Object, CardTerminals.State>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_REMOVAL;
      hashMap0.put(pipedOutputStream0, cardTerminals_State0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"plu\":\"hello\",\"y\":7,\"z\":-99,\"a\":[null],\"b\":{}}");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, "0100", (-1566), (-1566));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, (-934), (-934));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((double) 4295);
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(object0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(object0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double(0.0);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Float float0 = new Float(0.0);
      Object object0 = JSONObject.wrap(float0);
      assertEquals(0.0F, object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Short short0 = new Short((short)45);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)45, object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Character character0 = new Character('@');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('@', object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.wrap(jSONArray0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("0", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0100");
      assertEquals("0100", object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("8qr,.bpN|F8CCh)-?0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("- qIZ@2fE!w72s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("ishistoricalName");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Dt$crQIDa9\"-!AMH*E", "Dt$crQIDa9\"-!AMH*E");
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("{WnPgN/qi", "{WnPgN/qi");
      JSONObject jSONObject2 = new JSONObject();
      boolean boolean0 = jSONObject2.similar(jSONObject1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = JSONObject.quote("i.B|+C");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"\f\":99,\"x\":[],\" [character \":false,\"Expected a ',' or '}'\":[],\"ut-8\":7,\"] is not a valid number.\":true,\" at \":null}");
      try { 
        jSONObject0.getBigDecimal("{\"\f\":99,\"x\":[],\" [character \":false,\"Expected a ',' or '}'\":[],\"ut-8\":7,\"] is not a valid number.\":true,\" at \":null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000051] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4295);
      JSONObject jSONObject1 = jSONObject0.putOpt("w;#W2qnX5O6r.u|", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("{WnPgN/qi", "{WnPgN/qi");
      try { 
        jSONObject0.putOnce("{WnPgN/qi", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"{WnPgN/qi\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "2qWOM$]Jm";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Fm'\">^_&Kjtxh9(|", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]?t</1", true);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("", false);
      boolean boolean0 = jSONObject1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(60);
      JSONObject jSONObject0 = new JSONObject(byteBuffer0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileInputStream0);
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<JavaFileObject.Kind> class0 = JavaFileObject.Kind.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("`y#TlcbGK>\"|sBF", "`y#TlcbGK>\"|sBF");
      jSONObject1.optString("`y#TlcbGK>\"|sBF", "`y#TlcbGK>\"|sBF");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.append("null", object0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jSONObject0.optNumber("null", (Number) bigInteger0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("[nNx.", (-1308.0F));
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optNumber("[nNx.", (Number) bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("{WnPgN/qi", "{WnPgN/qi");
      Number number0 = jSONObject1.optNumber("{WnPgN/qi", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\r");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("\r", mockPrintWriter0);
      long long0 = jSONObject1.optLong("\r");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("6(lcbGK>\"|sBF");
      long long0 = jSONObject0.optLong("6(lcbGK>\"|sBF", (long) 44);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("RIm\"A[e8");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M3R2$LY3|");
      JSONObject jSONObject1 = jSONObject0.append("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":\"a string\"}", mockPrintWriter0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":\"a string\"}");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("t.ZXG;$Is>~Ij4q3T");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.short@0000000001\":[],\" [character \":true,\"Expected a ',' or '}'\":[-99],\"ut-8\":7,\"] is not a valid number.\":null,\" at \":null,\"rem\":[],\"' and instead saw ''\":true}");
      Float float0 = new Float(1.0F);
      JSONObject jSONObject1 = jSONObject0.append("c|uT", float0);
      int int0 = jSONObject1.optInt("c|uT", 3147);
      assertEquals(9, jSONObject0.length());
      assertEquals(3147, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4295);
      JSONObject jSONObject1 = jSONObject0.put("uJpPl", 0.0F);
      int int0 = jSONObject1.optInt("uJpPl", 4295);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("99", "99");
      int int0 = jSONObject1.optInt("99");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Dt$crQIDa9\"-!AMH*E", "Dt$crQIDa9\"-!AMH*E");
      float float0 = jSONObject0.optFloat("Dt$crQIDa9\"-!AMH*E", 1106.9739F);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1106.9739F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(428);
      Integer integer0 = new Integer(428);
      jSONObject0.put("Y%CG$tU??t0jl{T%6", (Object) integer0);
      float float0 = jSONObject0.optFloat("Y%CG$tU??t0jl{T%6");
      assertEquals(428.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(")!OUm*)ZQ", ")!OUm*)ZQ");
      float float0 = jSONObject1.optFloat(")!OUm*)ZQ", (-692.0087F));
      assertEquals((-692.0087F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("[nNx.", (Collection<?>) linkedList0);
      double double0 = jSONObject0.optDouble("[nNx.");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nul7$o", (-840.0F));
      double double0 = jSONObject1.optDouble("nul7$o", (double) (-840.0F));
      assertEquals((-840.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("`y#TlcbGK>\"|sBF", "`y#TlcbGK>\"|sBF");
      double double0 = jSONObject1.optDouble("`y#TlcbGK>\"|sBF", (-277.043));
      assertEquals(1, jSONObject0.length());
      assertEquals((-277.043), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("Duplicate key \"");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("Duplicate key \"", bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Duplicate key \"", (-840.0F));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("Duplicate key \"", bigInteger0);
      assertEquals((short) (-840), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Float float0 = new Float(2057.898);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("org.json.JSONObject", 2057.898);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("org.json.JSONObject", bigInteger0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(165);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("] is not a JSONObject.", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(")!OUm*)ZQ", ")!OUm*)ZQ");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger(")!OUm*)ZQ", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nuhl", (-23.416431F));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("nuhl", bigDecimal0);
      assertEquals((byte) (-23), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("{WnPgN/qi", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Dt$crQIDa9\"-!AMH*E", "Dt$crQIDa9\"-!AMH*E");
      jSONObject1.optBigDecimal("Dt$crQIDa9\"-!AMH*E", (BigDecimal) null);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Dt$crQIDa9\"-!AMH*E", "Dt$crQIDa9\"-!AMH*E");
      Class<JavaFileObject.Kind> class0 = JavaFileObject.Kind.class;
      try { 
        jSONObject0.getEnum(class0, "Dt$crQIDa9\"-!AMH*E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-0");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2903);
      jSONObject0.put("+0", 0.0F);
      JSONObject jSONObject1 = jSONObject0.increment("+0");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-3419.03));
      jSONObject0.putOnce(")VL@t\"ty8ic(", double0);
      JSONObject jSONObject1 = jSONObject0.increment(")VL@t\"ty8ic(");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment(",:]}/\"[{;=#");
      JSONObject jSONObject1 = jSONObject0.increment(",:]}/\"[{;=#");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("{WnPgN/qi", "{WnPgN/qi");
      try { 
        jSONObject0.increment("{WnPgN/qi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(")!OUm)Q", ")!OUm)Q");
      boolean boolean0 = jSONObject0.has(")!OUm)Q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("{WnPgN/qi", "{WnPgN/qi");
      String string0 = jSONObject1.getString("{WnPgN/qi");
      assertEquals("{WnPgN/qi", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("nuhl", (-23.416431F));
      try { 
        jSONObject0.getString("nuhl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      String[] stringArray0 = JSONObject.getNames((Object) charset0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HashMap<BigInteger, BigInteger> hashMap0 = new HashMap<BigInteger, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nul7$o", (-840.0F));
      long long0 = jSONObject1.getLong("nul7$o");
      assertEquals((-840L), long0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("{WnPgN/qi", "{WnPgN/qi");
      try { 
        jSONObject1.getLong("{WnPgN/qi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("{WnPgN/qi", "{WnPgN/qi");
      try { 
        jSONObject1.getJSONObject("{WnPgN/qi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("{WnPgN/qi", "{WnPgN/qi");
      try { 
        jSONObject1.getJSONArray("{WnPgN/qi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("null", 0.0F);
      int int0 = jSONObject0.getInt("null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("$sL");
      Number number0 = jSONObject1.getNumber("$sL");
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("{\"x\":\"hello\"0\"y\":false,\"isR\":[],\"a\":[],\"b\":\"a string\"}", "{\"x\":\"hello\"0\"y\":false,\"isR\":[],\"a\":[],\"b\":\"a string\"}");
      try { 
        jSONObject0.getNumber("{\"x\":\"hello\"0\"y\":false,\"isR\":[],\"a\":[],\"b\":\"a string\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("6(lcbGK>\"|sB6", 0.0F);
      float float0 = jSONObject0.getFloat("6(lcbGK>\"|sB6");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4295);
      JSONObject jSONObject1 = jSONObject0.accumulate("Dt$cVQIDa9\"-!AMHZ=", "Dt$cVQIDa9\"-!AMHZ=");
      try { 
        jSONObject1.getFloat("Dt$cVQIDa9\"-!AMHZ=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      JSONObject jSONObject1 = jSONObject0.increment("getkeySet");
      assertFalse(jSONObject0.isEmpty());
      
      double double0 = jSONObject1.getDouble("getkeySet");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Dt$crQIDa9\"-!AMH*E", "Dt$crQIDa9\"-!AMH*E");
      try { 
        jSONObject0.getDouble("Dt$crQIDa9\"-!AMH*E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(")!OUm*)ZQ", ")!OUm*)ZQ");
      try { 
        jSONObject1.getBigDecimal(")!OUm*)ZQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("null", object0);
      boolean boolean0 = jSONObject1.optBoolean("null", false);
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4295);
      JSONObject jSONObject1 = jSONObject0.accumulate("Dt$cVQIDa9\"-!AMHZ=", "Dt$cVQIDa9\"-!AMHZ=");
      boolean boolean0 = jSONObject1.optBoolean("Dt$cVQIDa9\"-!AMHZ=");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"plu\":-99,\"isfloatValue\":7,\"z\":-99,\"a\":[null],\"b\":{}}");
      jSONObject0.accumulate("{\"plu\":-99,\"isfloatValue\":7,\"z\":-99,\"a\":[null],\"b\":{}}", "{\"plu\":-99,\"isfloatValue\":7,\"z\":-99,\"a\":[null],\"b\":{}}");
      try { 
        jSONObject0.getInt("{\"plu\":-99,\"isfloatValue\":7,\"z\":-99,\"a\":[null],\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000047] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1867.04));
      assertEquals("-1867.04", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("[TVy[jDF", "[TVy[jDF");
      jSONObject0.append("[TVy[jDF", jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Dt$crQIDa9\"-!AMH*E", "Dt$crQIDa9\"-!AMH*E");
      PipedInputStream pipedInputStream0 = new PipedInputStream(4295);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        jSONObject1.append("Dt$crQIDa9\"-!AMH*E", dataInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Dt$crQIDa9\"-!AMH*E] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M3R2$LY3|");
      JSONObject jSONObject1 = jSONObject0.append("{}", mockPrintWriter0);
      jSONObject1.accumulate("{}", "{}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("null", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      HashMap<BigDecimal, Object> hashMap0 = new HashMap<BigDecimal, Object>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"null\":\"] is not an int.\",\"Null key.\":\"a string\",\"a\":99,\"javax.\":{},\"xx\":-99}");
      JSONObject jSONObject1 = jSONObject0.put("{\"null\":\"] is not an int.\",\"Null key.\":\"a string\",\"a\":99,\"javax.\":{},\"xx\":-99}", (Map<?, ?>) null);
      jSONObject1.accumulate("{\"null\":\"] is not an int.\",\"Null key.\":\"a string\",\"a\":99,\"javax.\":{},\"xx\":-99}", "{\"null\":\"] is not an int.\",\"Null key.\":\"a string\",\"a\":99,\"javax.\":{},\"xx\":-99}");
      jSONObject1.getJSONArray("{\"null\":\"] is not an int.\",\"Null key.\":\"a string\",\"a\":99,\"javax.\":{},\"xx\":-99}");
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      HashMap<Object, CardTerminals.State> hashMap0 = new HashMap<Object, CardTerminals.State>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.ALL;
      hashMap0.put(pipedOutputStream0, cardTerminals_State0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      HashMap<Object, CardTerminals.State> hashMap0 = new HashMap<Object, CardTerminals.State>();
      hashMap0.put((Object) null, (CardTerminals.State) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x\":\"hello\"0\"y\":false,\"isR\":[],\"a\":[],\"b\":\"a string\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 13 [character 14 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{WnPgN/qi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 7 [character 8 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"\f\":99,\"java.lang.short@0000000001\":[],\" [character \":true,\"Expected a ',' or '}'\":[],\"ut-8\":7,\"] is not a valid number.\":true,\" at \":null,\"getlength\":[],\"x\":-99}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(9, map0.size());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      HashMap<Object, CardTerminals.State> hashMap0 = new HashMap<Object, CardTerminals.State>();
      Object object0 = JSONObject.NULL;
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_PRESENT;
      hashMap0.put(object0, cardTerminals_State0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("getpeekLast");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      HashMap<LayoutStyle.ComponentPlacement, BufferedInputStream> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("+0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("na");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, CardTerminals.State> hashMap0 = new HashMap<Object, CardTerminals.State>();
      JSONObject jSONObject1 = jSONObject0.put("has", (Map<?, ?>) hashMap0);
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.OTHER;
      jSONObject1.optEnum(class0, "has", jDBCType0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<CryptoPrimitive> class0 = CryptoPrimitive.class;
      jSONObject0.optEnum(class0, " [character ");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      // Undeclared exception!
      try { 
        jSONObject0.query("null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{WnPgN/qi", 0.0F);
      try { 
        jSONObject1.getBigInteger("{WnPgN/qi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4295);
      boolean boolean0 = jSONObject0.isNull("Null pointer");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"Unable to write JSONObject value for key: \":[],\"\t\":[],\" at \":\"a string\",\"java.\":99}");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("org.json.JSONPointer$Builder");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
