/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 15:51:21 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.TrayIcon;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Proxy;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.sql.PseudoColumnUsage;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.DropMode;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<LineNumberReader, Desktop.Action> hashMap0 = new HashMap<LineNumberReader, Desktop.Action>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockFile mockFile0 = new MockFile("getClass", "vj=L&U\"|>6[bQeOY=?");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JSONObject jSONObject1 = jSONObject0.put("VyX+X`nQT`Lx:Y,", (Object) mockPrintStream0);
      String string0 = jSONObject1.toString((-1177));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("$-OMt+u,4(9t'-`a$t");
      assertEquals("$-OMt+u,4(9t'-`a$t", object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("$w]O$:+HW8\"/fD^Xa");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [$w]O$:+HW8\"/fD^Xa] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(58);
      JSONObject jSONObject1 = jSONObject0.put("toSr/ng", (long) 58);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"x\":-99,\"y\":7,\"getreadLine\":true,\"a\":[\"a string\"],\"Duplicate key \"\":{},\"xx\":[]}");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 68 [character 69 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject.indent((Writer) null, (-3564));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"x\":99,\"y\":7,\"getreadLine\":true,\"a\":[\"a string\"],\"b\":{},\"xx\":[]}");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":99,\"Nesting too deep.\":7,\"getClass\":\"a string\",\"ke\":[{\"] is not a JSONObject.\":null},[]],\"/\":{\"] is not a JSONArray.\":true,\"] is not a JSONObject.\":true}}");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("33XcztiGml!4'{.");
      assertEquals("33XcztiGml!4'{.", object0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Integer integer0 = new Integer(4);
      JSONObject jSONObject1 = jSONObject0.put("GIB1LM& &O#r&", (Object) integer0);
      try { 
        jSONObject1.getBigInteger("GIB1LM& &O#r&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer integer0 = new Integer(107);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = JSONObject.writeValue(stringWriter0, "Null pointer", 4, 4);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      PipedReader pipedReader0 = new PipedReader(57);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Writer writer0 = jSONObject0.write((Writer) pipedWriter0);
      assertSame(writer0, pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{\"isreadLong\":null,\"].\":[],\"\t\":-99,\"Misplaced endArray.\":[[99],\"a string\"],\"] not found.\":true,\"toS\":null,\"x\":[]}", (Map<?, ?>) null);
      Object object0 = jSONObject1.remove("{\"isreadLong\":null,\"].\":[],\"\t\":-99,\"Misplaced endArray.\":[[99],\"a string\"],\"] not found.\":true,\"toS\":null,\"x\":[]}");
      assertNotSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = jSONObject0.optString("v%j7*;D\bzFt", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Byte, KeyRep.Type> hashMap0 = new HashMap<Byte, KeyRep.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("F4C-,%@YA82=E{");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Object object0 = jSONObject0.optQuery("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Number number0 = jSONObject0.optNumber("islength", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Number number0 = jSONObject0.optNumber("{\"org.json.JSONPointer$Builder\":\"to\",\"].\":[true],\"islock\":-99,\"Misplaced endArray.\":[99,\"a string\"],\"] not found.\":true}", (Number) bigDecimal0);
      assertEquals((short)1, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Proxy.Type, CryptoPrimitive> hashMap0 = new HashMap<Proxy.Type, CryptoPrimitive>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      Number number0 = jSONObject0.optNumber(" at ", (Number) bigDecimal0);
      assertEquals((byte) (-1), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("] is not a boolean.", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.increment("@;9/&");
      long long0 = jSONObject0.optLong("@;9/&");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"getreadFloat:[],\"value2\":false,\"number\":\"1\"}", (-1441));
      assertEquals((-1441), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("true", 0.0);
      float float0 = jSONObject1.optFloat("true");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("#2c'3D2I", 488.77507321179);
      float float0 = jSONObject0.optFloat("#2c'3D2I");
      assertEquals(488.7751F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":[{}],\"] could not be converted to BigDecimal.\":[{\"] is not a JSONObject.\":null}],\"/\":-99,\"java.lang.Float@0000000004.\":99}");
      JSONObject jSONObject1 = jSONObject0.put("true", (-1.0F));
      float float0 = jSONObject1.optFloat("true");
      assertEquals(5, jSONObject0.length());
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)123, (byte)63);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      double double0 = jSONObject0.optDouble("isnames", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Short> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.increment("fl");
      double double0 = jSONObject0.optDouble("fl");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = jSONObject0.optBigInteger((String) null, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(60);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("", bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("java.io.StringWriter@0000000010", bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("6?", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1333), 2382);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      BigDecimal bigDecimal0 = new BigDecimal((-750L));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal((String) null, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("utf-8", bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-56);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("Error reading value at index position ", bigDecimal0);
      assertEquals((byte) (-56), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("pointer cannot be null", (Map<?, ?>) null);
      Object object0 = jSONObject0.opt("pointer cannot be null");
      assertNotSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getBytes", (Map<?, ?>) null);
      boolean boolean0 = jSONObject0.isNull("getBytes");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("xTC+q p%`Qu}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("ue[l,`3?rKdP]@oW=", 0.0);
      long long0 = jSONObject0.getLong("ue[l,`3?rKdP]@oW=");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" at ", (-1472.3287));
      long long0 = jSONObject0.getLong(" at ");
      assertEquals((-1472L), long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject2 = jSONObject0.putOnce("@B* |M{8rt;kN'T;@H", jSONObject1);
      jSONObject2.getJSONObject("@B* |M{8rt;kN'T;@H");
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"olor\":\"Red\",\"getreadFloat:[],\"vaue2\":false,\"number\":\"1\"}", 0);
      double double0 = jSONObject1.getDouble("{\"fruit\":\"Apple\",\"size\":\"Large\",\"olor\":\"Red\",\"getreadFloat:[],\"vaue2\":false,\"number\":\"1\"}");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put(" line ", (Map<?, ?>) null);
      jSONObject0.get(" line ");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("get", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1427);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 1427, 1427);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JSONObject jSONObject0 = new JSONObject(locale0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      hashMap0.put((Integer) null, cardTerminals_State0);
      jSONObject0.put("getClass", (Object) hashMap0);
      try { 
        jSONObject0.toString(4088);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: getClass
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("fale", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("d@X]#PgD(+cro2ZRiM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject0 = new JSONObject(pipedOutputStream0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Byte, KeyRep.Type> hashMap0 = new HashMap<Byte, KeyRep.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Float float0 = new Float((double) Float.NaN);
      try { 
        jSONObject0.put("null", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 2121L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (double) 107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 1427);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1427);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0000", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name 0000, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("475.71", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(bigInteger0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-495));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -495
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("99", (Map<?, ?>) null);
      jSONObject1.append("/:fSh,ee5ti3", (Object) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("^IY<4*'$\"p)", false);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 405, 2);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, (-499), (-236234922));
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", (Map<?, ?>) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write((Writer) stringWriter0, 0, (-499));
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("utf-8", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"olor\":\"Red\",\"getreadFloat:[],\"vaue2\":false,\"number\":\"1\"}");
      jSONObject1.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"olor\":\"Red\",\"getreadFloat:[],\"vaue2\":false,\"number\":\"1\"}", false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("viG+H%?`z#qE", true);
      Writer writer0 = jSONObject1.write((Writer) mockFileWriter0, 0, 0);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("k5ys", (Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0, 18, 18);
      assertEquals(37, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(fileSystemHandling0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = JSONObject.wrap(pipedOutputStream0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Object object0 = JSONObject.wrap(byteArray0[0]);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = JSONObject.wrap("java.io.PipedOutputStream@0000000001");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      Object object0 = JSONObject.wrap(roundingMode0);
      assertSame(roundingMode0, object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<DropMode> class0 = DropMode.class;
      JSONObject.testValidity(class0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":9,\"Nesting too deep.\":7,\"isready\":false,\"Misplaced endObject.\":99,\"/\":false,\"x\":99}");
      JSONArray jSONArray0 = jSONObject0.names();
      jSONArray0.put(34, (-1516.564F));
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[6] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("6");
      assertEquals(6, object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-100.91");
      assertEquals((-100.91), object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("Ic4UL");
      assertEquals("Ic4UL", object0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("KMT6xY=&||", (Writer) stringWriter0);
      assertEquals("\"KMT6xY=&||\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("", (Writer) stringWriter0);
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("{\"] is not a JSONArray.\":[],\"Nesting too deep.\":7,\"getisEmpty\":[{\"] is not a JSONObject.\":null}],\"/\":{\"] is not a JSONArray.\":true}}", (Writer) stringWriter0);
      assertEquals("\"{\\\"] is not a JSONArray.\\\":[],\\\"Nesting too deep.\\\":7,\\\"getisEmpty\\\":[{\\\"] is not a JSONObject.\\\":null}],\\\"/\\\":{\\\"] is not a JSONArray.\\\":true}}\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("s6;Q6BGI;O|6{4+WEz", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, "pPP'kslc");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("null", 0);
      String string0 = jSONObject0.optString("null", "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "OJ9r");
      jSONObject0.optString("OJ9r", "Av}\"X@cHU");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":[{}],\"] could not be converted to BigDecimal.\":[{\"] is not a JSONObject.\":null}],\"/\":-99,\"java.lang.Float@0000000004.\":99}");
      jSONObject0.increment("{\"] is not a JSONArray.\":[{}],\"] could not be converted to BigDecimal.\":[{\"] is not a JSONObject.\":null}],\"/\":-99,\"java.lang.Float@0000000004.\":99}");
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optNumber("{\"] is not a JSONArray.\":[{}],\"] could not be converted to BigDecimal.\":[{\"] is not a JSONObject.\":null}],\"/\":-99,\"java.lang.Float@0000000004.\":99}", (Number) bigInteger0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("kh", stringArray0);
      Short short0 = new Short((short)1044);
      Number number0 = jSONObject0.optNumber("kh", (Number) short0);
      assertEquals((short)1044, number0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("isEmpty", 5L);
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("GY^|{c*w 0?CD");
      int int0 = jSONObject1.optInt("GY^|{c*w 0?CD", 4);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      int int0 = jSONObject0.optInt("", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("{\"x\":\"hello\",\"y\":7,\"z\":false,\"a\":[],\"b\":{}}", 2630.619F);
      assertEquals(2630.619F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(268);
      jSONObject0.putOnce("getClass", "getClass");
      double double0 = jSONObject0.optDouble("getClass", (double) (byte)86);
      assertEquals(1, jSONObject0.length());
      assertEquals(86.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1333), 2382);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      JSONObject jSONObject1 = jSONObject0.append("{\"x\":99,\"getgetBytes\":true,\"a\":[\"a string\"],\"b\":{},\"getisEmpty\":[-99]}", pushbackInputStream0);
      double double0 = jSONObject1.optDouble("{\"x\":99,\"getgetBytes\":true,\"a\":[\"a string\"],\"b\":{},\"getisEmpty\":[-99]}", (double) (byte)123);
      assertEquals(123.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("0.00", (-2482.6495594865114));
      assertEquals((-2482.6495594865114), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Io~/l.r0wh Of", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("#2c'3D2I", 488.77507321179);
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON;
      DropMode dropMode1 = jSONObject1.optEnum(class0, "#2c'3D2I", dropMode0);
      assertSame(dropMode1, dropMode0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON;
      DropMode dropMode1 = jSONObject0.optEnum(class0, "|_,V+|H", dropMode0);
      assertSame(dropMode0, dropMode1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("pointer cannot be null");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":9,\"Nesting too deep.\":7,\"getSigners\":false,\"Misplaced endObject.\":true,\"/\":99}");
      jSONObject0.names();
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Proxy.Type, CryptoPrimitive> hashMap0 = new HashMap<Proxy.Type, CryptoPrimitive>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 4);
      jSONObject0.putOpt("GIB1LM& &O#r&", lineNumberReader0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      jSONObject0.put("CirI", (Collection<?>) linkedList0);
      try { 
        jSONObject0.getBoolean("CirI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("' and instead saw ''");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Byte, KeyRep.Type> hashMap0 = new HashMap<Byte, KeyRep.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      hashMap0.put((Integer) null, cardTerminals_State0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      HashMap<CharArrayWriter, SocketFlow.Status> hashMap0 = new HashMap<CharArrayWriter, SocketFlow.Status>();
      SocketFlow.Status socketFlow_Status0 = SocketFlow.Status.OTHER;
      hashMap0.put(charArrayWriter0, socketFlow_Status0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      jSONObject0.optEnum(class0, "Unterminated string");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.quote("Ic4UL");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 2536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("{\"isreadLong\":null,\"].\":[],\"\t\":-99,\"Misplaced endArray.\":[[99],\"a string\"],\"] not found.\":true,\"toS\":null,\"x\":[]}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      HashMap<Integer, CardTerminals.State> hashMap1 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject1 = jSONObject0.put("intValue", (Object) hashMap1);
      LinkedList<ObjectOutputStream> linkedList0 = new LinkedList<ObjectOutputStream>();
      jSONObject0.put("getClass", (Collection<?>) linkedList0);
      String string0 = jSONObject1.toString(245);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.ALL;
      JSONObject jSONObject1 = jSONObject0.put("getClass", (Object) cardTerminals_State0);
      String string0 = jSONObject1.toString(4088);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":[],\"Nesting too deep.\":7,\"A JSONObject text must begin with '{'\":[{\"] is not a JSONObject.\":null},null],\"/\":{\"] is not a JSONArray.\":true,\"] is not a JSONObject.\":true}}");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 693, 693);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(bigInteger0, object0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(1150.78902580706, object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float((float) 1);
      Object object0 = JSONObject.wrap(float0);
      assertEquals(1.0F, object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Long long0 = new Long((-1L));
      Object object0 = JSONObject.wrap(long0);
      assertEquals((-1L), object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Short short0 = new Short((short)1);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)1, object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Character character0 = new Character('K');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('K', object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.wrap(jSONArray0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      Object object1 = JSONObject.wrap(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":{},\"Nesting too deep.\":7,\"] is not an int.\":false,\"Misplaced endObject.\":99,\"/\":99}");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(5, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("getnot", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("isE", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0.00");
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("99");
      assertEquals(99, number0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("4j8%-GIk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      String string0 = JSONObject.numberToString(number0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("0&Etv6{ITdFb1tw`kz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("getgetBytes");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Integer integer0 = new Integer(4);
      JSONObject jSONObject1 = jSONObject0.put("GIB1LM& &O#r&", (Object) integer0);
      JSONObject jSONObject2 = new JSONObject(4);
      boolean boolean0 = jSONObject2.similar(jSONObject1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(268);
      boolean boolean0 = jSONObject0.similar("toS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1028);
      JSONObject.quote((String) null, (Writer) stringWriter0);
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("TkA", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1010);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(268);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.putOnce("getClass", linkedList0);
      try { 
        jSONObject0.putOnce("getClass", "getClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"getClass\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/hfwI=kr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("getProtectionDomain");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<RoundingMode> class0 = RoundingMode.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertEquals(34, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":false,\"/\":-99}");
      JSONObject jSONObject1 = jSONObject0.increment("{\"] is not a JSONArray.\":false,\"/\":-99}");
      jSONObject1.optString("{\"] is not a JSONArray.\":false,\"/\":-99}");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<CharArrayWriter, WebParam.Mode> hashMap0 = new HashMap<CharArrayWriter, WebParam.Mode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getClass", (Object) "getClass");
      Number number0 = jSONObject1.optNumber("getClass");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("iskeys", "iskeys");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, 56);
      Number number0 = jSONObject1.optNumber("iskeys", (Number) bigDecimal0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashMap<CharArrayWriter, WebParam.Mode> hashMap0 = new HashMap<CharArrayWriter, WebParam.Mode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("getClass", (Object) "getClass");
      long long0 = jSONObject0.optLong("getClass");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1427);
      jSONObject0.increment("CirI");
      long long0 = jSONObject0.optLong("CirI", (long) 1427);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("iskeys", "iskeys");
      long long0 = jSONObject1.optLong("iskeys", (-4659L));
      assertEquals((-4659L), long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{\"fruit\":\"to\",\"].\":[],\"color\":\"Red\",\"Misplaced endArray.\":[[]],\"] not found.\":true,\"x\":false}", (Map<?, ?>) null);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("{\"fruit\":\"to\",\"].\":[],\"color\":\"Red\",\"Misplaced endArray.\":[[]],\"] not found.\":true,\"x\":false}");
      assertNotSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = new Integer(21);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optJSONObject((String) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("is");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1);
      HashMap<BufferedReader, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<BufferedReader, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject1 = jSONObject0.put("}}JXV?sz`<-fYX=^*f", (Map<?, ?>) hashMap0);
      int int0 = jSONObject1.optInt("}}JXV?sz`<-fYX=^*f", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("OJ9r", 488.77507321179);
      int int0 = jSONObject0.optInt("OJ9r");
      assertEquals(488, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("si", "si");
      int int0 = jSONObject1.optInt("si", 418);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(418, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1);
      HashMap<BufferedReader, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<BufferedReader, Formatter.BigDecimalLayoutForm>();
      jSONObject0.put("}}JXV?sz`<-fYX=^*f", (Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("}}JXV?sz`<-fYX=^*f", (float) 1);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      float float0 = jSONObject1.optFloat("] could not be converted to BigInteger.", (-2270.0F));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-2270.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONArrayptext must start with '['", 0.0F);
      float float0 = jSONObject0.optFloat("A JSONArrayptext must start with '['", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.accumulate("l@r;U9/&", "l@r;U9/&");
      double double0 = jSONObject0.optDouble("l@r;U9/&");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(261);
      jSONObject0.increment("fH'd@");
      double double0 = jSONObject0.optDouble("fH'd@", (double) 261);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("@;9/&");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("@;9/&", bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("OJ9r", 488.77507321179);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("OJ9r", bigInteger0);
      assertEquals((byte) (-24), bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(268);
      jSONObject0.putOnce("[", "[");
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("[", bigInteger0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(268);
      JSONObject jSONObject1 = jSONObject0.putOnce("getClas", "getClas");
      BigDecimal bigDecimal0 = new BigDecimal((double) 268);
      jSONObject1.optBigDecimal("getClas", bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":[],\"] could not be converted to BigDecimal.\":[{\"] is not a JSONObject.\":null}],\"/\":-99,\"getnames\":99}");
      jSONObject0.increment("{\"] is not a JSONArray.\":[],\"] could not be converted to BigDecimal.\":[{\"] is not a JSONObject.\":null}],\"/\":-99,\"getnames\":99}");
      BigDecimal bigDecimal0 = new BigDecimal((-4508.05));
      jSONObject0.optBigDecimal("{\"] is not a JSONArray.\":[],\"] could not be converted to BigDecimal.\":[{\"] is not a JSONObject.\":null}],\"/\":-99,\"getnames\":99}", bigDecimal0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("CirI");
      Class<RoundingMode> class0 = RoundingMode.class;
      try { 
        jSONObject1.getEnum(class0, "CirI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an enum of type java.io.StringWriter@0000000010.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      JSONObject jSONObject2 = jSONObject1.increment("l@r;U9/&");
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      try { 
        jSONObject0.increment("] could not be converted to BigInteger.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("kh", stringArray0);
      boolean boolean0 = jSONObject0.has("kh");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HashMap<CharArrayWriter, WebParam.Mode> hashMap0 = new HashMap<CharArrayWriter, WebParam.Mode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", (Object) ",:]}/\"[{;=#");
      String string0 = jSONObject1.getString(",:]}/\"[{;=#");
      assertEquals(",:]}/\"[{;=#", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("UVqPDxj");
      try { 
        jSONObject1.getString("UVqPDxj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(268);
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.increment("fH'd@");
      JSONObject.getNames(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      long long0 = jSONObject1.getLong("l@r;U9/&");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<PseudoColumnUsage, TrayIcon.MessageType> hashMap0 = new HashMap<PseudoColumnUsage, TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("0.00", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getLong("0.00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("true", (Map<?, ?>) null);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("true");
      assertTrue(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("", double0);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<RoundingMode> class0 = RoundingMode.class;
      jSONObject0.append("gettoUpperCase", class0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("gettoUpperCase");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("[");
      try { 
        jSONObject0.getJSONArray("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.increment("@;9/&");
      int int0 = jSONObject0.getInt("@;9/&");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      jSONObject0.append("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"value\":true,\"value2\":true,\"number\":\"1\",\"/\":{}}", pushbackInputStream0);
      try { 
        jSONObject0.getInt("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"value\":true,\"value2\":true,\"number\":\"1\",\"/\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("#2c'3D2I", 488.77507321179);
      Number number0 = jSONObject1.getNumber("#2c'3D2I");
      assertEquals(488.77507321179, number0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("OKeGH\",H5YTI", (Map<?, ?>) null);
      try { 
        jSONObject0.getNumber("OKeGH\",H5YTI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      HashMap<Byte, KeyRep.Type> hashMap0 = new HashMap<Byte, KeyRep.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.increment("N");
      float float0 = jSONObject0.getFloat("N");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("true", (Map<?, ?>) null);
      try { 
        jSONObject1.getFloat("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1427);
      JSONObject jSONObject1 = jSONObject0.increment("CirI");
      assertFalse(jSONObject0.isEmpty());
      
      double double0 = jSONObject1.getDouble("CirI");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("l@r;U9/&", "l@r;U9/&");
      try { 
        jSONObject1.getDouble("l@r;U9/&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(268);
      JSONObject jSONObject1 = jSONObject0.putOnce("getClass", "getClass");
      try { 
        jSONObject1.getBigDecimal("getClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      boolean boolean0 = jSONObject1.optBoolean("] could not be converted to BigInteger.", false);
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(4);
      JSONObject jSONObject1 = jSONObject0.put("GIB1LM& &O#r&", (Object) integer0);
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = JSONObject.doubleToString(475.71);
      assertEquals("475.71", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONObject jSONObject1 = jSONObject0.put("CirI", (Collection<?>) linkedList0);
      jSONObject1.append("CirI", "CirI");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(268);
      jSONObject0.increment("fH'd@");
      try { 
        jSONObject0.append("fH'd@", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[fH'd@] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("value [%s] is not an array or object therefore its key %s cannot be resolved", "value [%s] is not an array or object therefore its key %s cannot be resolved");
      jSONObject0.accumulate("value [%s] is not an array or object therefore its key %s cannot be resolved", "{\"isreadLong\":null,\"].\":[],\"\t\":-99,\"Misplaced endArray.\":[[99],\"a string\"],\"] not found.\":true,\"toS\":null,\"x\":[]}");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      jSONObject0.accumulate("l@r;U9/&", "l@r;U9/&");
      double double0 = jSONObject1.optDouble("l@r;U9/&");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Nesting too deep.\":7,\"false\":false,\"getlength\":null,\"/\":false,\"] is not a JSONArray.\":\"a string\",\"x\":[]}");
      Map<String, Object> map0 = jSONObject0.toMap();
      String string0 = JSONObject.valueToString(map0);
      assertNotNull(string0);
      assertEquals(6, map0.size());
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      hashMap0.put((Integer) null, cardTerminals_State0);
      Object object0 = JSONObject.wrap(hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{^G|0{q^E-1X99$j&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 6 [character 7 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("@neZ;Bk7(>*LzEE");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":[],\"Nesting too deep.\":7,\"toS\":[{\"] is not a JSONObject.\":null}],\"/\":{\"] is not a JSONArray.\":true,\"] is not a JSONObject.\":true,\"ishashCode\":\"a string\"}}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(4, map0.size());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("GIB1LM& &O#r&", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1769);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("get");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":false,\"/\":-99}");
      String string0 = jSONObject0.optString("{\"] is not a JSONArray.\":false,\"/\":-99}");
      assertEquals(2, jSONObject0.length());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(268);
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("0<J^|({>W$}w$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":99,\"Nesting too dee.\":7,\"z\":false:\"ke\":[{\"] is not a JSONObxect.\":nulla,[!],\"/\":{\"] is not a JSONArray.\":true,\"] is not a JSONObject.\":true}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 59 [character 60 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Integer integer0 = new Integer(107);
      JSONObject jSONObject0 = new JSONObject(integer0);
      boolean boolean0 = jSONObject0.isNull(",:J126mR5}kO}cXw#b");
      assertTrue(boolean0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1027);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("{\"] not a string.\":null,\"].\":[],\"\t\":-99,\"Misplaced endArray.\":[false,\"a string\",99],\"] not found.\":null,\"Expected a ',' or '}'\":[],\"to\":null}");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("CirI");
      boolean boolean0 = jSONObject1.has("CirI");
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }
}
