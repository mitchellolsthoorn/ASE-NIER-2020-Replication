/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 17:26:01 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("buildMeth");
      JSONScanner jSONScanner1 = new JSONScanner("\"@type\":\"{\"x\":null,\"y\":false,\"{\"$VALUES\":true,\"a\":[-99,\"a string\"],\"ullcC&L+7b]2#UA}\":\"a string\"}", 0);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.safeMode", jSONScanner0, parserConfig0);
      jSONScanner1.scanTypeName(defaultJSONParser0.symbolTable);
      assertEquals(1, jSONScanner0.token());
      assertEquals('u', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]", 553);
      jSONScanner0.setToken(78);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("org.joda.");
      Object object0 = new Object();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(object0, jSONScanner0, parserConfig0);
      jSONScanner0.scanSymbolUnQuoted(defaultJSONParser0.symbolTable);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(6L, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // .
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"QeS\"0J\u0000w05l");
      jSONScanner0.setToken(90);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 553);
      SymbolTable symbolTable0 = new SymbolTable(5);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("39fqMU@#MN.[Ko");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 139fqMU@#MN.[Ko
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, 2, defaultJSONParser0.symbolTable);
      assertEquals('?', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-00", 0);
      long long0 = jSONScanner0.scanLong('U');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      long long0 = jSONScanner0.scanLong('A');
      assertEquals(99L, long0);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("create deserializeUsing ObjectDeserializer error");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      jSONScanner0.scanSymbolUnQuoted(defaultJSONParser0.symbolTable);
      jSONScanner0.scanLong('<');
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      double double0 = jSONScanner0.scanDouble('8');
      assertEquals(99.0, double0, 0.01);
      assertEquals('9', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      int int0 = jSONScanner0.scanInt('%');
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 553);
      SymbolTable symbolTable0 = new SymbolTable(5);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      int int0 = jSONScanner0.scanInt('T');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"$VALUES");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9fq");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rQCSy!JMEHIx");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanSymbolUnQuoted(defaultJSONParser0.symbolTable);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals('!', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("c]");
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?");
      jSONScanner0.scanLong('?');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?");
      jSONScanner0.nextIdent();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?");
      jSONScanner0.nextIdent();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[1];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 1, parserConfig0, 40);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('3', '8', '3', '3', ' ', 'G', (-2541), 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '9', '9', '9', '9', 44, 44);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S'=k(t'V J<AXx-g6");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("U2{Dc3;$?eJ!9", 65);
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/OF^x1F)EqFV7+jQMkB", 3278);
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"(II)V\":99,\"a\":[{}],\"\"@type\":\"FastjsonASMDeserializer_\":{},\"x\":99,\"isInitialized\":\"a string\",\"setResolveStatus\":null}");
      jSONScanner0.setToken(513);
      jSONScanner0.bytesValue();
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      jSONScanner0.scanFieldStringArray(charArray0, 1373, (SymbolTable) null);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 26085);
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uy%y!<deR/xZ hg{`h", 65535);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1uy%y!<deR/xZ hg{`h
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6R'2Ro\"Sm3z]DGLU}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 16R'2Ro\"Sm3z]DGLU}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@V");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1536), '\u0000', '\u0000', (-1536), 'E', (-1536));
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTimeZone('U', 'U', '\u0000');
      assertEquals('@', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@V", (-1536));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1536), '3', '3', (-1536), '3', (-1536));
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTime('[', '3', 'c', 'H', 'C', 't');
      assertEquals('@', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":-99,\"size\":\"Large\",\"\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":-99,\";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;\":true}");
      jSONScanner0.copyTo(65, 0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?");
      char[] charArray0 = new char[5];
      jSONScanner0.arrayCopy(0, charArray0, 0, 0);
      assertEquals('4', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"(II)V\":99,\"a\":[{}],\"\"@type\":\"FastjsonASMDeserializer_\":{},\"x\":99,\"isInitialized\":\"a string\",\"setResolveStatus\":null}");
      char[] charArray0 = jSONScanner0.sub_chars(57, 57);
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(57, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("org.joda.");
      char[] charArray0 = jSONScanner0.sub_chars(0, 0);
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"(II)V\":99,\"a\":[{}],\"\"@type\":\"FastjsonASMDeserializer_\":{},\"x\":99,\"isInitialized\":\"a string\",\"setResolveStatus\":null}");
      String string0 = jSONScanner0.subString(0, 5);
      assertEquals("{\"\":7", string0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.subString(0, 0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("QeS\"0J\u0000w05l");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      jSONScanner0.scanSymbolUnQuoted(defaultJSONParser0.symbolTable);
      jSONScanner0.stringVal();
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K$e.;?Sr[0^yX2");
      char[] charArray0 = new char[3];
      jSONScanner0.stringDefaultValue = "K$e.;?Sr[0^yX2";
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-0", 45380);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"(II)V\":99,\"a\":[{}],\"\"@type\":\"FastjsonASMDeserializer_\":{},\"x\":99,\"isInitialized\":\"a string\",\"setResolveStatus\":null}");
      jSONScanner0.nextIdent();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      String string0 = jSONScanner0.numberString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ", 180);
      char char0 = jSONScanner0.next();
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(' ', char0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NFhzT");
      char char0 = jSONScanner0.next();
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals('F', char0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 553);
      SymbolTable symbolTable0 = new SymbolTable(5);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      boolean boolean0 = jSONScanner0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8*4?");
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals('8', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"(II)V\":99,\"a\":[{}],\"\"@type\":\"FastjsonASMDeserializer_\":{},\"x\":99,\"isInitialized\":\"a string\",\"setResolveStatus\":null}");
      int int0 = jSONScanner0.indexOf('l', 128);
      assertEquals((-1), int0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("000000-0");
      jSONScanner0.nextIdent();
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8*4?");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("8*4?", jSONScanner0, parserConfig0);
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((byte)8, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6R'2RoSm3z]DGLU}", 0);
      char char0 = jSONScanner0.charAt(0);
      assertEquals('6', char0);
      assertEquals('6', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":[],\"\"@type\":\"K$e.;?Sr[0^yX2\":\"Red\",\"Y\":true,\"value2\":[],\"number\":\"a string\",\"x\":\"a string\",\"xx\":true}", 0);
      char char0 = jSONScanner0.charAt(92);
      assertEquals('t', char0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]", 0);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals('[', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("QeS\"0J\u0000w05l");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      jSONScanner0.scanSymbolUnQuoted(defaultJSONParser0.symbolTable);
      jSONScanner0.bytesValue();
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"Large\",\"color\":\"not match \",\"DisableASM\":true,\"value2\":{},\"\"@type\":\"K$e.;?Sr[0^yX2\":null,\"illegal str, \":[]}");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      String string0 = jSONScanner0.addSymbol(20, 92, 15, parserConfig0.symbolTable);
      assertEquals("or\":\"not match \",\"DisableASM\":true,\"value2\":{},\"\"@type\":\"K$e.;?Sr[0^yX2\":null,\"illegal str, ", string0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("org.joda.");
      Object object0 = new Object();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(object0, jSONScanner0, parserConfig0);
      jSONScanner0.addSymbol(1, 0, (-2), defaultJSONParser0.symbolTable);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-340), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("QeS\"0J\u0000w05l", (-4213));
      jSONScanner0.bp = (-4213);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.bp = (-989);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@tZpe\":\"", 154);
      jSONScanner0.bp = 41;
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("il-_~G.PGAlXd;.yBGD", 0);
      jSONScanner0.bp = (-3074);
      // Undeclared exception!
      try { 
        jSONScanner0.scanLong('t');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Z2Y}g<QuASezyCQ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?");
      jSONScanner0.scanLong('?');
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("", 3253);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, 64, parserConfig0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@t>pe\":\"QeS\"0J\u0000w05l");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"tyae\":\"\"2q4?RC}h:}~,");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9fq");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,");
      char[] charArray0 = new char[0];
      jSONScanner0.bp = (-622);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@ty^e\":\"\"2q4?RC}h:b~,");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8?");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0_0_-(-00-0");
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 553);
      SymbolTable symbolTable0 = new SymbolTable(5);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("C-_@dpO|Q8U[=*lY");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.bp = 170;
      // Undeclared exception!
      try { 
        jSONScanner0.info();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":\"Large\",\"color\":\"not match \",\"value\":-99,\"value2\":99,\"\":null,\"x\":true}", 0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(0, 'W', charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("index must > 0, but ");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-842));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("ull\"@type\":\"-99", 0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONScanner jSONScanner0 = new JSONScanner("password");
      jSONScanner0.scanSymbolUnQuoted(parserConfig0.symbolTable);
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"QeS\"0J\u0000w05l");
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(0, (char[]) null, 76, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"2q4?RC}h:b~,");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(0, charArray0, 68, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,", 3278);
      SymbolTable symbolTable0 = new SymbolTable(3278);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(3278, 1004, 3278, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ullQeS\"0J\u0000w05l");
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-2381), (-2381), 2239, parserConfig0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 9999999, 9999999);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 4715, 4715);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 3600);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.bp = 170;
      jSONScanner0.skipArray(true);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6R'2RoSm3z]DGLU}", 0);
      jSONScanner0.skipArray(false);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"$VALUES\":false,\"uXPqBG4\"M\":[],\"(Z)Ljava/lang/Boolean;\":-99,\"getClass\":\"a string\",\"illegal state. \":-99}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"$VALUES\":false,\"uXPqBG4\"M\":[],\"(Z)Ljava/lang/Boolean;\":-99,\"getClass\":\"a string\",\"illegal state. \":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"2q4?RC}h:b~,");
      jSONScanner0.skipObject(true);
      assertEquals(17, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"(II)V\":99,\"a\":[{}],\"\"@type\":\"FastjsonASMDeserializer_\":{},\"x\":99,\"isInitialized\":\"a string\",\"setResolveStatus\":null}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"\":7,\"(II)V\":99,\"a\":[{}],\"\"@type\":\"FastjsonASMDeserializer_\":{},\"x\":99,\"isInitialized\":\"a string\",\"setResolveStatus\":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("000000-0");
      jSONScanner0.nextIdent();
      jSONScanner0.info();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ESQy|D-lJsog?");
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-761), 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = '\"';
      boolean boolean0 = JSONScanner.charArrayCompare("{\"size\":\"Large\",\"color\":\"not match \",\"DisableASM\":true,\"value2\":{},\"\"@type\":\"K$e.;?Sr[0^yX2\":null,\"illegal str, \":[]}", 68, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("index ust > , but ", (-842), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("Xx,:diI", 0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = JSONScanner.charArrayCompare("{\"size\":\"Large\",\"color\":\"not match \",\"DisableASM\":true,\"value2\":{},\"\"@type\":\"K$e.;?Sr[0^yX2\":null,\"illegal str, \":[]}", 2077, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":[],\"color\":\"Red\",\"Y\":true,\"value2\":[],\"number\":\"\",\"x\":\"a string\",\"xx\":true}", 0);
      char char0 = jSONScanner0.charAt(92);
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":[],\"color\":\"Red\",\"value\":true,\"value2\":false,\"illegal str, \":\"\",\"x\":[]}", 0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(0, 107, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"(II)V\":99,\"a\":[{}],\"\"@type\":\"FastjsonASMDeserializer_\":{},\"x\":99,\"isInitialized\":\"a string\",\"setResolveStatus\":null}");
      int int0 = jSONScanner0.indexOf('r', 0);
      assertEquals(51, int0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"2q4?RC}h:b~,");
      SymbolTable symbolTable0 = new SymbolTable(105);
      jSONScanner0.scanTypeName(symbolTable0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"hC?n]Ym\"f", 318);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName((SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", (-2879));
      jSONScanner0.scanTypeName((SymbolTable) null);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?");
      jSONScanner0.scanTypeName((SymbolTable) null);
      assertEquals('4', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":-99,\"size\":\"\"@type\":\"FastjsonASMDeserializer_\",\"\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":-99,\";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;\":99}");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0.matchStat, jSONScanner0, parserConfig0);
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6p&?K7~@{/");
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":99,\"size\":\", column \",\"\":\"yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS\",\"value\":\"a string\",\"\"@type\":\"{\"illegal json.\":0}\":false,\"number\":-99,\";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;\":true}");
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[5];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 89, line 1, column 90{\"fruit\":99,\"size\":\", column \",\"\":\"yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS\",\"value\":\"a string\",\"\"@type\":\"{\"illegal json.\":0}\":false,\"number\":-99,\";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;\":true}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"(II)V\":99,\"a\":[{}],\"\"@type\":\"FastjsonASMDeserializer_\":{},\"x\":99,\"isInitialized\":\"a string\",\"setResolveStatus\":null}");
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(object0, jSONScanner0, parserConfig0);
      int int0 = jSONScanner0.seekObjectToField((long) 2, true);
      assertEquals(14, jSONScanner0.token());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":99,\"size\":\", column \",\"\":\"yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS\",\"value\":\"a string\",\"\"@type\":\"{\"illegal json.\":0}\":false,\"number\":-99,\";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;\":true}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 89, line 1, column 90{\"fruit\":99,\"size\":\", column \",\"\":\"yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS\",\"value\":\"a string\",\"\"@type\":\"{\"illegal json.\":0}\":false,\"number\":-99,\";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;\":true}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"$VALUES\":false,\"uXPqBG4\"M\":[],\"(Z)Ljava/lang/Boolean;\":-99,\"getClass\":\"a string\",\"illegal state. \":-99}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(4L, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 26, line 1, column 27{\"$VALUES\":false,\"uXPqBG4\"M\":[],\"(Z)Ljava/lang/Boolean;\":-99,\"getClass\":\"a string\",\"illegal state. \":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]J");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      int int0 = jSONScanner0.seekObjectToField((-3362L), true);
      assertEquals(1, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ou?7cstb>hH]", 2984);
      jSONScanner0.skipArray();
      int int0 = jSONScanner0.seekObjectToField(8055461369741094911L, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".[g>M#4B^tF");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-290L), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]J");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(693);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json.
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@@'n!9fb-=L=MA`T", (-416150920));
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-416150920));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -416150920
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"buildMethod not found.");
      jSONScanner0.skipString();
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("QeS\"0J\u0000w05l");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      jSONScanner0.scanSymbolUnQuoted(defaultJSONParser0.symbolTable);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ml:~ywSz&!)");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{;H`lsB]", (-558));
      jSONScanner0.skipArray(false);
      boolean boolean0 = jSONScanner0.seekArrayToItem(1426);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":null,\"K$e.;?Sr[\":false,\"4?\":true,\"illegal state. \":false,\"ull\":{},\"\":[true],\"(Ljava/lang/Object;Ljava/lang/String;)V\":{}}", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"a\":\"a string\",\"x\":\"hello\",\"b\":{},\"\":true,\"z\":true}");
      jSONScanner0.bp = 70;
      jSONScanner0.skipObject(true);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("cC&L+7b]2#UA}");
      jSONScanner0.skipObject(false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":M@?js");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals('M', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pars8It ervor : ");
      ParserConfig parserConfig0 = new ParserConfig(true);
      jSONScanner0.scanSymbolUnQuoted(parserConfig0.symbolTable);
      char[] charArray0 = new char[7];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"2q4NRC}h:b~,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      jSONScanner0.scanFieldStringArray(charArray0, (-736), parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", (-2879));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, 40, (SymbolTable) null);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny.internal");
      jSONScanner0.scanFieldStringArray((char[]) null, (-95), parserConfig0.symbolTable);
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pars8It ervor : ");
      char[] charArray0 = new char[9];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("pars8It ervor : ");
      ParserConfig parserConfig0 = defaultJSONParser0.config;
      jSONScanner0.scanSymbolUnQuoted(defaultJSONParser0.symbolTable);
      jSONScanner0.scanFieldStringArray(charArray0, 2, parserConfig0.symbolTable);
      assertEquals('e', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8}zx1pCwPMG=N");
      jSONScanner0.scanDate('%');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nul");
      jSONScanner0.scanDate('2');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nu");
      jSONScanner0.scanDate('8');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("index ust > , but ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanDate('.');
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7]CA19<SY-NckDO");
      jSONScanner0.scanDate('c');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("75+s~");
      jSONScanner0.scanDate('A');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDate(';');
      jSONScanner0.skipObject();
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("000000-0");
      jSONScanner0.nextIdent();
      jSONScanner0.scanDate('e');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"2q4?RC}h:b~,");
      jSONScanner0.scanDate('r');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDate('Q');
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7 v:RP@W&");
      long long0 = jSONScanner0.scanLong('?');
      assertEquals(7L, long0);
      assertEquals('7', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      long long0 = jSONScanner0.scanLong(';');
      assertEquals(0L, long0);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("index ust > , but ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      long long0 = jSONScanner0.scanLong('E');
      assertEquals(1, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,");
      long long0 = jSONScanner0.scanLong('5');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?");
      jSONScanner0.scanLong('?');
      int int0 = jSONScanner0.seekObjectToField((long) 0, false);
      assertEquals(16, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?");
      double double0 = jSONScanner0.scanDouble('?');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      double double0 = jSONScanner0.scanDouble('J');
      assertEquals(0.0, double0, 0.01);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nu");
      double double0 = jSONScanner0.scanDouble('8');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("index ust > , but ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      double double0 = jSONScanner0.scanDouble('`');
      assertEquals(1, jSONScanner0.token());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nul");
      double double0 = jSONScanner0.scanDouble('2');
      assertEquals(0.0, double0, 0.01);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-0", 45380);
      jSONScanner0.nextIdent();
      double double0 = jSONScanner0.scanDouble('=');
      assertEquals(2, jSONScanner0.token());
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-Z");
      double double0 = jSONScanner0.scanDouble('J');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,");
      double double0 = jSONScanner0.scanDouble('>');
      assertEquals(0.0, double0, 0.01);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      double double0 = jSONScanner0.scanDouble('>');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4cl7e");
      int int0 = jSONScanner0.scanInt('c');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = jSONScanner0.scanInt(';');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nul");
      int int0 = jSONScanner0.scanInt('7');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("index ust > , but ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      int int0 = jSONScanner0.scanInt('`');
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-0");
      jSONScanner0.nextToken(3712);
      int int0 = jSONScanner0.scanInt('e');
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4DQC}h:b~,");
      int int0 = jSONScanner0.scanInt('Z');
      assertEquals(0, int0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("create deserializeUsing ObjectDeserializer error");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      jSONScanner0.scanSymbolUnQuoted(defaultJSONParser0.symbolTable);
      jSONScanner0.scanInt('<');
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 553);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("f[alse", 558);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t4h&,Z{RxW[kj9$+", 55);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("000000-0");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\"\"j2q~?RC}h:~,");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("00000-0");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"-99");
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,", 3278);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,", 3278);
      char[] charArray0 = new char[2];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("KI$e.;?Sr[0^yX2");
      char[] charArray0 = new char[9];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,", 3278);
      char[] charArray0 = new char[0];
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pars8It ervor : ");
      ParserConfig parserConfig0 = new ParserConfig(true);
      jSONScanner0.scanSymbolUnQuoted(parserConfig0.symbolTable);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("KI$e.;?Sr[0^yX2");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"hC?n]Ym\"f");
      char[] charArray0 = new char[1];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,", 3278);
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8*4?");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K$e.;?Sr[0^yX2");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("000O 000-");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"2q4?RC}h:b~,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"2q4?RC}h:b~,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,", 3278);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("E1}F<,3+");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("6.&?K7~U{/");
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9fq");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-0");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"2q4?RC}h:b~,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("KI$e.;?Sr[0^yX2");
      char[] charArray0 = new char[13];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.bp = 170;
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      assertEquals(170, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '9', '0', '9', '9', '0', 1238, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('8', '8', '8', 'l', 'l', 'l', 65279, (-4));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', '5', '9', ',', ' ', '5', 99, (-1452));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('4', '4', 'I', 'k', 'I', 'D', 1, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('7', '6', '#', 'c', 'H', '3', (-2), 45);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', '!', '2', '!', ';', '!', 109, 7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('-', 'q', 'q', '-', 'q', '-', 450, 2147483645);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTimeZone(',', ',', ',', '1', ',');
      assertEquals('3', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".null");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', 'a', 'T', '>', '1');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8[]JkGw2T");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('8', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("il-X~G.PGAlXd;.xBGD");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('i', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K$e.;?Sr[0^yX2");
      assertEquals('K', jSONScanner0.getCurrent());
      
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('$', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java/lag/Shot");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@k4-:NUE}kM");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('@', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"false");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("000000-0");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/OF^x1F)EqFV7+jQMkB", 3278);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('/', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S'=k(t'V J<AXx-g6");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('S', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("QeS\"0J\u0000w05l");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      jSONScanner0.scanSymbolUnQuoted(defaultJSONParser0.symbolTable);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pars8It ervor : ");
      SymbolTable symbolTable0 = new SymbolTable(50900);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("QeS\"0J\u0000w05l");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      jSONScanner0.scanSymbolUnQuoted(defaultJSONParser0.symbolTable);
      jSONScanner0.numberString();
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8{OQ2z");
      jSONScanner0.nextIdent();
      assertEquals(2, jSONScanner0.token());
      
      String string0 = jSONScanner0.numberString();
      assertEquals("8", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-112), (-112));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 24);
      jSONScanner0.hasSpecial = true;
      jSONScanner0.bytesValue();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(L");
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8*4?");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ", 180);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("parseInt error : ");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('U', 'U', 'o');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pars8It ervor : ");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('m', 'm', 'm', 'm', 'h', 'h');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sUVTdx%.5J`", 7);
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(7, (char[]) null, 7, 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?'}$]p; o");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-317), (-317), (-317), (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2q4?RC}h:b~,");
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('h');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-0");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('0', jSONScanner0.getCurrent());
  }
}
