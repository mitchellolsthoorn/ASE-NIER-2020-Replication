/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 18:40:49 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.AfterFilter;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.spi.Module;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.Instant;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNull(jSONPath_Segment0);
      
      JSONPath jSONPath0 = new JSONPath("/");
      assertNotNull(jSONPath0);
      assertEquals("/", jSONPath0.getPath());
      
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_JSONPathParser0);
      assertNotNull(set0);
      assertFalse(set0.contains("/"));
      assertEquals("/", jSONPath0.getPath());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      Feature feature0 = Feature.IgnoreNotMatch;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature[] featureArray0 = new Feature[4];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature1;
      featureArray0[3] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("22hEw6", "*", parserConfig0, 37, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "fastjson";
      JSONPath jSONPath0 = new JSONPath("fastjson");
      assertNotNull(jSONPath0);
      assertEquals("fastjson", jSONPath0.getPath());
      
      jSONPath0.init();
      assertEquals("fastjson", jSONPath0.getPath());
      
      String string1 = "annotatedExceptionTypes";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("annotatedExceptionTypes");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: annotatedExceptionTypes", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("annotatedExceptionTypes", sQLRecoverableException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson", "annotatedExceptionTypes", sQLRecoverableException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLRecoverableException: annotatedExceptionTypes", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("annotatedExceptionTypes", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("annotatedExceptionTypes", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("fastjson", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjson", sQLNonTransientConnectionException0.toString());
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("annotatedExceptionTypes"));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      sQLRecoverableException0.addSuppressed(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLRecoverableException: annotatedExceptionTypes", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("annotatedExceptionTypes", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("annotatedExceptionTypes", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("fastjson", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjson", sQLNonTransientConnectionException0.toString());
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)sQLRecoverableException0.initCause(sQLNonTransientConnectionException0);
      assertNotNull(sQLRecoverableException1);
      assertEquals("java.sql.SQLRecoverableException: annotatedExceptionTypes", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("annotatedExceptionTypes", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("annotatedExceptionTypes", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("fastjson", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjson", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLRecoverableException: annotatedExceptionTypes", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("annotatedExceptionTypes", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      assertFalse(vector0.contains("annotatedExceptionTypes"));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLNonTransientConnectionException0, vector0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&&R");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(217L);
      assertEquals(217L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1672L));
      assertEquals((-1672L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[2]);
      assertEquals((-1672L), (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(9, longArray0.length);
      
      longArray0[3] = long3;
      Long long4 = new Long((-1027L));
      assertEquals((-1027L), (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[4]);
      assertEquals((-1027L), (long)long5);
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals(9, longArray0.length);
      
      longArray0[5] = long5;
      Long long6 = new Long((long) longArray0[5]);
      assertEquals((-1027L), (long)long6);
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertTrue(long6.equals((Object)long5));
      assertTrue(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertNotNull(long6);
      assertEquals(9, longArray0.length);
      
      longArray0[6] = long6;
      Long long7 = new Long((-1672L));
      assertEquals((-1672L), (long)long7);
      assertTrue(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long4));
      assertTrue(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long0));
      assertNotNull(long7);
      
      longArray0[7] = long7;
      Long long8 = new Long(4750336058574309L);
      assertEquals(4750336058574309L, (long)long8);
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long7));
      assertNotNull(long8);
      
      longArray0[8] = long8;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("multi-JSONCreator", longArray0, false);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(9, longArray0.length);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.filterRest(jSONPath_IntObjInSegement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      assertNotNull(jSONPath0);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser1.explain();
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_SegmentArray0);
      assertEquals(3, jSONPath_SegmentArray0.length);
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath1 = JSONPath.compile("?f?");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("?f?", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath jSONPath2 = JSONPath.compile("?f?");
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertEquals("?f?", jSONPath2.getPath());
      assertSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      Float float0 = new Float(1000000.0F);
      assertEquals(1000000.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      jSONPath2.deepSet(jSONPath0, "ZfE?Z<aych!", 81, float0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+");
      assertNotNull(jSONPath0);
      assertEquals("+", jSONPath0.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+");
      assertNotNull(jSONPath0);
      assertEquals("+", jSONPath0.getPath());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$WildCardSegment", (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: com.alibaba.fastjson.JSONPath$WildCardSegment", sQLTransientConnectionException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$WildCardSegment", sQLTransientConnectionException0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$WildCardSegment", "Yo&MDw", 67);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
      assertEquals("Yo&MDw", sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: com.alibaba.fastjson.JSONPath$WildCardSegment", sQLTransientConnectionException1.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$WildCardSegment", sQLTransientConnectionException1.getMessage());
      assertEquals(67, sQLTransientConnectionException1.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "+", (-1864), sQLTransientConnectionException1);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLDataException0);
      assertEquals("Yo&MDw", sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: com.alibaba.fastjson.JSONPath$WildCardSegment", sQLTransientConnectionException1.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$WildCardSegment", sQLTransientConnectionException1.getMessage());
      assertEquals(67, sQLTransientConnectionException1.getErrorCode());
      assertEquals("+", sQLDataException0.getSQLState());
      assertEquals((-1864), sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$WildCardSegment", "Yo&MDw", sQLTimeoutException0);
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException2);
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTransientConnectionException2.getErrorCode());
      assertEquals("Yo&MDw", sQLTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: com.alibaba.fastjson.JSONPath$WildCardSegment", sQLTransientConnectionException2.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$WildCardSegment", sQLTransientConnectionException2.getMessage());
      
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) sQLTransientConnectionException2, (Object) "+");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.safeMode");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.safeMode", jSONPath1.getPath());
      
      long long0 = (-1199L);
      // Undeclared exception!
      jSONPath1.setPropertyValue(jSONPath0, "/stackTrace/9", (-1199L), jSONPath0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("yw#");
      assertNotNull(jSONPath_NullSegement0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("yw#", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yw#", jSONPath0.getPath());
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny", "c", "yw#", (String[]) null, true);
      assertNotNull(jSONPath_MatchSegement0);
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      int[] intArray0 = new int[3];
      intArray0[0] = 1981968139;
      intArray0[1] = 1335;
      int int0 = (-36787060);
      intArray0[2] = (-36787060);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.autoTypeAccept");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeAccept", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.autoTypeAccept", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLIntegrityConstraintViolationException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {1981968139, 1335, (-36787060)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeAccept", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.autoTypeAccept", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.autoTypeAccept", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.autoTypeAccept", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) class0, "fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("PB", clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("PB", "PB", (-1000));
      assertNotNull(sQLTransientException0);
      assertEquals("PB", sQLTransientException0.getSQLState());
      assertEquals("PB", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: PB", sQLTransientException0.toString());
      assertEquals((-1000), sQLTransientException0.getErrorCode());
      
      MockThrowable mockThrowable0 = new MockThrowable("P|9.HVrb)]");
      assertNotNull(mockThrowable0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'Yv}", "NOT_LIKE", (Throwable) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: 'Yv}", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("'Yv}", sQLTimeoutException0.getMessage());
      assertEquals("NOT_LIKE", sQLTimeoutException0.getSQLState());
      
      DataTruncation dataTruncation0 = new DataTruncation(33, false, false, 33, (-833));
      assertNotNull(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-";
      stringArray0[1] = "PB";
      stringArray0[2] = "P|9.HVrb)]";
      stringArray0[3] = "EQ";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(dataTruncation0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte) (-8);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte)36, (byte) (-25), (byte)8, (byte)31, (byte)102, (byte)28, (byte)29, (byte) (-8)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("a5~9,A ~ryUdFI4", serializeConfig0, (ParserConfig) null);
      assertNotNull(jSONPath0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("a5~9,A ~ryUdFI4", jSONPath0.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("u<");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: u<", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("u<", sQLIntegrityConstraintViolationException0.getMessage());
      
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("a5~9,A ~ryUdFI4", jSONPath0.getPath());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("v", (String) null, 3, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(3, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: v", sQLTransactionRollbackException0.toString());
      assertEquals("v", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: u<", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("u<", sQLIntegrityConstraintViolationException0.getMessage());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_WildCardSegment0, "a5~9,A ~ryUdFI4", (-957L), sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = "+";
      JSONPath jSONPath0 = new JSONPath("+");
      assertNotNull(jSONPath0);
      assertEquals("+", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.removePropertyValue(jSONPath_JSONPathParser0, "=", true);
      assertFalse(boolean0);
      assertEquals("+", jSONPath0.getPath());
      
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "yld";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yld");
      assertFalse(boolean0);
      
      String string1 = "jwR903Bg*AYjEPt+3e";
      JSONPath jSONPath0 = new JSONPath("jwR903Bg*AYjEPt+3e");
      assertNotNull(jSONPath0);
      assertEquals("jwR903Bg*AYjEPt+3e", jSONPath0.getPath());
      
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) "jwR903Bg*AYjEPt+3e", objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("jwR903Bg*AYjEPt+3e", jSONPath0.getPath());
      
      String string2 = "com.alibaba.fastjson.JSONPath$JSONPathParser";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$JSONPathParser");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. com.alibaba.fastjson.JSONPath$JSONPathParser
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = ".";
      JSONPath jSONPath0 = new JSONPath(".");
      assertNotNull(jSONPath0);
      assertEquals(".", jSONPath0.getPath());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      String string1 = "R";
      JSONPath jSONPath1 = JSONPath.compile("R");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("R", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = JSONPath.containsValue((Object) null, ".", (Object) null);
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      
      URI uRI0 = MockURI.URI(".");
      assertNotNull(uRI0);
      assertEquals(".", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals(".", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getScheme());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals(".", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals(".", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getScheme());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getScheme());
      assertFalse(uRI1.isAbsolute());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawUserInfo());
      assertEquals(".", uRI1.getRawPath());
      assertEquals(".", uRI1.toString());
      assertNull(uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertFalse(uRI1.isOpaque());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      
      int int0 = 1583;
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      Object object0 = JSONPath.read("{\"/\":\"/stackTrace/5\"}", "fastjson.parser.autoTypeAccept");
      assertNull(object0);
      
      ParserConfig parserConfig1 = new ParserConfig(false);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isJacksonCompatible());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      
      String string0 = "";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "[{\"*\":false}]", "[{\"*\":false}]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"*\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      int int0 = 1583;
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      Object object0 = JSONPath.read("[{\"end must greater than or equals start. start \":{},\"/stackTrace/2\":{},\"com.alibaba.fastjson.JSONPath\":99}]", "fastjson.parser.autoTypeAccept");
      assertNotNull(object0);
      
      ParserConfig parserConfig1 = new ParserConfig(false);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      String string0 = "";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("PB", clientInfoStatus0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("PB", "PB", (-1000));
      assertNotNull(sQLTransientException0);
      assertEquals("PB", sQLTransientException0.getSQLState());
      assertEquals("PB", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: PB", sQLTransientException0.toString());
      assertEquals((-1000), sQLTransientException0.getErrorCode());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("~");
      assertNotNull(jSONPath0);
      assertEquals("~", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      int int0 = jSONPath0.size((Object) hashMap0);
      assertEquals(1, int0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("~", jSONPath0.getPath());
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(false));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      jSONPath0.deepScan((Object) null, "com.alibaba.fastjson.JSONPath$MultiPropertySegment", vector0);
      assertFalse(vector0.contains(false));
      assertEquals("~", jSONPath0.getPath());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("[{\":\":false}]", longArray0, true);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      boolean boolean1 = jSONPath_IntInSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, vector0, "[{\":\":false}]");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(vector0.contains(false));
      assertEquals(0, longArray0.length);
      assertEquals("~", jSONPath0.getPath());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("PB", clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("~");
      assertNotNull(jSONPath0);
      assertEquals("~", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      int int0 = jSONPath0.size((Object) hashMap0);
      assertEquals(1, int0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("~", jSONPath0.getPath());
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(false));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      jSONPath0.deepScan((Object) null, "com.alibaba.fastjson.JSONPath$MultiPropertySegment", vector0);
      assertFalse(vector0.contains(false));
      assertEquals("~", jSONPath0.getPath());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      JSONPath jSONPath1 = JSONPath.compile("[{\":\":false}]");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("[{\":\":false}]", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath1.size((Object) bigDecimal0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("PmB", "PmB", (-1000));
      assertNotNull(sQLTransientException0);
      assertEquals("PmB", sQLTransientException0.getMessage());
      assertEquals("PmB", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: PmB", sQLTransientException0.toString());
      assertEquals((-1000), sQLTransientException0.getErrorCode());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("~");
      assertNotNull(jSONPath0);
      assertEquals("~", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      int int0 = jSONPath0.size((Object) hashMap0);
      assertEquals(0, int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("~", jSONPath0.getPath());
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("PmB"));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      jSONPath0.deepScan((Object) null, "com.alibaba.fastjson.JSONPath$MultiPropertySegment", vector0);
      assertFalse(vector0.contains("PmB"));
      assertEquals("~", jSONPath0.getPath());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature0;
      Map<String, Object> map0 = JSONPath.paths((Object) feature0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      UUID uUID0 = MockUUID.fromString("[{\":\":false}]");
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[{\":\":false}]";
      stringArray0[1] = "[{\":\":false}]";
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("[{\":\":false}]", 1583, 1583, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath jSONPath0 = new JSONPath("2O3CuWzUT./0p<el");
      assertNotNull(jSONPath0);
      assertEquals("2O3CuWzUT./0p<el", jSONPath0.getPath());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("2O3CuWzUT./0p<el", "[{\":\":false}]", (-1178));
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: 2O3CuWzUT./0p<el", sQLSyntaxErrorException0.toString());
      assertEquals((-1178), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("2O3CuWzUT./0p<el", sQLSyntaxErrorException0.getMessage());
      assertEquals("[{\":\":false}]", sQLSyntaxErrorException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[{\":\":false}]", "[{\":\":false}]", sQLSyntaxErrorException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLSyntaxErrorException: 2O3CuWzUT./0p<el", sQLSyntaxErrorException0.toString());
      assertEquals((-1178), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("2O3CuWzUT./0p<el", sQLSyntaxErrorException0.getMessage());
      assertEquals("[{\":\":false}]", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: [{\":\":false}]", sQLFeatureNotSupportedException0.toString());
      assertEquals("[{\":\":false}]", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("[{\":\":false}]", sQLFeatureNotSupportedException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException("-", "GKv3=SO;A.TDH_|H", (-1367), sQLFeatureNotSupportedException0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLSyntaxErrorException: 2O3CuWzUT./0p<el", sQLSyntaxErrorException0.toString());
      assertEquals((-1178), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("2O3CuWzUT./0p<el", sQLSyntaxErrorException0.getMessage());
      assertEquals("[{\":\":false}]", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: [{\":\":false}]", sQLFeatureNotSupportedException0.toString());
      assertEquals("[{\":\":false}]", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("[{\":\":false}]", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLDataException: -", sQLDataException0.toString());
      assertEquals("GKv3=SO;A.TDH_|H", sQLDataException0.getSQLState());
      assertEquals((-1367), sQLDataException0.getErrorCode());
      assertEquals("-", sQLDataException0.getMessage());
      
      Integer integer0 = new Integer((-1367));
      assertEquals((-1367), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, sQLFeatureNotSupportedException0, sQLDataException0, integer0);
      assertFalse(boolean0);
      assertEquals("2O3CuWzUT./0p<el", jSONPath0.getPath());
      assertEquals("java.sql.SQLSyntaxErrorException: 2O3CuWzUT./0p<el", sQLSyntaxErrorException0.toString());
      assertEquals((-1178), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("2O3CuWzUT./0p<el", sQLSyntaxErrorException0.getMessage());
      assertEquals("[{\":\":false}]", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: [{\":\":false}]", sQLFeatureNotSupportedException0.toString());
      assertEquals("[{\":\":false}]", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("[{\":\":false}]", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLDataException: -", sQLDataException0.toString());
      assertEquals("GKv3=SO;A.TDH_|H", sQLDataException0.getSQLState());
      assertEquals((-1367), sQLDataException0.getErrorCode());
      assertEquals("-", sQLDataException0.getMessage());
      
      stringArray0[2] = "[{\":\":false}]";
      stringArray0[3] = "[{\":\":false}]";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(uUID0, stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      int int0 = (-2443);
      // Undeclared exception!
      try { 
        JSONPath.extract("*", "*", parserConfig0, (-2443), (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2*
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      String string0 = "*";
      int int0 = (-3567);
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowComment;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.CustomMapDeserializer;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SafeMode;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.ErrorOnEnumNotMatch;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.DisableSpecialKeyDetect;
      featureArray0[7] = feature7;
      // Undeclared exception!
      try { 
        JSONPath.extract("*", "*", parserConfig0, 4235, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2*
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("R");
      assertNotNull(jSONPath0);
      assertEquals("R", jSONPath0.getPath());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath1 = JSONPath.compile(",')D!?");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals(",')D!?", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.deny.internal");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("fastjson.parser.deny.internal", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjson.parser.deny.internal", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      boolean boolean0 = jSONPath0.remove((Object) "R");
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertEquals("R", jSONPath0.getPath());
      assertNotSame(jSONPath0, jSONPath1);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath2.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("M");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/4", sQLNonTransientConnectionException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("fastjson.parser.deny.internal", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjson.parser.deny.internal", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/4", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/4", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      
      int int0 = JSONPath.size((Object) sQLTimeoutException0, "/stackTrace/3");
      assertEquals(5, int0);
      assertEquals("fastjson.parser.deny.internal", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjson.parser.deny.internal", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("/stackTrace/4", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/4", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "*", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<9u5'1erJG{Ww");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) integer0, "..");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<9u5'1erJG{Ww");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) integer0, "..");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      JSONPath jSONPath0 = new JSONPath("LIKE");
      assertNotNull(jSONPath0);
      assertEquals("LIKE", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k2mVJn`9'3cw3WF*#KD");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Float float0 = new Float((float) (-6586085717218287427L));
      assertEquals((-6.5860856E18F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(74, 2005, 48);
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(69, false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      ParserConfig.AutoTypeCheckHandler parserConfig_AutoTypeCheckHandler0 = mock(ParserConfig.AutoTypeCheckHandler.class, new ViolatedAssumptionAnswer());
      parserConfig0.addAutoTypeCheckHandler(parserConfig_AutoTypeCheckHandler0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      Collection<Object> collection0 = jSONPath1.getPropertyValues(bigDecimal0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(collection0);
      assertFalse(collection0.contains(2005));
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath1.getPath());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MultiIndexSegment");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
      
      Class<Float> class0 = Float.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("I8W.*g`R");
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser1));
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser2);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser2.readDoubleValue(1928L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath(".000000000");
      assertNotNull(jSONPath0);
      assertEquals(".000000000", jSONPath0.getPath());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3526, (-1143), 123);
      assertNotNull(jSONPath_RangeSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(123, false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      ParserConfig.AutoTypeCheckHandler parserConfig_AutoTypeCheckHandler0 = mock(ParserConfig.AutoTypeCheckHandler.class, new ViolatedAssumptionAnswer());
      parserConfig0.addAutoTypeCheckHandler(parserConfig_AutoTypeCheckHandler0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/11");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("/stackTrace/11", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".000000000");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1338L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      BigDecimal bigDecimal0 = new BigDecimal(5614464919154503228L);
      assertNotNull(bigDecimal0);
      assertEquals((byte)60, bigDecimal0.byteValue());
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      
      String string0 = "null";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("null");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: null", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("null", sQLTimeoutException0.getMessage());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("null", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      BigDecimal bigDecimal0 = new BigDecimal(5614464919154503228L);
      assertNotNull(bigDecimal0);
      assertEquals((byte)60, bigDecimal0.byteValue());
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(5614464919154503228L));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      BigDecimal bigDecimal1 = bigDecimal0.plus();
      assertNotNull(bigDecimal1);
      assertEquals((byte)60, bigDecimal0.byteValue());
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      assertEquals((byte)60, bigDecimal1.byteValue());
      assertEquals((short) (-20932), bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/8", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("fdnj@HsjuVG #`J0$");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fdnj@HsjuVG #`J0$", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      int int0 = 5;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("com.alibaba.fastjson.JSONPath$DoubleOpSegement", "/stackTrace/11", 5, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: com.alibaba.fastjson.JSONPath$DoubleOpSegement", sQLClientInfoException1.toString());
      assertEquals("/stackTrace/11", sQLClientInfoException1.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$DoubleOpSegement", sQLClientInfoException1.getMessage());
      assertEquals(5, sQLClientInfoException1.getErrorCode());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 5;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/stackTrace/8";
      stringArray0[1] = "/stackTrace/11";
      stringArray0[2] = "[OeGUq!:L";
      stringArray0[3] = "/stackTrace/8";
      stringArray0[4] = "/cause/cause/stackTrace/12";
      stringArray0[5] = "fdnj@HsjuVG #`J0$";
      stringArray0[6] = "fdnj@HsjuVG #`J0$";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(bigDecimal1, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but ':'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/stackTrace/10";
      stringArray0[1] = "?";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$IntBetweenSegement";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject((Object) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ?
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Feature[] featureArray0 = new Feature[10];
      parserConfig0.setJacksonCompatible(true);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      Object object0 = JSONPath.extract("[99]", "[99]", parserConfig0, 1583, featureArray0);
      assertNull(object0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(10, featureArray0.length);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) feature0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      JSONPath jSONPath0 = new JSONPath("declaredConstructors");
      assertNotNull(jSONPath0);
      assertEquals("declaredConstructors", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) "declaredConstructors");
      assertFalse(boolean0);
      assertEquals("declaredConstructors", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) classLoader0, (Object) "[99]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      String string0 = "declaredClasses";
      JSONPath jSONPath0 = new JSONPath("declaredClasses", serializeConfig0, (ParserConfig) null);
      assertNotNull(jSONPath0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("declaredClasses", jSONPath0.getPath());
      
      int int0 = 593;
      int int1 = 562;
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      BigDecimal bigDecimal0 = new BigDecimal(5614464919154503228L);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      assertEquals((byte)60, bigDecimal0.byteValue());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement(" -> ", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      JSONPath jSONPath0 = new JSONPath("Y");
      assertNotNull(jSONPath0);
      assertEquals("Y", jSONPath0.getPath());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(" -> "));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      JSONPath jSONPath1 = new JSONPath("Y");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("Y", jSONPath1.getPath());
      
      jSONPath1.deepScan(stack0, " -> ", stack0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(stack0.contains(" -> "));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("Y", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      JSONPath jSONPath0 = JSONPath.compile("+");
      assertNotNull(jSONPath0);
      assertEquals("+", jSONPath0.getPath());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("+"));
      assertEquals(0, linkedList0.size());
      
      jSONPath0.deepScan(linkedList0, "writeEnum", linkedList0);
      assertFalse(linkedList0.contains("+"));
      assertEquals("+", jSONPath0.getPath());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "\"a string";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      BigDecimal bigDecimal0 = BigDecimal.valueOf(1.0);
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = bigDecimal0.plus();
      assertNotNull(bigDecimal1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/6");
      assertNotNull(jSONPath0);
      assertEquals("/cause/stackTrace/6", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("%Uub\"wX`).2");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("%Uub\"wX`).2", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: %Uub\"wX`).2", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) bigDecimal1;
      objectArray0[2] = (Object) jSONPath0;
      objectArray0[3] = (Object) "\"a string";
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLFeatureNotSupportedException0, "/stackTrace", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = JSONPath.compile("[{\":\":\"a string\"}]");
      assertNotNull(jSONPath0);
      assertEquals("[{\":\":\"a string\"}]", jSONPath0.getPath());
      
      MockDate mockDate0 = new MockDate((-1363), (-1363), 51068, 1732, 1583, 32);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Wed Jun 06 06:23:32 GMT 563", mockDate0.toString());
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Jun 06 06:23:32 GMT 563", mockDate0.toString());
      assertEquals("Wed Jun 06 06:23:32 GMT 563", date0.toString());
      
      Float float0 = new Float((double) 1732);
      assertEquals(1732.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) date0, (Object) float0, false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "!`,9Y3W";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!`,9Y3W", "!`,9Y3W");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("!`,9Y3W", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: !`,9Y3W", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("!`,9Y3W", sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("!`,9Y3W");
      assertNotNull(sQLTimeoutException0);
      assertEquals("!`,9Y3W", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: !`,9Y3W", sQLTimeoutException0.toString());
      
      JSONPath jSONPath0 = new JSONPath("QJI@0d_)a7L");
      assertNotNull(jSONPath0);
      
      Long long0 = new Long((-8209044522538118952L));
      assertEquals((-8209044522538118952L), (long)long0);
      assertNotNull(long0);
      
      int int0 = (-4029);
      int int1 = (-624);
      SQLWarning sQLWarning0 = new SQLWarning("\\.");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("\\.", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: \\.", sQLWarning0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("fkJ;gg", "fkJ;gg", (-624), sQLWarning0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("\\.", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: \\.", sQLWarning0.toString());
      assertEquals("fkJ;gg", sQLDataException0.getSQLState());
      assertEquals("fkJ;gg", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: fkJ;gg", sQLDataException0.toString());
      assertEquals((-624), sQLDataException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath0, "r[$f#tRtGn-fM{SHy)l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. r[$f#tRtGn-fM{SHy)l
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.serializer.ASMSerializerFactory$Context");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ASMSerializerFactory$Context");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.serializer.ASMSerializerFactory$Context", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("QJI@0d_)a7L", "QJI@0d_)a7L");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      Short short0 = new Short((short) (-378));
      assertEquals((short) (-378), (short)short0);
      assertNotNull(short0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("VZ8i;EG", (short)151, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONPath_DoubleOpSegement0;
      objectArray0[1] = (Object) "VZ8i;EG";
      objectArray0[2] = (Object) jSONPath_DoubleOpSegement0;
      objectArray0[3] = (Object) "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context";
      objectArray0[4] = (Object) jSONPath_DoubleOpSegement0;
      objectArray0[5] = (Object) "VZ8i;EG";
      objectArray0[6] = (Object) short0;
      objectArray0[7] = (Object) "QJI@0d_)a7L";
      objectArray0[8] = (Object) short0;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLTransientConnectionException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.serializer.ASMSerializerFactory$Context
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bp7'8(Q*iwJaud=Y");
      assertFalse(boolean0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("PB", clientInfoStatus0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) hashMap0);
      assertNotNull(map0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = new JSONPath("|=EE|B", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("|=EE|B", jSONPath0.getPath());
      
      Object object0 = jSONPath0.getArrayItem(hashMap0, 37);
      assertNull(object0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("|=EE|B", jSONPath0.getPath());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("Bp7'8(Q*iwJaud=Y"));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny.internal", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      jSONPath0.deepScan(jSONPath_PropertySegment0, "/stackTrace/6", stack0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(stack0.contains("Bp7'8(Q*iwJaud=Y"));
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("|=EE|B", jSONPath0.getPath());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LxHM&q\"bkK5_bjTM");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertFalse(jSONPath_Segment0.equals((Object)jSONPath_PropertySegment0));
      assertNotNull(jSONPath_Segment0);
      assertNotSame(jSONPath_Segment0, jSONPath_PropertySegment0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "^7NK1B-&0vobJHE^";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("^7NK1B-&0vobJHE^");
      assertNotNull(jSONPath0);
      assertEquals("^7NK1B-&0vobJHE^", jSONPath0.getPath());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-23), 126, 19);
      assertNotNull(jSONPath_RangeSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(19, false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ParserConfig.AutoTypeCheckHandler parserConfig_AutoTypeCheckHandler0 = mock(ParserConfig.AutoTypeCheckHandler.class, new ViolatedAssumptionAnswer());
      parserConfig0.addAutoTypeCheckHandler(parserConfig_AutoTypeCheckHandler0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.deny");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.deny", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Q:^!So<3*1R-5_,A");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: Q:^!So<3*1R-5_,A", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Q:^!So<3*1R-5_,A", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLSyntaxErrorException0, "/cause/stackTrace/4", (Object) jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6DPD.ziESU");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(6L, object0);
      assertFalse(object0.equals((Object)long0));
      assertNotNull(object0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment1);
      assertSame(jSONPath_WildCardSegment1, jSONPath_WildCardSegment0);
      
      JSONPath jSONPath0 = new JSONPath("N]!55:c_stcj:`YmA");
      assertNotNull(jSONPath0);
      assertEquals("N]!55:c_stcj:`YmA", jSONPath0.getPath());
      
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
      assertEquals("N]!55:c_stcj:`YmA", jSONPath0.getPath());
      
      boolean boolean0 = JSONPath.remove((Object) null, "6DPD.ziESU");
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(1442L);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/3");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/3", jSONPath0.getPath());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertNotSame(parserConfig1, parserConfig0);
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("/cause/stackTrace/9", "fastjson.parser.deny", (String) null, (String[]) null, true);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath jSONPath1 = JSONPath.compile("/cause/stackTrace/11");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("/cause/stackTrace/11", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      
      SQLWarning sQLWarning0 = new SQLWarning("/cause/stackTrace/5", "<H1{[,-");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: /cause/stackTrace/5", sQLWarning0.toString());
      assertEquals("/cause/stackTrace/5", sQLWarning0.getMessage());
      assertEquals("<H1{[,-", sQLWarning0.getSQLState());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath1, sQLNonTransientConnectionException1, sQLWarning0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(arrayList0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("/cause/stackTrace/11", jSONPath1.getPath());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: /cause/stackTrace/5", sQLWarning0.toString());
      assertEquals("/cause/stackTrace/5", sQLWarning0.getMessage());
      assertEquals("<H1{[,-", sQLWarning0.getSQLState());
      assertEquals(8, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath1, "/cause/stackTrace/11", arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = new BigDecimal((int) (byte) (-31));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((short) (-31), bigDecimal1.shortValue());
      assertEquals((byte) (-31), bigDecimal1.byteValue());
      
      BigDecimal bigDecimal2 = bigDecimal1.plus();
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
      assertEquals((short) (-31), bigDecimal1.shortValue());
      assertEquals((byte) (-31), bigDecimal1.byteValue());
      assertEquals((short) (-31), bigDecimal2.shortValue());
      assertEquals((byte) (-31), bigDecimal2.byteValue());
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      
      Float float0 = Float.valueOf((float) (byte) (-31));
      assertEquals((-31.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal1, float0);
      assertFalse(boolean0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short) (-31), bigDecimal1.shortValue());
      assertEquals((byte) (-31), bigDecimal1.byteValue());
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("currencyCode", (SerializeConfig) null, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("currencyCode", jSONPath0.getPath());
      
      DataTruncation dataTruncation0 = new DataTruncation(1616, true, false, (byte) (-31), (byte) (-31));
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeSupport", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath jSONPath0 = new JSONPath("declaredClasses");
      assertNotNull(jSONPath0);
      assertEquals("declaredClasses", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      
      jSONPath1.init();
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("M");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("s>kUTTDL%HNK`\nx", ".");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.toString());
      assertEquals(".", sQLTransactionRollbackException0.getSQLState());
      assertEquals("s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.getMessage());
      
      String string0 = sQLTransactionRollbackException0.getLocalizedMessage();
      assertEquals("s>kUTTDL%HNK`\nx", string0);
      assertNotNull(string0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.toString());
      assertEquals(".", sQLTransactionRollbackException0.getSQLState());
      assertEquals("s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.getMessage());
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("between", 5614464919154503228L, 5614464919154503228L, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      String string1 = "com.alibaba.fastjson.JSONPath$MultiPropertySegment";
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("com.alibaba.fastjson.JSONPath$MultiPropertySegment", ".", false);
      assertNotNull(jSONPath_RlikeSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RlikeSegement0, jSONPath_RlikeSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = new JSONPath("between");
      assertNotNull(jSONPath0);
      assertEquals("between", jSONPath0.getPath());
      
      float float0 = 919.0F;
      boolean boolean0 = false;
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
      
      Float float1 = new Float(float0);
      assertEquals(919.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      boolean boolean1 = jSONPath0.contains((Object) string1);
      assertFalse(boolean1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertEquals("between", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. -
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      ObjectSerializer objectSerializer0 = serializeConfig0.getObjectWriter(class0);
      assertNotNull(objectSerializer0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("pOv}g", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("pOv}g", jSONPath0.getPath());
      
      byte byte0 = (byte)92;
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(objectSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("PB", "PB", (-1000));
      assertNotNull(sQLTransientException0);
      assertEquals("PB", sQLTransientException0.getMessage());
      assertEquals("PB", sQLTransientException0.getSQLState());
      assertEquals((-1000), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: PB", sQLTransientException0.toString());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("PB", "By`;1D!-hS'p&a/;Z", hashMap0, sQLTransientException0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("PB", sQLTransientException0.getMessage());
      assertEquals("PB", sQLTransientException0.getSQLState());
      assertEquals((-1000), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: PB", sQLTransientException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("By`;1D!-hS'p&a/;Z", sQLClientInfoException0.getSQLState());
      assertEquals("PB", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: PB", sQLClientInfoException0.toString());
      
      JSONPath jSONPath0 = new JSONPath("By`;1D!-hS'p&a/;Z");
      assertNotNull(jSONPath0);
      assertEquals("By`;1D!-hS'p&a/;Z", jSONPath0.getPath());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(181, (-1000), (-2844));
      assertNotNull(jSONPath_RangeSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLClientInfoException0, jSONPath0);
      assertNotNull(arrayList0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("PB", sQLTransientException0.getMessage());
      assertEquals("PB", sQLTransientException0.getSQLState());
      assertEquals((-1000), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: PB", sQLTransientException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("By`;1D!-hS'p&a/;Z", sQLClientInfoException0.getSQLState());
      assertEquals("PB", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: PB", sQLClientInfoException0.toString());
      assertEquals("By`;1D!-hS'p&a/;Z", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Map<String, Object> map0 = JSONPath.paths((Object) arrayList0);
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("PB", sQLTransientException0.getMessage());
      assertEquals("PB", sQLTransientException0.getSQLState());
      assertEquals((-1000), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: PB", sQLTransientException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("By`;1D!-hS'p&a/;Z", sQLClientInfoException0.getSQLState());
      assertEquals("PB", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: PB", sQLClientInfoException0.toString());
      assertEquals("By`;1D!-hS'p&a/;Z", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put((String) null, clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      BiFunction<Object, ClientInfoStatus, ClientInfoStatus> biFunction0 = (BiFunction<Object, ClientInfoStatus, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(clientInfoStatus0).when(biFunction0).apply(any() , any(java.sql.ClientInfoStatus.class));
      ClientInfoStatus clientInfoStatus1 = hashMap0.compute("fastjson.parser.deny", biFunction0);
      assertEquals(ClientInfoStatus.REASON_UNKNOWN, clientInfoStatus1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertSame(clientInfoStatus0, clientInfoStatus1);
      assertSame(clientInfoStatus1, clientInfoStatus0);
      
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("qM", clientInfoStatus2);
      assertFalse(clientInfoStatus2.equals((Object)clientInfoStatus0));
      assertFalse(clientInfoStatus2.equals((Object)clientInfoStatus1));
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNotSame(clientInfoStatus2, clientInfoStatus0);
      assertNotSame(clientInfoStatus2, clientInfoStatus1);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("qM", "fastjson.parser.deny", 488);
      assertNotNull(sQLTransientException0);
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("U:F%+^Pt\ry|6lh", "ZxM:7", hashMap0, sQLTransientException0);
      assertNotNull(sQLClientInfoException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = sQLTransientException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      assertNotNull(map0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals(169, map0.size());
      assertFalse(map0.isEmpty());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLClientInfoException0);
      assertNotNull(batchUpdateException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", batchUpdateException0.getMessage());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("qM"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      jSONPath0.deepScan(hashMap0, "qM", arrayList0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(arrayList0.contains("qM"));
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Map<String, Object> map1 = JSONPath.paths((Object) "qM");
      assertFalse(map1.equals((Object)map0));
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertNotSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|@_F.");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("^7NK1B-&0vobJHE^");
      assertNotNull(jSONPath0);
      assertEquals("^7NK1B-&0vobJHE^", jSONPath0.getPath());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation((-1572), false, true, 1509950721, 40);
      assertNotNull(dataTruncation0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning("^7NK1B-&0vobJHE^", "^7NK1B-&0vobJHE^", 8192);
      assertNotNull(sQLWarning0);
      assertEquals(8192, sQLWarning0.getErrorCode());
      assertEquals("^7NK1B-&0vobJHE^", sQLWarning0.getSQLState());
      assertEquals("^7NK1B-&0vobJHE^", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ^7NK1B-&0vobJHE^", sQLWarning0.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|@_F.";
      stringArray0[1] = "TV%=5cEU";
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2198;
      intArray0[1] = (-1572);
      intArray0[2] = 2198;
      intArray0[3] = 8192;
      intArray0[4] = (-1572);
      intArray0[5] = 2198;
      intArray0[6] = (-2394);
      intArray0[7] = 40;
      intArray0[8] = 1509950721;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {2198, (-1572), 2198, 8192, (-1572), 2198, (-2394), 40, 1509950721}, intArray0);
      assertEquals(9, intArray0.length);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(1509950721));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Stream<Object> stream0 = stack0.parallelStream();
      assertNotNull(stream0);
      assertFalse(stack0.contains(1509950721));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Feature feature0 = Feature.CustomMapDeserializer;
      Feature feature1 = Feature.IgnoreNotMatch;
      Feature[] featureArray0 = new Feature[5];
      Feature feature2 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature2;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("com.alibaba.fastjson.JSONPath$KeySetSegment", "a", parserConfig0, (-9), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("expect '");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("expect '", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: expect '", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[99]", sQLNonTransientConnectionException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("expect '", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: expect '", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: [99]", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("[99]", sQLInvalidAuthorizationSpecException0.getMessage());
      
      JSONPath jSONPath0 = new JSONPath("AP(");
      assertNotNull(jSONPath0);
      assertEquals("AP(", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "AP(");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[*\"");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("between", "s>kUTTDL%HNK`\nx");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("between", sQLTransactionRollbackException0.getMessage());
      assertEquals("s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: between", sQLTransactionRollbackException0.toString());
      
      String string0 = sQLTransactionRollbackException0.getLocalizedMessage();
      assertEquals("between", string0);
      assertNotNull(string0);
      assertEquals("between", sQLTransactionRollbackException0.getMessage());
      assertEquals("s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: between", sQLTransactionRollbackException0.toString());
      
      JSONPath jSONPath0 = new JSONPath("between");
      assertNotNull(jSONPath0);
      assertEquals("between", jSONPath0.getPath());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[*\"";
      stringArray0[1] = "[*\"";
      stringArray0[2] = "*";
      stringArray0[3] = "[*\"";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("time", "*", "[*\"", stringArray0, false);
      assertNotNull(jSONPath_MatchSegement0);
      assertEquals(4, stringArray0.length);
      
      JSONPath jSONPath1 = JSONPath.compile(" -> ");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals(" -> ", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      String string1 = jSONPath0.getPath();
      assertEquals("between", string1);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("between", jSONPath0.getPath());
      assertNotSame(jSONPath0, jSONPath1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("between");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      jSONPath_JSONPathParser1.readOp();
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      assertEquals(PropertyNamingStrategy.PascalCase, propertyNamingStrategy0);
      
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath_JSONPathParser0, "between", (Object) propertyNamingStrategy0);
      assertFalse(boolean0);
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/stackTrace/1", "^>?7Ye+R@^f@H'?W");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("/stackTrace/1", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("^>?7Ye+R@^f@H'?W", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /stackTrace/1", sQLInvalidAuthorizationSpecException0.toString());
      
      JSONPath jSONPath0 = new JSONPath("xQW,1\"05Y;]");
      assertNotNull(jSONPath0);
      assertEquals("xQW,1\"05Y;]", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("BETWEEN");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$IntObjInSegement", "J\"XX<=4n2[<c2i", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath0 = new JSONPath("J\"XX<=4n2[<c2i", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("J\"XX<=4n2[<c2i", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(3814);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath1 = new JSONPath("\\.");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("\\.", jSONPath1.getPath());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.JSONPath$IntObjInSegement", "fastjson.parser.deny.internal", 41);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLRecoverableException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLRecoverableException0.getMessage());
      assertEquals(41, sQLRecoverableException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLRecoverableException0.getSQLState());
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("b", "(CLjava/lang/String;Ljava/lang/String;)V", hashMap0, sQLRecoverableException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLRecoverableException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLRecoverableException0.getMessage());
      assertEquals(41, sQLRecoverableException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLRecoverableException0.getSQLState());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("(CLjava/lang/String;Ljava/lang/String;)V", sQLClientInfoException0.getSQLState());
      assertEquals("b", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: b", sQLClientInfoException0.toString());
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath1, jSONPath0, sQLClientInfoException0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONArray0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("J\"XX<=4n2[<c2i", jSONPath0.getPath());
      assertEquals("\\.", jSONPath1.getPath());
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLRecoverableException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLRecoverableException0.getMessage());
      assertEquals(41, sQLRecoverableException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLRecoverableException0.getSQLState());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("(CLjava/lang/String;Ljava/lang/String;)V", sQLClientInfoException0.getSQLState());
      assertEquals("b", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: b", sQLClientInfoException0.toString());
      assertEquals(2, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Float float0 = new Float((float) 41);
      assertEquals(41.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath1, jSONPath0, jSONPath_WildCardSegment0, float0);
      assertTrue(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("J\"XX<=4n2[<c2i", jSONPath0.getPath());
      assertEquals("\\.", jSONPath1.getPath());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean1 = JSONPath.contains((Object) jSONPath_FilterSegment0, "fastjson.parser.autoTypeAccept");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$IntObjInSegement", "J\"XX<=4n2[<c2i", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath0 = new JSONPath("J\"XX<=4n2[<c2i", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("J\"XX<=4n2[<c2i", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(3814);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath1 = new JSONPath("\\.");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("\\.", jSONPath1.getPath());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.JSONPath$IntObjInSegement", "fastjson.parser.deny.internal", 41);
      assertNotNull(sQLRecoverableException0);
      assertEquals("fastjson.parser.deny.internal", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLRecoverableException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLRecoverableException0.getMessage());
      assertEquals(41, sQLRecoverableException0.getErrorCode());
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("b", "(CLjava/lang/String;Ljava/lang/String;)V", hashMap0, sQLRecoverableException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals("fastjson.parser.deny.internal", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLRecoverableException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLRecoverableException0.getMessage());
      assertEquals(41, sQLRecoverableException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: b", sQLClientInfoException0.toString());
      assertEquals("(CLjava/lang/String;Ljava/lang/String;)V", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("b", sQLClientInfoException0.getMessage());
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath1, jSONPath0, sQLClientInfoException0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONArray0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("J\"XX<=4n2[<c2i", jSONPath0.getPath());
      assertEquals("\\.", jSONPath1.getPath());
      assertEquals("fastjson.parser.deny.internal", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLRecoverableException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLRecoverableException0.getMessage());
      assertEquals(41, sQLRecoverableException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: b", sQLClientInfoException0.toString());
      assertEquals("(CLjava/lang/String;Ljava/lang/String;)V", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("b", sQLClientInfoException0.getMessage());
      assertEquals(2, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      boolean boolean0 = JSONPath.contains((Object) jSONPath_FilterSegment0, "fastjson.parser.autoTypeAccept");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      assertNotNull(jSONPath0);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser1.explain();
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_SegmentArray0);
      assertEquals(3, jSONPath_SegmentArray0.length);
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3743L);
      assertEquals(3743L, (long)long0);
      assertNotNull(long0);
      
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("!wz3s#m+v1", longArray0, false);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(1, longArray0.length);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      assertEquals(1, longArray0.length);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      JSONPath.FilterGroup jSONPath_FilterGroup1 = new JSONPath.FilterGroup(jSONPath_FilterGroup0, jSONPath_FilterGroup0, false);
      assertFalse(jSONPath_FilterGroup1.equals((Object)jSONPath_FilterGroup0));
      assertNotNull(jSONPath_FilterGroup1);
      assertEquals(1, longArray0.length);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("!wz3s#m+v1");
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: !wz3s#m+v1", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("!wz3s#m+v1", sQLTimeoutException0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("EQ", "not");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("EQ", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("not", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: EQ", sQLTransientConnectionException0.toString());
      
      String string0 = sQLTransientConnectionException0.getLocalizedMessage();
      assertEquals("EQ", string0);
      assertNotNull(string0);
      assertEquals("EQ", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("not", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: EQ", sQLTransientConnectionException0.toString());
      
      boolean boolean0 = jSONPath_FilterGroup1.apply(jSONPath0, "!wz3s#m+v1", sQLTimeoutException0, sQLTransientConnectionException0);
      assertTrue(boolean0);
      assertFalse(jSONPath_FilterGroup0.equals((Object)jSONPath_FilterGroup1));
      assertFalse(jSONPath_FilterGroup1.equals((Object)jSONPath_FilterGroup0));
      assertEquals(1, longArray0.length);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: !wz3s#m+v1", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("!wz3s#m+v1", sQLTimeoutException0.getMessage());
      assertEquals("EQ", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("not", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: EQ", sQLTransientConnectionException0.toString());
      assertNotSame(jSONPath_FilterGroup0, jSONPath_FilterGroup1);
      assertNotSame(jSONPath_FilterGroup1, jSONPath_FilterGroup0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.autoTypeAccept");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.autoTypeAccept", sQLTimeoutException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTimeoutException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)JSONPath.reserveToObject(sQLTimeoutException0, (String[]) null);
      assertNotNull(sQLTimeoutException1);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.autoTypeAccept", sQLTimeoutException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTimeoutException1.getMessage());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.autoTypeAccept", sQLTimeoutException1.toString());
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      
      JSONPath jSONPath0 = new JSONPath("annotatedReturnType", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("annotatedReturnType", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/cause/stackTrace/7", "fastjson.parser.deny", 2344, sQLTimeoutException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.autoTypeAccept", sQLTimeoutException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTimeoutException0.getMessage());
      assertEquals(2344, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("/cause/stackTrace/7", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: /cause/stackTrace/7", sQLFeatureNotSupportedException0.toString());
      
      boolean boolean0 = jSONPath0.set((Object) sQLFeatureNotSupportedException0, (Object) null, false);
      assertTrue(boolean0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.autoTypeAccept", sQLTimeoutException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTimeoutException0.getMessage());
      assertEquals("annotatedReturnType", jSONPath0.getPath());
      assertEquals(2344, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("/cause/stackTrace/7", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: /cause/stackTrace/7", sQLFeatureNotSupportedException0.toString());
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">([");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DataTruncation dataTruncation0 = new DataTruncation(2688, true, false, 955, (-606));
      assertNotNull(dataTruncation0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(dataTruncation0, (String[]) null);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1583;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {1583}, intArray0);
      assertEquals(1, intArray0.length);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(955));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      
      int int0 = jSONPath0.size((Object) jSONArray0);
      assertEquals(0, int0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      
      jSONPath0.deepGetPropertyValues(jSONArray0, stack0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(stack0.contains(955));
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      
      Set<?> set0 = jSONPath0.evalKeySet(dataTruncation0);
      assertNotNull(set0);
      assertFalse(set0.contains("fastjson.parser.autoTypeAccept"));
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      assertEquals(10, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) serializeConfig0);
      assertNotNull(map0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      
      Object object0 = jSONPath0.getArrayItem(map0, 37);
      assertNull(object0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      
      System.setCurrentTimeMillis(37);
      boolean boolean1 = jSONPath0.set((Object) map0, (Object) map0, false);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertEquals(4, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("fastjso.parser.safeMde");
      assertNotNull(jSONPath0);
      assertEquals("fastjso.parser.safeMde", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjso.parser.safeMde");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser(">te8F:?A1WeF{6g");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      int int0 = bigDecimal0.scale();
      assertEquals(0, int0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">te8F:?A1WeF{6g");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(">te8F:?A1WeF{6g", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >te8F:?A1WeF{6g", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.util.OptionalInt", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(">te8F:?A1WeF{6g", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >te8F:?A1WeF{6g", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.util.OptionalInt", sQLTransientConnectionException0.toString());
      assertEquals("java.util.OptionalInt", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t6eJ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientConnectionException0);
      assertNotNull(mockThrowable0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("t6eJ", mockThrowable0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(">te8F:?A1WeF{6g", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >te8F:?A1WeF{6g", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.util.OptionalInt", sQLTransientConnectionException0.toString());
      assertEquals("java.util.OptionalInt", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLTransientConnectionException: java.util.OptionalInt", mockThrowable0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: java.util.OptionalInt", mockThrowable0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("t6eJ", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: t6eJ", sQLTransactionRollbackException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjso.parser.safeMde", "t6eJ", 1287);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjso.parser.safeMde", sQLNonTransientConnectionException0.toString());
      assertEquals(1287, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("t6eJ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("fastjso.parser.safeMde", sQLNonTransientConnectionException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientConnectionException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjso.parser.safeMde", sQLNonTransientConnectionException0.toString());
      assertEquals(1287, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("t6eJ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("fastjso.parser.safeMde", sQLNonTransientConnectionException0.getMessage());
      
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, sQLNonTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLNonTransientConnectionException cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("fastjso.parser.safeMde");
      assertNotNull(jSONPath0);
      assertEquals("fastjso.parser.safeMde", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjso.parser.safeMde");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser(">te8F:?A1WeF{6g");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      int int0 = bigDecimal0.scale();
      assertEquals(0, int0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">te8F:?A1WeF{6g");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(">te8F:?A1WeF{6g", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >te8F:?A1WeF{6g", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t6eJ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjso.parser.safeMde", "t6eJ", 1287);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("t6eJ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjso.parser.safeMde", sQLNonTransientConnectionException0.toString());
      assertEquals("fastjso.parser.safeMde", sQLNonTransientConnectionException0.getMessage());
      assertEquals(1287, sQLNonTransientConnectionException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientConnectionException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals("t6eJ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjso.parser.safeMde", sQLNonTransientConnectionException0.toString());
      assertEquals("fastjso.parser.safeMde", sQLNonTransientConnectionException0.getMessage());
      assertEquals(1287, sQLNonTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, sQLNonTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLNonTransientConnectionException cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      BiFunction<Object, ClientInfoStatus, ClientInfoStatus> biFunction0 = (BiFunction<Object, ClientInfoStatus, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(clientInfoStatus0).when(biFunction0).apply(any() , any(java.sql.ClientInfoStatus.class));
      ClientInfoStatus clientInfoStatus1 = hashMap0.compute("fastjson.parser.deny", biFunction0);
      assertEquals(ClientInfoStatus.REASON_UNKNOWN, clientInfoStatus1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertSame(clientInfoStatus0, clientInfoStatus1);
      assertSame(clientInfoStatus1, clientInfoStatus0);
      
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("qM", clientInfoStatus2);
      assertFalse(clientInfoStatus2.equals((Object)clientInfoStatus1));
      assertFalse(clientInfoStatus2.equals((Object)clientInfoStatus0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(clientInfoStatus2, clientInfoStatus1);
      assertNotSame(clientInfoStatus2, clientInfoStatus0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("qM", "fastjson.parser.deny", 488);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals("qM", sQLTransientException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("U:F%+^Pt\ry|6lh", "ZxM:7", hashMap0, sQLTransientException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      assertNotNull(map0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertFalse(map0.isEmpty());
      assertEquals(169, map0.size());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLClientInfoException0);
      assertNotNull(batchUpdateException0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", batchUpdateException0.getMessage());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("fastjson.parser.deny"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      jSONPath0.deepScan(hashMap0, "qM", arrayList0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(arrayList0.contains("fastjson.parser.deny"));
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Set<?> set0 = jSONPath0.keySet((Object) clientInfoStatus1);
      assertFalse(clientInfoStatus0.equals((Object)clientInfoStatus2));
      assertFalse(clientInfoStatus1.equals((Object)clientInfoStatus2));
      assertNull(set0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertSame(clientInfoStatus0, clientInfoStatus1);
      assertNotSame(clientInfoStatus0, clientInfoStatus2);
      assertNotSame(clientInfoStatus1, clientInfoStatus2);
      assertSame(clientInfoStatus1, clientInfoStatus0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      BigDecimal bigDecimal0 = new BigDecimal(5614464919154503228L);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      assertEquals((byte)60, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = bigDecimal0.negate();
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      assertEquals((byte)60, bigDecimal0.byteValue());
      assertEquals((short)20932, bigDecimal1.shortValue());
      assertEquals((byte) (-60), bigDecimal1.byteValue());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)71}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String[] stringArray0 = new String[0];
      BigDecimal bigDecimal2 = (BigDecimal)JSONPath.reserveToObject(bigDecimal0, stringArray0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertEquals(0, stringArray0.length);
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      assertEquals((byte)60, bigDecimal0.byteValue());
      assertEquals((short) (-20932), bigDecimal2.shortValue());
      assertEquals((byte)60, bigDecimal2.byteValue());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      JSONPath jSONPath0 = new JSONPath("M");
      assertNotNull(jSONPath0);
      assertEquals("M", jSONPath0.getPath());
      
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
      assertEquals("M", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BiFunction<Object, ClientInfoStatus, ClientInfoStatus> biFunction0 = (BiFunction<Object, ClientInfoStatus, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any(java.sql.ClientInfoStatus.class));
      hashMap0.compute("fastjson.parser.deny", biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("qM", clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("qM", "fastjson.parser.deny", 488);
      assertNotNull(sQLTransientException0);
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("U:F%+^Pt\ry|6lh", "ZxM:7", hashMap0, sQLTransientException0);
      assertNotNull(sQLClientInfoException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      assertNotNull(map0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals(168, map0.size());
      assertFalse(map0.isEmpty());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLClientInfoException0);
      assertNotNull(batchUpdateException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", batchUpdateException0.toString());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("U:F%+^Pt\ry|6lh"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      jSONPath0.deepScan(hashMap0, "qM", arrayList0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(arrayList0.contains("U:F%+^Pt\ry|6lh"));
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("+");
      assertNotNull(jSONPath0);
      assertEquals("+", jSONPath0.getPath());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("+", "+");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("+", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: +", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("+", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      // Undeclared exception!
      try { 
        JSONPath.extract("+", "+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -5
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      String string0 = "fastjso.parser.safeMde";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("3rdN\"WnA6FpX?^Rr~7v", (-7272.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("fastjso.parser.safeMde");
      assertNotNull(jSONPath0);
      assertEquals("fastjso.parser.safeMde", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjso.parser.safeMde");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: fastjso.parser.safeMde", sQLTimeoutException0.toString());
      assertEquals("fastjso.parser.safeMde", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      JSONPath jSONPath1 = JSONPath.compile("position");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("position", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath1, jSONPath0, (Object) null, "3rdN\"WnA6FpX?^Rr~7v");
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertEquals("fastjso.parser.safeMde", jSONPath0.getPath());
      assertEquals("position", jSONPath1.getPath());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) sQLTimeoutException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&/zk^Akpkm+a{V4)I");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("&/zk^Akpkm+a{V4)I"));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      String string0 = "qX!cn";
      JSONPath jSONPath0 = JSONPath.compile("qX!cn");
      assertNotNull(jSONPath0);
      assertEquals("qX!cn", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qX!cn", "&/zk^Akpkm+a{V4)I");
      assertNotNull(sQLTimeoutException0);
      assertEquals("&/zk^Akpkm+a{V4)I", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: qX!cn", sQLTimeoutException0.toString());
      assertEquals("qX!cn", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("&/zk^Akpkm+a{V4)I", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: qX!cn", sQLTimeoutException0.toString());
      assertEquals("qX!cn", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException: qX!cn", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: qX!cn", sQLIntegrityConstraintViolationException0.getMessage());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) sQLIntegrityConstraintViolationException0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) jSONPath_JSONPathParser0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) sQLTimeoutException0;
      Object object0 = jSONPath0.getArrayItem((Object) null, 42);
      assertNull(object0);
      assertEquals("qX!cn", jSONPath0.getPath());
      
      objectArray0[8] = null;
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLIntegrityConstraintViolationException0, "[\"a string\",99]", objectArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"a string\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!`,9Y3W", "QJI@0d_)a7L");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: !`,9Y3W", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("!`,9Y3W", sQLInvalidAuthorizationSpecException0.getMessage());
      
      JSONPath jSONPath0 = new JSONPath("/annotatedSuperclass/type/annotatedSuperclass/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/2/type/declaredMethods/1/annotatedReturnType/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/methods/12/annotatedReturnType/type/rawType/declaredClasses/0/declaredConstructors/0/annotatedParameterTypes/0/type/rawType/classes/0/declaredMethods/5/annotatedParameterTypes/0/type/declaredConstructors/0/parameters/9/annotatedType");
      assertNotNull(jSONPath0);
      assertEquals("/annotatedSuperclass/type/annotatedSuperclass/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/2/type/declaredMethods/1/annotatedReturnType/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/methods/12/annotatedReturnType/type/rawType/declaredClasses/0/declaredConstructors/0/annotatedParameterTypes/0/type/rawType/classes/0/declaredMethods/5/annotatedParameterTypes/0/type/declaredConstructors/0/parameters/9/annotatedType", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      boolean boolean0 = jSONPath0.removePropertyValue(sQLFeatureNotSupportedException0, "/annotatedSuperclass/type/annotatedSuperclass/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/2/type/declaredMethods/1/annotatedReturnType/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/methods/12/annotatedReturnType/type/rawType/declaredClasses/0/declaredConstructors/0/annotatedParameterTypes/0/type/rawType/classes/0/declaredMethods/5/annotatedParameterTypes/0/type/declaredConstructors/0/parameters/9/annotatedType", true);
      assertFalse(boolean0);
      assertEquals("/annotatedSuperclass/type/annotatedSuperclass/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/2/type/declaredMethods/1/annotatedReturnType/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/methods/12/annotatedReturnType/type/rawType/declaredClasses/0/declaredConstructors/0/annotatedParameterTypes/0/type/rawType/classes/0/declaredMethods/5/annotatedParameterTypes/0/type/declaredConstructors/0/parameters/9/annotatedType", jSONPath0.getPath());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(26, (-4333), 4382);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("?;!.$f@ .o", "/stackTrace", true);
      assertNotNull(jSONPath_RlikeSegement0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) classLoader0, (Object) "Ig]z>,1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "[WcbCh";
      JSONPath jSONPath0 = JSONPath.compile("[WcbCh");
      assertNotNull(jSONPath0);
      assertEquals("[WcbCh", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) bigDecimal0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "?!\"P65s1si WZ =%X/%";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?!\"P65s1si WZ =%X/%");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string1 = "not";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "not");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but '!'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      aSMClassLoader0.setClassAssertionStatus("y!b9+OA", true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory1.classLoader);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory2);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-1791476485));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertNotNull(defaultJSONParser0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertNull(object0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory2);
      assertNotSame(aSMDeserializerFactory2, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory2, aSMDeserializerFactory0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.autoTypeAccept");
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: fastjson.parser.autoTypeAccept", sQLRecoverableException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLRecoverableException0.getMessage());
      
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(parserConfig0, 167);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      DataTruncation dataTruncation0 = new DataTruncation(84, false, false, 94, 94);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement(" -> ", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      JSONPath jSONPath0 = new JSONPath("Y");
      assertNotNull(jSONPath0);
      assertEquals("Y", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" -> ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  -> 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I<4m39QJI3ikuw", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "LIIKE");
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      sQLClientInfoException0.printStackTrace(printStream0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("^7NK1B-&0vobJHE^", "^7NK1B-&0vobJHE^");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("^7NK1B-&0vobJHE^", sQLNonTransientConnectionException0.getMessage());
      assertEquals("^7NK1B-&0vobJHE^", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ^7NK1B-&0vobJHE^", sQLNonTransientConnectionException0.toString());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "jj";
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.initCause(sQLClientInfoException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("^7NK1B-&0vobJHE^", sQLNonTransientConnectionException0.getMessage());
      assertEquals("^7NK1B-&0vobJHE^", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ^7NK1B-&0vobJHE^", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: ^7NK1B-&0vobJHE^", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("^7NK1B-&0vobJHE^", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("^7NK1B-&0vobJHE^", sQLNonTransientConnectionException1.getMessage());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      
      stringArray0[1] = "LIIKE";
      stringArray0[2] = "LIIKE";
      stringArray0[3] = "jj";
      stringArray0[4] = "jj";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(sQLNonTransientConnectionException0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(5, stringArray0.length);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("^7NK1B-&0vobJHE^", sQLNonTransientConnectionException0.getMessage());
      assertEquals("^7NK1B-&0vobJHE^", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ^7NK1B-&0vobJHE^", sQLNonTransientConnectionException0.toString());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      
      Float float0 = new Float((-828.2328F));
      assertEquals((-828.2328F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.0E9);
      assertEquals(1.0E9F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) float1, "[{\"=\":true},false]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"=\":true}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath0 = new JSONPath("error", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("error", jSONPath0.getPath());
      
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Field field0 = ParserConfig.getFieldFromCache("fastjson.parser.autoTypeSupport", hashMap0);
      assertNull(field0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.safeMode", class1, class1, class0, (Field) null, (-1717986916), (-1717986916), 1);
      assertNotNull(fieldInfo0);
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-1717986916), fieldInfo0.serialzeFeatures);
      assertEquals(1, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals("fastjson.parser.safeMode", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertNotNull(beanContext0);
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-1717986916), fieldInfo0.serialzeFeatures);
      assertEquals(1, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals("fastjson.parser.safeMode", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertEquals("fastjson.parser.safeMode", beanContext0.getName());
      assertEquals((-1717986916), beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      
      Field field1 = beanContext0.getField();
      assertNull(field1);
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-1717986916), fieldInfo0.serialzeFeatures);
      assertEquals(1, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals("fastjson.parser.safeMode", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertEquals("fastjson.parser.safeMode", beanContext0.getName());
      assertEquals((-1717986916), beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "error", "fastjson.parser.deny", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      String string0 = "[[]]";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature[] featureArray0 = new Feature[10];
      parserConfig0.setJacksonCompatible(true);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("[[]]", "[[]]", parserConfig0, 1583, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 2, line 1, column 3[[]]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("!wz3s#m+v1");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: !wz3s#m+v1", sQLTimeoutException0.toString());
      assertEquals("!wz3s#m+v1", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      boolean boolean0 = JSONPath.set((Object) sQLTimeoutException0, "between", (Object) "!wz3s#m+v1");
      assertTrue(boolean0);
      assertEquals("java.sql.SQLTimeoutException: !wz3s#m+v1", sQLTimeoutException0.toString());
      assertEquals("!wz3s#m+v1", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "s#9y=?>qkfxc27d";
      stringArray0[1] = "U?X%$ V]^";
      int[] intArray0 = new int[8];
      intArray0[0] = 1019;
      intArray0[1] = 1019;
      intArray0[2] = 1019;
      intArray0[3] = 1019;
      intArray0[4] = 1019;
      intArray0[5] = 1019;
      intArray0[6] = 1019;
      intArray0[7] = 40;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {1019, 1019, 1019, 1019, 1019, 1019, 1019, 40}, intArray0);
      assertEquals(8, intArray0.length);
      
      JSONPath jSONPath0 = new JSONPath("}");
      assertNotNull(jSONPath0);
      assertEquals("}", jSONPath0.getPath());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTimeoutException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTimeoutException: !wz3s#m+v1", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: !wz3s#m+v1", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: !wz3s#m+v1", sQLTimeoutException0.toString());
      assertEquals("!wz3s#m+v1", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      int int0 = jSONPath0.size((Object) "U?X%$ V]^");
      assertEquals(2, int0);
      assertEquals("}", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "^7NK1B-&0vobJHE^";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("^7NK1B-&0vobJHE^", "^7NK1B-&0vobJHE^");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("^7NK1B-&0vobJHE^", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("^7NK1B-&0vobJHE^", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ^7NK1B-&0vobJHE^", sQLNonTransientConnectionException0.toString());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean0);
      
      Object object0 = JSONPath.eval((Object) "^7NK1B-&0vobJHE^", "$");
      assertEquals("^7NK1B-&0vobJHE^", object0);
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("e_!EEIwGP&m~P*", serializeConfig0, (ParserConfig) null);
      assertNotNull(jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("e_!EEIwGP&m~P*", jSONPath0.getPath());
      
      Class<BigInteger> class0 = BigInteger.class;
      ObjectSerializer objectSerializer0 = serializeConfig0.getObjectWriter(class0);
      assertNotNull(objectSerializer0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : e_!EEIwGP&m~P*
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      DataTruncation dataTruncation0 = new DataTruncation(84, false, false, 94, 94);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement(" -> ", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" -> ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger1, bigInteger0);
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "[\"a string\",null]", "[\"a string\",null]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"a string\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("=");
      assertNotNull(jSONPath0);
      assertEquals("=", jSONPath0.getPath());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      BigDecimal bigDecimal0 = new BigDecimal(1153291637701043748L);
      assertNotNull(bigDecimal0);
      assertEquals((short)26148, bigDecimal0.shortValue());
      assertEquals((byte)36, bigDecimal0.byteValue());
      
      Object object0 = JSONPath.extract("", "=");
      assertNull(object0);
      
      JSONPath jSONPath1 = new JSONPath("=");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("=", jSONPath1.getPath());
      
      JSONPath jSONPath2 = JSONPath.compile("=");
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertEquals("=", jSONPath2.getPath());
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'=S 1Th", "");
      assertNotNull(sQLTimeoutException0);
      assertEquals("'=S 1Th", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: '=S 1Th", sQLTimeoutException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("'=S 1Th", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: '=S 1Th", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLTimeoutException: '=S 1Th", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLTimeoutException: '=S 1Th", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("scanFieldBigInteger", sQLTransientConnectionException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("'=S 1Th", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: '=S 1Th", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLTimeoutException: '=S 1Th", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLTimeoutException: '=S 1Th", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: scanFieldBigInteger", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("scanFieldBigInteger", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLInvalidAuthorizationSpecException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/3");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/3", jSONPath0.getPath());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance_deep;
      assertFalse(jSONPath_WildCardSegment1.equals((Object)jSONPath_WildCardSegment0));
      assertNotNull(jSONPath_WildCardSegment1);
      assertNotSame(jSONPath_WildCardSegment1, jSONPath_WildCardSegment0);
      
      JSONPath jSONPath1 = JSONPath.compile("E`l");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("E`l", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLWarning sQLWarning0 = new SQLWarning("g0WGZtA", sQLSyntaxErrorException0);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("g0WGZtA", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: g0WGZtA", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/3", "/stackTrace/3", (-3699), sQLWarning0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("g0WGZtA", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: g0WGZtA", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("/stackTrace/3", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/3", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/3", sQLTimeoutException0.toString());
      assertEquals((-3699), sQLTimeoutException0.getErrorCode());
      
      boolean boolean0 = jSONPath1.removePropertyValue(sQLTimeoutException0, "g0WGZtA", true);
      assertFalse(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("E`l", jSONPath1.getPath());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("g0WGZtA", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: g0WGZtA", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("/stackTrace/3", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/3", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/3", sQLTimeoutException0.toString());
      assertEquals((-3699), sQLTimeoutException0.getErrorCode());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath jSONPath2 = JSONPath.compile("(0a^;/");
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertEquals("(0a^;/", jSONPath2.getPath());
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      int int0 = (-551);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(65, 65, 65, 65, (-551));
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.setWeekDate((-551), (-3497), (-1950));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid dayOfWeek: -1950
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[0] = "qUe2Z!k:{*2XB RB";
      stringArray0[1] = "l6kn7gQi7";
      stringArray0[2] = "?36&o^F[eJ{dg7Bw";
      stringArray0[3] = "([C)Ljava/util/Date;";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(4, stringArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("l6kn7gQi7");
      assertNotNull(jSONPath0);
      assertEquals("l6kn7gQi7", jSONPath0.getPath());
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      boolean boolean1 = jSONPath0.removePropertyValue(jSONPath_MultiIndexSegment0, "qUe2Z!k:{*2XB RB", true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("l6kn7gQi7", jSONPath0.getPath());
      
      boolean boolean2 = jSONPath0.removePropertyValue("([C)Ljava/util/Date;", "l6kn7gQi7", false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("l6kn7gQi7", jSONPath0.getPath());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertFalse(javaBeanInfo0.kotlin);
      
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertNotNull(javaBeanDeserializer0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertFalse(javaBeanInfo0.kotlin);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("U}]qVj6Xge/4f,~75j", javaBeanDeserializer0, false);
      assertNotNull(jSONPath_ValueSegment0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertFalse(javaBeanInfo0.kotlin);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 70, 0, sQLNonTransientConnectionException0);
      assertNotNull(dataTruncation0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.safeMode", (String) null, (int[]) null, dataTruncation0);
      assertNotNull(batchUpdateException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("fastjson.parser.safeMode", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: fastjson.parser.safeMode", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      boolean boolean3 = jSONPath_ValueSegment0.apply(jSONPath0, "([C)Ljava/util/Date;", dataTruncation0, batchUpdateException0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertFalse(javaBeanInfo0.kotlin);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("fastjson.parser.safeMode", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: fastjson.parser.safeMode", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("l6kn7gQi7", jSONPath0.getPath());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      JSONPath jSONPath0 = JSONPath.compile("J0\"/RS");
      assertNotNull(jSONPath0);
      assertEquals("J0\"/RS", jSONPath0.getPath());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      
      MathContext mathContext1 = MathContext.UNLIMITED;
      assertNotNull(mathContext1);
      assertSame(mathContext1, mathContext0);
      
      BigDecimal bigDecimal3 = bigDecimal2.add(bigDecimal1, mathContext1);
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal0));
      assertTrue(bigDecimal3.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal3);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertSame(mathContext1, mathContext0);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal4 = bigDecimal1.stripTrailingZeros();
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertTrue(bigDecimal1.equals((Object)bigDecimal3));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal4.equals((Object)bigDecimal2));
      assertTrue(bigDecimal4.equals((Object)bigDecimal1));
      assertTrue(bigDecimal4.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal4);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((short)0, bigDecimal4.shortValue());
      assertEquals((byte)0, bigDecimal4.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal4);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal2);
      
      Byte byte0 = new Byte((byte)64);
      assertEquals((byte)64, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = JSONPath.eqNotNull(bigInteger1, bigDecimal2);
      assertFalse(boolean0);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal3));
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal4));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal4);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(bigInteger1, bigInteger0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("*", 10.0, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("deny");
      assertNotNull(defaultJSONParser0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      // Undeclared exception!
      try { 
        jSONPath1.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      int int0 = 1583;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSONPath.read("[\"a string\",99]", "[\"a string\",99]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"a string\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&/zk^Akpkm+a{V4)I");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("&/zk^Akpkm+a{V4)I");
      assertNotNull(jSONPath0);
      assertEquals("&/zk^Akpkm+a{V4)I", jSONPath0.getPath());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("&/zk^Akpkm+a{V4)I", 1459860845934817624L, jSONPath_Operator1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_IntOpSegement0);
      
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, (Object) null, jSONPath_Operator0, batchUpdateException0);
      assertFalse(boolean0);
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertEquals("&/zk^Akpkm+a{V4)I", jSONPath0.getPath());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNotSame(jSONPath_Operator0, jSONPath_Operator1);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("LC['Q");
      assertNotNull(jSONPath0);
      assertEquals("LC['Q", jSONPath0.getPath());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[9];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      int int0 = JSONPath.size(object0, "LC['Q");
      assertEquals((-1), int0);
      
      int int1 = jSONPath0.size((Object) "LC['Q");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals("LC['Q", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[\"a string\",false]");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("[\"a string\",false]");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser1.filterRest((JSONPath.Filter) null);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNull(jSONPath_Filter0);
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("[\"a string\",false]");
      assertNotNull(jSONPath0);
      assertEquals("[\"a string\",false]", jSONPath0.getPath());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(90, true, true, 93, 22);
      assertNotNull(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[\"a string\",false]";
      stringArray0[1] = "[\"a string\",false]";
      stringArray0[2] = "[\"a string\",false]";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_MaxSegment0, stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"a string\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(57);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertNotNull(map0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m7ytdpud\"Op*`qfunN%");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jsonpath can not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("org.joda.time.LocalDateTime", "jaHd2US;", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("jaHd2US;");
      assertNotNull(jSONPath0);
      assertEquals("jaHd2US;", jSONPath0.getPath());
      
      boolean boolean2 = jSONPath_StringOpSegement0.apply(jSONPath0, "org.joda.time.LocalDateTime", fileSystemHandling0, jSONPath_Operator0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals("jaHd2US;", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("jaHd2US;");
      assertNotNull(jSONPath_JSONPathParser0);
      
      serializeConfig0.clearSerializers();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1580386065683472715L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath_JSONPathParser0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath1.getPath());
      
      // Undeclared exception!
      jSONPath1.set((Object) bigDecimal0, (Object) "fastjson.parser.deny.internal", true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, 5614464919154503228L);
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny.internal");
      assertNotNull(jSONPath_NullSegement0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 5614464919154503228L;
      longArray0[1] = 5614464919154503228L;
      longArray0[2] = 5614464919154503228L;
      longArray0[0] = 5614464919154503228L;
      longArray0[4] = 5614464919154503228L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.parser.autoTypeSupport", longArray0, true);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {5614464919154503228L, 5614464919154503228L, 5614464919154503228L, 0L, 5614464919154503228L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 5614464919154503228L;
      UUID uUID0 = MockUUID.fromString("[S");
      assertNotNull(uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) uUID0, "fastjson.parser.safeMode", (Object[]) longArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path fastjson.parser.safeMode
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      stringArray0[0] = "com.alibaba.fastjson.JSONPah";
      SerializeConfig serializeConfig0 = new SerializeConfig(62);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPah", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("com.alibaba.fastjson.JSONPah", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/stackTrace/6", "g|NH&V&R8C^V");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("/stackTrace/6", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("g|NH&V&R8C^V", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: /stackTrace/6", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      Pattern pattern0 = Pattern.compile("[{\":\":false}]", 103);
      assertNotNull(pattern0);
      assertEquals("[{\":\":false}]", pattern0.pattern());
      assertEquals("[{\":\":false}]", pattern0.toString());
      assertEquals(103, pattern0.flags());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.EQ;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("K8%O>`x)AS=7fl}", pattern0, jSONPath_Operator1);
      assertNotNull(jSONPath_RegMatchSegement0);
      assertEquals("[{\":\":false}]", pattern0.pattern());
      assertEquals("[{\":\":false}]", pattern0.toString());
      assertEquals(103, pattern0.flags());
      
      JSONPath jSONPath1 = JSONPath.compile("d");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("d", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean1 = jSONPath_RegMatchSegement0.apply(jSONPath0, "K8%O>`x)AS=7fl}", parserConfig0, jSONPath_Operator0);
      assertFalse(boolean1);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertTrue(boolean1 == boolean0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("com.alibaba.fastjson.JSONPah", jSONPath0.getPath());
      assertEquals("[{\":\":false}]", pattern0.pattern());
      assertEquals("[{\":\":false}]", pattern0.toString());
      assertEquals(103, pattern0.flags());
      assertNotSame(jSONPath0, jSONPath1);
      assertSame(jSONPath_Operator0, jSONPath_Operator1);
      assertSame(jSONPath_Operator1, jSONPath_Operator0);
      
      jSONPath1.deepSet(parserConfig0, "fastjson.parser.autoTypeSupport", 62, (Object) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$IntObjInSegement", "J\"XX<=4n2[<c2i", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("J\"XX<=4n2[<c2i", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("J\"XX<=4n2[<c2i", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(3814);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Short short0 = new Short((short) (-188));
      assertEquals((short) (-188), (short)short0);
      assertNotNull(short0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.deny.internal", "fastjson.parser.safeMode");
      assertNotNull(sQLTransientException0);
      assertEquals("fastjson.parser.deny.internal", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: fastjson.parser.deny.internal", sQLTransientException0.toString());
      
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, short0, sQLTransientException0);
      assertTrue(boolean0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("J\"XX<=4n2[<c2i", jSONPath0.getPath());
      assertEquals("fastjson.parser.deny.internal", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: fastjson.parser.deny.internal", sQLTransientException0.toString());
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("WsiB", jSONPath_ArrayAccessSegment0, jSONPath_Operator1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_RefOpSegement0);
      
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Q");
      assertNotNull(jSONPath0);
      assertEquals("Q", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("expect '[', but ", clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("qM", "expect '[', but ", 488);
      assertNotNull(sQLTransientException0);
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("expect '[', but ", sQLTransientException0.getSQLState());
      
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(11, roundingMode0);
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) 488, mathContext0);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-24), bigDecimal0.byteValue());
      assertEquals((short)488, bigDecimal0.shortValue());
      
      // Undeclared exception!
      JSONPath.remove((Object) bigDecimal0, "sq");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$StringOpSegement", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath1.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(map0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath1.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("B~k9Qvb%");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("o;%AB`!Ck$pg", "fastjson.parser.autoTypeSupport", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath2 = JSONPath.compile("6\"[nBQ^qN$");
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertEquals("6\"[nBQ^qN$", jSONPath2.getPath());
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      Double double0 = new Double(95.0);
      assertEquals(95.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Field field0 = ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONPath$RegMatchSe1ement", hashMap0);
      assertNull(field0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath2, double0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("[]");
      assertNotNull(jSONPath0);
      assertEquals("[]", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      parserConfig0.setJacksonCompatible(true);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      stringArray0[2] = "fastjson.parser.deny";
      stringArray0[3] = "fastjson.parser.deny.internal";
      stringArray0[4] = "syntax error, position at ";
      stringArray0[5] = "fastjson.parser.autoTypeAccept";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(classLoader0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : syntax error, position at 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("!wz3s#m+v1");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: !wz3s#m+v1", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("!wz3s#m+v1", sQLTimeoutException0.getMessage());
      
      boolean boolean0 = JSONPath.set((Object) sQLTimeoutException0, "between", (Object) "!wz3s#m+v1");
      assertTrue(boolean0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: !wz3s#m+v1", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("!wz3s#m+v1", sQLTimeoutException0.getMessage());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "s#9y=?>qkfxc27d";
      stringArray0[1] = "U?X%$ V]^";
      stringArray0[2] = "between";
      stringArray0[3] = "between";
      stringArray0[4] = "!wz3s#m+v1";
      stringArray0[5] = "between";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement(":", ":", "between", stringArray0, true);
      assertNotNull(jSONPath_MatchSegement0);
      assertEquals(6, stringArray0.length);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("between", serializeConfig0, (ParserConfig) null);
      assertNotNull(jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("between", jSONPath0.getPath());
      
      boolean boolean1 = jSONPath_MatchSegement0.apply(jSONPath0, (Object) null, ":", "U?X%$ V]^");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, stringArray0.length);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("between", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("~_$N;8oQjxI", (-6892L), jSONPath_Operator0);
      assertNotNull(jSONPath_IntOpSegement0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-4154), 19, 19);
      assertNotNull(jSONPath_RangeSegment0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Field field0 = ParserConfig.getFieldFromCache("!wz3s#m+v1", hashMap0);
      assertNull(field0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "U?X%$ V]^", (Object) null);
      assertNotNull(arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(219, arrayList0.size());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("between", jSONPath0.getPath());
      
      boolean boolean2 = jSONPath_IntOpSegement0.apply(jSONPath0, (Object) null, arrayList0, ":");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(219, arrayList0.size());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("between", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("K=#'zjBteb^}s");
      assertNotNull(jSONPath0);
      assertEquals("K=#'zjBteb^}s", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("K=#'zjBteb^}s");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      Feature[] featureArray0 = new Feature[1];
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("^=e!3h<#F");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      jSONPath_JSONPathParser0.readOp();
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[*\"");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("between", "s>kUTTDL%HNK`\nx");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: between", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("between", sQLTransactionRollbackException0.getMessage());
      
      String string0 = sQLTransactionRollbackException0.getLocalizedMessage();
      assertEquals("between", string0);
      assertNotNull(string0);
      assertEquals("s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: between", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("between", sQLTransactionRollbackException0.getMessage());
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("between", (-1014497654951707614L), 5614464919154503228L, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = new JSONPath("between");
      assertNotNull(jSONPath0);
      assertEquals("between", jSONPath0.getPath());
      
      Float float0 = new Float((float) (-1014497654951707614L));
      assertEquals((-1.01449766E18F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLTransactionRollbackException0, (Object) null, float0);
      assertFalse(boolean0);
      assertEquals("s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: between", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("between", sQLTransactionRollbackException0.getMessage());
      assertEquals("between", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("=5mp<Jm>`V-+0Fp");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      jSONPath_JSONPathParser1.readOp();
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotNull(jSONPath_Segment0);
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", 3605L, 3605L, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath jSONPath0 = new JSONPath("8B'Y7$q)fPx-?e/O");
      assertNotNull(jSONPath0);
      assertEquals("8B'Y7$q)fPx-?e/O", jSONPath0.getPath());
      
      Long long0 = Long.getLong("8B'Y7$q)fPx-?e/O", (Long) null);
      assertNull(long0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLIntegrityConstraintViolationException", sQLDataException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("=", "!wz3s#m+v1", sQLDataException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLIntegrityConstraintViolationException", sQLDataException0.toString());
      assertEquals("!wz3s#m+v1", sQLTransactionRollbackException0.getSQLState());
      assertEquals("=", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: =", sQLTransactionRollbackException0.toString());
      
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLTransactionRollbackException0, true);
      assertFalse(boolean0);
      assertEquals("8B'Y7$q)fPx-?e/O", jSONPath0.getPath());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLIntegrityConstraintViolationException", sQLDataException0.toString());
      assertEquals("!wz3s#m+v1", sQLTransactionRollbackException0.getSQLState());
      assertEquals("=", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: =", sQLTransactionRollbackException0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)3;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((byte)3));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      JSONPath.arrayAdd((Object) serializeConfig0, "fastjson.parser.autoTypeAccept", (Object[]) null);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      jSONPath0.deepGetPropertyValues(stack0, stack0);
      assertFalse(stack0.contains("fastjson.parser.safeMode"));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      Set<?> set0 = JSONPath.keySet((Object) stack0, "com.alibaba.fastjson.parser.SymbolTable");
      assertNull(set0);
      assertFalse(stack0.contains("fastjson.parser.safeMode"));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNull(jSONPath_Segment0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment1 = new JSONPath.MultiIndexSegment(intArray0);
      assertFalse(jSONPath_MultiIndexSegment1.equals((Object)jSONPath_MultiIndexSegment0));
      assertNotNull(jSONPath_MultiIndexSegment1);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      
      JSONPath jSONPath0 = new JSONPath("=");
      assertNotNull(jSONPath0);
      assertEquals("=", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("=8IEe.", (Throwable) null);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: =8IEe.", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("=8IEe.", sQLFeatureNotSupportedException0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException("CTS,z", sQLFeatureNotSupportedException0);
      assertNotNull(sQLDataException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: =8IEe.", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("=8IEe.", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLDataException: CTS,z", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("CTS,z", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("=8IEe.", "CTS,z", 3, intArray0, sQLDataException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: =8IEe.", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("=8IEe.", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLDataException: CTS,z", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("CTS,z", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: =8IEe.", batchUpdateException0.toString());
      assertEquals(3, batchUpdateException0.getErrorCode());
      assertEquals("=8IEe.", batchUpdateException0.getMessage());
      assertEquals("CTS,z", batchUpdateException0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("slT!e,Ncls(Sr;bF-f", batchUpdateException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: =8IEe.", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("=8IEe.", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLDataException: CTS,z", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("CTS,z", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: =8IEe.", batchUpdateException0.toString());
      assertEquals(3, batchUpdateException0.getErrorCode());
      assertEquals("=8IEe.", batchUpdateException0.getMessage());
      assertEquals("CTS,z", batchUpdateException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("slT!e,Ncls(Sr;bF-f", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: slT!e,Ncls(Sr;bF-f", sQLTransactionRollbackException0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = jSONPath0.set((Object) sQLTransactionRollbackException0, (Object) mockGregorianCalendar0, true);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("=", jSONPath0.getPath());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: =8IEe.", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("=8IEe.", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLDataException: CTS,z", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("CTS,z", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: =8IEe.", batchUpdateException0.toString());
      assertEquals(3, batchUpdateException0.getErrorCode());
      assertEquals("=8IEe.", batchUpdateException0.getMessage());
      assertEquals("CTS,z", batchUpdateException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("slT!e,Ncls(Sr;bF-f", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: slT!e,Ncls(Sr;bF-f", sQLTransactionRollbackException0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, (JSONPath.Filter) null, false);
      assertNotNull(jSONPath_FilterGroup0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=");
      assertNotNull(jSONPath0);
      assertEquals("=", jSONPath0.getPath());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=", "=");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("=", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: =", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("=", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: =", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("=", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      boolean boolean0 = jSONPath0.set((Object) sQLInvalidAuthorizationSpecException0, (Object) sQLTimeoutException0, false);
      assertFalse(boolean0);
      assertEquals("=", jSONPath0.getPath());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("=", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: =", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("=", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: =", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("=", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      assertNotNull(jSONPath_JSONPathParser0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0.0, mathContext0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) bigDecimal1, "=");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("ln$u");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath1 = JSONPath.compile("Qt");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("Qt", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Qt", "Qt", 120);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(120, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Qt", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Qt", sQLSyntaxErrorException0.toString());
      assertEquals("Qt", sQLSyntaxErrorException0.getSQLState());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      Long long0 = new Long((-918L));
      assertEquals((-918L), (long)long0);
      assertNotNull(long0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      int[] intArray0 = new int[10];
      intArray0[0] = 120;
      intArray0[1] = 120;
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {120, 120, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(120);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath2 = new JSONPath("/stackTrace/4", serializeConfig0, (ParserConfig) null);
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("/stackTrace/4", jSONPath2.getPath());
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath2, jSONPath2);
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNull(object0);
      assertEquals("Qt", jSONPath0.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("/stackTrace/4", jSONPath2.getPath());
      assertNotSame(jSONPath0, jSONPath2);
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotNull(jSONArray0);
      assertArrayEquals(new int[] {120, 120, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(10, intArray0.length);
      assertEquals(10, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("Qt", jSONPath0.getPath());
      assertNotSame(jSONPath0, jSONPath2);
      assertNotSame(jSONPath0, jSONPath1);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(42);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("", (String[]) null, false);
      assertNotNull(jSONPath_StringInSegement0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLFeatureNotSupportedException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLFeatureNotSupportedException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        jSONPath_StringInSegement0.apply(jSONPath1, sQLRecoverableException0, jSONPath1, jSONArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      Object object0 = JSONPath.read("[{\"end must greater than or equals start. start \":{},\"/stackTrace/2\":{},\"com.alibaba.fastjson.JSONPath\":99}]", "fastjson.parser.autoTypeAccept");
      assertNotNull(object0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.deny", 1583, jSONPath_Operator0);
      assertNotNull(jSONPath_IntOpSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("zyZ^Qm\">xKp");
      assertNotNull(jSONPath0);
      assertEquals("zyZ^Qm\">xKp", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "LocalVariableTypeTable";
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("LocalVariableTypeTable", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("LocalVariableTypeTable", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("kn{?|$D\"wM.S@E2h");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("kn{?|$D\"wM.S@E2h", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kn{?|$D\"wM.S@E2h");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean1 = jSONReaderScanner0.isBlankInput();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(aSMDeserializerFactory0, jSONReaderScanner0, parserConfig0);
      assertNotNull(defaultJSONParser0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals("error", jSONReaderScanner0.tokenName());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) "/stackTrace/11", "/stackTrace/11");
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      int int0 = javaBeanSerializer0.getSize("/stackTrace/11");
      assertEquals(0, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<AfterFilter> list0 = javaBeanSerializer0.getAfterFilters();
      assertNotNull(list0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "EQ";
      MockThrowable mockThrowable0 = new MockThrowable("EQ");
      assertNotNull(mockThrowable0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/11", "EQ", mockThrowable0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("EQ", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: EQ", mockThrowable0.toString());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/11", sQLTimeoutException0.toString());
      assertEquals("EQ", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/11", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "EQ";
      stringArray0[1] = "/stackTrace/11";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLTimeoutException0, stringArray0);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(2, stringArray0.length);
      assertEquals("EQ", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: EQ", mockThrowable0.toString());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/11", sQLTimeoutException0.toString());
      assertEquals("EQ", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/11", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.size());
      
      List<Object> list1 = javaBeanSerializer0.getFieldValues(mockThrowable0);
      assertNotNull(list1);
      assertFalse(list1.contains("/stackTrace/11"));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("EQ", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: EQ", mockThrowable0.toString());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("EQ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNull(string0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      String string1 = "/stackTrace/8";
      Set<?> set0 = JSONPath.keySet((Object) sQLIntegrityConstraintViolationException0, "/stackTrace/8");
      assertNotNull(set0);
      assertFalse(set0.contains("/stackTrace/8"));
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals(5, set0.size());
      assertFalse(set0.isEmpty());
      
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/stackTrace/8", stringArray0, false);
      assertNotNull(jSONPath_StringInSegement0);
      assertEquals(0, stringArray0.length);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, (SerializeConfig) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fastjson.parser.safeMode";
      stringArray0[1] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(2, stringArray0.length);
      
      JSONPath jSONPath1 = JSONPath.compile("'");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("'", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      long[] longArray0 = new long[7];
      longArray0[0] = (-7484549517624850491L);
      longArray0[1] = 1099511628211L;
      longArray0[2] = 1853L;
      longArray0[3] = 1698504441317515818L;
      longArray0[4] = 5326785402221037210L;
      longArray0[5] = (-2051L);
      longArray0[6] = 861L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("I8W.*g`R", longArray0, false);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {(-7484549517624850491L), 1099511628211L, 1853L, 1698504441317515818L, 5326785402221037210L, (-2051L), 861L}, longArray0);
      assertEquals(7, longArray0.length);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, "I8W.*g`R", jSONPath_MinSegment0, sQLSyntaxErrorException0);
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertArrayEquals(new long[] {(-7484549517624850491L), 1099511628211L, 1853L, 1698504441317515818L, 5326785402221037210L, (-2051L), 861L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotSame(jSONPath0, jSONPath1);
      
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertFalse(javaBeanInfo0.kotlin);
      
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertFalse(javaBeanInfo0.kotlin);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        jSONPath1.arrayAdd((Object) javaBeanDeserializer0, (Object[]) javaBeanInfo0.creatorConstructorParameterTypes);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("no match enum alue, ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath";
      stringArray0[2] = "{P";
      stringArray0[3] = "com.alibaba.fastjson.JSONPath";
      stringArray0[4] = "com.alibaba.fastjson.JSONPath";
      stringArray0[5] = "/cause/stackTrace/12";
      stringArray0[6] = "com.alibaba.fastjson.JSONPath";
      stringArray0[7] = "b/vR'";
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_JSONPathParser0, "{", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$JSONPathParser
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      String string0 = "fastjson.parser.safeMode";
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fastjson.parser.safeMode";
      stringArray0[1] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(2, stringArray0.length);
      
      JSONPath jSONPath1 = JSONPath.compile("'");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("'", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      long[] longArray0 = new long[7];
      longArray0[0] = (-7484549517624850491L);
      longArray0[1] = 1099511628211L;
      longArray0[2] = 1853L;
      longArray0[3] = 1698504441317515818L;
      longArray0[4] = 5326785402221037210L;
      longArray0[5] = (-2051L);
      longArray0[6] = 861L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("I8W.*g`R", longArray0, false);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {(-7484549517624850491L), 1099511628211L, 1853L, 1698504441317515818L, 5326785402221037210L, (-2051L), 861L}, longArray0);
      assertEquals(7, longArray0.length);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, "I8W.*g`R", jSONPath_MinSegment0, sQLSyntaxErrorException0);
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertArrayEquals(new long[] {(-7484549517624850491L), 1099511628211L, 1853L, 1698504441317515818L, 5326785402221037210L, (-2051L), 861L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotSame(jSONPath0, jSONPath1);
      
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertFalse(javaBeanInfo0.kotlin);
      
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertFalse(javaBeanInfo0.kotlin);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      // Undeclared exception!
      try { 
        jSONPath1.arrayAdd((Object) javaBeanDeserializer0, (Object[]) javaBeanInfo0.creatorConstructorParameterTypes);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      BigDecimal bigDecimal0 = BigDecimal.valueOf(1.0);
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = bigDecimal0.plus();
      assertNotNull(bigDecimal1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/6");
      assertNotNull(jSONPath0);
      assertEquals("/cause/stackTrace/6", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("%Uub\"wX`).2");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("%Uub\"wX`).2", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: %Uub\"wX`).2", sQLFeatureNotSupportedException0.toString());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) bigDecimal1;
      objectArray0[2] = (Object) jSONPath0;
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLFeatureNotSupportedException0, "/stackTrace", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("KJgc>uS");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      assertNotNull(jSONPath0);
      assertEquals(".", jSONPath0.getPath());
      
      String string0 = null;
      String string1 = null;
      int int0 = (-679);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "V~'5wd1sWhB(;", (-679), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      Object object0 = JSONPath.extract("[\"a string\"]", "[\"a string\"]", parserConfig0, 1583, featureArray0);
      assertNull(object0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(10, featureArray0.length);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      Long long2 = new Long((-1580386065683472715L));
      assertEquals((-1580386065683472715L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      assertNotNull(jSONPath_JSONPathParser0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "fastjson.parser.safeMode", "['CQ5i%{M]jPG$G^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : ['CQ5i%{M]jPG$G^
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "J'Jn,";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("J'Jn,");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'Jn\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[6];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Feature feature0 = Feature.CustomMapDeserializer;
      Feature feature1 = Feature.IgnoreNotMatch;
      Feature[] featureArray0 = new Feature[5];
      Feature feature2 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature2;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature1;
      Map<String, Object> map0 = JSONPath.paths((Object) aSMDeserializerFactory0);
      assertNotNull(map0);
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
      assertSame(classLoader0, classLoader1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '\u0000';
      longArray0[1] = 310L;
      longArray0[2] = 310L;
      longArray0[4] = 310L;
      longArray0[5] = 310L;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("_", (-1.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("_");
      assertNotNull(jSONPath0);
      assertEquals("_", jSONPath0.getPath());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Field field0 = ParserConfig.getFieldFromCache("_", hashMap0);
      assertNull(field0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, feature0, (Object) null, aSMClassLoader0);
      assertFalse(boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertFalse(feature0.equals((Object)feature2));
      assertEquals("_", jSONPath0.getPath());
      assertSame(classLoader0, classLoader1);
      assertNotSame(feature0, feature1);
      assertNotSame(feature0, feature2);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      Object object0 = jSONPath0.eval((Object) jSONPath_SizeSegment0);
      assertNotNull(object0);
      assertEquals("_", jSONPath0.getPath());
      assertSame(jSONPath_SizeSegment0, object0);
      assertSame(object0, jSONPath_SizeSegment0);
      
      Pattern pattern0 = Pattern.compile("_");
      assertNotNull(pattern0);
      assertEquals("_", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("_", pattern0.toString());
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.And;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = null;
      try {
        jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement((String) null, pattern0, jSONPath_Operator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/3");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/3", jSONPath0.getPath());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.deny.internal");
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjson.parser.deny.internal", sQLNonTransientConnectionException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Yqk1<<a|", sQLNonTransientConnectionException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjson.parser.deny.internal", sQLNonTransientConnectionException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Yqk1<<a|", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Yqk1<<a|", sQLInvalidAuthorizationSpecException0.getMessage());
      
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("t6eJ`;c");
      assertNotNull(jSONPath0);
      assertEquals("t6eJ`;c", jSONPath0.getPath());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = (-2334);
      intArray0[2] = 3;
      intArray0[3] = 3;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {3, (-2334), 3, 3}, intArray0);
      assertEquals(4, intArray0.length);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("=", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath1 = new JSONPath("=", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("=", jSONPath1.getPath());
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("LIKE");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.deny.internal", "fastjson.parser.autoTypeSupport");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.deny.internal", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("fastjson.parser.autoTypeSupport", sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("t6eJ`;c", "3|", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: t6eJ`;c", sQLRecoverableException0.toString());
      assertEquals("t6eJ`;c", sQLRecoverableException0.getMessage());
      assertEquals("3|", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.deny.internal", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("fastjson.parser.autoTypeSupport", sQLIntegrityConstraintViolationException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException0);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.SQLRecoverableException: t6eJ`;c", sQLRecoverableException0.toString());
      assertEquals("t6eJ`;c", sQLRecoverableException0.getMessage());
      assertEquals("3|", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: t6eJ`;c", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: t6eJ`;c", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.deny.internal", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("fastjson.parser.autoTypeSupport", sQLIntegrityConstraintViolationException0.getSQLState());
      
      Short short0 = new Short((short)850);
      assertEquals((short)850, (short)short0);
      assertNotNull(short0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(61, 268, (-2579), (-3381), 13);
      assertNotNull(mockGregorianCalendar0);
      
      Double double0 = new Double((-2579));
      assertEquals((-2579.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = jSONPath1.containsValue((Object) mockGregorianCalendar0, (Object) double0);
      assertFalse(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=61,MONTH=268,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2579,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3381,HOUR_OF_DAY=-3381,MINUTE=13,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("=", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("dd-MM-yyyy", (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("dd-MM-yyyy", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: dd-MM-yyyy", sQLTransientConnectionException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/6", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("dd-MM-yyyy");
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNotNull(sQLTimeoutException1);
      assertEquals("java.sql.SQLTimeoutException: dd-MM-yyyy", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("dd-MM-yyyy", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      
      boolean boolean0 = jSONPath0.containsValue((Object) sQLTimeoutException1, (Object) sQLRecoverableException0);
      assertFalse(boolean0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("/stackTrace/6", jSONPath0.getPath());
      assertEquals("java.sql.SQLTimeoutException: dd-MM-yyyy", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("dd-MM-yyyy", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      assertNotNull(jSONPath_MaxSegment0);
      
      String string0 = "*";
      // Undeclared exception!
      try { 
        Pattern.compile("*");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      BigDecimal bigDecimal0 = BigDecimal.valueOf(1.0);
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = bigDecimal0.plus();
      assertNotNull(bigDecimal1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("%Uub\"wX`).2");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: %Uub\"wX`).2", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("%Uub\"wX`).2", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) bigDecimal1;
      Class<SQLWarning> class0 = SQLWarning.class;
      String[] stringArray0 = new String[0];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("can not cast oracle.sql.TIMESTAMP to Date", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("(LG9s@4?-_wJZ?p0*^f");
      assertNotNull(jSONPath0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1137);
      longArray0[1] = (-1580386065683472715L);
      longArray0[2] = (-1580386065683472715L);
      longArray0[3] = (long) (-1137);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("g9%s", "zvu=/^R{", 91);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("g9%s", sQLTransientConnectionException0.getMessage());
      assertEquals("zvu=/^R{", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: g9%s", sQLTransientConnectionException0.toString());
      assertEquals(91, sQLTransientConnectionException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/cause/stackTrace/1", "H=?y", (-1137), longArray0, sQLTransientConnectionException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new long[] {(-1137L), (-1580386065683472715L), (-1580386065683472715L), (-1137L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("g9%s", sQLTransientConnectionException0.getMessage());
      assertEquals("zvu=/^R{", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: g9%s", sQLTransientConnectionException0.toString());
      assertEquals(91, sQLTransientConnectionException0.getErrorCode());
      assertEquals("/cause/stackTrace/1", batchUpdateException0.getMessage());
      assertEquals("H=?y", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: /cause/stackTrace/1", batchUpdateException0.toString());
      assertEquals((-1137), batchUpdateException0.getErrorCode());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport", batchUpdateException0);
      assertNotNull(sQLNonTransientException0);
      assertArrayEquals(new long[] {(-1137L), (-1580386065683472715L), (-1580386065683472715L), (-1137L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("g9%s", sQLTransientConnectionException0.getMessage());
      assertEquals("zvu=/^R{", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: g9%s", sQLTransientConnectionException0.toString());
      assertEquals(91, sQLTransientConnectionException0.getErrorCode());
      assertEquals("/cause/stackTrace/1", batchUpdateException0.getMessage());
      assertEquals("H=?y", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: /cause/stackTrace/1", batchUpdateException0.toString());
      assertEquals((-1137), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: fastjson.parser.autoTypeSupport", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getMessage());
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.autoTypeSupport", "xXw", (-1137), sQLNonTransientException0);
      assertNotNull(sQLRecoverableException0);
      assertArrayEquals(new long[] {(-1137L), (-1580386065683472715L), (-1580386065683472715L), (-1137L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals((-1137), sQLRecoverableException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: fastjson.parser.autoTypeSupport", sQLRecoverableException0.toString());
      assertEquals("xXw", sQLRecoverableException0.getSQLState());
      assertEquals("g9%s", sQLTransientConnectionException0.getMessage());
      assertEquals("zvu=/^R{", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: g9%s", sQLTransientConnectionException0.toString());
      assertEquals(91, sQLTransientConnectionException0.getErrorCode());
      assertEquals("/cause/stackTrace/1", batchUpdateException0.getMessage());
      assertEquals("H=?y", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: /cause/stackTrace/1", batchUpdateException0.toString());
      assertEquals((-1137), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: fastjson.parser.autoTypeSupport", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getMessage());
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getSQLState());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, sQLRecoverableException0, propertyNamingStrategy0, "/cause/stackTrace/1");
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1137L), (-1580386065683472715L), (-1580386065683472715L), (-1137L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals((-1137), sQLRecoverableException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: fastjson.parser.autoTypeSupport", sQLRecoverableException0.toString());
      assertEquals("xXw", sQLRecoverableException0.getSQLState());
      assertEquals("g9%s", sQLTransientConnectionException0.getMessage());
      assertEquals("zvu=/^R{", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: g9%s", sQLTransientConnectionException0.toString());
      assertEquals(91, sQLTransientConnectionException0.getErrorCode());
      assertEquals("/cause/stackTrace/1", batchUpdateException0.getMessage());
      assertEquals("H=?y", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: /cause/stackTrace/1", batchUpdateException0.toString());
      assertEquals((-1137), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: fastjson.parser.autoTypeSupport", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getMessage());
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getSQLState());
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/cause/stackTrace/0", "/stackTrace/6", 81);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: /cause/stackTrace/0", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("/stackTrace/6", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(81, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("/cause/stackTrace/0", sQLIntegrityConstraintViolationException0.getMessage());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLIntegrityConstraintViolationException0);
      assertNotNull(map0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: /cause/stackTrace/0", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("/stackTrace/6", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(81, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("/cause/stackTrace/0", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(83, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.safeMode");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.safeMode", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      jSONPath1.arrayAdd((Object) jSONPath_MultiIndexSegment0, (Object[]) null);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("fastjson.parser.safeMode", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("s>kUTTDL%HNK`\nx", "s>kUTTDL%HNK`\nx");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.getSQLState());
      assertEquals("s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.getMessage());
      
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("a string\"", object0);
      assertNotNull(object0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance_deep;
      assertFalse(jSONPath_WildCardSegment1.equals((Object)jSONPath_WildCardSegment0));
      assertNotNull(jSONPath_WildCardSegment1);
      assertNotSame(jSONPath_WildCardSegment1, jSONPath_WildCardSegment0);
      
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      assertNotNull(jSONPath0);
      assertEquals("\"a string\"", jSONPath0.getPath());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParserConfig.global = parserConfig0;
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertFalse(ParserConfig.global.isJacksonCompatible());
      assertFalse(ParserConfig.global.isSafeMode());
      assertTrue(ParserConfig.global.isAsmEnable());
      
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem((JSONPath) null, (Object) null, 422);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("L*v", true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      Object object0 = JSONPath.extract("[{}]", "[{}]", parserConfig0, 1583, featureArray0);
      assertNull(object0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(10, featureArray0.length);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) feature0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      JSONPath jSONPath0 = JSONPath.compile("lemur");
      assertNotNull(jSONPath0);
      assertEquals("lemur", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "L*v", (Object[]) featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path lemur
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = (-2334);
      intArray0[2] = 3;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {3, (-2334), 3, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("=", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath0 = new JSONPath("=", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("=", jSONPath0.getPath());
      
      int int0 = jSONPath0.evalSize(jSONPath_PropertySegment0);
      assertEquals(0, int0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("=", jSONPath0.getPath());
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("*=P'I'", false);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertNotNull(jSONPath_PropertySegment1);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser0));
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser1));
      assertNotNull(jSONPath_JSONPathParser2);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser2.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("&f");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertNotNull(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      Object object1 = hashMap0.put("can not cast oracle.sql.TIMESTAMP to Date", calendar0);
      assertNull(object1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("can not cast oracle.sql.TIMESTAMP to Date", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("like");
      assertNotNull(jSONPath0);
      assertEquals("like", jSONPath0.getPath());
      
      Object object2 = jSONPath_FilterSegment0.eval(jSONPath0, hashMap0, (Object) null);
      assertNull(object2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("like", jSONPath0.getPath());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONPath jSONPath1 = new JSONPath("can not cast oracle.sql.TIMESTAMP to Date");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("can not cast oracle.sql.TIMESTAMP to Date", jSONPath1.getPath());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("2{sinA2", "&f", (-901));
      assertNotNull(sQLRecoverableException0);
      assertEquals((-901), sQLRecoverableException0.getErrorCode());
      assertEquals("&f", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 2{sinA2", sQLRecoverableException0.toString());
      assertEquals("2{sinA2", sQLRecoverableException0.getMessage());
      
      Object object3 = jSONPath_FilterSegment0.eval(jSONPath1, hashMap0, (Object) null);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNull(object3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("can not cast oracle.sql.TIMESTAMP to Date", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      Object object0 = JSONPath.extract("[\"a string\"]", "[\"a string\"]", parserConfig0, 1583, featureArray0);
      assertNull(object0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(10, featureArray0.length);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      Map<String, Object> map0 = JSONPath.paths((Object) feature1);
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotSame(feature1, feature0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 5614464919154503228L;
      longArray0[1] = 8055461369741094911L;
      longArray0[2] = (long) 1583;
      longArray0[3] = 8055461369741094911L;
      longArray0[4] = (-1580386065683472715L);
      longArray0[5] = 310L;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">te8F:?A1WeF{6g");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjso.parser.safeMde");
      assertNotNull(jSONPath0);
      assertEquals("fastjso.parser.safeMde", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjso.parser.safeMde");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser(">te8F:?A1WeF{6g");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      jSONPath_JSONPathParser1.skipWhitespace();
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser1.readOp();
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      assertNotNull(jSONPath0);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2198;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1321), 2198, (-1321));
      assertNotNull(jSONPath_RangeSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2198, false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath1 = new JSONPath("/stackTrace/8", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("/stackTrace/8", jSONPath1.getPath());
      
      DataTruncation dataTruncation0 = new DataTruncation(2198, false, false, (-3818), 980);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertNotNull(jSONPath_FilterSegment1);
      
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath1, jSONPath1, jSONPath_FilterSegment1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertNull(object0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("/stackTrace/8", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath_FilterSegment1, jSONPath_FilterSegment0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("z");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertNotNull(jSONPath_SegmentArray0);
      assertEquals(1, jSONPath_SegmentArray0.length);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("z");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = JSONPath.compile("J0\"/RS");
      assertNotNull(jSONPath0);
      assertEquals("J0\"/RS", jSONPath0.getPath());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      
      BigDecimal bigDecimal3 = bigDecimal0.add(bigDecimal1, mathContext0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal3.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal2));
      assertTrue(bigDecimal3.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal3);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal4 = bigDecimal3.stripTrailingZeros();
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertTrue(bigDecimal0.equals((Object)bigDecimal3));
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal1.equals((Object)bigDecimal3));
      assertTrue(bigDecimal3.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal2));
      assertTrue(bigDecimal3.equals((Object)bigDecimal0));
      assertTrue(bigDecimal4.equals((Object)bigDecimal2));
      assertTrue(bigDecimal4.equals((Object)bigDecimal1));
      assertTrue(bigDecimal4.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal4);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((byte)0, bigDecimal4.byteValue());
      assertEquals((short)0, bigDecimal4.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal4);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal3, bigDecimal4);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal2);
      
      Byte byte0 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer0 = new Integer((byte) (-57));
      assertEquals((-57), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal4, integer0);
      assertFalse(boolean0);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigDecimal0.equals((Object)bigDecimal4));
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertTrue(bigDecimal0.equals((Object)bigDecimal3));
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal1.equals((Object)bigDecimal4));
      assertTrue(bigDecimal1.equals((Object)bigDecimal3));
      assertTrue(bigDecimal3.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal2));
      assertTrue(bigDecimal3.equals((Object)bigDecimal0));
      assertTrue(bigDecimal4.equals((Object)bigDecimal2));
      assertTrue(bigDecimal4.equals((Object)bigDecimal1));
      assertTrue(bigDecimal4.equals((Object)bigDecimal0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((byte)0, bigDecimal4.byteValue());
      assertEquals((short)0, bigDecimal4.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal4);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal3, bigDecimal4);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("fastjson.parser.autoTypeSupport", 1084.403828182, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath1 = new JSONPath("J0\"/RS");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("J0\"/RS", jSONPath1.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("nin");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$Operator");
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser1));
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser2);
      
      JSONPath.Operator jSONPath_Operator1 = jSONPath_JSONPathParser1.readOp();
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser2));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser2);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      BigDecimal bigDecimal0 = new BigDecimal(5614464919154503228L);
      assertNotNull(bigDecimal0);
      assertEquals((byte)60, bigDecimal0.byteValue());
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(5614464919154503228L));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature feature0 = Feature.IgnoreNotMatch;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONPath jSONPath0 = new JSONPath("nin");
      assertNotNull(jSONPath0);
      assertEquals("nin", jSONPath0.getPath());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = null;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = JSONPath.compile("t6eJ`;c");
      assertNotNull(jSONPath0);
      assertEquals("t6eJ`;c", jSONPath0.getPath());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny", jSONPath1.getPath());
      
      String string0 = "*=P'I'";
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeSupport", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      Long long0 = new Long(1236L);
      assertEquals(1236L, (long)long0);
      assertNotNull(long0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 64;
      Float float0 = new Float((-828.2328F));
      assertEquals((-828.2328F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) float0, "I8W.*g`R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : I8W.*g`R
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("LIKE");
      assertNotNull(jSONPath0);
      assertEquals("LIKE", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k2mVJn`9'3cw3WF*#KD");
      assertNotNull(jSONPath_JSONPathParser0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1994091956);
      intArray0[2] = (-4209);
      intArray0[3] = (-32);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("/stackTrace/7", (String) null, 102);
      assertNotNull(sQLNonTransientException0);
      assertEquals("/stackTrace/7", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(102, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: /stackTrace/7", sQLNonTransientException0.toString());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-1994091956), 0, (-4209), (-32)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("/stackTrace/7", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(102, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: /stackTrace/7", sQLNonTransientException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: /stackTrace/7", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientException: /stackTrace/7", batchUpdateException0.toString());
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) batchUpdateException0, "I8W.*g`R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : I8W.*g`R
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("com.alibaba.fastjson.JSONPath$IntBetweenSegement", "com.alibaba.fastjson.JSONPath$IntBetweenSegement", true);
      assertNotNull(jSONPath_RlikeSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", jSONPath0.getPath());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLRecoverableException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      
      SerializeWriter serializeWriter0 = new SerializeWriter();
      assertNotNull(serializeWriter0);
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertEquals(0, serializeWriter0.size());
      assertEquals(2048, serializeWriter0.getBufferLength());
      assertTrue(serializeWriter0.isSortField());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      
      SerializeWriter serializeWriter1 = serializeWriter0.append(']');
      assertNotNull(serializeWriter1);
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertEquals(1, serializeWriter0.size());
      assertEquals(2048, serializeWriter0.getBufferLength());
      assertTrue(serializeWriter0.isSortField());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      assertEquals(1, serializeWriter1.size());
      assertEquals(2048, serializeWriter1.getBufferLength());
      assertEquals((-1), serializeWriter1.getMaxBufSize());
      assertFalse(serializeWriter1.isNotWriteDefaultValue());
      assertTrue(serializeWriter1.isSortField());
      assertSame(serializeWriter0, serializeWriter1);
      assertSame(serializeWriter1, serializeWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(serializeWriter1);
      assertNotNull(mockPrintWriter0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("syntax", "com.alibaba.fastjson.JSONPath$IntBetweenSegement", 6, sQLDataException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(6, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: syntax", sQLSyntaxErrorException0.toString());
      assertEquals("syntax", sQLSyntaxErrorException0.getMessage());
      
      Short short0 = new Short((short)661);
      assertEquals((short)661, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = JSONPath.eq(short0, serializeWriter0);
      assertFalse(boolean0);
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertEquals(1, serializeWriter0.size());
      assertEquals(2048, serializeWriter0.getBufferLength());
      assertTrue(serializeWriter0.isSortField());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      assertSame(serializeWriter0, serializeWriter1);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/stackTrace/13");
      assertNotNull(jSONPath_NotNullSegement0);
      
      Short short1 = new Short((short)661);
      assertEquals((short)661, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      boolean boolean1 = jSONPath_NotNullSegement0.apply(jSONPath0, sQLDataException0, serializeWriter0, short1);
      assertFalse(boolean1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", jSONPath0.getPath());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertEquals(1, serializeWriter0.size());
      assertEquals(2048, serializeWriter0.getBufferLength());
      assertTrue(serializeWriter0.isSortField());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      assertSame(serializeWriter0, serializeWriter1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. .
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("K=#'zjBteb^}s");
      assertNotNull(jSONPath0);
      assertEquals("K=#'zjBteb^}s", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("K=#'zjBteb^}s");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertFalse(object0.equals((Object)jSONPath_Segment0));
      assertNotNull(object0);
      assertNotSame(object0, jSONPath_Segment0);
      
      JSONPath jSONPath1 = new JSONPath("/stackTrace/10");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("/stackTrace/10", jSONPath1.getPath());
      
      jSONPath_JSONPathParser0.accept('s');
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Q");
      assertNotNull(jSONPath0);
      assertEquals("Q", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("expect '[', but ", clientInfoStatus0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("qM", "expect '[', but ", 488);
      assertNotNull(sQLTransientException0);
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("expect '[', but ", sQLTransientException0.getSQLState());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("U:F%+^Pt\ry|6lh", "ZxM:7", hashMap0, sQLTransientException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("expect '[', but ", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      assertNotNull(map0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("expect '[', but ", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals(168, map0.size());
      assertFalse(map0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      int int0 = 830;
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("qM", 830);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("qM", clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("qM", "fastjson.parser.deny", 488);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals(488, sQLTransientException0.getErrorCode());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("U:F%+^Pt\ry|6lh", "ZxM:7", hashMap0, sQLTransientException0);
      assertNotNull(sQLClientInfoException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      assertNotNull(map0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals(168, map0.size());
      assertFalse(map0.isEmpty());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLClientInfoException0);
      assertNotNull(batchUpdateException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("fastjson.parser.deny", sQLTransientException0.getSQLState());
      assertEquals(488, sQLTransientException0.getErrorCode());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = JSONPath.compile("t6eJ`;c");
      assertNotNull(jSONPath0);
      assertEquals("t6eJ`;c", jSONPath0.getPath());
      
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(3169, roundingMode0);
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1.0E8, mathContext0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short) (-7936), bigDecimal0.shortValue());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) bigDecimal0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(false));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      jSONPath0.deepGetPropertyValues(jSONPath_MinSegment0, arrayList0);
      assertFalse(arrayList0.contains(false));
      assertEquals("*", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      int int0 = jSONPath0.size((Object) jSONPath_MinSegment0);
      assertEquals(0, int0);
      assertEquals("*", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Feature feature0 = Feature.IgnoreNotMatch;
      Feature[] featureArray0 = new Feature[6];
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ParserConfig.parserAllFieldToCache(class0, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(17, hashMap0.size());
      
      Feature feature1 = Feature.IgnoreAutoType;
      featureArray0[0] = feature1;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9|f+Wlq5mEari^3yrPF");
      assertNotNull(jSONPath_JSONPathParser0);
      
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(5751393439502795295L);
      assertEquals(5.7513934395027958E18, double0, 0.01);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = "6WtV>|GJoM4/=|";
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("6WtV>|GJoM4/=|");
      assertNotNull(jSONPath_Segment0);
      
      SerializeConfig serializeConfig0 = null;
      try {
        serializeConfig0 = new SerializeConfig((-1327), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      int int0 = 461;
      SerializeConfig serializeConfig0 = new SerializeConfig(461);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("java/lang/Enum", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*Ww6=#RP:38";
      String string0 = "VsO.{,T4Yk";
      stringArray0[1] = "VsO.{,T4Yk";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(2, stringArray0.length);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      serializeConfig0.setTypeKey("fastjson.parser.autoTypeSupport");
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeSupport", serializeConfig0.getTypeKey());
      
      Class<SQLDataException> class0 = SQLDataException.class;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializeConfig0.config(class0, serializerFeature0, false);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeSupport", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("Xf; }", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeSupport", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("Xf; }", jSONPath0.getPath());
      
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      ObjectSerializer objectSerializer0 = serializeConfig0.getObjectWriter(class1);
      assertNotNull(objectSerializer0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeSupport", serializeConfig0.getTypeKey());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, (Object) null, jSONPath0);
      assertNotNull(arrayList0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(2, stringArray0.length);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeSupport", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("Xf; }", jSONPath0.getPath());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      long long0 = 514L;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue("VsO.{,T4Yk", "fastjson.parser.safeMode", 514L, jSONPath_MultiPropertySegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("not");
      assertNotNull(jSONPath0);
      assertEquals("not", jSONPath0.getPath());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      
      Set<?> set0 = JSONPath.keySet((Object) sQLWarning0, "seconds");
      assertNull(set0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      
      int int0 = jSONPath0.size((Object) "not");
      assertEquals((-1), int0);
      assertEquals("not", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, "not");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!`,9Y3W", "not close json text, token : ");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: !`,9Y3W", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("!`,9Y3W", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("not close json text, token : ", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      JSONPath jSONPath0 = new JSONPath("/annotatedSuperclass/type/annotatedSuperclass/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/2/type/declaredMethods/1/annotatedReturnType/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/methods/12/annotatedReturnType/type/rawType/declaredClasses/0/declaredConstructors/0/annotatedParameterTypes/0/type/rawType/classes/0/declaredMethods/5/annotatedParameterTypes/0/type/declaredConstructors/0/parameters/9/annotatedType");
      assertNotNull(jSONPath0);
      assertEquals("/annotatedSuperclass/type/annotatedSuperclass/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/2/type/declaredMethods/1/annotatedReturnType/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/methods/12/annotatedReturnType/type/rawType/declaredClasses/0/declaredConstructors/0/annotatedParameterTypes/0/type/rawType/classes/0/declaredMethods/5/annotatedParameterTypes/0/type/declaredConstructors/0/parameters/9/annotatedType", jSONPath0.getPath());
      
      jSONPath0.init();
      assertEquals("/annotatedSuperclass/type/annotatedSuperclass/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/2/type/declaredMethods/1/annotatedReturnType/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/methods/12/annotatedReturnType/type/rawType/declaredClasses/0/declaredConstructors/0/annotatedParameterTypes/0/type/rawType/classes/0/declaredMethods/5/annotatedParameterTypes/0/type/declaredConstructors/0/parameters/9/annotatedType", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{\"Could not obtain an instance of DatatypeFactory.\":\"Apple\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"a string\",\"between\":99}", 5751393439502795295L, 382L, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement1 = new JSONPath.IntBetweenSegement("C", 382L, 3292L, true);
      assertFalse(jSONPath_IntBetweenSegement1.equals((Object)jSONPath_IntBetweenSegement0));
      assertNotNull(jSONPath_IntBetweenSegement1);
      
      JSONPath.FilterGroup jSONPath_FilterGroup1 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, true);
      assertFalse(jSONPath_IntBetweenSegement0.equals((Object)jSONPath_IntBetweenSegement1));
      assertFalse(jSONPath_FilterGroup1.equals((Object)jSONPath_FilterGroup0));
      assertNotNull(jSONPath_FilterGroup1);
      
      JSONPath jSONPath0 = new JSONPath("<Dt#c0%g;d`|");
      assertNotNull(jSONPath0);
      assertEquals("<Dt#c0%g;d`|", jSONPath0.getPath());
      
      Float float0 = new Float((float) 3292L);
      assertEquals(3292.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("<Dt#c0%g;d`|", "C", 3);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("C", sQLTransactionRollbackException0.getSQLState());
      assertEquals("<Dt#c0%g;d`|", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: <Dt#c0%g;d`|", sQLTransactionRollbackException0.toString());
      assertEquals(3, sQLTransactionRollbackException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("C", sQLTransactionRollbackException0.getSQLState());
      assertEquals("<Dt#c0%g;d`|", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: <Dt#c0%g;d`|", sQLTransactionRollbackException0.toString());
      assertEquals(3, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTransactionRollbackException: <Dt#c0%g;d`|", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: <Dt#c0%g;d`|", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-948));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
      assertEquals("<Dt#c0%g;d`|", jSONPath0.getPath());
      
      Float float1 = new Float(3813.408203125);
      assertEquals(3813.4082F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      jSONPath0.deepSet((Object) null, "fastjson", 3292L, float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals("<Dt#c0%g;d`|", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Feature feature0 = Feature.SortFeidFastMatch;
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("q", "q", parserConfig0, 3678080, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONPath jSONPath0 = new JSONPath("upmchswor");
      assertNotNull(jSONPath0);
      assertEquals("upmchswor", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1651);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      boolean boolean0 = jSONPath0.set((Object) jSONPath_ArrayAccessSegment0, (Object) sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
      assertEquals("upmchswor", jSONPath0.getPath());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("and");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'a'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":99,\"y\":7,\"com.alibaba.fastjson.JSONPath$JSONPathParser\":true,\"a\":[],\"b\":{}}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"x\":99,\"y\":7,\"com.alibaba.fastjson.JSONPath$JSONPathParser\":true,\"a\":[],\"b\":{}}");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      assertNotNull(jSONPath_Filter0);
      assertSame(jSONPath_NullSegement0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_NullSegement0);
      
      JSONPath jSONPath0 = new JSONPath("{\"x\":99,\"y\":7,\"com.alibaba.fastjson.JSONPath$JSONPathParser\":true,\"a\":[],\"b\":{}}");
      assertNotNull(jSONPath0);
      assertEquals("{\"x\":99,\"y\":7,\"com.alibaba.fastjson.JSONPath$JSONPathParser\":true,\"a\":[],\"b\":{}}", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1987));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      Short short0 = new Short((short) (-2672));
      assertEquals((short) (-2672), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "{\"x\":99,\"y\":7,\"com.alibaba.fastjson.JSONPath$JSONPathParser\":true,\"a\":[],\"b\":{}}", jSONPath_NullSegement0, short0);
      assertTrue(boolean0);
      assertEquals("{\"x\":99,\"y\":7,\"com.alibaba.fastjson.JSONPath$JSONPathParser\":true,\"a\":[],\"b\":{}}", jSONPath0.getPath());
      assertSame(jSONPath_NullSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "Fafh\\( F!'N!$+";
      JSONPath jSONPath0 = new JSONPath("Fafh( F!'N!$+");
      assertNotNull(jSONPath0);
      assertEquals("Fafh( F!'N!$+", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "Fafh( F!'N!$+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Fafh( F!'N!$+
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("s>kUTTDL%HNK`\nx", "s>kUTTDL%HNK`\nx");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.getSQLState());
      assertEquals("s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: s>kUTTDL%HNK`\nx", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("s>kUTTDL%HNK`\nx", 5614464919154503228L, (-1014497654951707614L), false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      assertNotNull(jSONPath0);
      assertEquals("\"a string\"", jSONPath0.getPath());
      
      Float float0 = new Float((float) 5614464919154503228L);
      assertEquals(5.6144648E18F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, float0, (Object) null);
      assertFalse(boolean0);
      assertEquals("\"a string\"", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("<9u5'1erJG{Ww");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      jSONPath_JSONPathParser1.readOp();
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Vgs$*fms`");
      assertNotNull(jSONPath0);
      assertEquals("Vgs$*fms`", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<9u5'1erJG{Ww");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Float float0 = new Float((float) 55296);
      assertEquals(55296.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      parserConfig0.addAccept("Yqk1<<a|");
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("Yqk1<<a|", float0, false);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/7");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/7", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath(",  end ");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals(",  end ", jSONPath1.getPath());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{}", "Sy", 55296);
      assertNotNull(sQLRecoverableException0);
      assertEquals("{}", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: {}", sQLRecoverableException0.toString());
      assertEquals(55296, sQLRecoverableException0.getErrorCode());
      assertEquals("Sy", sQLRecoverableException0.getSQLState());
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(".fSP[kwX{AI", sQLRecoverableException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("{}", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: {}", sQLRecoverableException0.toString());
      assertEquals(55296, sQLRecoverableException0.getErrorCode());
      assertEquals("Sy", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: .fSP[kwX{AI", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(".fSP[kwX{AI", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, "/stackTrace/4");
      assertEquals("/stackTrace/4", object0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotNull(object0);
      assertEquals("/stackTrace/7", jSONPath0.getPath());
      assertEquals("{}", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: {}", sQLRecoverableException0.toString());
      assertEquals(55296, sQLRecoverableException0.getErrorCode());
      assertEquals("Sy", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: .fSP[kwX{AI", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(".fSP[kwX{AI", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-340);
      intArray0[1] = 9;
      intArray0[2] = 26;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {0, 9, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)105;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[3] = (byte)8;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment1 = new JSONPath.MultiIndexSegment(intArray0);
      assertFalse(jSONPath_MultiIndexSegment1.equals((Object)jSONPath_MultiIndexSegment0));
      assertNotNull(jSONPath_MultiIndexSegment1);
      assertArrayEquals(new int[] {0, 9, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = new JSONPath("u^<S<J#", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("u^<S<J#", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "byte", 26);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals("byte", sQLTransientException0.getSQLState());
      assertEquals(26, sQLTransientException0.getErrorCode());
      assertEquals("", sQLTransientException0.getMessage());
      
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_Operator0, sQLTransientException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "o\\B~CHD<:Cus=SeBu/";
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 4461;
      intArray0[2] = 4461;
      intArray0[3] = 4461;
      intArray0[4] = 4461;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {0, 4461, 4461, 4461, 4461}, intArray0);
      assertEquals(5, intArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("oB~CHD<:Cus=SeBu/");
      assertNotNull(jSONPath0);
      assertEquals("oB~CHD<:Cus=SeBu/", jSONPath0.getPath());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      int int1 = bigInteger0.getLowestSetBit();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, bigInteger0, "oB~CHD<:Cus=SeBu/");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-590), true, true, 343, 62);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      String string0 = "Y";
      JSONPath jSONPath0 = new JSONPath("Y");
      assertNotNull(jSONPath0);
      assertEquals("Y", jSONPath0.getPath());
      
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigInteger0, "rm}_", true);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      stringArray0[0] = "com.alibaba.fastjson.JSONPath";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("^7NK1B-&0vobJHE^", "^7NK1B-&0vobJHE^", "^7NK1B-&0vobJHE^", stringArray0, true);
      assertNotNull(jSONPath_MatchSegement0);
      assertEquals(1, stringArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath", jSONPath0.getPath());
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      Object object0 = JSONPath.eval((Object) jSONPath_SizeSegment0, "com.alibaba.fastjson.JSONPath");
      assertNull(object0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-23), 126, 19);
      assertNotNull(jSONPath_RangeSegment0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-23);
      longArray0[1] = (long) 126;
      longArray0[2] = (long) (-23);
      longArray0[3] = (long) 19;
      longArray0[4] = 310L;
      longArray0[5] = (long) (-23);
      longArray0[6] = (long) 126;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/cause/stackTrace/0", longArray0, true);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {(-23L), 126L, (-23L), 19L, 310L, (-23L), 126L}, longArray0);
      assertEquals(7, longArray0.length);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{}", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath jSONPath1 = JSONPath.compile("^7NK1B-&0vobJHE^");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("^7NK1B-&0vobJHE^", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_IntInSegement0, jSONPath1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertArrayEquals(new long[] {(-23L), 126L, (-23L), 19L, 310L, (-23L), 126L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("^7NK1B-&0vobJHE^", jSONPath1.getPath());
      assertEquals("com.alibaba.fastjson.JSONPath", jSONPath0.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      JSONPath jSONPath0 = JSONPath.compile("J0\"/RS");
      assertNotNull(jSONPath0);
      assertEquals("J0\"/RS", jSONPath0.getPath());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      
      MathContext mathContext1 = MathContext.UNLIMITED;
      assertNotNull(mathContext1);
      assertSame(mathContext1, mathContext0);
      
      BigDecimal bigDecimal3 = bigDecimal2.add(bigDecimal1, mathContext1);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal0));
      assertTrue(bigDecimal3.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal3);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(mathContext1, mathContext0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal4 = bigDecimal1.stripTrailingZeros();
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertTrue(bigDecimal1.equals((Object)bigDecimal3));
      assertTrue(bigDecimal4.equals((Object)bigDecimal2));
      assertTrue(bigDecimal4.equals((Object)bigDecimal0));
      assertTrue(bigDecimal4.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal4);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal4.shortValue());
      assertEquals((byte)0, bigDecimal4.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal4);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal2);
      
      Byte byte0 = new Byte((byte)64);
      assertEquals((byte)64, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = JSONPath.eqNotNull(bigInteger1, bigDecimal2);
      assertFalse(boolean0);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal4));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal3));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(bigDecimal2, bigDecimal4);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigInteger1, bigInteger0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("*", 10.0, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RLIKE");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.Operator jSONPath_Operator1 = jSONPath_JSONPathParser0.readOp();
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("rlike");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/7", jSONPath0.getPath());
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertNotNull(jSONPath_FilterSegment1);
      
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
      assertEquals("/stackTrace/7", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_NotNullSegement0);
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("HH3");
      assertNotNull(jSONPath0);
      assertEquals("HH3", jSONPath0.getPath());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      int int0 = jSONPath0.size((Object) "fastjson.parser.deny");
      assertEquals((-1), int0);
      assertEquals("HH3", jSONPath0.getPath());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      int int1 = javaBeanSerializer0.getSize(jSONPath_SizeSegment0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<Object> list0 = javaBeanSerializer0.getFieldValues(parserConfig0);
      assertNotNull(list0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(list0.contains("fastjson.parser.deny"));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 10);
      assertNotNull(jSONPath_RangeSegment0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("no", "fastjson.parser.deny", 65);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(65, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: no", sQLTransactionRollbackException0.toString());
      assertEquals("no", sQLTransactionRollbackException0.getMessage());
      assertEquals("fastjson.parser.deny", sQLTransactionRollbackException0.getSQLState());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLTransactionRollbackException0, list0);
      assertNotNull(arrayList0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(list0.contains("HH3"));
      assertEquals("HH3", jSONPath0.getPath());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(65, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: no", sQLTransactionRollbackException0.toString());
      assertEquals("no", sQLTransactionRollbackException0.getMessage());
      assertEquals("fastjson.parser.deny", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("nin", (String[]) null, false);
      assertNotNull(jSONPath_StringInSegement0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(58);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Float float0 = new Float(0.75F);
      assertEquals(0.75F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("=");
      assertNotNull(jSONPath0);
      assertEquals("=", jSONPath0.getPath());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      boolean boolean1 = JSONPath.isInt(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath jSONPath1 = new JSONPath("d'");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("d'", jSONPath1.getPath());
      
      jSONPath1.init();
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertEquals("d'", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("syntax");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("IN");
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser0));
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser1));
      assertNotNull(jSONPath_JSONPathParser2);
      
      jSONPath_JSONPathParser2.readOp();
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser0));
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser2, jSONPath_JSONPathParser0);
      assertNotSame(jSONPath_JSONPathParser2, jSONPath_JSONPathParser1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      JSONPath jSONPath0 = new JSONPath("LIKE");
      assertNotNull(jSONPath0);
      assertEquals("LIKE", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = new BigDecimal(5614464919154503228L);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      assertEquals((byte)60, bigDecimal0.byteValue());
      
      String[] stringArray0 = new String[0];
      BigDecimal bigDecimal1 = (BigDecimal)JSONPath.reserveToObject(bigDecimal0, stringArray0);
      assertNotNull(bigDecimal1);
      assertEquals(0, stringArray0.length);
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      assertEquals((byte)60, bigDecimal0.byteValue());
      assertEquals((byte)60, bigDecimal1.byteValue());
      assertEquals((short) (-20932), bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      JSONPath jSONPath1 = new JSONPath("2}|dgA[kB");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("2}|dgA[kB", jSONPath1.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LIKE");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath1.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 2}|dgA[kB
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) classLoader0, (Object) "fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.autoTypeAccept");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.autoTypeAccept", sQLTimeoutException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTimeoutException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)JSONPath.reserveToObject(sQLTimeoutException0, (String[]) null);
      assertNotNull(sQLTimeoutException1);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.autoTypeAccept", sQLTimeoutException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.autoTypeAccept", sQLTimeoutException1.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/cause/stackTrace/7", "fastjson.parser.deny", 2344, sQLTimeoutException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.autoTypeAccept", sQLTimeoutException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTimeoutException0.getMessage());
      assertEquals("fastjson.parser.deny", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("/cause/stackTrace/7", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(2344, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: /cause/stackTrace/7", sQLFeatureNotSupportedException0.toString());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">([");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.readOp();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      JSON.DEFAULT_GENERATE_FEATURE = 1401;
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.deny.internal", "fastjson.parser.autoTypeSupport", false);
      assertNotNull(jSONPath_RlikeSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "/cause/stackTrace/7", (Object) jSONPath_FilterSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertTrue(long1 == long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.SortFeidFastMatch;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ParserConfig.parserAllFieldToCache(class0, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(17, hashMap0.size());
      
      featureArray0[1] = feature0;
      Object object0 = JSONPath.extract("[99]", "[99]", parserConfig0, 1583, featureArray0);
      assertNull(object0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(10, featureArray0.length);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      Map<String, Object> map0 = JSONPath.paths((Object) feature0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      ParserConfig.global = parserConfig0;
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertTrue(ParserConfig.global.isAsmEnable());
      assertFalse(ParserConfig.global.isSafeMode());
      assertFalse(ParserConfig.global.isJacksonCompatible());
      
      long[] longArray0 = new long[6];
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      longArray0[0] = (-1580386065683472715L);
      longArray0[1] = 8055461369741094911L;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, ParserConfig.global);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.global.compatibleWithJavaBean);
      assertFalse(ParserConfig.global.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertTrue(ParserConfig.global.isAsmEnable());
      assertFalse(ParserConfig.global.isSafeMode());
      assertFalse(ParserConfig.global.isJacksonCompatible());
      
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(class0, "type not match error", 8963398325558730460L, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("com.alibaba.fastjson.JSONPath$IntBetweenSegement", "com.alibaba.fastjson.JSONPath$IntBetweenSegement", true);
      assertNotNull(jSONPath_RlikeSegement0);
      
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", jSONPath0.getPath());
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("/cause/stackTrace/12", "com.alibaba.fastjson.JSONPath", (String) null, (String[]) null, true);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath jSONPath1 = JSONPath.compile("/cause/stackTrace/12");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("/cause/stackTrace/12", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("r,", "com.alibaba.fastjson.JSONPath");
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: r,", sQLRecoverableException0.toString());
      assertEquals("r,", sQLRecoverableException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath", sQLRecoverableException0.getSQLState());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLRecoverableException0, "?tLfAJ7H6m2 k(=/1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ?tLfAJ7H6m2 k(=/1
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("between", (String) null, "not", (String[]) null, true);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("jsonpath error, path ");
      assertNotNull(jSONPath0);
      assertEquals("jsonpath error, path ", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "between", "jsonpath error, path ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : jsonpath error, path 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject((Object) null, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3, stringArray0.length);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath1 = new JSONPath("yyyy-MM-dd HH:mm:ss", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", jSONPath1.getPath());
      
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath1, jSONPath1, map0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(object0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      JSONPath jSONPath2 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath2.getPath());
      assertSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.alibaba.fastjson.JSONPath$StringOpSegement", "yyyy-MM-dd HH:mm:ss", (-998));
      assertNotNull(sQLNonTransientException0);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLNonTransientException0.getMessage());
      assertEquals((-998), sQLNonTransientException0.getErrorCode());
      assertEquals("yyyy-MM-dd HH:mm:ss", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: com.alibaba.fastjson.JSONPath$StringOpSegement", sQLNonTransientException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(3089, false, false, (-1057), (-998), sQLNonTransientException0);
      assertNotNull(dataTruncation0);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLNonTransientException0.getMessage());
      assertEquals((-998), sQLNonTransientException0.getErrorCode());
      assertEquals("yyyy-MM-dd HH:mm:ss", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: com.alibaba.fastjson.JSONPath$StringOpSegement", sQLNonTransientException0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSONPath2.removePropertyValue(jSONPath_Operator0, "f):r^", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "=";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = null;
      JSONPath.Filter jSONPath_Filter1 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter1);
      
      JSONPath jSONPath0 = new JSONPath("=");
      assertNotNull(jSONPath0);
      assertEquals("=", jSONPath0.getPath());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      String string1 = "write clob error";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("write clob error", "$3EK", (-679), hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("$3EK", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: write clob error", sQLClientInfoException0.toString());
      assertEquals("write clob error", sQLClientInfoException0.getMessage());
      assertEquals((-679), sQLClientInfoException0.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException("=", "$3EK", (-679), sQLClientInfoException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("$3EK", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: write clob error", sQLClientInfoException0.toString());
      assertEquals("write clob error", sQLClientInfoException0.getMessage());
      assertEquals((-679), sQLClientInfoException0.getErrorCode());
      assertEquals("=", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: =", sQLDataException0.toString());
      assertEquals((-679), sQLDataException0.getErrorCode());
      assertEquals("$3EK", sQLDataException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLClientInfoException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("$3EK", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: write clob error", sQLClientInfoException0.toString());
      assertEquals("write clob error", sQLClientInfoException0.getMessage());
      assertEquals((-679), sQLClientInfoException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: write clob error", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLClientInfoException: write clob error", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      String string2 = "[F";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("]&^cM4t[U!1I>m3", "[F", (-679));
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ]&^cM4t[U!1I>m3", sQLNonTransientConnectionException0.toString());
      assertEquals("]&^cM4t[U!1I>m3", sQLNonTransientConnectionException0.getMessage());
      assertEquals("[F", sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-679), sQLNonTransientConnectionException0.getErrorCode());
      
      Long long0 = new Long((-679));
      assertEquals((-679L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) sQLNonTransientConnectionException0, (Object) long0);
      assertFalse(boolean0);
      assertEquals("=", jSONPath0.getPath());
      assertEquals("java.sql.SQLNonTransientConnectionException: ]&^cM4t[U!1I>m3", sQLNonTransientConnectionException0.toString());
      assertEquals("]&^cM4t[U!1I>m3", sQLNonTransientConnectionException0.getMessage());
      assertEquals("[F", sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-679), sQLNonTransientConnectionException0.getErrorCode());
      
      String string3 = jSONPath0.getPath();
      assertEquals("=", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("=", jSONPath0.getPath());
      
      Collection<Object> collection0 = jSONPath0.getPropertyValues(hashMap0);
      assertNotNull(collection0);
      assertFalse(collection0.contains("="));
      assertEquals("=", jSONPath0.getPath());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = null;
      try {
        jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "=";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      String string1 = "gzip,base64";
      int int0 = (-1286);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("=", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("=", jSONPath0.getPath());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("position", parserConfig0, (-1286));
      assertNotNull(defaultJSONParser0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2position
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      JSONPath jSONPath0 = new JSONPath(".");
      assertNotNull(jSONPath0);
      assertEquals(".", jSONPath0.getPath());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(".0*$", (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(".0*$", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: .0*$", sQLTransientConnectionException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("3XAkRhmF._*VnVB[dA?", "3XAkRhmF._*VnVB[dA?", (-679), (Throwable) null);
      assertNotNull(sQLDataException0);
      assertEquals("3XAkRhmF._*VnVB[dA?", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: 3XAkRhmF._*VnVB[dA?", sQLDataException0.toString());
      assertEquals("3XAkRhmF._*VnVB[dA?", sQLDataException0.getSQLState());
      assertEquals((-679), sQLDataException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      String string0 = jSONPath0.getPath();
      assertEquals(".", string0);
      assertNotNull(string0);
      assertEquals(".", jSONPath0.getPath());
      
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
      assertEquals(".", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      assertNotNull(jSONPath0);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath1 = new JSONPath("!wz3s#m+v1");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("!wz3s#m+v1", jSONPath1.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath1.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. !wz3s#m+v1
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("no match enum alue, ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath";
      stringArray0[2] = "{P";
      stringArray0[3] = "com.alibaba.fastjson.JSONPath";
      stringArray0[4] = "com.alibaba.fastjson.JSONPath";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("[{\"end must greater than or equals start. start \":{},\"/stackTrace/2\":{},\"com.alibaba.fastjson.JSONPath\":true}]");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      DataTruncation dataTruncation0 = new DataTruncation(110, false, false, 23, 180143985);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      JSONPath jSONPath0 = JSONPath.compile("t#6lbbc)KRR+)h");
      assertNotNull(jSONPath0);
      assertEquals("t#6lbbc)KRR+)h", jSONPath0.getPath());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "b/vR'", 15, (Map<String, ClientInfoStatus>) null);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals("b/vR'", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertEquals(15, sQLClientInfoException1.getErrorCode());
      
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNull(map1);
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals("b/vR'", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertEquals(15, sQLClientInfoException1.getErrorCode());
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("com.alibaba.fastjson.JSONPath", (Map<String, ClientInfoStatus>) null);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException2);
      assertEquals("java.sql.SQLClientInfoException: com.alibaba.fastjson.JSONPath", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertNull(sQLClientInfoException2.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath", sQLClientInfoException2.getMessage());
      
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, "/cause/stackTrace/12", sQLClientInfoException2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = JSONPath.compile("t6eJ`;c");
      assertNotNull(jSONPath0);
      assertEquals("t6eJ`;c", jSONPath0.getPath());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = (-2334);
      intArray0[2] = 3;
      intArray0[3] = 3;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {3, (-2334), 3, 3}, intArray0);
      assertEquals(4, intArray0.length);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("=", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath1 = new JSONPath("=", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("=", jSONPath1.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("*=P'I'", false);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertNotNull(jSONPath_PropertySegment1);
      
      Long long0 = new Long(1236L);
      assertEquals(1236L, (long)long0);
      assertNotNull(long0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.deny.internal", intArray0, sQLFeatureNotSupportedException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {3, (-2334), 3, 3}, intArray0);
      assertEquals(4, intArray0.length);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: fastjson.parser.deny.internal", batchUpdateException0.toString());
      
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath1, long0, batchUpdateException0);
      assertTrue(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertArrayEquals(new int[] {3, (-2334), 3, 3}, intArray0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(4, intArray0.length);
      assertEquals("=", jSONPath1.getPath());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: fastjson.parser.deny.internal", batchUpdateException0.toString());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "t6eJ`;c", 3, batchUpdateException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertArrayEquals(new int[] {3, (-2334), 3, 3}, intArray0);
      assertEquals(4, intArray0.length);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: fastjson.parser.deny.internal", batchUpdateException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("t6eJ`;c", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(3, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      Set<?> set0 = jSONPath1.keySet((Object) sQLInvalidAuthorizationSpecException0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(set0);
      assertArrayEquals(new int[] {3, (-2334), 3, 3}, intArray0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(set0.contains("="));
      assertEquals(4, intArray0.length);
      assertEquals("=", jSONPath1.getPath());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: fastjson.parser.deny.internal", batchUpdateException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("t6eJ`;c", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(3, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(4, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!J3s3<mwv1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("!J3s3<mwv1");
      assertNotNull(sQLTimeoutException0);
      assertEquals("!J3s3<mwv1", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: !J3s3<mwv1", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      
      JSONPath jSONPath0 = JSONPath.compile("!J3s3<mwv1");
      assertNotNull(jSONPath0);
      assertEquals("!J3s3<mwv1", jSONPath0.getPath());
      
      Set<?> set0 = jSONPath0.evalKeySet("/stackTrace/7");
      assertNotNull(set0);
      assertFalse(set0.contains("!J3s3<mwv1"));
      assertEquals("!J3s3<mwv1", jSONPath0.getPath());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_JSONPathParser0);
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("!J3s3<mwv1", (-369L), (-369L), false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      DataTruncation dataTruncation0 = new DataTruncation(180143985, false, false, 180143985, 110);
      assertNotNull(dataTruncation0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, map0, dataTruncation0);
      assertTrue(boolean0);
      assertEquals("!J3s3<mwv1", jSONPath0.getPath());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/1");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/1", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.deny");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.deny", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny.internal", jSONPath2.getPath());
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeSupport", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      Pattern pattern0 = Pattern.compile("/cause/stackTrace/4");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("/cause/stackTrace/4", pattern0.toString());
      assertEquals("/cause/stackTrace/4", pattern0.pattern());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("fastjson.parser.autoTypeSupport", pattern0, jSONPath_Operator0);
      assertNotNull(jSONPath_RegMatchSegement0);
      assertEquals(0, pattern0.flags());
      assertEquals("/cause/stackTrace/4", pattern0.toString());
      assertEquals("/cause/stackTrace/4", pattern0.pattern());
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      assertEquals(0, pattern0.flags());
      assertEquals("/cause/stackTrace/4", pattern0.toString());
      assertEquals("/cause/stackTrace/4", pattern0.pattern());
      
      JSONPath jSONPath3 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      assertFalse(jSONPath3.equals((Object)jSONPath0));
      assertFalse(jSONPath3.equals((Object)jSONPath1));
      assertFalse(jSONPath3.equals((Object)jSONPath2));
      assertNotNull(jSONPath3);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.safeMode", jSONPath3.getPath());
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("fastjson.parser.deny.internal", false);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertNotNull(jSONPath_PropertySegment1);
      
      ParserConfig parserConfig1 = new ParserConfig(false);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      
      JSONPath jSONPath4 = new JSONPath(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", serializeConfig0, parserConfig1);
      assertFalse(jSONPath4.equals((Object)jSONPath0));
      assertFalse(jSONPath4.equals((Object)jSONPath1));
      assertFalse(jSONPath4.equals((Object)jSONPath2));
      assertFalse(jSONPath4.equals((Object)jSONPath3));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(jSONPath4);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertEquals(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", jSONPath4.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      
      boolean boolean1 = jSONPath_FilterSegment0.remove(jSONPath2, jSONPath4, (Object) null);
      assertFalse(boolean1);
      assertFalse(jSONPath4.equals((Object)jSONPath0));
      assertFalse(jSONPath4.equals((Object)jSONPath1));
      assertFalse(jSONPath4.equals((Object)jSONPath2));
      assertFalse(jSONPath4.equals((Object)jSONPath3));
      assertFalse(boolean1 == boolean0);
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath3));
      assertFalse(jSONPath2.equals((Object)jSONPath4));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertEquals(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", jSONPath4.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny.internal", jSONPath2.getPath());
      assertEquals(0, pattern0.flags());
      assertEquals("/cause/stackTrace/4", pattern0.toString());
      assertEquals("/cause/stackTrace/4", pattern0.pattern());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertNotSame(jSONPath4, jSONPath0);
      assertNotSame(jSONPath4, jSONPath1);
      assertNotSame(jSONPath4, jSONPath2);
      assertNotSame(jSONPath4, jSONPath3);
      assertNotSame(parserConfig0, parserConfig1);
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath3);
      assertNotSame(jSONPath2, jSONPath4);
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(parserConfig1, parserConfig0);
      
      // Undeclared exception!
      try { 
        jSONPath4.keySet((Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      DataTruncation dataTruncation0 = new DataTruncation((-1151), true, false, 1583, (-1164));
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", (SerializeConfig) null, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, dataTruncation0, (Object) null);
      assertFalse(boolean0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature[] featureArray0 = new Feature[0];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransactionRollbackException0);
      assertNotNull(map0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(80, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement(",");
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement(",", 5614464919154503228L, 1583, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, sQLTransactionRollbackException0, classLoader0, parserConfig0);
      assertFalse(boolean0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature0;
      JSONArray jSONArray0 = (JSONArray)JSONPath.extract("[99,99]", "[99,99]", parserConfig0, 1583, featureArray0);
      assertNotNull(jSONArray0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(10, featureArray0.length);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      Map<String, Object> map0 = JSONPath.paths((Object) feature0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      assertNotNull(jSONPath0);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("f");
      assertNotNull(jSONPath0);
      assertEquals("f", jSONPath0.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath0, jSONPath_WildCardSegment0, propertyNamingStrategy0);
      assertFalse(boolean0);
      assertEquals("f", jSONPath0.getPath());
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath1 = JSONPath.compile("J0\"/RS");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("J0\"/RS", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(126, 0, 2);
      assertNotNull(jSONPath_RangeSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(11, false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath2.getPath());
      
      DataTruncation dataTruncation0 = new DataTruncation(19, false, false, 2, 11);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      JSONPath.RangeSegment jSONPath_RangeSegment1 = new JSONPath.RangeSegment(19, 7, (-2758));
      assertFalse(jSONPath_RangeSegment1.equals((Object)jSONPath_RangeSegment0));
      assertNotNull(jSONPath_RangeSegment1);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment1.eval(jSONPath1, dataTruncation0, "=");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath1.equals((Object)jSONPath2));
      assertFalse(jSONPath_RangeSegment1.equals((Object)jSONPath_RangeSegment0));
      assertNotNull(arrayList0);
      assertEquals("J0\"/RS", jSONPath1.getPath());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath1, jSONPath2);
      assertNotSame(jSONPath_RangeSegment1, jSONPath_RangeSegment0);
      
      int int0 = JSONPath.size((Object) jSONPath2, "W~");
      assertEquals((-1), int0);
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath2.getPath());
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("YEY5T8E", (String[]) null, false);
      assertNotNull(jSONPath_StringInSegement0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("JSONPath$IntBetweenSegement", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = jSONPath_PropertySegment0.remove(jSONPath2, double0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath2.getPath());
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(11);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath_StringInSegement0.apply(jSONPath2, parserConfig0, jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "=";
      JSONPath jSONPath0 = new JSONPath("=");
      assertNotNull(jSONPath0);
      assertEquals("=", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("=");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("=", jSONPath1.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Eo4%_2W5p*+#iXC9o+", "Eo4%_2W5p*+#iXC9o+", 93);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Eo4%_2W5p*+#iXC9o+", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(93, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Eo4%_2W5p*+#iXC9o+", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Eo4%_2W5p*+#iXC9o+", sQLIntegrityConstraintViolationException0.getSQLState());
      
      // Undeclared exception!
      try { 
        jSONPath1.remove((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("LC['Q");
      assertNotNull(jSONPath0);
      assertEquals("LC['Q", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LC['Q");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(106, 45, 45);
      assertNotNull(jSONPath_RangeSegment0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      
      Class<Double> class0 = Double.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      assertEquals("LC['Q", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("LC['Q", "LC['Q");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: LC['Q", sQLFeatureNotSupportedException0.toString());
      assertEquals("LC['Q", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("LC['Q", sQLFeatureNotSupportedException0.getMessage());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, javaBeanSerializer0, sQLFeatureNotSupportedException0);
      assertNotNull(arrayList0);
      assertEquals("LC['Q", jSONPath0.getPath());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: LC['Q", sQLFeatureNotSupportedException0.toString());
      assertEquals("LC['Q", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("LC['Q", sQLFeatureNotSupportedException0.getMessage());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(45);
      assertEquals(45L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(106);
      assertEquals(106L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      longArray0[2] = longArray0[0];
      Long long2 = new Long(45);
      assertEquals(45L, (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[3] = long2;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("LC['Q", longArray0, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(4, longArray0.length);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      assertEquals(4, longArray0.length);
      
      boolean boolean0 = JSONPath.eqNotNull(long0, long1);
      assertFalse(boolean0);
      assertTrue(long0.equals((Object)long2));
      assertFalse(long0.equals((Object)long1));
      assertFalse(long1.equals((Object)long2));
      assertFalse(long1.equals((Object)long0));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser(":|^*Do6nM,Q<Vd3.");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. :|^*Do6nM,Q<Vd3.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = JSONPath.compile("J0\"/RS");
      assertNotNull(jSONPath0);
      assertEquals("J0\"/RS", jSONPath0.getPath());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(126, 0, 2);
      assertNotNull(jSONPath_RangeSegment0);
      
      boolean boolean0 = JSONPath.remove((Object) null, "/cause/stackTrace/4");
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("(CLjava/lang/String;J)V");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_FilterSegment0);
      assertNotNull(set0);
      assertFalse(set0.contains("/cause/stackTrace/4"));
      assertEquals("J0\"/RS", jSONPath0.getPath());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-77);
      byte byte0 = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)67;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-112), (byte) (-10), (byte)60, (byte) (-77), (byte)11, (byte)67}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte)67, bigInteger0.byteValue());
      assertEquals((short)2883, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-112), (byte) (-10), (byte)60, (byte) (-77), (byte)11, (byte)67}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte)67, bigInteger0.byteValue());
      assertEquals((short)2883, bigInteger0.shortValue());
      assertEquals((byte)67, bigDecimal0.byteValue());
      assertEquals((short)2883, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-112), (byte) (-10), (byte)60, (byte) (-77), (byte)11, (byte)67}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte)67, bigInteger0.byteValue());
      assertEquals((short)2883, bigInteger0.shortValue());
      assertEquals((byte)67, bigDecimal1.byteValue());
      assertEquals((short)2883, bigDecimal1.shortValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = bigDecimal1.remainder(bigDecimal0, mathContext0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-112), (byte) (-10), (byte)60, (byte) (-77), (byte)11, (byte)67}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte)67, bigInteger0.byteValue());
      assertEquals((short)2883, bigInteger0.shortValue());
      assertEquals((byte)67, bigDecimal0.byteValue());
      assertEquals((short)2883, bigDecimal0.shortValue());
      assertEquals((byte)67, bigDecimal1.byteValue());
      assertEquals((short)2883, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal3);
      assertEquals((short)1, bigDecimal3.shortValue());
      assertEquals((byte)1, bigDecimal3.byteValue());
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      
      BigDecimal bigDecimal4 = bigDecimal1.add(bigDecimal0, mathContext0);
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal3));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal4);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-112), (byte) (-10), (byte)60, (byte) (-77), (byte)11, (byte)67}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte) (-122), bigDecimal4.byteValue());
      assertEquals((short)5766, bigDecimal4.shortValue());
      assertEquals((byte)67, bigInteger0.byteValue());
      assertEquals((short)2883, bigInteger0.shortValue());
      assertEquals((byte)67, bigDecimal0.byteValue());
      assertEquals((short)2883, bigDecimal0.shortValue());
      assertEquals((byte)67, bigDecimal1.byteValue());
      assertEquals((short)2883, bigDecimal1.shortValue());
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal4);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-112), (byte) (-10), (byte)60, (byte) (-77), (byte)11, (byte)67}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((short) (-2883), bigInteger1.shortValue());
      assertEquals((byte) (-67), bigInteger1.byteValue());
      assertEquals((byte)67, bigInteger0.byteValue());
      assertEquals((short)2883, bigInteger0.shortValue());
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      
      BigDecimal bigDecimal5 = new BigDecimal((int) (byte)11);
      assertFalse(bigDecimal5.equals((Object)bigDecimal3));
      assertFalse(bigDecimal5.equals((Object)bigDecimal1));
      assertFalse(bigDecimal5.equals((Object)bigDecimal2));
      assertFalse(bigDecimal5.equals((Object)bigDecimal0));
      assertFalse(bigDecimal5.equals((Object)bigDecimal4));
      assertNotNull(bigDecimal5);
      assertEquals((short)11, bigDecimal5.shortValue());
      assertEquals((byte)11, bigDecimal5.byteValue());
      
      BigDecimal bigDecimal6 = bigDecimal3.stripTrailingZeros();
      assertFalse(bigDecimal6.equals((Object)bigDecimal2));
      assertFalse(bigDecimal6.equals((Object)bigDecimal5));
      assertFalse(bigDecimal6.equals((Object)bigDecimal4));
      assertFalse(bigDecimal6.equals((Object)bigDecimal1));
      assertFalse(bigDecimal6.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal5));
      assertFalse(bigDecimal3.equals((Object)bigDecimal4));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal6);
      assertEquals((byte)1, bigDecimal6.byteValue());
      assertEquals((short)1, bigDecimal6.shortValue());
      assertEquals((short)1, bigDecimal3.shortValue());
      assertEquals((byte)1, bigDecimal3.byteValue());
      assertNotSame(bigDecimal6, bigDecimal2);
      assertNotSame(bigDecimal6, bigDecimal5);
      assertSame(bigDecimal6, bigDecimal3);
      assertNotSame(bigDecimal6, bigDecimal4);
      assertNotSame(bigDecimal6, bigDecimal1);
      assertNotSame(bigDecimal6, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal5);
      assertNotSame(bigDecimal3, bigDecimal4);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertSame(bigDecimal3, bigDecimal6);
      
      Float float0 = Float.valueOf((float) (byte)60);
      assertEquals(60.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = JSONPath.eqNotNull((byte)67, float0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string0 = "1";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 1
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("rlike");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      Integer integer0 = new Integer((-2837));
      assertEquals((-2837), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)22;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)107, (byte) (-30), (byte) (-72), (byte)46, (byte)0, (byte)22}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((short)22, bigInteger0.shortValue());
      assertEquals((byte)22, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)107, (byte) (-30), (byte) (-72), (byte)46, (byte)0, (byte)22}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((short)22, bigInteger0.shortValue());
      assertEquals((byte)22, bigInteger0.byteValue());
      assertEquals((byte) (-22), bigInteger1.byteValue());
      assertEquals((short) (-22), bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal1 = new BigDecimal((-1701));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((short) (-1701), bigDecimal1.shortValue());
      assertEquals((byte)91, bigDecimal1.byteValue());
      
      Float float0 = new Float((double) (byte) (-30));
      assertEquals((-30.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = JSONPath.eqNotNull((byte) (-30), float0);
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("+");
      assertNotNull(jSONPath0);
      assertEquals("+", jSONPath0.getPath());
      
      jSONPath0.init();
      assertEquals("+", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("jsonpath can not be null");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)86;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("TH;J<h~N");
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("TH;J<h~N", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: TH;J<h~N", sQLNonTransientConnectionException0.toString());
      
      UUID uUID0 = MockUUID.fromString("fastjson.parser.deny.internal");
      assertNotNull(uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)107;
      intArray0[3] = (int) (byte)107;
      intArray0[4] = (int) (byte)86;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)107));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      jSONPath0.deepGetPropertyValues(parserConfig0, arrayList0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(arrayList0.contains((byte)107));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertFalse(arrayList0.isEmpty());
      assertEquals(7, arrayList0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      Class<Short> class0 = Short.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = JSONPath.compile("J0\"/RS");
      assertNotNull(jSONPath0);
      assertEquals("J0\"/RS", jSONPath0.getPath());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      
      BigDecimal bigDecimal3 = bigDecimal2.add(bigDecimal0, mathContext0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal0));
      assertTrue(bigDecimal3.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal3);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal4 = bigDecimal2.stripTrailingZeros();
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal3));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertTrue(bigDecimal4.equals((Object)bigDecimal2));
      assertTrue(bigDecimal4.equals((Object)bigDecimal0));
      assertTrue(bigDecimal4.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal4);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((byte)0, bigDecimal4.byteValue());
      assertEquals((short)0, bigDecimal4.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal2, bigDecimal4);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal0);
      
      Byte byte0 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(byte0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      assertNotNull(jSONPath_KeySetSegment0);
      
      JSONPath jSONPath0 = new JSONPath("Mr]7V}#");
      assertNotNull(jSONPath0);
      assertEquals("Mr]7V}#", jSONPath0.getPath());
      
      Integer integer0 = new Integer(889);
      assertEquals(889, (int)integer0);
      assertNotNull(integer0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("$Jzo'~)8.", "alibaba");
      assertNotNull(sQLTransientException0);
      assertEquals("alibaba", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("$Jzo'~)8.", sQLTransientException0.getMessage());
      
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransientException0);
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      assertNotNull(sQLTransientException1);
      assertEquals("alibaba", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("$Jzo'~)8.", sQLTransientException0.getMessage());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException1.toString());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException1.getMessage());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Mr]7V}#", "", 109, hashMap0, sQLTransientException1);
      assertFalse(sQLTransientException0.equals((Object)sQLTransientException1));
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("alibaba", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("$Jzo'~)8.", sQLTransientException0.getMessage());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException1.toString());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: Mr]7V}#", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals(109, sQLClientInfoException0.getErrorCode());
      assertEquals("Mr]7V}#", sQLClientInfoException0.getMessage());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertFalse(sQLTransientException0.equals((Object)sQLTransientException1));
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("alibaba", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("$Jzo'~)8.", sQLTransientException0.getMessage());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException1.toString());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: Mr]7V}#", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals(109, sQLClientInfoException0.getErrorCode());
      assertEquals("Mr]7V}#", sQLClientInfoException0.getMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotSame(sQLTransientException0, sQLTransientException1);
      assertNotSame(sQLTransientException1, sQLTransientException0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("i8'pBuf53", map0);
      assertFalse(sQLTransientException0.equals((Object)sQLTransientException1));
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("alibaba", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("$Jzo'~)8.", sQLTransientException0.getMessage());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException1.toString());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: $Jzo'~)8.", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: Mr]7V}#", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals(109, sQLClientInfoException0.getErrorCode());
      assertEquals("Mr]7V}#", sQLClientInfoException0.getMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("i8'pBuf53", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: i8'pBuf53", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) integer0, (Object) sQLClientInfoException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Mr]7V}#
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      assertNotNull(jSONPath_KeySetSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("ybq", jSONPath_KeySetSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      JSONPath jSONPath0 = new JSONPath("r");
      assertNotNull(jSONPath0);
      assertEquals("r", jSONPath0.getPath());
      
      jSONPath0.init();
      assertEquals("r", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath(".");
      assertNotNull(jSONPath0);
      assertEquals(".", jSONPath0.getPath());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, (-679), sQLTransientConnectionException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals((-679), sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals((-679), sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      boolean boolean1 = jSONPath0.containsValue((Object) sQLTimeoutException0, (Object) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(".", jSONPath0.getPath());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals((-679), sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      String string0 = jSONPath0.getPath();
      assertEquals(".", string0);
      assertNotNull(string0);
      assertEquals(".", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("07Mq|+%3V3a@y%?");
      assertNotNull(jSONPath_JSONPathParser0);
      
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(7L, long0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Long long0 = new Long((-6586085717218287427L));
      assertEquals((-6586085717218287427L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/yK");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      assertNotNull(jSONPath_JSONPathParser0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      boolean boolean1 = JSONPath.remove((Object) null, "{\"fastjson.parser.deny.internal\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null,\"xx\":99}");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/yK");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath(".5b(8g*%S$m%r],V_");
      assertNotNull(jSONPath0);
      assertEquals(".5b(8g*%S$m%r],V_", jSONPath0.getPath());
      
      Double double0 = new Double((-6586085717218287427L));
      assertEquals((-6.5860857172182876E18), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, double0, jSONPath0);
      assertNull(object0);
      assertEquals(".5b(8g*%S$m%r],V_", jSONPath0.getPath());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fastjson.parser.deny";
      stringArray0[1] = "{\"fastjson.parser.deny.internal\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null,\"xx\":99}";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(2, stringArray0.length);
      
      JSONPath jSONPath1 = JSONPath.compile("5");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("5", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2221);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      boolean boolean2 = JSONPath.contains((Object) null, "{\"fastjson.parser.deny.internal\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null,\"xx\":99}");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      short short0 = (short)106;
      Short short1 = new Short((short)106);
      assertEquals((short)106, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("{\"fastjson.parser.deny.internal\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null,\"xx\":99}", ".5b(8g*%S$m%r],V_", (short)106, hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{\"fastjson.parser.deny.internal\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null,\"xx\":99}", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: {\"fastjson.parser.deny.internal\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null,\"xx\":99}", sQLClientInfoException0.toString());
      assertEquals(".5b(8g*%S$m%r],V_", sQLClientInfoException0.getSQLState());
      assertEquals(106, sQLClientInfoException0.getErrorCode());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath1, sQLClientInfoException0, (Object) null);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(arrayList0);
      assertEquals(2, stringArray0.length);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{\"fastjson.parser.deny.internal\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null,\"xx\":99}", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: {\"fastjson.parser.deny.internal\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null,\"xx\":99}", sQLClientInfoException0.toString());
      assertEquals(".5b(8g*%S$m%r],V_", sQLClientInfoException0.getSQLState());
      assertEquals(106, sQLClientInfoException0.getErrorCode());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("5", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson.parser.deny", jSONPath2.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath2.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.safeMode");
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.safeMode", jSONPath1.getPath());
      assertSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = JSONPath.contains((Object) null, "alibaba");
      assertFalse(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$RegMatchSegement");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertNotNull(jSONPath_SegmentArray0);
      assertEquals(4, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)3;
      JSONPath jSONPath0 = new JSONPath("FLw, j4B_");
      assertNotNull(jSONPath0);
      assertEquals("FLw, j4B_", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = new BigDecimal(4109L);
      assertNotNull(bigDecimal0);
      assertEquals((short)4109, bigDecimal0.shortValue());
      assertEquals((byte)13, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = (BigDecimal)JSONPath.reserveToObject(bigDecimal0, (String[]) null);
      assertNotNull(bigDecimal1);
      assertEquals((short)4109, bigDecimal0.shortValue());
      assertEquals((byte)13, bigDecimal0.byteValue());
      assertEquals((short)4109, bigDecimal1.shortValue());
      assertEquals((byte)13, bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
      assertEquals("FLw, j4B_", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("Q[>|:lanI_#V");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("Q[>|:lanI_#V", jSONPath1.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath1.getPath());
      
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.deny.internal");
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertEquals("fastjson.parser.deny.internal", jSONPath2.getPath());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockThrowable0);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("javax.xml.bind.annotation.XmlAccessorType", sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.getMessage());
      assertEquals("javax.xml.bind.annotation.XmlAccessorType", sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: javax.xml.bind.annotation.XmlAccessorType", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(91, 2940, 91);
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Ncg>TT>", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      assertNotNull(jSONPath_KeySetSegment0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("context", "fastjson.parser.autoTypeAccept", mockThrowable0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: context", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("context", sQLIntegrityConstraintViolationException0.getMessage());
      
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, jSONPath1);
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath1.equals((Object)jSONPath2));
      assertNull(object0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath1.getPath());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: context", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("context", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotSame(jSONPath0, jSONPath2);
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath1, jSONPath2);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, mockGregorianCalendar0);
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotNull(arrayList0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotSame(jSONPath0, jSONPath2);
      assertNotSame(jSONPath0, jSONPath1);
      
      ArrayList arrayList1 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, parserConfig0, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotNull(arrayList1);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(jSONPath0, jSONPath2);
      assertNotSame(jSONPath0, jSONPath1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 91;
      longArray0[1] = (long) 91;
      longArray0[2] = (long) 2940;
      longArray0[3] = (long) 91;
      longArray0[4] = (long) 2940;
      longArray0[5] = (-3758L);
      longArray0[6] = (long) 91;
      longArray0[7] = (long) 2940;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("=ZeyH6Jx.", longArray0, true);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {91L, 91L, 2940L, 91L, 2940L, (-3758L), 91L, 2940L}, longArray0);
      assertEquals(8, longArray0.length);
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny", "fastjson.parser.deny.internal", "context", (String[]) null, false);
      assertNotNull(jSONPath_MatchSegement0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ncg>TT>");
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Ncg>TT>", sQLTimeoutException0.toString());
      assertEquals("Ncg>TT>", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath1, sQLTimeoutException0, jSONPath2, jSONPath0);
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath1.equals((Object)jSONPath2));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath1.getPath());
      assertEquals("fastjson.parser.deny.internal", jSONPath2.getPath());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Ncg>TT>", sQLTimeoutException0.toString());
      assertEquals("Ncg>TT>", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotSame(jSONPath0, jSONPath2);
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath1, jSONPath2);
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<M\u0002(Z@bCo");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
      
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      assertNotNull(jSONPath_OperatorArray0);
      assertEquals(17, jSONPath_OperatorArray0.length);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      String string0 = "LC['Q";
      JSONPath jSONPath0 = new JSONPath("LC['Q");
      assertNotNull(jSONPath0);
      assertEquals("LC['Q", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
      assertEquals("LC['Q", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LC['Q");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.skipWhitespace();
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Map<String, Object> map0 = JSONPath.paths((Object) bigInteger0);
      assertNotNull(map0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      String string1 = "/cause/stackTrace/4";
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "LC['Q", (Object) "/cause/stackTrace/4");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, 5614464919154503228L);
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature feature0 = Feature.CustomMapDeserializer;
      Feature feature1 = Feature.IgnoreNotMatch;
      Feature[] featureArray0 = new Feature[7];
      featureArray0[0] = feature1;
      featureArray0[1] = feature0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = new BigDecimal((double) 5614464919154503228L);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short) (-20480), bigDecimal1.shortValue());
      
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = bigDecimal0.add(bigDecimal1, mathContext0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short) (-20480), bigDecimal1.shortValue());
      assertEquals((byte)64, bigDecimal2.byteValue());
      assertEquals((short) (-20160), bigDecimal2.shortValue());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short) (-10), bigInteger1.shortValue());
      assertEquals((byte) (-10), bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal3 = new BigDecimal(1583);
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal3);
      assertEquals((short)1583, bigDecimal3.shortValue());
      assertEquals((byte)47, bigDecimal3.byteValue());
      
      BigDecimal bigDecimal4 = bigDecimal3.stripTrailingZeros();
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertTrue(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal4);
      assertEquals((short)1583, bigDecimal4.shortValue());
      assertEquals((byte)47, bigDecimal4.byteValue());
      assertEquals((short)1583, bigDecimal3.shortValue());
      assertEquals((byte)47, bigDecimal3.byteValue());
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal4);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = JSONPath.eqNotNull(float0, bigDecimal0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal4);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      // Undeclared exception!
      try { 
        JSONPath.extract("[-99]", "[-99]", parserConfig0, 1583, featureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -99
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("rlike");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      Integer integer0 = new Integer((-2837));
      assertEquals((-2837), (int)integer0);
      assertNotNull(integer0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/", "rlike", (-2837));
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/", sQLTimeoutException0.toString());
      assertEquals("rlike", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/", sQLTimeoutException0.getMessage());
      assertEquals((-2837), sQLTimeoutException0.getErrorCode());
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$FilterSegment");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath1 = new JSONPath("rlike", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("rlike", jSONPath1.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath1.getPropertyValues("com.alibaba.fastjson.JSONPath$NotNullSegement");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+");
      assertNotNull(jSONPath0);
      assertEquals("+", jSONPath0.getPath());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("+", "+");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: +", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("+", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("+", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("nin", "%%", true);
      assertNotNull(jSONPath_RlikeSegement0);
      
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath0, "%%", "+");
      assertFalse(boolean0);
      assertEquals("+", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("com.alibaba.fastjson.JSONPath$IntBetweenSegement", "com.alibaba.fastjson.JSONPath$IntBetweenSegement", true);
      assertNotNull(jSONPath_RlikeSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", jSONPath0.getPath());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLRecoverableException0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      SerializeWriter serializeWriter0 = new SerializeWriter();
      assertNotNull(serializeWriter0);
      assertTrue(serializeWriter0.isSortField());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      assertEquals(0, serializeWriter0.size());
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertEquals(2048, serializeWriter0.getBufferLength());
      
      SerializeWriter serializeWriter1 = serializeWriter0.append(']');
      assertNotNull(serializeWriter1);
      assertTrue(serializeWriter0.isSortField());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertEquals(1, serializeWriter0.size());
      assertEquals(2048, serializeWriter0.getBufferLength());
      assertFalse(serializeWriter1.isNotWriteDefaultValue());
      assertTrue(serializeWriter1.isSortField());
      assertEquals((-1), serializeWriter1.getMaxBufSize());
      assertEquals(2048, serializeWriter1.getBufferLength());
      assertEquals(1, serializeWriter1.size());
      assertSame(serializeWriter0, serializeWriter1);
      assertSame(serializeWriter1, serializeWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(serializeWriter1);
      assertNotNull(mockPrintWriter0);
      
      sQLDataException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertTrue(serializeWriter0.isSortField());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      assertEquals(1181, serializeWriter0.size());
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertEquals(2048, serializeWriter0.getBufferLength());
      assertEquals(1181, serializeWriter1.size());
      assertFalse(serializeWriter1.isNotWriteDefaultValue());
      assertTrue(serializeWriter1.isSortField());
      assertEquals((-1), serializeWriter1.getMaxBufSize());
      assertEquals(2048, serializeWriter1.getBufferLength());
      assertSame(serializeWriter0, serializeWriter1);
      assertSame(serializeWriter1, serializeWriter0);
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)sQLRecoverableException0.initCause(sQLDataException0);
      assertNotNull(sQLRecoverableException1);
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLRecoverableException1.getMessage());
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("syntax", sQLRecoverableException0);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: syntax", sQLWarning0.toString());
      assertEquals("syntax", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLWarning0, "syntax");
      assertFalse(boolean0);
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", jSONPath0.getPath());
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: syntax", sQLWarning0.toString());
      assertEquals("syntax", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("declaredClasses", serializeConfig0, (ParserConfig) null);
      assertNotNull(jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("declaredClasses", jSONPath0.getPath());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(593, (-444), 105);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      assertNotNull(jSONPath_KeySetSegment0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("declaredClasses", "declaredClasses", 593);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(593, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("declaredClasses", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("declaredClasses", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: declaredClasses", sQLFeatureNotSupportedException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("declaredClasses", "declaredClasses", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(593, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("declaredClasses", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("declaredClasses", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: declaredClasses", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("declaredClasses", sQLTimeoutException0.getMessage());
      assertEquals("declaredClasses", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: declaredClasses", sQLTimeoutException0.toString());
      
      Class<UUID> class0 = UUID.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONPath_KeySetSegment0.eval(jSONPath0, sQLTimeoutException0, javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(false));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      jSONPath0.deepGetPropertyValues(jSONPath_MinSegment0, arrayList0);
      assertFalse(arrayList0.contains(false));
      assertEquals("*", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      Set<?> set0 = jSONPath0.keySet((Object) arrayList0);
      assertNull(set0);
      assertFalse(arrayList0.contains(false));
      assertEquals("*", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("+");
      assertNotNull(jSONPath0);
      assertEquals("+", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath1 = new JSONPath("=", serializeConfig0, (ParserConfig) null);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("=", jSONPath1.getPath());
      
      Set<?> set0 = jSONPath1.keySet((Object) jSONPath0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNull(set0);
      assertEquals("+", jSONPath0.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("=", jSONPath1.getPath());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!`,9Y3W");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: !`,9Y3W", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("!`,9Y3W", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      JSONPath jSONPath0 = new JSONPath("not close json text, token : ");
      assertNotNull(jSONPath0);
      assertEquals("not close json text, token : ", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!`,9Y3W");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '`'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "!wz3s#m+v1";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      assertNotNull(jSONPath0);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)53;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)43, (byte)53}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)53, bigInteger0.byteValue());
      assertEquals((short)11061, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertArrayEquals(new byte[] {(byte)43, (byte)53}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)53, bigInteger0.byteValue());
      assertEquals((short)11061, bigInteger0.shortValue());
      assertEquals((byte)53, bigDecimal0.byteValue());
      assertEquals((short)11061, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertArrayEquals(new byte[] {(byte)43, (byte)53}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)53, bigInteger0.byteValue());
      assertEquals((short)11061, bigInteger0.shortValue());
      assertEquals((byte)53, bigDecimal1.byteValue());
      assertEquals((short)11061, bigDecimal1.shortValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = bigDecimal0.add(bigDecimal1, mathContext0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
      assertArrayEquals(new byte[] {(byte)43, (byte)53}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)53, bigInteger0.byteValue());
      assertEquals((short)11061, bigInteger0.shortValue());
      assertEquals((byte)53, bigDecimal0.byteValue());
      assertEquals((short)11061, bigDecimal0.shortValue());
      assertEquals((byte)53, bigDecimal1.byteValue());
      assertEquals((short)11061, bigDecimal1.shortValue());
      assertEquals((byte)106, bigDecimal2.byteValue());
      assertEquals((short)22122, bigDecimal2.shortValue());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)43, (byte)53}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)53, bigInteger0.byteValue());
      assertEquals((short)11061, bigInteger0.shortValue());
      assertEquals((byte) (-53), bigInteger1.byteValue());
      assertEquals((short) (-11061), bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal3 = new BigDecimal((int) (byte)53);
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal3);
      assertEquals((short)53, bigDecimal3.shortValue());
      assertEquals((byte)53, bigDecimal3.byteValue());
      
      Float float0 = Float.valueOf((float) (byte)43);
      assertEquals(43.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = JSONPath.eqNotNull(bigInteger1, (byte)43);
      assertFalse(boolean0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)43, (byte)53}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)53, bigInteger0.byteValue());
      assertEquals((short)11061, bigInteger0.shortValue());
      assertEquals((byte) (-53), bigInteger1.byteValue());
      assertEquals((short) (-11061), bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("fastjson.parser.autoTypeAccept", (-1405.5762315), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath1 = new JSONPath("/cause/stackTrace/4");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("/cause/stackTrace/4", jSONPath1.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'w'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-590), true, true, (-590), (-590));
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/stackTrace/5", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      JSONPath jSONPath0 = JSONPath.compile("UcI@u!");
      assertNotNull(jSONPath0);
      assertEquals("UcI@u!", jSONPath0.getPath());
      
      SQLDataException sQLDataException0 = new SQLDataException("/stackTrace/5");
      assertNotNull(sQLDataException0);
      assertEquals("/stackTrace/5", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: /stackTrace/5", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment1);
      assertSame(jSONPath_WildCardSegment1, jSONPath_WildCardSegment0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("UcI@u!");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      SQLDataException sQLDataException1 = new SQLDataException();
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNotNull(sQLDataException1);
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertNull(sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, sQLTransientConnectionException0, sQLDataException1);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNotNull(arrayList0);
      assertEquals("UcI@u!", jSONPath0.getPath());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertNull(sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertFalse(arrayList0.isEmpty());
      assertEquals(7, arrayList0.size());
      assertSame(jSONPath_WildCardSegment0, jSONPath_WildCardSegment1);
      assertNotSame(sQLDataException1, sQLDataException0);
      
      Locale locale0 = Locale.forLanguageTag("Rl#YhY';");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockCalendar.getInstance(timeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, sQLDataException0, jSONPath_WildCardSegment1, mockGregorianCalendar0);
      assertFalse(boolean0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertEquals("UcI@u!", jSONPath0.getPath());
      assertEquals("/stackTrace/5", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: /stackTrace/5", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertSame(jSONPath_WildCardSegment0, jSONPath_WildCardSegment1);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertSame(jSONPath_WildCardSegment1, jSONPath_WildCardSegment0);
      
      JSONPath jSONPath1 = JSONPath.compile("=");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("=", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean1 = jSONPath1.contains((Object) jSONPath_RefOpSegement0);
      assertTrue(boolean1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(boolean1 == boolean0);
      assertEquals("=", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      assertSame(jSONPath_WildCardSegment0, jSONPath_WildCardSegment1);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(122, false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      Map<String, Object> map0 = JSONPath.paths((Object) bigDecimal0, serializeConfig0);
      assertNotNull(map0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("uM|T?.t", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("uM|T?.t", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.safeMode");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.safeMode", jSONPath1.getPath());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny.internal");
      assertNotNull(jSONPath_NullSegement0);
      
      jSONPath1.init();
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertEquals("fastjson.parser.safeMode", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MultiIndexSegment");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      int int0 = (-590);
      int int1 = (-672);
      DataTruncation dataTruncation0 = new DataTruncation((-672), true, false, (-590), (-672));
      assertNotNull(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-672), (-672), (-672));
      assertNotNull(jSONPath_RangeSegment0);
      
      SerializeConfig serializeConfig0 = null;
      try {
        serializeConfig0 = new SerializeConfig((-590), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.deny.internal", "-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)86;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      
      BigDecimal bigDecimal3 = BigDecimal.ZERO;
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal3);
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      
      BigDecimal bigDecimal4 = bigDecimal3.add(bigDecimal1, mathContext0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal3));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertTrue(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertTrue(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertNotNull(bigDecimal4);
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((short)0, bigDecimal4.shortValue());
      assertEquals((byte)0, bigDecimal4.byteValue());
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal4);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal4);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal0);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal5 = new BigDecimal((int) (byte)3);
      assertFalse(bigDecimal5.equals((Object)bigDecimal2));
      assertFalse(bigDecimal5.equals((Object)bigDecimal0));
      assertFalse(bigDecimal5.equals((Object)bigDecimal4));
      assertFalse(bigDecimal5.equals((Object)bigDecimal1));
      assertFalse(bigDecimal5.equals((Object)bigDecimal3));
      assertNotNull(bigDecimal5);
      assertEquals((short)3, bigDecimal5.shortValue());
      assertEquals((byte)3, bigDecimal5.byteValue());
      
      BigDecimal bigDecimal6 = bigDecimal2.stripTrailingZeros();
      assertFalse(bigDecimal2.equals((Object)bigDecimal4));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal5));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal3));
      assertFalse(bigDecimal6.equals((Object)bigDecimal0));
      assertFalse(bigDecimal6.equals((Object)bigDecimal3));
      assertFalse(bigDecimal6.equals((Object)bigDecimal1));
      assertFalse(bigDecimal6.equals((Object)bigDecimal5));
      assertFalse(bigDecimal6.equals((Object)bigDecimal4));
      assertNotNull(bigDecimal6);
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((byte)1, bigDecimal6.byteValue());
      assertEquals((short)1, bigDecimal6.shortValue());
      assertNotSame(bigDecimal2, bigDecimal4);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal5);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal6);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(bigDecimal6, bigDecimal0);
      assertNotSame(bigDecimal6, bigDecimal3);
      assertNotSame(bigDecimal6, bigDecimal1);
      assertNotSame(bigDecimal6, bigDecimal5);
      assertNotSame(bigDecimal6, bigDecimal4);
      assertSame(bigDecimal6, bigDecimal2);
      
      Float float0 = Float.valueOf((float) 5614464919154503228L);
      assertEquals(5.6144648E18F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal2, (byte)86);
      assertFalse(boolean0);
      assertFalse(bigDecimal2.equals((Object)bigDecimal4));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal5));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal3));
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertNotSame(bigDecimal2, bigDecimal4);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal5);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal6);
      assertNotSame(bigDecimal2, bigDecimal3);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      boolean boolean1 = JSONPath.eq(bigDecimal1, bigDecimal1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal6));
      assertFalse(bigDecimal1.equals((Object)bigDecimal3));
      assertFalse(bigDecimal1.equals((Object)bigDecimal5));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal1.equals((Object)bigDecimal4));
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal1, bigDecimal6);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal4);
      assertNotSame(bigDecimal1, bigDecimal5);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      boolean boolean2 = jSONPath0.isRef();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertSame(classLoader1, classLoader0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("rlike");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      Integer integer0 = new Integer((-2837));
      assertEquals((-2837), (int)integer0);
      assertNotNull(integer0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/", "rlike", (-2837));
      assertNotNull(sQLTimeoutException0);
      assertEquals((-2837), sQLTimeoutException0.getErrorCode());
      assertEquals("rlike", sQLTimeoutException0.getSQLState());
      assertEquals("/stackTrace/", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: /stackTrace/", sQLTimeoutException0.toString());
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$FilterSegment");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath1 = new JSONPath("rlike", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("rlike", jSONPath1.getPath());
      
      Collection<Object> collection0 = new PriorityQueue<Object>();
      assertNotNull(collection0);
      assertFalse(collection0.contains("rlike"));
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, integer0);
      assertFalse(boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SortFeidFastMatch");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) classLoader0, "SortFeidFastMatch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"N string");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$IntObjInSegement", "J\"XX<=4n2[<c2i", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = new JSONPath("J\"XX<=4n2[<c2i", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("J\"XX<=4n2[<c2i", jSONPath0.getPath());
      
      DataTruncation dataTruncation0 = new DataTruncation(2906, false, true, 93, 874);
      assertNotNull(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1372, 436, 220);
      assertNotNull(jSONPath_RangeSegment0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLSyntaxErrorException0);
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLSyntaxErrorException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLRecoverableException0, dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      Map<String, Object> map0 = JSONPath.paths((Object) feature0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      long[] longArray0 = new long[6];
      longArray0[1] = 8055461369741094911L;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("no match enum alue, ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no match enum alue, 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("no match enum alue, ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no match enum alue, 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-340);
      intArray0[1] = 9;
      intArray0[2] = 26;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {0, 9, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-43), (byte)105, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-43), (byte)105, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"\":99,\"aIMZ\":99,\"B\":true,\"6[P3i1_5+Y1F}8#\":\"a string\"}", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      assertArrayEquals(new int[] {0, 9, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(26, true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("99", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("99", jSONPath0.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fastjson.parser.autoTypeAccept";
      BigDecimal bigDecimal0 = new BigDecimal((-2799.7643508));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-2799), bigDecimal0.shortValue());
      assertEquals((byte)17, bigDecimal0.byteValue());
      
      boolean boolean2 = JSONPath.eqNotNull(26, 26);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"a string");
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$IntObjInSegement", "J\"XX<=4n2[<c2i", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("J\"XX<=4n2[<c2i", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("J\"XX<=4n2[<c2i", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(3814);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Short short0 = new Short((short) (-1190));
      assertEquals((short) (-1190), (short)short0);
      assertNotNull(short0);
      
      boolean boolean1 = JSONPath.remove((Object) parserConfig0, "fastjson.parser.deny");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Byte> class0 = Byte.class;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, jSONPath0, serializeConfig0);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("J\"XX<=4n2[<c2i", jSONPath0.getPath());
      
      boolean boolean2 = JSONPath.eqNotNull(short0, integer0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("J\"XX<=4n2[<c2i", jSONPath0.getPath());
      
      JavaBeanSerializer javaBeanSerializer0 = null;
      try {
        javaBeanSerializer0 = new JavaBeanSerializer(class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("=");
      assertNotNull(jSONPath0);
      assertEquals("=", jSONPath0.getPath());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("QJI@0d_)a7L", "=");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("=", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      JSONPath jSONPath1 = new JSONPath("=");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("=", jSONPath1.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("=", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      Set<?> set0 = jSONPath1.keySet((Object) sQLIntegrityConstraintViolationException0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(set0);
      assertFalse(set0.contains("="));
      assertEquals("=", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("=", jSONPath1.getPath());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertFalse(set0.isEmpty());
      assertEquals(5, set0.size());
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", (SerializeConfig) null, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = ")*0saHA6p2J~3";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")*0saHA6p2J~3");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$JSONPathParser", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}", intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$JSONPathParser", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: com.alibaba.fastjson.JSONPath$JSONPathParser", batchUpdateException0.toString());
      assertEquals("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}", batchUpdateException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}", (-1056), batchUpdateException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$JSONPathParser", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: com.alibaba.fastjson.JSONPath$JSONPathParser", batchUpdateException0.toString());
      assertEquals("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}", batchUpdateException0.getSQLState());
      assertEquals("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}", sQLSyntaxErrorException0.getMessage());
      assertEquals("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-1056), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}", sQLSyntaxErrorException0.toString());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("^2oYh8# 4jPEJ?F(u", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("^2oYh8# 4jPEJ?F(u", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      jSONPath0.deepSet(jSONPath_Operator0, "g", (-1261L), batchUpdateException0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$JSONPathParser", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: com.alibaba.fastjson.JSONPath$JSONPathParser", batchUpdateException0.toString());
      assertEquals("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}", batchUpdateException0.getSQLState());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("^2oYh8# 4jPEJ?F(u", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("/stackTrace/12", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("/stackTrace/12", jSONPath1.getPath());
      
      int int0 = (-4358);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Method method0 = null;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$JSONPathParser";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("99L-");
      assertNotNull(jSONPath_JSONPathParser0);
      
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(99L, long0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$JSONPathParser");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("a (C>");
      assertNotNull(jSONPath0);
      assertEquals("a (C>", jSONPath0.getPath());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("a (C>"));
      assertEquals(0, linkedList0.size());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLTimeoutException0);
      assertNotNull(sQLTransientException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTimeoutException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLTransientException0, "\"t/9m^k(&YoBvYqCZ", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path a (C>, segement \"t/9m^k(&YoBvYqCZ
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "5-";
      String string0 = "ZTo(U*n#t";
      stringArray0[1] = "ZTo(U*n#t";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(2, stringArray0.length);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-1084L));
      JSONPath jSONPath0 = new JSONPath("evalSize error : ");
      assertNotNull(jSONPath0);
      assertEquals("evalSize error : ", jSONPath0.getPath());
      
      boolean boolean1 = jSONPath0.contains((Object) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("evalSize error : ", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = new BigDecimal((-108));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((byte) (-108), bigDecimal1.byteValue());
      assertEquals((short) (-108), bigDecimal1.shortValue());
      
      Float float0 = Float.valueOf((float) (-108));
      assertEquals((-108.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double0 = new Double((-108));
      assertEquals((-108.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = JSONPath.eqNotNull(double0, float0);
      assertTrue(boolean0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")~8#R8+");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. )~8#R8+
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = JSONPath.compile("parser");
      assertNotNull(jSONPath0);
      assertEquals("parser", jSONPath0.getPath());
      
      int int0 = 33;
      DataTruncation dataTruncation0 = new DataTruncation(33, false, false, 79, 79);
      assertNotNull(dataTruncation0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("parser", "", dataTruncation0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("parser", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: parser", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      boolean boolean0 = jSONPath0.remove((Object) sQLTransactionRollbackException0);
      assertFalse(boolean0);
      assertEquals("parser", jSONPath0.getPath());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("parser", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: parser", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("[{\"end must greater than or equals start. start \":{}}]", "[{\"end must greater than or equals start. start \":{}}]", parserConfig0, 1583, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '.'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Feature[] featureArray0 = new Feature[10];
      // Undeclared exception!
      try { 
        JSONPath.extract("[[true],{}]", "[[true],{}]", parserConfig0, 1583, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : [[true],{}]
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Float float0 = new Float((float) 55296);
      assertEquals(55296.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      JSONPath jSONPath0 = new JSONPath("=AdZ')5ntERs4");
      assertNotNull(jSONPath0);
      assertEquals("=AdZ')5ntERs4", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(parserConfig0, "fastjson.parser.autoTypeAccept", 55296, "=AdZ')5ntERs4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path =AdZ')5ntERs4, segement fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertNotNull(map0);
      assertEquals("Qt", jSONPath0.getPath());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      parserConfig0.setAsmEnable(true);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Long long0 = new Long(2478L);
      assertEquals(2478L, (long)long0);
      assertNotNull(long0);
      
      JSONPath jSONPath1 = JSONPath.compile("Qt");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("Qt", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1644);
      intArray0[1] = 1220;
      intArray0[2] = (-45);
      intArray0[3] = (-804);
      intArray0[4] = 48;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {(-1644), 1220, (-45), (-804), 48}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean boolean0 = JSONPath.remove((Object) jSONPath_MultiIndexSegment0, "fastjson.parser.autoTypeAccept");
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1644), 1220, (-45), (-804), 48}, intArray0);
      assertEquals(5, intArray0.length);
      
      jSONPath1.deepSet(serializeConfig0, "fastjson.parser.autoTypeAccept", 2478L, (Object) null);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("Qt", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath jSONPath2 = new JSONPath("com.alibaba.fastjson.JSONPath$StringOpSegement", serializeConfig0, parserConfig0);
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath2.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath2, parserConfig0, (-4358));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.parser.ParserConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("[{\"end must greater than or equals start. start \":{},\"/stackTrace/2\":{},\"com.alibaba.fastjson.JSONPath\":99}]", "[{\"end must greater than or equals start. start \":{},\"/stackTrace/2\":{},\"com.alibaba.fastjson.JSONPath\":99}]", parserConfig0, 1583, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '.'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath(".");
      assertNotNull(jSONPath0);
      assertEquals(".", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)3;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("-", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("-", jSONPath0.getPath());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("TH;J<h~N");
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: TH;J<h~N", sQLNonTransientConnectionException0.toString());
      assertEquals("TH;J<h~N", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      UUID uUID0 = MockUUID.fromString("-");
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)3;
      intArray0[1] = (int) (byte)3;
      intArray0[2] = (int) (byte)86;
      intArray0[3] = (int) (byte)3;
      intArray0[4] = (int) (byte)86;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {3, 3, 86, 3, 86}, intArray0);
      assertEquals(5, intArray0.length);
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNotNull(jSONArray0);
      assertArrayEquals(new int[] {3, 3, 86, 3, 86}, intArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(5, intArray0.length);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(5, jSONArray0.size());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("-", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("TH;J<h~N", "w|QG3LP", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((byte)86);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      assertNotNull(jSONPath_FilterSegment0);
      
      Byte byte0 = new Byte((byte) (-102));
      assertEquals((byte) (-102), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, jSONPath_FilterSegment0, byte0);
      assertFalse(boolean0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("-", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, (Object) null);
      assertNotNull(jSONArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, intArray0.length);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(4461);
      assertNotNull(jSONPath_ArrayAccessSegment0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      Object object0 = JSONPath.extract("[99]", "[99]", parserConfig0, 1583, featureArray0);
      assertNull(object0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(10, featureArray0.length);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Map<String, Object> map0 = JSONPath.paths((Object) feature0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.SortFeidFastMatch;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ParserConfig.parserAllFieldToCache(class0, hashMap0);
      assertEquals(17, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      featureArray0[1] = feature0;
      Object object0 = JSONPath.extract("[99]", "[99]", parserConfig0, 1583, featureArray0);
      assertNull(object0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(10, featureArray0.length);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) feature0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      ParserConfig.global = parserConfig0;
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(ParserConfig.global.isAsmEnable());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertFalse(ParserConfig.global.isSafeMode());
      assertFalse(ParserConfig.global.isJacksonCompatible());
      
      long[] longArray0 = new long[6];
      longArray0[0] = 5614464919154503228L;
      longArray0[1] = 8055461369741094911L;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not match enum value, ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("syntax error: ", 561.9762216255946, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      String string0 = "iWdb?";
      JSONPath jSONPath0 = new JSONPath("a9Scd*5-dx");
      assertNotNull(jSONPath0);
      assertEquals("a9Scd*5-dx", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      String string1 = " Syk|OV%RO:";
      Class<JSONPath> class1 = JSONPath.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}p7E{q@";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, stringArray0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(1, stringArray0.length);
      
      List<Object> list0 = javaBeanSerializer0.getFieldValues((Object) null);
      assertNotNull(list0);
      assertFalse(list0.contains("}p7E{q@"));
      assertEquals(1, stringArray0.length);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(class1, class0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("}p7E{q@", (String) null, list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path a9Scd*5-dx, segement null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)3;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)36, (byte)3, (byte)95, (byte)3}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)3, bigInteger0.byteValue());
      assertEquals((short)24323, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertArrayEquals(new byte[] {(byte)36, (byte)3, (byte)95, (byte)3}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)3, bigInteger0.byteValue());
      assertEquals((short)24323, bigInteger0.shortValue());
      assertEquals((byte)3, bigDecimal0.byteValue());
      assertEquals((short)24323, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertArrayEquals(new byte[] {(byte)36, (byte)3, (byte)95, (byte)3}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)3, bigInteger0.byteValue());
      assertEquals((short)24323, bigInteger0.shortValue());
      assertEquals((byte)3, bigDecimal1.byteValue());
      assertEquals((short)24323, bigDecimal1.shortValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      
      BigDecimal bigDecimal3 = bigDecimal2.add(bigDecimal1, mathContext0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal3);
      assertArrayEquals(new byte[] {(byte)36, (byte)3, (byte)95, (byte)3}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)3, bigInteger0.byteValue());
      assertEquals((short)24323, bigInteger0.shortValue());
      assertEquals((byte)3, bigDecimal1.byteValue());
      assertEquals((short)24323, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((short)24324, bigDecimal3.shortValue());
      assertEquals((byte)4, bigDecimal3.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)36, (byte)3, (byte)95, (byte)3}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)3, bigInteger0.byteValue());
      assertEquals((short)24323, bigInteger0.shortValue());
      assertEquals((byte) (-3), bigInteger1.byteValue());
      assertEquals((short) (-24323), bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal4 = new BigDecimal((int) (byte)95);
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal4);
      assertEquals((byte)95, bigDecimal4.byteValue());
      assertEquals((short)95, bigDecimal4.shortValue());
      
      BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal5.equals((Object)bigDecimal2));
      assertFalse(bigDecimal5.equals((Object)bigDecimal3));
      assertTrue(bigDecimal5.equals((Object)bigDecimal4));
      assertFalse(bigDecimal5.equals((Object)bigDecimal0));
      assertFalse(bigDecimal5.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal5);
      assertEquals((byte)95, bigDecimal4.byteValue());
      assertEquals((short)95, bigDecimal4.shortValue());
      assertEquals((byte)95, bigDecimal5.byteValue());
      assertEquals((short)95, bigDecimal5.shortValue());
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal5);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal5, bigDecimal4);
      assertNotSame(bigDecimal5, bigDecimal2);
      assertNotSame(bigDecimal5, bigDecimal3);
      assertNotSame(bigDecimal5, bigDecimal0);
      assertNotSame(bigDecimal5, bigDecimal1);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = JSONPath.eqNotNull(bigDecimal5, float0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertTrue(bigDecimal4.equals((Object)bigDecimal5));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal5.equals((Object)bigDecimal2));
      assertFalse(bigDecimal5.equals((Object)bigDecimal3));
      assertTrue(bigDecimal5.equals((Object)bigDecimal4));
      assertFalse(bigDecimal5.equals((Object)bigDecimal0));
      assertFalse(bigDecimal5.equals((Object)bigDecimal1));
      assertEquals((byte)95, bigDecimal4.byteValue());
      assertEquals((short)95, bigDecimal4.shortValue());
      assertEquals((byte)95, bigDecimal5.byteValue());
      assertEquals((short)95, bigDecimal5.shortValue());
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal5);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal5, bigDecimal4);
      assertNotSame(bigDecimal5, bigDecimal2);
      assertNotSame(bigDecimal5, bigDecimal3);
      assertNotSame(bigDecimal5, bigDecimal0);
      assertNotSame(bigDecimal5, bigDecimal1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("fastjson.parser.deny", (-1.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("=");
      assertNotNull(jSONPath0);
      assertEquals("=", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("=", "=", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("=", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      Integer integer0 = new Integer((-989));
      assertEquals((-989), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_Operator0, integer0, "in");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("=", jSONPath0.getPath());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-989), 143, (-615), 70, (-71), (-615));
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-989,MONTH=143,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-615,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=70,HOUR_OF_DAY=70,MINUTE=-71,SECOND=-615,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      Byte byte0 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte0);
      assertNotNull(byte0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "in";
      stringArray0[1] = "=";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean2 = jSONPath_FilterGroup0.apply(jSONPath0, date0, byte0, jSONPath_MultiPropertySegment0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, stringArray0.length);
      assertEquals("=", jSONPath0.getPath());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-989,MONTH=143,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-615,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=70,HOUR_OF_DAY=70,MINUTE=-71,SECOND=-615,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      Object object0 = JSONPath.extract("[{}]", "[{}]", parserConfig0, 1583, featureArray0);
      assertNull(object0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(10, featureArray0.length);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Map<String, Object> map0 = JSONPath.paths((Object) feature0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.autoTypeSupport", "(h78?8<fkon&)4#");
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLTransientException: fastjson.parser.autoTypeSupport", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("(h78?8<fkon&)4#", sQLTransientException0.getSQLState());
      assertEquals("fastjson.parser.autoTypeSupport", sQLTransientException0.getMessage());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.deny", "fastjson.parser.autoTypeSupport", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson");
      assertNotNull(jSONPath0);
      assertEquals("fastjson", jSONPath0.getPath());
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath1 = JSONPath.compile("jsonpath error, path ");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("jsonpath error, path ", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath jSONPath2 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertEquals("com.alibaba.fastjson.JSONPath$ValueSegment", jSONPath2.getPath());
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_FilterSegment0, jSONPath1, jSONPath2);
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath1.equals((Object)jSONPath2));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertEquals("fastjson", jSONPath0.getPath());
      assertEquals("jsonpath error, path ", jSONPath1.getPath());
      assertEquals("com.alibaba.fastjson.JSONPath$ValueSegment", jSONPath2.getPath());
      assertNotSame(jSONPath0, jSONPath2);
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath1, jSONPath2);
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(43, 43, 43);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) mockGregorianCalendar0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("[true,null]", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("[true,null]", jSONPath0.getPath());
      
      int int0 = jSONPath0.evalSize(parserConfig0);
      assertEquals(9, int0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("[true,null]", jSONPath0.getPath());
      
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.safeMode", (Long[]) null, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 9);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      Class<SQLInvalidAuthorizationSpecException> class4 = SQLInvalidAuthorizationSpecException.class;
      classArray0[4] = class4;
      Class<SQLInvalidAuthorizationSpecException> class5 = SQLInvalidAuthorizationSpecException.class;
      classArray0[5] = class5;
      Class<SQLInvalidAuthorizationSpecException> class6 = SQLInvalidAuthorizationSpecException.class;
      classArray0[6] = class6;
      Class<SQLInvalidAuthorizationSpecException> class7 = SQLInvalidAuthorizationSpecException.class;
      classArray0[7] = class7;
      Class<SQLInvalidAuthorizationSpecException> class8 = SQLInvalidAuthorizationSpecException.class;
      classArray0[8] = class8;
      // Undeclared exception!
      try { 
        parserConfig0.initJavaBeanDeserializers(classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm deserializer error, java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.isJacksonCompatible());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertNotSame(parserConfig1, parserConfig0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("createCollection", serializeConfig0, parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(jSONPath0);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.isJacksonCompatible());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("createCollection", jSONPath0.getPath());
      
      Set<?> set0 = jSONPath0.keySet((Object) hashMap0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNull(set0);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.isJacksonCompatible());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("createCollection", jSONPath0.getPath());
      assertNotSame(parserConfig1, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      Object object0 = JSONPath.extract("[{}]", "[{}]", parserConfig0, 1583, featureArray0);
      assertNull(object0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(10, featureArray0.length);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Map<String, Object> map0 = JSONPath.paths((Object) feature0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      JSONPath jSONPath0 = JSONPath.compile("lemur");
      assertNotNull(jSONPath0);
      assertEquals("lemur", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "L*v", (Object[]) featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path lemur
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("syntax error: ", 561.9762216255946, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      String string0 = "{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}";
      JSONPath jSONPath0 = new JSONPath("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}");
      assertNotNull(jSONPath0);
      assertEquals("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Yqk1");
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("Yqk1", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Yqk1", sQLTimeoutException0.toString());
      
      String string1 = "AllowUnQuotedFieldNames";
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, "AllowUnQuotedFieldNames", jSONPath_SizeSegment0);
      assertNotNull(arrayList0);
      assertEquals("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string2 = jSONPath0.getPath();
      assertEquals("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}", jSONPath0.getPath());
      
      String string3 = "!:xd5nP(Y3hy!&";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!:xd5nP(Y3hy!&");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSONPath_WildCardSegment0;
      objectArray0[1] = (Object) "AllowUnQuotedFieldNames";
      objectArray0[2] = (Object) "Yqk1";
      objectArray0[3] = (Object) "{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}";
      objectArray0[4] = (Object) jSONPath_DoubleOpSegement0;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_Operator0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, 5614464919154503228L);
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny.internal");
      assertNotNull(jSONPath_NullSegement0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 5614464919154503228L;
      longArray0[1] = 5614464919154503228L;
      longArray0[2] = 5614464919154503228L;
      longArray0[3] = 5614464919154503228L;
      longArray0[4] = 5614464919154503228L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.parser.autoTypeSupport", longArray0, true);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {5614464919154503228L, 5614464919154503228L, 5614464919154503228L, 5614464919154503228L, 5614464919154503228L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 5614464919154503228L;
      longArray1[1] = (Long) 5614464919154503228L;
      longArray1[2] = (Long) 5614464919154503228L;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("VY[HtS'r_imujhtAUi", longArray1, false);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(3, longArray1.length);
      
      JSONPath jSONPath0 = JSONPath.compile("$2`>CzZgkOnlfgo");
      assertNotNull(jSONPath0);
      assertEquals("$2`>CzZgkOnlfgo", jSONPath0.getPath());
      
      Object object0 = JSONPath.eval((Object) jSONPath_IntObjInSegement0, "java.nio.file.Path");
      assertNull(object0);
      assertEquals(3, longArray1.length);
      
      int int0 = JSONPath.compare("java.nio.file.Path", "VY[HtS'r_imujhtAUi");
      assertEquals(20, int0);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Class<JSONPath.MultiPropertySegment> class0 = JSONPath.MultiPropertySegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      assertEquals("$2`>CzZgkOnlfgo", jSONPath0.getPath());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/**/", "fastjson.parser.safeMode");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("/**/", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("fastjson.parser.safeMode", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /**/", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      boolean boolean1 = jSONPath_IntObjInSegement0.apply(jSONPath0, javaBeanSerializer0, sQLInvalidAuthorizationSpecException0, jSONPath_NullSegement0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, longArray1.length);
      assertEquals("$2`>CzZgkOnlfgo", jSONPath0.getPath());
      assertEquals("/**/", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("fastjson.parser.safeMode", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /**/", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)38;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)95, (byte)36, (byte) (-25), (byte)65, (byte)3, (byte)95, (byte)38}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)24358, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertArrayEquals(new byte[] {(byte)95, (byte)36, (byte) (-25), (byte)65, (byte)3, (byte)95, (byte)38}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)24358, bigInteger0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertEquals((short)24358, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertArrayEquals(new byte[] {(byte)95, (byte)36, (byte) (-25), (byte)65, (byte)3, (byte)95, (byte)38}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)24358, bigInteger0.shortValue());
      assertEquals((byte)38, bigDecimal1.byteValue());
      assertEquals((short)24358, bigDecimal1.shortValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = bigDecimal1.add(bigDecimal0, mathContext0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertArrayEquals(new byte[] {(byte)95, (byte)36, (byte) (-25), (byte)65, (byte)3, (byte)95, (byte)38}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)24358, bigInteger0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertEquals((short)24358, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal1.byteValue());
      assertEquals((short)24358, bigDecimal1.shortValue());
      assertEquals((byte)76, bigDecimal2.byteValue());
      assertEquals((short) (-16820), bigDecimal2.shortValue());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)95, (byte)36, (byte) (-25), (byte)65, (byte)3, (byte)95, (byte)38}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)24358, bigInteger0.shortValue());
      assertEquals((byte) (-38), bigInteger1.byteValue());
      assertEquals((short) (-24358), bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal3 = new BigDecimal((int) (byte)36);
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal3);
      assertEquals((short)36, bigDecimal3.shortValue());
      assertEquals((byte)36, bigDecimal3.byteValue());
      
      BigDecimal bigDecimal4 = bigDecimal2.stripTrailingZeros();
      assertTrue(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal3));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal3));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal4);
      assertArrayEquals(new byte[] {(byte)95, (byte)36, (byte) (-25), (byte)65, (byte)3, (byte)95, (byte)38}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte)76, bigDecimal4.byteValue());
      assertEquals((short) (-16820), bigDecimal4.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)24358, bigInteger0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertEquals((short)24358, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal1.byteValue());
      assertEquals((short)24358, bigDecimal1.shortValue());
      assertEquals((byte)76, bigDecimal2.byteValue());
      assertEquals((short) (-16820), bigDecimal2.shortValue());
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal4);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal4);
      
      Float float0 = Float.valueOf((float) (byte)95);
      assertEquals(95.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = JSONPath.eqNotNull(float0, (byte)3);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("/cause/stackTrace/4", 0.0, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      Double double0 = new Double((-1580386065683472715L));
      assertEquals((-1.58038606568347264E18), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      int int0 = 1583;
      Feature feature0 = Feature.CustomMapDeserializer;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isJacksonCompatible());
      
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson", "Jo73^~.<`", parserConfig1, 4303, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      
      BigDecimal bigDecimal2 = new BigDecimal((int) (byte) (-31));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertEquals((short) (-31), bigDecimal2.shortValue());
      assertEquals((byte) (-31), bigDecimal2.byteValue());
      
      Float float0 = Float.valueOf((float) (byte) (-31));
      assertEquals((-31.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal2, float0);
      assertFalse(boolean0);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short) (-31), bigDecimal2.shortValue());
      assertEquals((byte) (-31), bigDecimal2.byteValue());
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(21);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((short)21, bigDecimal1.shortValue());
      assertEquals((byte)21, bigDecimal1.byteValue());
      
      Float float0 = Float.valueOf((-196.3781F));
      assertEquals((-196.3781F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = JSONPath.eqNotNull(float0, bigDecimal1);
      assertFalse(boolean0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)21, bigDecimal1.shortValue());
      assertEquals((byte)21, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[{\":\":null}]");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("s");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      boolean boolean1 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean1);
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)38;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)95, (byte)36, (byte) (-25), (byte)65, (byte)3, (byte)95, (byte)38}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((short)24358, bigInteger0.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertArrayEquals(new byte[] {(byte)95, (byte)36, (byte) (-25), (byte)65, (byte)3, (byte)95, (byte)38}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((short)24358, bigInteger0.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertEquals((short)24358, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertArrayEquals(new byte[] {(byte)95, (byte)36, (byte) (-25), (byte)65, (byte)3, (byte)95, (byte)38}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((short)24358, bigInteger0.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)24358, bigDecimal1.shortValue());
      assertEquals((byte)38, bigDecimal1.byteValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = bigDecimal1.add(bigDecimal0, mathContext0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
      assertArrayEquals(new byte[] {(byte)95, (byte)36, (byte) (-25), (byte)65, (byte)3, (byte)95, (byte)38}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((short)24358, bigInteger0.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertEquals((short)24358, bigDecimal0.shortValue());
      assertEquals((short)24358, bigDecimal1.shortValue());
      assertEquals((byte)38, bigDecimal1.byteValue());
      assertEquals((byte)76, bigDecimal2.byteValue());
      assertEquals((short) (-16820), bigDecimal2.shortValue());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)95, (byte)36, (byte) (-25), (byte)65, (byte)3, (byte)95, (byte)38}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((short)24358, bigInteger0.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short) (-24358), bigInteger1.shortValue());
      assertEquals((byte) (-38), bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal3 = new BigDecimal((int) (byte)36);
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal3);
      assertEquals((byte)36, bigDecimal3.byteValue());
      assertEquals((short)36, bigDecimal3.shortValue());
      
      Float float0 = Float.valueOf((float) (byte)95);
      assertEquals(95.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = JSONPath.eqNotNull(float0, (byte)3);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("/cause/stackTrace/4", 0.0, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      String string0 = "59hNccZR\\";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("59hNccZR", (-1580386065683472715L), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      String string1 = "{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}";
      JSONPath jSONPath0 = new JSONPath(";a@I");
      assertNotNull(jSONPath0);
      assertEquals(";a@I", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("stackTrace");
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("stackTrace", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: stackTrace", sQLTimeoutException0.toString());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      assertNotNull(batchUpdateException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("stackTrace", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: stackTrace", sQLTimeoutException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTimeoutException: stackTrace", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTimeoutException: stackTrace", batchUpdateException0.getMessage());
      
      jSONPath0.arrayAdd((Object) batchUpdateException0, (Object[]) null);
      assertEquals(";a@I", jSONPath0.getPath());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("stackTrace", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: stackTrace", sQLTimeoutException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTimeoutException: stackTrace", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTimeoutException: stackTrace", batchUpdateException0.getMessage());
      
      JSONPath jSONPath1 = JSONPath.compile("Yqk1");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("Yqk1", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      int int0 = (-1721037378);
      // Undeclared exception!
      try { 
        JSONPath.extract("-H", ",", parserConfig0, (-1721037378), (Feature[]) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(804);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("H,<Ss7`/9GmGR");
      assertNotNull(jSONPath_JSONPathParser0);
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals(',', char0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = new JSONPath("H,<Ss7`/9GmGR", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("H,<Ss7`/9GmGR", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = new BigDecimal(804);
      assertNotNull(bigDecimal0);
      assertEquals((short)804, bigDecimal0.shortValue());
      assertEquals((byte)36, bigDecimal0.byteValue());
      
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
      assertEquals((short)804, bigDecimal0.shortValue());
      assertEquals((byte)36, bigDecimal0.byteValue());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("fastjson.parser.autoTypeSupport", (Throwable) null);
      assertNotNull(sQLNonTransientException0);
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: fastjson.parser.autoTypeSupport", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      
      sQLNonTransientException0.printStackTrace();
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: fastjson.parser.autoTypeSupport", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: fastjson.parser.autoTypeSupport", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":true,\"b\":{}}", "fastjson.parser.autoTypeSupport", (-2276), sQLNonTransientException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: fastjson.parser.autoTypeSupport", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals((-2276), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":true,\"b\":{}}", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("fastjson.parser.autoTypeSupport", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":true,\"b\":{}}", sQLInvalidAuthorizationSpecException0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-2276), (-811), (-498), 37, (-498));
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("2~T)&lCo.y}L>y:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2~T)&lCo.y}L>y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      String string0 = "_<l`{C/d3+lm7a_q}Af";
      JSONPath jSONPath0 = new JSONPath("_<l`{C/d3+lm7a_q}Af");
      assertNotNull(jSONPath0);
      assertEquals("_<l`{C/d3+lm7a_q}Af", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = new BigDecimal((-520183782617964618L));
      assertNotNull(bigDecimal0);
      assertEquals((short)8118, bigDecimal0.shortValue());
      assertEquals((byte) (-74), bigDecimal0.byteValue());
      
      String[] stringArray0 = new String[0];
      BigDecimal bigDecimal1 = (BigDecimal)JSONPath.reserveToObject(bigDecimal0, stringArray0);
      assertNotNull(bigDecimal1);
      assertEquals(0, stringArray0.length);
      assertEquals((short)8118, bigDecimal0.shortValue());
      assertEquals((byte) (-74), bigDecimal0.byteValue());
      assertEquals((byte) (-74), bigDecimal1.byteValue());
      assertEquals((short)8118, bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) bigDecimal1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : _<l`{C/d3+lm7a_q}Af
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath jSONPath0 = new JSONPath("LC['Q");
      assertNotNull(jSONPath0);
      assertEquals("LC['Q", jSONPath0.getPath());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)38;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)3, (byte)65, (byte)3, (byte)95, (byte)38, (byte)38}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)9766, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertArrayEquals(new byte[] {(byte)3, (byte)65, (byte)3, (byte)95, (byte)38, (byte)38}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)9766, bigInteger0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertEquals((short)9766, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertArrayEquals(new byte[] {(byte)3, (byte)65, (byte)3, (byte)95, (byte)38, (byte)38}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)9766, bigInteger0.shortValue());
      assertEquals((byte)38, bigDecimal1.byteValue());
      assertEquals((short)9766, bigDecimal1.shortValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = bigDecimal0.add(bigDecimal1, mathContext0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertArrayEquals(new byte[] {(byte)3, (byte)65, (byte)3, (byte)95, (byte)38, (byte)38}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)9766, bigInteger0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertEquals((short)9766, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal1.byteValue());
      assertEquals((short)9766, bigDecimal1.shortValue());
      assertEquals((byte)76, bigDecimal2.byteValue());
      assertEquals((short)19532, bigDecimal2.shortValue());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)3, (byte)65, (byte)3, (byte)95, (byte)38, (byte)38}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)9766, bigInteger0.shortValue());
      assertEquals((byte) (-38), bigInteger1.byteValue());
      assertEquals((short) (-9766), bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal3 = new BigDecimal((-448));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal3);
      assertEquals((short) (-448), bigDecimal3.shortValue());
      assertEquals((byte)64, bigDecimal3.byteValue());
      
      BigDecimal bigDecimal4 = bigDecimal3.stripTrailingZeros();
      assertTrue(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal4);
      assertEquals((byte)64, bigDecimal4.byteValue());
      assertEquals((short) (-448), bigDecimal4.shortValue());
      assertEquals((short) (-448), bigDecimal3.shortValue());
      assertEquals((byte)64, bigDecimal3.byteValue());
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal4);
      
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (byte)65);
      assertFalse(boolean0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)3, (byte)65, (byte)3, (byte)95, (byte)38, (byte)38}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)9766, bigInteger0.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("fastjson.parser.autoTypeSupport", (byte)38, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      String string0 = null;
      JSONPath jSONPath1 = null;
      try {
        jSONPath1 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      assertNotNull(jSONPath0);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)53;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)53}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)53, bigInteger0.byteValue());
      assertEquals((short)53, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.add(bigDecimal0, mathContext0);
      assertNotNull(bigDecimal1);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)0, (byte)53}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)53, bigInteger0.byteValue());
      assertEquals((short)53, bigInteger0.shortValue());
      assertEquals((short) (-53), bigInteger1.shortValue());
      assertEquals((byte) (-53), bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal2 = new BigDecimal((int) (byte)53);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
      assertEquals((byte)53, bigDecimal2.byteValue());
      assertEquals((short)53, bigDecimal2.shortValue());
      
      Float float0 = Float.valueOf((float) (byte)43);
      assertEquals(43.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = JSONPath.eqNotNull(bigInteger1, (byte)0);
      assertFalse(boolean0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)0, (byte)53}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)53, bigInteger0.byteValue());
      assertEquals((short)53, bigInteger0.shortValue());
      assertEquals((short) (-53), bigInteger1.shortValue());
      assertEquals((byte) (-53), bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath1 = new JSONPath("LT", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("LT", jSONPath1.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      jSONPath_JSONPathParser0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-3990L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      BigDecimal bigDecimal0 = new BigDecimal(5614464919154503228L);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      assertEquals((byte)60, bigDecimal0.byteValue());
      
      String[] stringArray0 = new String[1];
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, (JSONPath.Filter) null, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath.arrayAdd((Object) null, "BMPf", (Object[]) stringArray0);
      assertEquals(1, stringArray0.length);
      
      JSONPath jSONPath0 = new JSONPath("_");
      assertNotNull(jSONPath0);
      assertEquals("_", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but '_'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      Map<String, Object> map0 = JSONPath.paths((Object) classLoader0);
      assertNotNull(map0);
      assertEquals(19, map0.size());
      assertFalse(map0.isEmpty());
      assertSame(classLoader0, classLoader1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 823641066473609950L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.parser.deny", longArray0, false);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {823641066473609950L}, longArray0);
      assertEquals(1, longArray0.length);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath0, parserConfig0, jSONPath0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {823641066473609950L}, longArray0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(1, longArray0.length);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertSame(classLoader0, classLoader1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      DataTruncation dataTruncation0 = new DataTruncation((-658), true, false, (-590), (-658));
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-590);
      longArray0[1] = (long) (-658);
      longArray0[2] = (long) (-658);
      longArray0[3] = 310L;
      longArray0[4] = 310L;
      longArray0[5] = 310L;
      longArray0[6] = 310L;
      longArray0[7] = 310L;
      longArray0[8] = (long) (-590);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("like");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("-");
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser1));
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser2);
      
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("jWCe|IJqy\"cT", longArray0, true);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {(-590L), (-658L), (-658L), 310L, 310L, 310L, 310L, 310L, (-590L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser2.filterRest(jSONPath_IntInSegement0);
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser1));
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_Filter0);
      assertArrayEquals(new long[] {(-590L), (-658L), (-658L), 310L, 310L, 310L, 310L, 310L, (-590L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotSame(jSONPath_JSONPathParser2, jSONPath_JSONPathParser1);
      assertNotSame(jSONPath_JSONPathParser2, jSONPath_JSONPathParser0);
      assertSame(jSONPath_IntInSegement0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_IntInSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntInSegement0, jSONPath_Filter0, true);
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser1));
      assertFalse(jSONPath_JSONPathParser2.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_FilterGroup0);
      assertArrayEquals(new long[] {(-590L), (-658L), (-658L), 310L, 310L, 310L, 310L, 310L, (-590L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("jsonpath can not be null");
      assertNotNull(jSONPath0);
      assertEquals("jsonpath can not be null", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-7702));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      
      boolean boolean1 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, jSONPath_PropertySegment0, sQLDataException0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-590L), (-658L), (-658L), 310L, 310L, 310L, 310L, 310L, (-590L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals("jsonpath can not be null", jSONPath0.getPath());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertSame(jSONPath_IntInSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("syntax error: ", 561.9762216255946, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("{\"/cause/stackTrace/0\":true}");
      assertNotNull(jSONPath0);
      assertEquals("{\"/cause/stackTrace/0\":true}", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Yqk1");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: Yqk1", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Yqk1", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      jSONPath0.arrayAdd((Object) jSONPath_Operator0, (Object[]) null);
      assertEquals("{\"/cause/stackTrace/0\":true}", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("syntax error: ");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("syntax error: ", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 310L;
      longArray0[1] = 310L;
      longArray0[2] = 310L;
      longArray0[3] = 310L;
      longArray0[4] = 310L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("sy", longArray0, false);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {310L, 310L, 310L, 310L, 310L}, longArray0);
      assertEquals(5, longArray0.length);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      assertNotNull(jSONPath_MinSegment0);
      
      Integer integer0 = new Integer((-779));
      assertEquals((-779), (int)integer0);
      assertNotNull(integer0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("Value");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_NullSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath2 = JSONPath.compile(", name ");
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertEquals(", name ", jSONPath2.getPath());
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      boolean boolean2 = jSONPath_FilterGroup0.apply(jSONPath2, "/stackTrace/1", jSONPath_DoubleOpSegement0, jSONPath2);
      assertTrue(boolean2);
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(", name ", jSONPath2.getPath());
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      String string0 = "{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}";
      JSONPath jSONPath0 = new JSONPath("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}");
      assertNotNull(jSONPath0);
      assertEquals("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Yqk1");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Yqk1", sQLTimeoutException0.toString());
      assertEquals("Yqk1", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Yqk1";
      stringArray0[1] = "Yqk1";
      stringArray0[2] = "{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}";
      stringArray0[3] = "Yqk1";
      stringArray0[4] = "{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, (Object) null);
      assertNotNull(jSONArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1, intArray0.length);
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(4461);
      assertNotNull(jSONPath_ArrayAccessSegment0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pSf*L\"0vmE");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertFalse(object0.equals((Object)jSONPath_Segment0));
      assertNotNull(object0);
      assertNotSame(object0, jSONPath_Segment0);
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      boolean boolean2 = JSONPath.isInt(class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JSONPath jSONPath0 = new JSONPath(",");
      assertNotNull(jSONPath0);
      assertEquals(",", jSONPath0.getPath());
      
      jSONPath0.init();
      assertEquals(",", jSONPath0.getPath());
      
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      assertNotNull(jSONPath_OperatorArray0);
      assertEquals(17, jSONPath_OperatorArray0.length);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      
      Object object1 = jSONPath0.getPropertyValue(sQLTransientConnectionException0, "s`)g", 1L);
      assertNull(object1);
      assertEquals(",", jSONPath0.getPath());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 512;
      intArray0[1] = 64;
      intArray0[2] = 110;
      intArray0[3] = 1440;
      intArray0[4] = (-782);
      intArray0[5] = 341;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {512, 64, 110, 1440, (-782), 341}, intArray0);
      assertEquals(6, intArray0.length);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, "pSf*L\"0vmE", mockGregorianCalendar0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      assertNotNull(jSONPath0);
      assertEquals(".", jSONPath0.getPath());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("Qg!:", 4313L, jSONPath_Operator0);
      assertNotNull(jSONPath_IntOpSegement0);
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_IntOpSegement0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isJacksonCompatible());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertNotSame(parserConfig1, parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("LE", serializeConfig0, parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertEquals("LE", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(map0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isJacksonCompatible());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(map0.isEmpty());
      assertEquals(9, map0.size());
      assertNotSame(parserConfig1, parserConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      Object object0 = jSONPath0.getArrayItem((Object) null, 37);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNull(object0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertEquals("LE", jSONPath0.getPath());
      assertNotSame(parserConfig1, parserConfig0);
      
      Long long2 = new Long(37);
      assertEquals(37L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      assertNotNull(jSONPath_JSONPathParser0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) bigInteger0, "LE");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Vgs$*fms`");
      assertNotNull(jSONPath0);
      assertEquals("Vgs$*fms`", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue("Vgs$*fms`", "com.alibaba.fastjson.JSONPath$RefOpSegement", true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.isSafeMode());
      assertNotSame(parserConfig1, parserConfig0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(map0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.isSafeMode());
      assertEquals(9, map0.size());
      assertFalse(map0.isEmpty());
      assertNotSame(parserConfig1, parserConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      Long long2 = new Long(37);
      assertEquals(37L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      assertNotNull(jSONPath_JSONPathParser0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) bigInteger0, "LE");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertNotSame(parserConfig1, parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("LE", serializeConfig0, parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(jSONPath0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertEquals("LE", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(map0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(map0.isEmpty());
      assertEquals(9, map0.size());
      assertNotSame(parserConfig1, parserConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      Object object0 = jSONPath0.getArrayItem((Object) null, 37);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNull(object0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertEquals("LE", jSONPath0.getPath());
      assertNotSame(parserConfig1, parserConfig0);
      
      Long long2 = new Long(37);
      assertEquals(37L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      JSONPath jSONPath1 = JSONPath.compile("SpLj");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("SpLj", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      int int0 = jSONPath0.evalSize((Object) null);
      assertEquals((-1), int0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertEquals("LE", jSONPath0.getPath());
      assertNotSame(parserConfig1, parserConfig0);
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "annotatedParameterTypes";
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("annotatedParameterTypes");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("laWq&N");
      assertNotNull(jSONPath0);
      assertEquals("laWq&N", jSONPath0.getPath());
      
      int int0 = 1117;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1117);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("HvjR");
      assertNotNull(defaultJSONParser0);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : laWq&N
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = new JSONPath("$iWdy0&?");
      assertNotNull(jSONPath0);
      assertEquals("$iWdy0&?", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath1 = new JSONPath("99");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("99", jSONPath1.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Long long0 = new Long(1236);
      assertEquals(1236L, (long)long0);
      assertNotNull(long0);
      
      Class<MockCalendar> class0 = MockCalendar.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNull(javaBeanSerializer0);
      assertEquals("$iWdy0&?", jSONPath0.getPath());
      assertNotSame(jSONPath0, jSONPath1);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(30, 36, 30);
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, (Object) null, 30, jSONPath_RangeSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("!`,9Y3W");
      assertNotNull(jSONPath0);
      assertEquals("!`,9Y3W", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("M");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, 5614464919154503228L);
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny.internal");
      assertNotNull(jSONPath_NullSegement0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 5614464919154503228L;
      longArray0[1] = 5614464919154503228L;
      longArray0[2] = 5614464919154503228L;
      longArray0[0] = 5614464919154503228L;
      longArray0[4] = 5614464919154503228L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.parser.autoTypeSupport", longArray0, false);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {5614464919154503228L, 5614464919154503228L, 5614464919154503228L, 0L, 5614464919154503228L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 5614464919154503228L;
      longArray1[1] = (Long) 5614464919154503228L;
      longArray0[3] = 5614464919154503228L;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("VY[HtS'r_imujhtAUi", longArray1, false);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(3, longArray1.length);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Class<JSONPath.MultiPropertySegment> class0 = JSONPath.MultiPropertySegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/**/", "fastjson.parser.safeMode");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("fastjson.parser.safeMode", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("/**/", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /**/", sQLInvalidAuthorizationSpecException0.toString());
      
      boolean boolean1 = jSONPath_IntObjInSegement0.apply(jSONPath0, javaBeanSerializer0, sQLInvalidAuthorizationSpecException0, jSONPath_NullSegement0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, longArray1.length);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertEquals("fastjson.parser.safeMode", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("/**/", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /**/", sQLInvalidAuthorizationSpecException0.toString());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      assertNotNull(jSONPath0);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser1.explain();
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_SegmentArray0);
      assertEquals(3, jSONPath_SegmentArray0.length);
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(81);
      assertEquals(81L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("!wz3s#m+v1", longArray0, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(1, longArray0.length);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      assertEquals(1, longArray0.length);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, "!wz3s#m+v1", bigInteger0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("Yqk1<<a|");
      assertNotNull(jSONPath_NullSegement0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("Yqk1<<a|", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("Yqk1<<a|", jSONPath0.getPath());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("V", "Yqk1<<a|");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("V", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("Yqk1<<a|", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: V", sQLInvalidAuthorizationSpecException0.toString());
      
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("!wrs7]47FnfcG", (Long[]) null, false);
      assertNotNull(jSONPath_IntObjInSegement0);
      
      // Undeclared exception!
      try { 
        jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_NullSegement0, jSONPath_NullSegement0, "V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$IntObjInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      DataTruncation dataTruncation0 = new DataTruncation((-672), true, false, (-590), (-672));
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-590);
      longArray0[1] = (long) (-672);
      longArray0[2] = (long) (-672);
      longArray0[3] = 310L;
      longArray0[4] = (-2567L);
      longArray0[5] = 310L;
      longArray0[6] = 310L;
      longArray0[7] = 310L;
      longArray0[8] = (long) (-590);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("jWCe|IJqy\"cT", longArray0, true);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {(-590L), (-672L), (-672L), 310L, (-2567L), 310L, 310L, 310L, (-590L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) (-590L);
      longArray1[1] = (Long) (-2567L);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("VY[HtS'r_imujhtAUi", longArray1, true);
      assertNotNull(jSONPath_IntObjInSegement0);
      assertEquals(2, longArray1.length);
      
      JSONPath jSONPath0 = JSONPath.compile("Xerq\"Hub|/a=,");
      assertNotNull(jSONPath0);
      assertEquals("Xerq\"Hub|/a=,", jSONPath0.getPath());
      
      Byte byte0 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte0);
      assertNotNull(byte0);
      
      JSONPath jSONPath1 = new JSONPath("Xerq\"Hub|/a=,");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("Xerq\"Hub|/a=,", jSONPath1.getPath());
      
      boolean boolean1 = jSONPath_IntObjInSegement0.apply(jSONPath0, byte0, jSONPath1, "VY[HtS'r_imujhtAUi");
      assertTrue(boolean1);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, longArray1.length);
      assertEquals("Xerq\"Hub|/a=,", jSONPath0.getPath());
      assertEquals("Xerq\"Hub|/a=,", jSONPath1.getPath());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)38;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)3, (byte)97, (byte)38}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((short)24870, bigInteger0.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)3, (byte)97, (byte)38}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((short)24870, bigInteger0.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)24870, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)3, (byte)97, (byte)38}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((short)24870, bigInteger0.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((byte)38, bigDecimal1.byteValue());
      assertEquals((short)24870, bigDecimal1.shortValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = bigDecimal0.add(bigDecimal1, mathContext0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)3, (byte)97, (byte)38}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((short)24870, bigInteger0.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)24870, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertEquals((byte)38, bigDecimal1.byteValue());
      assertEquals((short)24870, bigDecimal1.shortValue());
      assertEquals((byte)76, bigDecimal2.byteValue());
      assertEquals((short) (-15796), bigDecimal2.shortValue());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)3, (byte)97, (byte)38}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((short)24870, bigInteger0.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((byte) (-38), bigInteger1.byteValue());
      assertEquals((short) (-24870), bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal3 = bigDecimal0.stripTrailingZeros();
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertTrue(bigDecimal3.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal3);
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)3, (byte)97, (byte)38}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((short)24870, bigInteger0.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)24870, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertEquals((byte)38, bigDecimal3.byteValue());
      assertEquals((short)24870, bigDecimal3.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, bigDecimal0);
      assertFalse(boolean0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertTrue(bigDecimal0.equals((Object)bigDecimal3));
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertArrayEquals(new byte[] {(byte)107, (byte)86, (byte)3, (byte)97, (byte)38}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((short)24870, bigInteger0.shortValue());
      assertEquals((byte)38, bigInteger0.byteValue());
      assertEquals((short)24870, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Feature feature0 = Feature.CustomMapDeserializer;
      Feature feature1 = Feature.IgnoreNotMatch;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature1;
      // Undeclared exception!
      try { 
        JSONPath.extract("i{I!Po0f!", "[\"a string\"]", parserConfig0, (int) (byte)97, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal1 = new BigDecimal(4029);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((short)4029, bigDecimal1.shortValue());
      assertEquals((byte) (-67), bigDecimal1.byteValue());
      
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((byte)54, bigInteger1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short) (-7681), bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short) (-7681), bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)7681, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigDecimal bigDecimal1 = new BigDecimal(99999);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((byte) (-97), bigDecimal1.byteValue());
      assertEquals((short) (-31073), bigDecimal1.shortValue());
      
      boolean boolean0 = JSONPath.eqNotNull((byte) (-31), bigDecimal0);
      assertFalse(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotSame(bigDecimal0, bigDecimal1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RegMatchSegement");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$RegMatchSegement", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
      assertEquals("com.alibaba.fastjson.JSONPath$RegMatchSegement", jSONPath0.getPath());
      
      Set<?> set0 = jSONPath0.evalKeySet("com.alibaba.fastjson.JSONPath$RegMatchSegement");
      assertNotNull(set0);
      assertFalse(set0.contains("com.alibaba.fastjson.JSONPath$RegMatchSegement"));
      assertEquals("com.alibaba.fastjson.JSONPath$RegMatchSegement", jSONPath0.getPath());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      Object object0 = JSONPath.extract("4}czo7.", "%");
      assertEquals(4, object0);
      assertNotNull(object0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but '%'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      BigDecimal bigDecimal0 = new BigDecimal(5614464919154503228L);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      assertEquals((byte)60, bigDecimal0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      JSONPath jSONPath0 = new JSONPath("Y");
      assertNotNull(jSONPath0);
      assertEquals("Y", jSONPath0.getPath());
      
      jSONPath0.init();
      assertEquals("Y", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Feature feature0 = Feature.CustomMapDeserializer;
      Feature feature1 = Feature.IgnoreNotMatch;
      Feature[] featureArray0 = new Feature[5];
      Feature feature2 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature2;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature1;
      // Undeclared exception!
      try { 
        JSONPath.extract("It~xC`e\")piROu", "_", parserConfig0, (-9), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2It~xC`e\")piROu
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = JSONPath.compile("t6eJ`;c");
      assertNotNull(jSONPath0);
      assertEquals("t6eJ`;c", jSONPath0.getPath());
      
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(3169, roundingMode0);
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1.0E8, mathContext0);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-7936), bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) bigDecimal0, "~");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 310L;
      longArray0[1] = 310L;
      longArray0[2] = 310L;
      longArray0[3] = 310L;
      longArray0[4] = 310L;
      longArray0[5] = 310L;
      longArray0[6] = 310L;
      longArray0[7] = 310L;
      longArray0[8] = 310L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("A{*xl", longArray0, false);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {310L, 310L, 310L, 310L, 310L, 310L, 310L, 310L, 310L}, longArray0);
      assertEquals(9, longArray0.length);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1430), (-1430), (-1430));
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath jSONPath0 = new JSONPath("=");
      assertNotNull(jSONPath0);
      assertEquals("=", jSONPath0.getPath());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A{*xl";
      stringArray0[1] = "A{*xl";
      stringArray0[2] = "=";
      stringArray0[3] = "bQ~i>Pb";
      stringArray0[4] = "=";
      stringArray0[5] = "A{*xl";
      stringArray0[6] = "=";
      stringArray0[7] = "A{*xl";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(8, stringArray0.length);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("like", "@q+@Ylg*", (-1430));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("like", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: like", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals((-1430), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("@q+@Ylg*", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_MultiPropertySegment0, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("*", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) "*", serializeConfig0);
      assertNotNull(map0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(8);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(8);
      assertFalse(jSONPath_ArrayAccessSegment1.equals((Object)jSONPath_ArrayAccessSegment0));
      assertNotNull(jSONPath_ArrayAccessSegment1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath jSONPath1 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNotNull(jSONPath1);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath1.getPath());
      assertSame(jSONPath1, jSONPath0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath2 = JSONPath.compile("t6eJ`;c");
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertEquals("t6eJ`;c", jSONPath2.getPath());
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(3, roundingMode0);
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) 3, mathContext0);
      assertNotNull(bigDecimal0);
      assertEquals((short)3, bigDecimal0.shortValue());
      assertEquals((byte)3, bigDecimal0.byteValue());
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_IN;
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      boolean boolean1 = JSONPath.remove((Object) jSONPath_Operator1, "com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertFalse(boolean1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      stringArray0[1] = "t6eJ`;c";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : t6eJ`;c
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      assertNotNull(jSONPath0);
      assertEquals(".", jSONPath0.getPath());
      
      JSON.DEFAULT_GENERATE_FEATURE = 47;
      int int0 = jSONPath0.size((Object) ".");
      assertEquals(2, int0);
      assertEquals(".", jSONPath0.getPath());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      assertNotNull(jSONPath0);
      assertEquals("LIKE", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(8388607);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      boolean boolean0 = JSONPath.contains((Object) jSONPath_ArrayAccessSegment0, "LIKE");
      assertFalse(boolean0);
      
      jSONPath0.deepSet("LIKE", "LIKE", 5614464919154503228L, "LIKE");
      assertEquals("LIKE", jSONPath0.getPath());
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      Byte byte0 = new Byte((byte) (-93));
      assertEquals((byte) (-93), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) jSONPath_SizeSegment0, "P&heE\"*o0*bgPWB>v", (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : P&heE\"*o0*bgPWB>v
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile(")4BGVYef");
      assertNotNull(jSONPath0);
      assertEquals(")4BGVYef", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, ")4BGVYef", jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("syntax error: ", 561.9762216255946, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("{\"/cause/stackTrace/0\":true}");
      assertNotNull(jSONPath0);
      assertEquals("{\"/cause/stackTrace/0\":true}", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Yqk1");
      assertNotNull(sQLTimeoutException0);
      assertEquals("Yqk1", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: Yqk1", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      jSONPath0.arrayAdd((Object) jSONPath_Operator0, (Object[]) null);
      assertEquals("{\"/cause/stackTrace/0\":true}", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("syntax error: ");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("syntax error: ", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 310L;
      longArray0[1] = 310L;
      longArray0[2] = 310L;
      longArray0[3] = 310L;
      longArray0[4] = 310L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("sy", longArray0, false);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {310L, 310L, 310L, 310L, 310L}, longArray0);
      assertEquals(5, longArray0.length);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath2 = JSONPath.compile("hC#hKJ9G&yXmGO+q`");
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertEquals("hC#hKJ9G&yXmGO+q`", jSONPath2.getPath());
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath1, "/stackTrace/1", jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"fruit\":\"Apple\",\"size\":false,\"value is null\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":-99}");
      assertNotNull(mockPrintWriter0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":false,\"value is null\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":-99}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        JSONPath.read("{\"fruit\":\"Apple\",\"size\":false,\"value is null\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":-99}", "Xq.n^o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Xq.n^o
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fastjson.parser.safeMode";
      stringArray0[1] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(2, stringArray0.length);
      
      JSONPath jSONPath1 = JSONPath.compile("'");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("'", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = JSONPath.contains((Object) jSONPath0, "fastjson.parser.safeMode");
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertNotSame(jSONPath0, jSONPath1);
      
      Short short0 = new Short((short)106);
      assertEquals((short)106, (short)short0);
      assertNotNull(short0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath1, jSONPath_Operator0, jSONPath1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(arrayList0);
      assertEquals(2, stringArray0.length);
      assertEquals("'", jSONPath1.getPath());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      stringArray0[0] = "com.alibaba.fastjson.JSONPath";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("^7NK1B-&0vobJHE^", "^7NK1B-&0vobJHE^", "^7NK1B-&0vobJHE^", stringArray0, true);
      assertNotNull(jSONPath_MatchSegement0);
      assertEquals(1, stringArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath", jSONPath0.getPath());
      
      int int0 = (-23);
      int int1 = 126;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-23), 126, 19);
      assertNotNull(jSONPath_RangeSegment0);
      
      String string0 = "a string";
      int int2 = 11;
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "a string", mockGregorianCalendar0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath jSONPath0 = new JSONPath("LC['Q");
      assertNotNull(jSONPath0);
      assertEquals("LC['Q", jSONPath0.getPath());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      Object object0 = jSONPath0.eval((Object) sQLClientInfoException0);
      assertNull(object0);
      assertEquals("LC['Q", jSONPath0.getPath());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "LC['Q", "LC['Q");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      BigDecimal bigDecimal0 = BigDecimal.valueOf(675868731199239589L, 1102);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) "tr?p");
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", 1583);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("yyyy-MM-dd HH:mm:ss.SSS", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: yyyy-MM-dd HH:mm:ss.SSS", sQLSyntaxErrorException0.toString());
      assertEquals("yyyy-MM-dd HH:mm:ss.SSS", sQLSyntaxErrorException0.getMessage());
      assertEquals(1583, sQLSyntaxErrorException0.getErrorCode());
      
      int int0 = JSONPath.size((Object) bigDecimal0, "kgw");
      assertEquals((-1), int0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AutoCloseSource;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.InternFieldNames;
      featureArray0[4] = feature4;
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, (JSONPath.Filter) null, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = new JSONPath("JSONPath$StringOpSegement");
      assertNotNull(jSONPath0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      int int0 = jSONPath0.size((Object) feature4);
      assertEquals((-1), int0);
      assertFalse(feature4.equals((Object)feature3));
      assertFalse(feature4.equals((Object)feature1));
      assertFalse(feature4.equals((Object)feature0));
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertSame(feature4, feature2);
      assertNotSame(feature4, feature3);
      assertNotSame(feature4, feature1);
      assertNotSame(feature4, feature0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k2mVJn`9'3cw3WF*#KD");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      Short short0 = new Short((short)709);
      assertEquals((short)709, (short)short0);
      assertNotNull(short0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.autoTypeAccept", "?8;eQmn=K-=&G]*9g^}");
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLTransientException: fastjson.parser.autoTypeAccept", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("?8;eQmn=K-=&G]*9g^}", sQLTransientException0.getSQLState());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTransientException0.getMessage());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.deny", "k2mVJn`9'3cw3WF*#KD", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("X$A*=UVF?xE02+p}");
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: X$A*=UVF?xE02+p}", sQLNonTransientConnectionException0.toString());
      assertEquals("X$A*=UVF?xE02+p}", sQLNonTransientConnectionException0.getMessage());
      
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, feature1, "?8;eQmn=K-=&G]*9g^}", sQLNonTransientConnectionException0);
      assertFalse(boolean0);
      assertFalse(feature1.equals((Object)feature0));
      assertFalse(feature1.equals((Object)feature2));
      assertFalse(feature1.equals((Object)feature4));
      assertFalse(feature1.equals((Object)feature3));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: X$A*=UVF?xE02+p}", sQLNonTransientConnectionException0.toString());
      assertEquals("X$A*=UVF?xE02+p}", sQLNonTransientConnectionException0.getMessage());
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertNotSame(feature1, feature0);
      assertNotSame(feature1, feature2);
      assertNotSame(feature1, feature4);
      assertNotSame(feature1, feature3);
      
      boolean boolean1 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      boolean boolean1 = JSONPath.isDouble(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2307, 2307, 42);
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath jSONPath0 = new JSONPath("keySet");
      assertNotNull(jSONPath0);
      assertEquals("keySet", jSONPath0.getPath());
      
      Object object0 = null;
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "keySet", (Object) null);
      assertNotNull(arrayList0);
      assertEquals("keySet", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      assertNotNull(jSONPath0);
      assertEquals("LIKE", jSONPath0.getPath());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-836), 16, 16);
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "LIKE", jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String string0 = "com.alibaba.fastjson.JSONPath";
      stringArray0[0] = "com.alibaba.fastjson.JSONPath";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("^7NK1B-&0vobJHE^", "^7NK1B-&0vobJHE^", "^7NK1B-&0vobJHE^", stringArray0, true);
      assertNotNull(jSONPath_MatchSegement0);
      assertEquals(1, stringArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath", jSONPath0.getPath());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-23), 126, 19);
      assertNotNull(jSONPath_RangeSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(11, true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath1 = new JSONPath("a string", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("a string", jSONPath1.getPath());
      
      DataTruncation dataTruncation0 = new DataTruncation((-23), false, false, 126, 874);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath1, "a string", dataTruncation0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"\"");
      assertNotNull(jSONPath0);
      assertEquals("\"\"", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONPath jSONPath1 = new JSONPath("zlPTW{oT7Dij:");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("zlPTW{oT7Dij:", jSONPath1.getPath());
      
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "\"\"", "\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("Yqk1<<a|", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("Yqk1<<a|", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "fastjson.parser.safeMode");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.toString());
      assertEquals("fastjson.parser.safeMode", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      Class<MockCalendar> class0 = MockCalendar.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("not", longArray0, false);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(false));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(javaBeanSerializer0, "fastjson.parser.deny", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("syntax error: ", 561.9762216255946, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}");
      assertNotNull(jSONPath0);
      assertEquals("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Yqk1");
      assertNotNull(sQLTimeoutException0);
      assertEquals("Yqk1", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Yqk1", sQLTimeoutException0.toString());
      
      jSONPath0.arrayAdd((Object) jSONPath_Operator0, (Object[]) null);
      assertEquals("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}", jSONPath0.getPath());
      
      JSONPath jSONPath1 = JSONPath.compile("syntax error: ");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("syntax error: ", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("syntax error: ", "/stackTrace/1", jSONPath_Operator1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_StringOpSegement0, false);
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(",", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      Integer integer0 = new Integer(93);
      assertEquals(93, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_PropertySegment0, jSONPath_PropertySegment0, integer0);
      assertFalse(boolean2);
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}", jSONPath0.getPath());
      assertNotSame(jSONPath_Operator0, jSONPath_Operator1);
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("=", (-459L), (-2097L), false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = new JSONPath("=");
      assertNotNull(jSONPath0);
      assertEquals("=", jSONPath0.getPath());
      
      Float float0 = new Float((float) (-459L));
      assertEquals((-459.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-2097L));
      assertEquals((-2097.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, float1, float1, jSONPath_IntBetweenSegement0);
      assertFalse(boolean0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals("=", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("=");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("rlike");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/7", jSONPath0.getPath());
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertNotNull(jSONPath_FilterSegment1);
      
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_SizeSegment0, jSONPath_FilterSegment1);
      assertFalse(boolean0);
      assertFalse(jSONPath_FilterSegment0.equals((Object)jSONPath_FilterSegment1));
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertEquals("/stackTrace/7", jSONPath0.getPath());
      assertNotSame(jSONPath_FilterSegment0, jSONPath_FilterSegment1);
      assertNotSame(jSONPath_FilterSegment1, jSONPath_FilterSegment0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("rlike"));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLTimeoutException0, stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-2163));
      assertNotNull(jSONScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, charArray0.length);
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2163), jSONScanner0.getFeatures());
      
      JSONScanner jSONScanner1 = new JSONScanner("com.alibaba.fastjson.JSONPath$StringOpSegement", 159);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals('c', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(159, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("Unknown", jSONScanner1.tokenName());
      
      Date date0 = jSONScanner1.scanFieldDate(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(date0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(0, charArray0.length);
      assertEquals('c', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(159, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("Unknown", jSONScanner1.tokenName());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      SQLDataException sQLDataException0 = new SQLDataException("xH\"bc`yNtaU8l8%Dt>", "com.alibaba.fastjson.JSONPath$StringOpSegement", 0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("Qt", sQLDataException0, false);
      assertNotNull(jSONPath_ValueSegment0);
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(27, true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Q';
      intArray0[1] = 27;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2163);
      intArray0[5] = (-2163);
      intArray0[6] = 1177;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {81, 27, 0, 0, (-2163), (-2163), 1177}, intArray0);
      assertEquals(7, intArray0.length);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Qt", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      assertNotNull(jSONPath_FilterSegment0);
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath2.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("fastjson.parser.autoTypeSupport", true);
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertNotNull(jSONPath_PropertySegment1);
      
      boolean boolean1 = jSONPath_FilterSegment0.remove(jSONPath2, jSONPath_PropertySegment1, "Qt");
      assertFalse(boolean1);
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
      assertTrue(boolean1 == boolean0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath2.getPath());
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath_PropertySegment1, jSONPath_PropertySegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, jSONPath_FilterSegment0, jSONPath_FilterSegment0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertFalse(jSONPath_PropertySegment0.equals((Object)jSONPath_PropertySegment1));
      assertNotNull(arrayList0);
      assertEquals("Qt", jSONPath0.getPath());
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath0, jSONPath2);
      assertNotSame(jSONPath_PropertySegment0, jSONPath_PropertySegment1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      boolean boolean2 = jSONPath_ValueSegment0.apply(jSONPath1, jSONPath_PropertySegment0, jSONPath_PropertySegment0, jSONPath_WildCardSegment0);
      assertTrue(boolean2);
      assertFalse(jSONPath_PropertySegment0.equals((Object)jSONPath_PropertySegment1));
      assertFalse(jSONPath1.equals((Object)jSONPath2));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      assertNotSame(jSONPath_PropertySegment0, jSONPath_PropertySegment1);
      assertNotSame(jSONPath1, jSONPath2);
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean3 = JSONPath.eq(jSONScanner0, jSONScanner0);
      assertTrue(boolean3);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, charArray0.length);
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2163), jSONScanner0.getFeatures());
      assertNotSame(jSONScanner0, jSONScanner1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "OGtn";
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("OGtn", 3556L, 3556L, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath jSONPath0 = new JSONPath("OGtn");
      assertNotNull(jSONPath0);
      assertEquals("OGtn", jSONPath0.getPath());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("OGtn", parserConfig0, 92);
      assertNotNull(defaultJSONParser0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/5");
      assertNotNull(jSONPath0);
      assertEquals("/cause/stackTrace/5", jSONPath0.getPath());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/cause/stackTrace/5";
      stringArray0[1] = "!wz3s#m+v1";
      stringArray0[2] = "/cause/stackTrace/5";
      stringArray0[3] = "/cause/stackTrace/5";
      stringArray0[4] = "!wz3s#m+v1";
      stringArray0[5] = "/cause/stackTrace/5";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(6, stringArray0.length);
      
      JSONPath jSONPath1 = JSONPath.compile("S");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("S", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      Short short0 = new Short((short) (-766));
      assertEquals((short) (-766), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = JSONPath.contains((Object) short0, "*");
      assertTrue(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath2 = new JSONPath("!wz3s#m+v1", serializeConfig0, parserConfig0);
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("!wz3s#m+v1", jSONPath2.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short) (-766), (short) (-766), 4434);
      assertNotNull(jSONPath_RangeSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath2, jSONPath_RangeSegment0, jSONPath_RangeSegment0);
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(arrayList0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(6, stringArray0.length);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("!wz3s#m+v1", jSONPath2.getPath());
      assertEquals(6, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      Object object0 = jSONPath2.extract((DefaultJSONParser) null);
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNull(object0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("!wz3s#m+v1", jSONPath2.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      // Undeclared exception!
      try { 
        JSONPath.extract("false", "/stackTrace/3", parserConfig0, 8, (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // false
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSONPath.extract("[{},99]", "[{},99]", parserConfig0, 1583, featureArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      assertNotNull(jSONPath0);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("!wz3s#m+v1", 1459860845934817624L, jSONPath_Operator0);
      assertNotNull(jSONPath_IntOpSegement0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath_SizeSegment0, (Object) null, (Object) null);
      assertFalse(boolean0);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      
      boolean boolean1 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath_FilterSegment0, jSONPath_JSONPathParser0, (Object) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1871));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath1 = new JSONPath(",TX 8e");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals(",TX 8e", jSONPath1.getPath());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("RyK", ",TX 8e", batchUpdateException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: RyK", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(",TX 8e", sQLRecoverableException0.getSQLState());
      assertEquals("RyK", sQLRecoverableException0.getMessage());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath1, sQLRecoverableException0, bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath(".");
      assertNotNull(jSONPath0);
      assertEquals(".", jSONPath0.getPath());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement(".", (String) null, (String) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Y{";
      stringArray0[1] = "illegal state. ";
      stringArray0[2] = "GsVux}}'O/1zTd\"NZ)";
      stringArray0[3] = "Y{";
      stringArray0[4] = "Y{";
      stringArray0[5] = "GsVux}}'O/1zTd\"NZ)";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("GsVux}}'O/1zTd\"NZ)", "Y{", "GsVux}}'O/1zTd\"NZ)", stringArray0, true);
      assertNotNull(jSONPath_MatchSegement0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("/cause/stackTrace/12", "9?A5)A", "/cause/stackTrace/12", stringArray0, false);
      assertNotNull(jSONPath_MatchSegement0);
      assertEquals(0, stringArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("deny");
      assertNotNull(jSONPath0);
      assertEquals("deny", jSONPath0.getPath());
      
      boolean boolean0 = JSONPath.remove((Object) "deny", "deny");
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(32);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("Yqk1<<a|");
      assertNotNull(jSONPath_NullSegement0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("Yqk1<<a|", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("Yqk1<<a|", jSONPath0.getPath());
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny", "c", "Yqk1<<a|", (String[]) null, true);
      assertNotNull(jSONPath_MatchSegement0);
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      assertNotNull(javaBeanDeserializer0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, javaBeanDeserializer0, class0, jSONPath_NullSegement0);
      assertFalse(boolean0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("Yqk1<<a|", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "com.alibaba.fastjson.JSONPath";
      stringArray0[0] = "com.alibaba.fastjson.JSONPath";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("^7NK1B-&0vobJHE^", "^7NK1B-&0vobJHE^", "^7NK1B-&0vobJHE^", stringArray0, true);
      assertNotNull(jSONPath_MatchSegement0);
      assertEquals(1, stringArray0.length);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath", jSONPath0.getPath());
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1988);
      intArray0[1] = (-1090131319);
      intArray0[2] = (-783);
      intArray0[3] = (-1421);
      intArray0[4] = 2302;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "q}", 104);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("q}", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(104, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(";|8", "B!n", intArray0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-1988), (-1090131319), (-783), (-1421), 2302}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("q}", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(104, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("B!n", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ;|8", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(";|8", batchUpdateException0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException("q}", "B!n", batchUpdateException0);
      assertNotNull(sQLDataException0);
      assertArrayEquals(new int[] {(-1988), (-1090131319), (-783), (-1421), 2302}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("q}", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(104, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("B!n", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ;|8", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(";|8", batchUpdateException0.getMessage());
      assertEquals("q}", sQLDataException0.getMessage());
      assertEquals("B!n", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: q}", sQLDataException0.toString());
      
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, sQLDataException0, sQLDataException0, "B!n");
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1988), (-1090131319), (-783), (-1421), 2302}, intArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals("com.alibaba.fastjson.JSONPath", jSONPath0.getPath());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("q}", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(104, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("B!n", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ;|8", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(";|8", batchUpdateException0.getMessage());
      assertEquals("q}", sQLDataException0.getMessage());
      assertEquals("B!n", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: q}", sQLDataException0.toString());
      
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(1, stringArray0.length);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_SizeSegment0, jSONPath_PropertySegment0);
      assertNotNull(arrayList0);
      assertEquals(1, stringArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("com.alibaba.fastjson.JSONPath", jSONPath0.getPath());
      
      boolean boolean1 = jSONPath0.setPropertyValue(jSONPath_MatchSegement0, "illegal json : ", 1698504441317515818L, jSONPath_MultiPropertySegment0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertEquals("com.alibaba.fastjson.JSONPath", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        PropertyNamingStrategy.valueOf("gf2htP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.PropertyNamingStrategy.gf2htP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = new JSONPath("Yqk1<<a|", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("Yqk1<<a|", jSONPath0.getPath());
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny", "fastjson.parser.deny", "Yqk1<<a|", (String[]) null, true);
      assertNotNull(jSONPath_MatchSegement0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = "=";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("d");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("=");
      assertNotNull(jSONPath0);
      assertEquals("=", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("error, readCount ");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("error, readCount ", jSONPath1.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, (Object) null, 2442);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/.M`}%0kCY4i~w&*GU:", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      assertNotNull(jSONPath0);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("!wz3s#m+v1", "min", (-1193));
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: !wz3s#m+v1", sQLRecoverableException0.toString());
      assertEquals("min", sQLRecoverableException0.getSQLState());
      assertEquals((-1193), sQLRecoverableException0.getErrorCode());
      assertEquals("!wz3s#m+v1", sQLRecoverableException0.getMessage());
      
      UUID uUID0 = MockUUID.fromString("min");
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      
      Object object1 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_RefOpSegement0, uUID0);
      assertNull(object1);
      assertEquals("!wz3s#m+v1", jSONPath0.getPath());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Map<String, Object> map0 = new HashMap<String, Object>();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("can not cast oracle.sql.TIMESTAMP to Date", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("can not cast oracle.sql.TIMESTAMP to Date", "fastjson.parser.autoTypeSupport", 1583);
      assertNotNull(sQLRecoverableException0);
      assertEquals("can not cast oracle.sql.TIMESTAMP to Date", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: can not cast oracle.sql.TIMESTAMP to Date", sQLRecoverableException0.toString());
      assertEquals(1583, sQLRecoverableException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLRecoverableException0.getSQLState());
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLRecoverableException0, sQLRecoverableException0);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertEquals("can not cast oracle.sql.TIMESTAMP to Date", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: can not cast oracle.sql.TIMESTAMP to Date", sQLRecoverableException0.toString());
      assertEquals(1583, sQLRecoverableException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLRecoverableException0.getSQLState());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath0 = new JSONPath("Yqk1<<a|", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("Yqk1<<a|", jSONPath0.getPath());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2273), 110, (-2273));
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("X#c~~", jSONPath_RangeSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      Byte byte0 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte0);
      assertNotNull(byte0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, byte0, sQLTransactionRollbackException0, "X#c~~");
      assertFalse(boolean0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("Yqk1<<a|", jSONPath0.getPath());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      Double double0 = new Double(110);
      assertEquals(110.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "X#c~~", double0);
      assertNull(object0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("Yqk1<<a|", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath jSONPath0 = new JSONPath("LC['Q");
      assertNotNull(jSONPath0);
      assertEquals("LC['Q", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LC['Q");
      assertNotNull(jSONPath_JSONPathParser0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
      assertEquals("LC['Q", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("rlike");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/7", jSONPath0.getPath());
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertNotNull(jSONPath_FilterSegment1);
      
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
      assertEquals("/stackTrace/7", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("rlike"));
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLTimeoutException0, stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/7", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
      assertEquals("/stackTrace/7", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/7");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /stackTrace/7
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      
      String string0 = "okwEXi`Dz";
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      String string1 = jSONPath0.toJSONString();
      assertEquals("\"fastjson.parser.autoTypeSupport\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) "okwEXi`Dz", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = "Qt";
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Qt");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath1 = JSONPath.compile("Qt");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("Qt", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath jSONPath2 = new JSONPath("annotatedInterfaces");
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertEquals("annotatedInterfaces", jSONPath2.getPath());
      
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")i^O7F}y8HRI");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")i^O7F}y8HRI", ")i^O7F}y8HRI");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: )i^O7F}y8HRI", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(")i^O7F}y8HRI", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(")i^O7F}y8HRI", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("HnS 0J:-");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: HnS 0J:-", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("HnS 0J:-", sQLTimeoutException0.getMessage());
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/2");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/2", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.set((Object) ")i^O7F}y8HRI", (Object) sQLTimeoutException0, false);
      assertTrue(boolean0);
      assertEquals("java.sql.SQLTimeoutException: HnS 0J:-", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("HnS 0J:-", sQLTimeoutException0.getMessage());
      assertEquals("/stackTrace/2", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser(")i^O7F}y8HRI");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      boolean boolean1 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean1);
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("$iWdy0&?");
      assertNotNull(jSONPath0);
      assertEquals("$iWdy0&?", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath1 = new JSONPath("99");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("99", jSONPath1.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      BigDecimal bigDecimal0 = new BigDecimal(5614464919154503228L);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      assertEquals((byte)60, bigDecimal0.byteValue());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("NoChange");
      assertNotNull(jSONPath0);
      assertEquals("NoChange", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("NoChange");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("NoChange", jSONPath1.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, "NoChange", 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("HH3");
      assertNotNull(jSONPath0);
      assertEquals("HH3", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(200, false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath1 = new JSONPath("HH3", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("HH3", jSONPath1.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, jSONPath_WildCardSegment0, 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fastjson.parser.autoTypeSupport";
      stringArray0[1] = "fastjson.parser.safeMode";
      stringArray0[2] = "fastjson.parser.deny";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("Yqk1<<a|", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3, stringArray0.length);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      assertNotNull(jSONPath_JSONPathParser0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = bigDecimal0.stripTrailingZeros();
      assertNotNull(bigDecimal1);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(bigDecimal0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AutoCloseSource;
      featureArray0[3] = feature2;
      Feature feature3 = Feature.InternFieldNames;
      featureArray0[4] = feature3;
      Feature feature4 = (Feature)JSONPath.reserveToObject(feature2, (String[]) null);
      assertEquals(Feature.AutoCloseSource, feature4);
      assertFalse(feature2.equals((Object)feature0));
      assertFalse(feature2.equals((Object)feature3));
      assertFalse(feature2.equals((Object)feature1));
      assertFalse(feature4.equals((Object)feature0));
      assertFalse(feature4.equals((Object)feature1));
      assertFalse(feature4.equals((Object)feature3));
      assertEquals(1, feature4.getMask());
      assertNotSame(feature2, feature0);
      assertNotSame(feature2, feature3);
      assertNotSame(feature2, feature1);
      assertSame(feature2, feature4);
      assertNotSame(feature4, feature0);
      assertNotSame(feature4, feature1);
      assertNotSame(feature4, feature3);
      assertSame(feature4, feature2);
      
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      MathContext mathContext0 = new MathContext(1392, roundingMode0);
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) 1392, mathContext0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)112, bigDecimal0.byteValue());
      assertEquals((short)1392, bigDecimal0.shortValue());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("i~VDuJp{$Ub}]");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      BigDecimal bigDecimal0 = new BigDecimal(5614464919154503228L);
      assertNotNull(bigDecimal0);
      assertEquals((byte)60, bigDecimal0.byteValue());
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      
      String[] stringArray0 = new String[0];
      BigDecimal bigDecimal1 = (BigDecimal)JSONPath.reserveToObject(bigDecimal0, stringArray0);
      assertNotNull(bigDecimal1);
      assertEquals(0, stringArray0.length);
      assertEquals((byte)60, bigDecimal0.byteValue());
      assertEquals((short) (-20932), bigDecimal0.shortValue());
      assertEquals((byte)60, bigDecimal1.byteValue());
      assertEquals((short) (-20932), bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath jSONPath1 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNotNull(jSONPath1);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath1.getPath());
      assertSame(jSONPath1, jSONPath0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject((Object) null, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3, stringArray0.length);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      MathContext mathContext0 = null;
      try {
        mathContext0 = new MathContext((-421), roundingMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Digits < 0
         //
         verifyException("java.math.MathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      JSONPath jSONPath0 = new JSONPath("LIKE");
      assertNotNull(jSONPath0);
      assertEquals("LIKE", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k2mVJn`9'3cw3WF*#KD");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-6586085717218287427L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      Throwable throwable0 = mockThrowable1.fillInStackTrace();
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(throwable0.equals((Object)mockThrowable0));
      assertNotNull(throwable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.toString());
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", throwable0.toString());
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable0, throwable0);
      assertSame(mockThrowable1, throwable0);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(throwable0, mockThrowable0);
      assertSame(throwable0, mockThrowable1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(mockThrowable1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable0.equals((Object)throwable0));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.println(true);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable0.equals((Object)throwable0));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable0, throwable0);
      assertSame(mockThrowable1, throwable0);
      assertNotSame(mockThrowable1, mockThrowable0);
      
      boolean boolean0 = JSONPath.set((Object) null, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", (Object) sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable0.equals((Object)throwable0));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable0, throwable0);
      assertSame(mockThrowable1, throwable0);
      assertNotSame(mockThrowable1, mockThrowable0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}");
      assertNotNull(jSONPath0);
      assertEquals("{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}", jSONPath0.getPath());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("AllowUnQuotedFieldNames", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", 0, throwable0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable0.equals((Object)throwable0));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(throwable0.equals((Object)mockThrowable0));
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.toString());
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", throwable0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: AllowUnQuotedFieldNames", sQLTransientConnectionException0.toString());
      assertEquals("AllowUnQuotedFieldNames", sQLTransientConnectionException0.getMessage());
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", sQLTransientConnectionException0.getSQLState());
      
      Throwable[] throwableArray0 = mockThrowable1.getSuppressed();
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable0.equals((Object)throwable0));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.toString());
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable0, throwable0);
      assertSame(mockThrowable1, throwable0);
      assertNotSame(mockThrowable1, mockThrowable0);
      
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, mockPrintWriter0, (Object) null);
      assertNull(object0);
      assertEquals("{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}", jSONPath0.getPath());
      
      boolean boolean1 = JSONPath.eq(jSONPath_WildCardSegment0, throwable0);
      assertFalse(boolean1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable0.equals((Object)throwable0));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(throwable0.equals((Object)mockThrowable0));
      assertTrue(boolean1 == boolean0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable1.toString());
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", throwable0.toString());
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable0, throwable0);
      assertSame(mockThrowable1, throwable0);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(throwable0, mockThrowable0);
      assertSame(throwable0, mockThrowable1);
      
      String string0 = jSONPath0.getPath();
      assertEquals("{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}", string0);
      assertNotNull(string0);
      assertEquals("{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}", jSONPath0.getPath());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "AllowUnQuotedFieldNames";
      stringArray0[2] = "{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&&R");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(149L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '!';
      charArray0[0] = '!';
      char char1 = 'Q';
      charArray0[1] = 'Q';
      char char2 = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      
      Map<String, Object> map0 = JSONPath.paths((Object) parserConfig0);
      assertNotNull(map0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(9, map0.size());
      assertFalse(map0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      int int0 = 37;
      Object object0 = jSONPath0.getArrayItem(map0, 37);
      assertNull(object0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertEquals(9, map0.size());
      assertFalse(map0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      assertFalse(boolean0);
      
      Long long0 = new Long(9140416208800006522L);
      assertEquals(9140416208800006522L, (long)long0);
      assertNotNull(long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      jSONPath0.init();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = JSONPath.compile("t6eJ`;c");
      assertNotNull(jSONPath0);
      assertEquals("t6eJ`;c", jSONPath0.getPath());
      
      boolean boolean1 = jSONPath0.removePropertyValue(serializeConfig0, "4GzA5D", false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("t6eJ`;c", jSONPath0.getPath());
      
      boolean boolean2 = JSONPath.remove((Object) "6[P3i1_5+Y1F}8#", "/cause");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("ln$u");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath1 = JSONPath.compile("Qt");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("Qt", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Qt", "Qt", 120);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("Qt", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Qt", sQLSyntaxErrorException0.toString());
      assertEquals(120, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Qt", sQLSyntaxErrorException0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning("Qt", "/stackTrace/4", 42, sQLSyntaxErrorException0);
      assertNotNull(sQLWarning0);
      assertEquals("Qt", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Qt", sQLSyntaxErrorException0.toString());
      assertEquals(120, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Qt", sQLSyntaxErrorException0.getMessage());
      assertEquals("Qt", sQLWarning0.getMessage());
      assertEquals("/stackTrace/4", sQLWarning0.getSQLState());
      assertEquals(42, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: Qt", sQLWarning0.toString());
      
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath1, sQLSyntaxErrorException0, "ln$u", sQLWarning0);
      assertFalse(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertEquals("Qt", jSONPath1.getPath());
      assertEquals("Qt", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Qt", sQLSyntaxErrorException0.toString());
      assertEquals(120, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Qt", sQLSyntaxErrorException0.getMessage());
      assertEquals("Qt", sQLWarning0.getMessage());
      assertEquals("/stackTrace/4", sQLWarning0.getSQLState());
      assertEquals(42, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: Qt", sQLWarning0.toString());
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      assertNotNull(batchUpdateException0);
      assertEquals("Qt", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Qt", sQLSyntaxErrorException0.toString());
      assertEquals(120, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Qt", sQLSyntaxErrorException0.getMessage());
      assertEquals("Qt", sQLWarning0.getMessage());
      assertEquals("/stackTrace/4", sQLWarning0.getSQLState());
      assertEquals(42, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: Qt", sQLWarning0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLWarning: Qt", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: Qt", batchUpdateException0.toString());
      
      Short short0 = new Short((short)850);
      assertEquals((short)850, (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "", (Object) short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      int int0 = 84;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(84, (-1522), (-1522));
      assertNotNull(jSONPath_RangeSegment0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath0 = new JSONPath("null", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("null", jSONPath0.getPath());
      
      Class<JSONValidator.Type>[] classArray0 = (Class<JSONValidator.Type>[]) Array.newInstance(Class.class, 0);
      serializeConfig0.configEnumAsJavaBean(classArray0);
      assertEquals(0, classArray0.length);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      String string0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "fastjson.parser.deny");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("fastjson.parser.deny", sQLTimeoutException0.getSQLState());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, sQLTimeoutException0);
      assertNotNull(arrayList0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("null", jSONPath0.getPath());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("fastjson.parser.deny", sQLTimeoutException0.getSQLState());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)jSONReaderScanner0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0, locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONPath.arrayAdd((Object) mockGregorianCalendar0, "java.awt.Rectangle", (Object[]) null);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("fastjson.parser.autoTypeSupport", jSONPath_RangeSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '*';
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = "/cause/stackTrace/12";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/12");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/cause/stackTrace/12");
      assertFalse(boolean0);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertNotNull(jSONPath_SegmentArray0);
      assertEquals(3, jSONPath_SegmentArray0.length);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.getNextChar();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      String string0 = "okwEXi`Dz";
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.remove((Object) "okwEXi`Dz");
      assertFalse(boolean0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      String string1 = jSONPath0.toJSONString();
      assertEquals("\"fastjson.parser.autoTypeSupport\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) "okwEXi`Dz", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[]");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("#j^<2:,", 422);
      assertNotNull(pattern0);
      assertEquals(486, pattern0.flags());
      assertEquals("#j^<2:,", pattern0.pattern());
      assertEquals("#j^<2:,", pattern0.toString());
      
      JSONPath jSONPath0 = JSONPath.compile("Dp5,TN6^lo/X]HTu' ");
      assertNotNull(jSONPath0);
      assertEquals("Dp5,TN6^lo/X]HTu' ", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1024);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      boolean boolean1 = jSONPath0.setPropertyValue(jSONPath_ArrayAccessSegment0, "Dp5,TN6^lo/X]HTu' ", 422, "Dp5,TN6^lo/X]HTu' ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("Dp5,TN6^lo/X]HTu' ", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AutoCloseSource;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.InternFieldNames;
      featureArray0[4] = feature4;
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, (JSONPath.Filter) null, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = JSONPath.compile("JSONPath$StringOpSegement");
      assertNotNull(jSONPath0);
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      int int0 = jSONPath0.size((Object) feature4);
      assertEquals((-1), int0);
      assertFalse(feature4.equals((Object)feature3));
      assertFalse(feature4.equals((Object)feature0));
      assertFalse(feature4.equals((Object)feature1));
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
      assertNotSame(feature4, feature3);
      assertNotSame(feature4, feature0);
      assertNotSame(feature4, feature1);
      assertSame(feature4, feature2);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 1037;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-1), 1037, (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      
      boolean boolean0 = jSONPath0.set((Object) "JSONPath$StringOpSegement", (Object) batchUpdateException0, true);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1), 1037, (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("JSONPath$StringOpSegement", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("", 6142L, 6142L, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", 6142L, jSONPath_Operator0);
      assertNotNull(jSONPath_IntOpSegement0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("jsonpath error, path ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1284);
      intArray0[1] = 5901;
      intArray0[2] = 61;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-1284), 5901, 61}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/8", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.set((Object) "jsonpath error, path ", (Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", false);
      assertTrue(boolean0);
      assertEquals("/stackTrace/8", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      System.setCurrentTimeMillis(2595L);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("\"a string");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but '\"'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = "YSQPy4f8T ";
      JSONPath jSONPath0 = JSONPath.compile("YSQPy4f8T ");
      assertNotNull(jSONPath0);
      assertEquals("YSQPy4f8T ", jSONPath0.getPath());
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, (JSONPath.Filter) null, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath1 = new JSONPath("{\"fruit\":\"Apple\",\"size\":$Large\",\"color\":\"Red\",\"vFlye\":true,\"number\":\"1\"}");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("{\"fruit\":\"Apple\",\"size\":$Large\",\"color\":\"Red\",\"vFlye\":true,\"number\":\"1\"}", jSONPath1.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":$Large\",\"color\":\"Red\",\"vFlye\":true,\"number\":\"1\"}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
      
      Float float0 = new Float((-2668.089291232));
      assertEquals((-2668.0894F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = JSONPath.eq(class0, float0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      System.setCurrentTimeMillis((-8109300701639721088L));
      String string0 = ", but '";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(", but '");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "!wz3s#m+v1";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("!wz3s#m+v1");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: !wz3s#m+v1", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("!wz3s#m+v1", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      String string1 = "rlike";
      JSONPath jSONPath0 = new JSONPath("rlike");
      assertNotNull(jSONPath0);
      assertEquals("rlike", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      Integer integer0 = new Integer(59);
      assertEquals(59, (int)integer0);
      assertNotNull(integer0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.alibaba.fastjson.JSONPath$NotNullSegement", "com.alibaba.fastjson.JSONPath$FilterSegment", 1131);
      assertNotNull(sQLTimeoutException0);
      assertEquals(1131, sQLTimeoutException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLTimeoutException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLTimeoutException0.getMessage());
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$FilterSegment");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath1 = new JSONPath("AllowUnQuotedFieldNames", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("AllowUnQuotedFieldNames", jSONPath1.getPath());
      
      DataTruncation dataTruncation0 = new DataTruncation(224, false, false, 89, (-590));
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("", jSONPath_MinSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      boolean boolean0 = jSONPath0.contains((Object) "AllowUnQuotedFieldNames");
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertNotSame(jSONPath0, jSONPath1);
      
      Collection<Object> collection0 = jSONPath0.getPropertyValues("AllowUnQuotedFieldNames");
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotNull(collection0);
      assertTrue(collection0.contains(false));
      assertFalse(collection0.contains("AllowUnQuotedFieldNames"));
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertNotSame(jSONPath0, jSONPath1);
      
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      JSONPath jSONPath0 = new JSONPath("v]R_pSSTHxCM$es?0_/");
      assertNotNull(jSONPath0);
      assertEquals("v]R_pSSTHxCM$es?0_/", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      Object object0 = jSONPath0.getPropertyValue(sQLTimeoutException0, "v]R_pSSTHxCM$es?0_/", (-1580386065683472715L));
      assertNull(object0);
      assertEquals("v]R_pSSTHxCM$es?0_/", jSONPath0.getPath());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        JSONPath.extract(")[null,-99]", ")[null,-99]", parserConfig0, 1583, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. )[null,-99]
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("Qt");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("Qt", jSONPath1.getPath());
      
      boolean boolean0 = JSONPath.remove((Object) " M(:k", "Qt");
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) "$2`>CzZgkOnlfgo", serializeConfig0);
      assertNotNull(map0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        JSONPath.size((Object) "$2`>CzZgkOnlfgo", "$2`>CzZgkOnlfgo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $2`>CzZgkOnlfgo
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath1.getPath());
      
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.deny.internal");
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertEquals("fastjson.parser.deny.internal", jSONPath2.getPath());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockThrowable0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("javax.xml.bind.annotation.XmlAccessorType", sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("javax.xml.bind.annotation.XmlAccessorType", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: javax.xml.bind.annotation.XmlAccessorType", sQLNonTransientConnectionException1.toString());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(91, 2946, 91);
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Ncg>TT>", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      assertNotNull(jSONPath_KeySetSegment0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("context", "fastjson.parser.autoTypeAccept", mockThrowable0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: context", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("context", sQLIntegrityConstraintViolationException0.getMessage());
      
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, jSONPath1);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath1.equals((Object)jSONPath2));
      assertNull(object0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath1.getPath());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: context", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("context", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath0, jSONPath2);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath1, jSONPath2);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, mockGregorianCalendar0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertNotNull(arrayList0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath0, jSONPath2);
      
      ArrayList arrayList1 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, parserConfig0, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertNotNull(arrayList1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath0, jSONPath2);
      
      Set<?> set0 = jSONPath1.evalKeySet(arrayList1);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath1.equals((Object)jSONPath2));
      assertNull(set0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath1.getPath());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath0, jSONPath2);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath1, jSONPath2);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("uM|T?.t", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("uM|T?.t", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.safeMode");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.safeMode", jSONPath1.getPath());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockThrowable0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("!eLaz$S=A1;$k]0m", sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("!eLaz$S=A1;$k]0m", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: !eLaz$S=A1;$k]0m", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      
      Set<?> set0 = jSONPath1.evalKeySet(sQLNonTransientConnectionException1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(set0);
      assertFalse(set0.contains("uM|T?.t"));
      assertEquals("fastjson.parser.safeMode", jSONPath1.getPath());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("!eLaz$S=A1;$k]0m", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: !eLaz$S=A1;$k]0m", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertFalse(set0.isEmpty());
      assertEquals(5, set0.size());
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath0 = new JSONPath("U|8c[i17G`{'ZSd8", (SerializeConfig) null, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("U|8c[i17G`{'ZSd8", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet("U|8c[i17G`{'ZSd8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("qM", "expect '[', but ", 472);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals(472, sQLTransientException0.getErrorCode());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("expect '[', but ", sQLTransientException0.getSQLState());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("U:F%+^Pt\ry|6lh", "ZxM:7", hashMap0, sQLTransientException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals(472, sQLTransientException0.getErrorCode());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("expect '[', but ", sQLTransientException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      assertNotNull(map0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLTransientException: qM", sQLTransientException0.toString());
      assertEquals(472, sQLTransientException0.getErrorCode());
      assertEquals("qM", sQLTransientException0.getMessage());
      assertEquals("expect '[', but ", sQLTransientException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("ZxM:7", sQLClientInfoException0.getSQLState());
      assertEquals("U:F%+^Pt\ry|6lh", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: U:F%+^Pt\ry|6lh", sQLClientInfoException0.toString());
      assertEquals(167, map0.size());
      assertFalse(map0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      int int0 = 830;
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("qM", 830);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("=");
      assertNotNull(jSONPath0);
      assertEquals("=", jSONPath0.getPath());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("=", hashMap0, sQLException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("=", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: =", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      assertNotNull(map0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("=", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: =", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(177, map0.size());
      assertFalse(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      JSONPath jSONPath0 = new JSONPath("{}", (SerializeConfig) null, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("{}", jSONPath0.getPath());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal", (SerializeConfig) null, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      
      JSONPath jSONPath2 = JSONPath.compile("fastjson.parser.deny.internal");
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertEquals("fastjson.parser.deny.internal", jSONPath2.getPath());
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JSONPath jSONPath3 = new JSONPath("t6eJ`;c", (SerializeConfig) null, parserConfig0);
      assertFalse(jSONPath3.equals((Object)jSONPath2));
      assertFalse(jSONPath3.equals((Object)jSONPath1));
      assertFalse(jSONPath3.equals((Object)jSONPath0));
      assertNotNull(jSONPath3);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("t6eJ`;c", jSONPath3.getPath());
      
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath2.getJavaBeanDeserializer(class0);
      assertFalse(jSONPath2.equals((Object)jSONPath3));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(javaBeanDeserializer0);
      assertEquals("fastjson.parser.deny.internal", jSONPath2.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotSame(jSONPath2, jSONPath3);
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      boolean boolean1 = JSONPath.remove((Object) null, "[false,99]");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath jSONPath0 = new JSONPath("LC['Q");
      assertNotNull(jSONPath0);
      assertEquals("LC['Q", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LC['Q");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      boolean boolean0 = JSONPath.remove((Object) null, "/cause/stackTrace/4");
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("<M\u0002(Z@bCo");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("!wz3s#m+v1");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$NotNullSegement");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath0.getPath());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "!wz3s#m+v1", 12);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("!wz3s#m+v1", sQLSyntaxErrorException0.getSQLState());
      assertEquals(12, sQLSyntaxErrorException0.getErrorCode());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.JSONPath$NotNullSegement", (String) null, sQLSyntaxErrorException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("!wz3s#m+v1", sQLSyntaxErrorException0.getSQLState());
      assertEquals(12, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLIntegrityConstraintViolationException0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning("FO$$cRSz5HRjz!O$a%^", (String) null, 42, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLWarning0);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("!wz3s#m+v1", sQLSyntaxErrorException0.getSQLState());
      assertEquals(12, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLWarning: FO$$cRSz5HRjz!O$a%^", sQLWarning0.toString());
      assertEquals(42, sQLWarning0.getErrorCode());
      assertEquals("FO$$cRSz5HRjz!O$a%^", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement1 = new JSONPath.NotNullSegement("Ab)[");
      assertFalse(jSONPath_NotNullSegement1.equals((Object)jSONPath_NotNullSegement0));
      assertNotNull(jSONPath_NotNullSegement1);
      
      JSONPath jSONPath1 = JSONPath.compile("com.alibaba.fastjson.JSONPath$NotNullSegement");
      assertNotNull(jSONPath1);
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath1.getPath());
      assertSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = jSONPath_NotNullSegement1.apply(jSONPath0, (Object) null, jSONPath1, (Object) null);
      assertFalse(boolean0);
      assertFalse(jSONPath_NotNullSegement1.equals((Object)jSONPath_NotNullSegement0));
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath0.getPath());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath1.getPath());
      assertSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath_NotNullSegement1, jSONPath_NotNullSegement0);
      assertSame(jSONPath1, jSONPath0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertFalse(jSONPath_NotNullSegement0.equals((Object)jSONPath_NotNullSegement1));
      assertNotNull(jSONPath_FilterSegment0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLIntegrityConstraintViolationException0);
      assertNotNull(batchUpdateException0);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("!wz3s#m+v1", sQLSyntaxErrorException0.getSQLState());
      assertEquals(12, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: com.alibaba.fastjson.JSONPath$NotNullSegement", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLIntegrityConstraintViolationException: com.alibaba.fastjson.JSONPath$NotNullSegement", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath2 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement", serializeConfig0, parserConfig0);
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath2.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement1);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertFalse(jSONPath_NotNullSegement1.equals((Object)jSONPath_NotNullSegement0));
      assertNotNull(jSONPath_FilterSegment1);
      
      boolean boolean1 = jSONPath2.containsValue((Object) jSONPath_FilterSegment1, (Object) null);
      assertTrue(boolean1);
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONPath_NotNullSegement1.equals((Object)jSONPath_NotNullSegement0));
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath2.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath_FilterSegment1, jSONPath_FilterSegment0);
      assertNotSame(jSONPath_NotNullSegement1, jSONPath_NotNullSegement0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("yw#");
      assertNotNull(jSONPath_NullSegement0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, "LocalVariableTable", (Map<String, ClientInfoStatus>) null);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      assertEquals("LocalVariableTable", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("LocalVariableTable", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "yw#", (-679), sQLTransientConnectionException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLDataException0);
      assertEquals("LocalVariableTable", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("yw#", sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals((-679), sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      JSONPath jSONPath0 = JSONPath.compile("yw#");
      assertNotNull(jSONPath0);
      assertEquals("yw#", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      boolean boolean0 = jSONPath0.containsValue((Object) bigDecimal0, (Object) null);
      assertTrue(boolean0);
      assertEquals("yw#", jSONPath0.getPath());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      assertNotNull(jSONPath_MaxSegment0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("bz9uHMc;)'", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("bz9uHMc;)'", jSONPath0.getPath());
      
      String string0 = "okwEXi`Dz";
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      String string1 = jSONPath1.toJSONString();
      assertEquals("\"fastjson.parser.autoTypeSupport\"", string1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath1.set((Object) parserConfig0, (Object) "okwEXi`Dz", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = "Jtxr6q^%[(";
      JSONPath jSONPath0 = new JSONPath("Jtxr6q^%[(");
      assertNotNull(jSONPath0);
      assertEquals("Jtxr6q^%[(", jSONPath0.getPath());
      
      Class<UUID> class0 = UUID.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      assertEquals("Jtxr6q^%[(", jSONPath0.getPath());
      
      String string1 = "gHF?Sw]#evyjK.D~";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("gHF?Sw]#evyjK.D~");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'g'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$StringOpSegement", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath1.getPath());
      
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath2.getPath());
      
      JSONPath jSONPath3 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      assertFalse(jSONPath3.equals((Object)jSONPath2));
      assertFalse(jSONPath3.equals((Object)jSONPath0));
      assertFalse(jSONPath3.equals((Object)jSONPath1));
      assertNotNull(jSONPath3);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath3.getPath());
      
      JSONPath jSONPath4 = JSONPath.compile("t6eJ`;c");
      assertFalse(jSONPath4.equals((Object)jSONPath0));
      assertFalse(jSONPath4.equals((Object)jSONPath2));
      assertFalse(jSONPath4.equals((Object)jSONPath1));
      assertFalse(jSONPath4.equals((Object)jSONPath3));
      assertNotNull(jSONPath4);
      assertEquals("t6eJ`;c", jSONPath4.getPath());
      assertNotSame(jSONPath4, jSONPath0);
      assertNotSame(jSONPath4, jSONPath2);
      assertNotSame(jSONPath4, jSONPath1);
      assertNotSame(jSONPath4, jSONPath3);
      
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JSONPath jSONPath5 = new JSONPath("6[P3i1_5+Y1F}8#", serializeConfig0, parserConfig0);
      assertFalse(jSONPath5.equals((Object)jSONPath1));
      assertFalse(jSONPath5.equals((Object)jSONPath3));
      assertFalse(jSONPath5.equals((Object)jSONPath2));
      assertFalse(jSONPath5.equals((Object)jSONPath4));
      assertFalse(jSONPath5.equals((Object)jSONPath0));
      assertNotNull(jSONPath5);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("6[P3i1_5+Y1F}8#", jSONPath5.getPath());
      
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath5.getJavaBeanDeserializer(class0);
      assertFalse(jSONPath5.equals((Object)jSONPath1));
      assertFalse(jSONPath5.equals((Object)jSONPath3));
      assertFalse(jSONPath5.equals((Object)jSONPath2));
      assertFalse(jSONPath5.equals((Object)jSONPath4));
      assertFalse(jSONPath5.equals((Object)jSONPath0));
      assertNotNull(javaBeanDeserializer0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("6[P3i1_5+Y1F}8#", jSONPath5.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotSame(jSONPath5, jSONPath1);
      assertNotSame(jSONPath5, jSONPath3);
      assertNotSame(jSONPath5, jSONPath2);
      assertNotSame(jSONPath5, jSONPath4);
      assertNotSame(jSONPath5, jSONPath0);
      
      boolean boolean0 = JSONPath.remove((Object) " M(:k", "Qt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Vgs$*fms`");
      assertNotNull(jSONPath0);
      assertEquals("Vgs$*fms`", jSONPath0.getPath());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.alibaba.fastjson.JSONPath$FilterSegment", "com.alibaba.fastjson.JSONPath$FilterSegment", (-2095));
      assertNotNull(sQLNonTransientException0);
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLNonTransientException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLNonTransientException0.getSQLState());
      assertEquals((-2095), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: com.alibaba.fastjson.JSONPath$FilterSegment", sQLNonTransientException0.toString());
      
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLNonTransientException0, "com.alibaba.fastjson.JSONPath$FilterSegment", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$FilterSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Vgs$*fms`");
      assertNotNull(jSONPath0);
      assertEquals("Vgs$*fms`", jSONPath0.getPath());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.alibaba.fastjson.JSONPath$FilterSegment", "com.alibaba.fastjson.JSONPath$FilterSegment", (-2095));
      assertNotNull(sQLNonTransientException0);
      assertEquals((-2095), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: com.alibaba.fastjson.JSONPath$FilterSegment", sQLNonTransientException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLNonTransientException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLNonTransientException0.getSQLState());
      
      Object[] objectArray0 = new Object[0];
      JSONPath.arrayAdd((Object) sQLNonTransientException0, "com.alibaba.fastjson.JSONPath$FilterSegment", objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals((-2095), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: com.alibaba.fastjson.JSONPath$FilterSegment", sQLNonTransientException0.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLNonTransientException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterSegment", sQLNonTransientException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = ":m?DCd+:7nxbJ*ToT";
      SQLWarning sQLWarning0 = new SQLWarning(":m?DCd+:7nxbJ*ToT", ":m?DCd+:7nxbJ*ToT");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(":m?DCd+:7nxbJ*ToT", sQLWarning0.getSQLState());
      assertEquals(":m?DCd+:7nxbJ*ToT", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: :m?DCd+:7nxbJ*ToT", sQLWarning0.toString());
      
      SQLWarning sQLWarning1 = new SQLWarning(sQLWarning0);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNotNull(sQLWarning1);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(":m?DCd+:7nxbJ*ToT", sQLWarning0.getSQLState());
      assertEquals(":m?DCd+:7nxbJ*ToT", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: :m?DCd+:7nxbJ*ToT", sQLWarning0.toString());
      assertEquals("java.sql.SQLWarning: java.sql.SQLWarning: :m?DCd+:7nxbJ*ToT", sQLWarning1.toString());
      assertEquals("java.sql.SQLWarning: :m?DCd+:7nxbJ*ToT", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNull(sQLWarning1.getSQLState());
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment(":m?DCd+:7nxbJ*ToT", sQLWarning1, false);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNotNull(jSONPath_ValueSegment0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(":m?DCd+:7nxbJ*ToT", sQLWarning0.getSQLState());
      assertEquals(":m?DCd+:7nxbJ*ToT", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: :m?DCd+:7nxbJ*ToT", sQLWarning0.toString());
      assertEquals("java.sql.SQLWarning: java.sql.SQLWarning: :m?DCd+:7nxbJ*ToT", sQLWarning1.toString());
      assertEquals("java.sql.SQLWarning: :m?DCd+:7nxbJ*ToT", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNull(sQLWarning1.getSQLState());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath(":m?DCd+:7nxbJ*ToT", serializeConfig0, (ParserConfig) null);
      assertNotNull(jSONPath0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(":m?DCd+:7nxbJ*ToT", jSONPath0.getPath());
      
      String string1 = "@ZVMiqK+&WEACfu]";
      int int0 = (-803);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "@ZVMiqK+&WEACfu]", (-803));
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals((-803), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("@ZVMiqK+&WEACfu]", sQLNonTransientException0.getSQLState());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-803));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLNonTransientException0, jSONPath_ArrayAccessSegment0, (Object) null);
      assertTrue(boolean0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(":m?DCd+:7nxbJ*ToT", sQLWarning0.getSQLState());
      assertEquals(":m?DCd+:7nxbJ*ToT", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: :m?DCd+:7nxbJ*ToT", sQLWarning0.toString());
      assertEquals("java.sql.SQLWarning: java.sql.SQLWarning: :m?DCd+:7nxbJ*ToT", sQLWarning1.toString());
      assertEquals("java.sql.SQLWarning: :m?DCd+:7nxbJ*ToT", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNull(sQLWarning1.getSQLState());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(":m?DCd+:7nxbJ*ToT", jSONPath0.getPath());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals((-803), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("@ZVMiqK+&WEACfu]", sQLNonTransientException0.getSQLState());
      assertNotSame(sQLWarning0, sQLWarning1);
      assertNotSame(sQLWarning1, sQLWarning0);
      
      String string2 = "I'[";
      int[] intArray0 = new int[4];
      String string3 = null;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) null, (String) null, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("syntax error: ", 561.9762216255946, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}");
      assertNotNull(jSONPath0);
      assertEquals("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}", jSONPath0.getPath());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Yqk1");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Yqk1", sQLTimeoutException0.toString());
      assertEquals("Yqk1", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      JSONPath jSONPath1 = JSONPath.compile("syntax error: ");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("syntax error: ", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean1 = jSONPath_DoubleOpSegement0.apply(jSONPath0, sQLTimeoutException0, "{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}", jSONPath1);
      assertFalse(boolean1);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertTrue(boolean1 == boolean0);
      assertEquals("{\"color\":\"%\",\"fruit\":\"?Q[OJ5f)I8Ai,_6DU\",\"size\":\"Large\",\"value\":true}", jSONPath0.getPath());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Yqk1", sQLTimeoutException0.toString());
      assertEquals("Yqk1", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("syntax error: ", jSONPath1.getPath());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = ".";
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath jSONPath0 = new JSONPath(".");
      assertNotNull(jSONPath0);
      assertEquals(".", jSONPath0.getPath());
      
      int int0 = (-679);
      Throwable throwable0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, (-679), sQLTransientConnectionException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals((-679), sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals((-679), sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      
      boolean boolean2 = jSONPath0.containsValue((Object) sQLTimeoutException0, (Object) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(".", jSONPath0.getPath());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals((-679), sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      
      String string1 = jSONPath0.getPath();
      assertEquals(".", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".", jSONPath0.getPath());
      
      Collection<Object> collection0 = jSONPath0.getPropertyValues(".");
      assertNotNull(collection0);
      assertFalse(collection0.contains((-679)));
      assertTrue(collection0.contains(false));
      assertEquals(".", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|@_F.");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JSONPath jSONPath0 = new JSONPath("tpQ}=$&");
      assertNotNull(jSONPath0);
      assertEquals("tpQ}=$&", jSONPath0.getPath());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      boolean boolean0 = JSONPath.containsValue((Object) null, "(y", (Object) bigInteger0);
      assertFalse(boolean0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : tpQ}=$&
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = new JSONPath("$iWdy0&?");
      assertNotNull(jSONPath0);
      assertEquals("$iWdy0&?", jSONPath0.getPath());
      
      MockThrowable mockThrowable0 = new MockThrowable("Y");
      assertNotNull(mockThrowable0);
      
      Throwable[] throwableArray0 = mockThrowable0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertEquals("Y", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: Y", mockThrowable0.toString());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<SQLDataException> class0 = SQLDataException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertNotNull(throwableDeserializer0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      
      boolean boolean0 = JSONPath.eq((Object) null, throwableDeserializer0);
      assertFalse(boolean0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      
      String string0 = jSONPath0.getPath();
      assertEquals("$iWdy0&?", string0);
      assertNotNull(string0);
      assertEquals("$iWdy0&?", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(", segement ");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: , segement ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(", segement ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      boolean boolean1 = JSONPath.containsValue((Object) mockThrowable0, "fastjson.parser.safeMode", (Object) jSONPath_JSONPathParser0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("Y", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: Y", mockThrowable0.toString());
      
      Module module0 = mock(Module.class, new ViolatedAssumptionAnswer());
      parserConfig0.register(module0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      
      Throwable[] throwableArray1 = sQLFeatureNotSupportedException0.getSuppressed();
      assertNotNull(throwableArray1);
      assertEquals(0, throwableArray1.length);
      assertEquals("java.sql.SQLFeatureNotSupportedException: , segement ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(", segement ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertSame(throwableArray1, throwableArray0);
      
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-2163));
      assertNotNull(jSONScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, charArray0.length);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2163), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals("Unknown", jSONScanner0.tokenName());
      
      JSONScanner jSONScanner1 = new JSONScanner("com.alibaba.fastjson.JSONPath$StringOpSegement", 159);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.token());
      assertEquals("Unknown", jSONScanner1.tokenName());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('c', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(159, jSONScanner1.getFeatures());
      
      Date date0 = jSONScanner1.scanFieldDate(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(date0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(0, charArray0.length);
      assertEquals(0, jSONScanner1.token());
      assertEquals("Unknown", jSONScanner1.tokenName());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('c', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(159, jSONScanner1.getFeatures());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      SQLDataException sQLDataException0 = new SQLDataException("xH\"bc`yNtaU8l8%Dt>", "com.alibaba.fastjson.JSONPath$StringOpSegement", 0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("Qt", sQLDataException0, false);
      assertNotNull(jSONPath_ValueSegment0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(27, true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Q';
      intArray0[1] = 27;
      intArray0[2] = 0;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      assertEquals(0, stackTraceElementArray0.length);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      
      intArray0[3] = 0;
      intArray0[4] = (-2163);
      intArray0[5] = (-2163);
      intArray0[6] = 1177;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {81, 27, 0, 0, (-2163), (-2163), 1177}, intArray0);
      assertEquals(7, intArray0.length);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Qt", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      assertNotNull(jSONPath_FilterSegment0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray((Object) null, (String[]) null);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      Set<?> set0 = jSONPath0.keySet((Object) sQLDataException0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNull(set0);
      assertEquals("Qt", jSONPath0.getPath());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-340);
      intArray0[1] = 9;
      intArray0[2] = 26;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {0, 9, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)105;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[3] = (byte)8;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-43), (byte)105, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-43), (byte)105, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"\":99,\"aIMZ\":99,\"scan null error\":{},\"6[P3i1_5+Y1F}8#\":\"a string\",\"x\":{}}", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      assertArrayEquals(new int[] {0, 9, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(26, true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      String string0 = "{W0";
      JSONPath jSONPath0 = new JSONPath("{W0", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("{W0", jSONPath0.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_RefOpSegement0, stringArray0);
      assertNotNull(jSONArray0);
      assertArrayEquals(new int[] {0, 9, 26}, intArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3, intArray0.length);
      assertEquals(0, stringArray0.length);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {W0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      intArray0[0] = (-332);
      intArray0[1] = 9;
      intArray0[2] = 26;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {(-332), 9, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)8;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-43), (byte)105, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-43), (byte)105, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"\":99,\"WriteNullBooleanAsFalse\":99,\"z\":true,\"6[P3i1_5+Y1F}8#\":-99}", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      assertArrayEquals(new int[] {(-332), 9, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(26, true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, false);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertFalse(javaBeanInfo0.kotlin);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      
      ObjectDeserializer objectDeserializer0 = aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertNotNull(objectDeserializer0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertFalse(javaBeanInfo0.kotlin);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      
      JSONPath jSONPath0 = new JSONPath("{\"can not cast to double, value : \":-99}", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("{\"can not cast to double, value : \":-99}", jSONPath0.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Class<Float> class1 = Float.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class1);
      assertNull(javaBeanDeserializer0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("{\"can not cast to double, value : \":-99}", jSONPath0.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.deny.internal");
      assertNotNull(sQLRecoverableException0);
      assertEquals("fastjson.parser.deny.internal", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: fastjson.parser.deny.internal", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      
      boolean boolean3 = JSONPath.remove((Object) sQLRecoverableException0, "fastjson.parser.autoTypeSupport");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals("fastjson.parser.deny.internal", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: fastjson.parser.deny.internal", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("oR!gIX0H/5ivb=T&;t`");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("nin");
      assertNotNull(jSONPath0);
      assertEquals("nin", jSONPath0.getPath());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ParserConfig.global = parserConfig0;
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertFalse(ParserConfig.global.isSafeMode());
      assertFalse(ParserConfig.global.isJacksonCompatible());
      assertTrue(ParserConfig.global.isAsmEnable());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      char char0 = 'Z';
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("xml node to string error");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-340);
      intArray0[1] = 20;
      intArray0[2] = 26;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {(-340), 20, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-43);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-43), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-43), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"\":99,\"6[P3i1_5+Y1F}8#\":7,\":\":null,\"a\":null}", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      assertArrayEquals(new int[] {(-340), 20, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(26, true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("\"a string\"", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals("\"a string\"", jSONPath0.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      DataTruncation dataTruncation0 = new DataTruncation((-2584), true, false, 26, 26);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(20, 1181, 20);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte) (-43), (-340), 2216);
      assertNotNull(jSONPath_RangeSegment0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) mockGregorianCalendar0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("D+");
      assertNotNull(jSONPath0);
      assertEquals("D+", jSONPath0.getPath());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLInvalidAuthorizationSpecException0, "\"c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"c
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath jSONPath0 = new JSONPath("LC['Q");
      assertNotNull(jSONPath0);
      assertEquals("LC['Q", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "LC['Q", "LC['Q");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.remove((Object) "fastjson.parser.autoTypeAccept");
      assertFalse(boolean0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) "fastjson.parser.safeMode", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      assertNotNull(jSONPath0);
      assertEquals("LIKE", jSONPath0.getPath());
      
      jSONPath0.deepSet("LIKE", "LIKE", 5614464919154503228L, "LIKE");
      assertEquals("LIKE", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+");
      assertNotNull(jSONPath0);
      assertEquals("+", jSONPath0.getPath());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("+", "+");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: +", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("+", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("+", sQLInvalidAuthorizationSpecException0.getMessage());
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "=", (Object) sQLInvalidAuthorizationSpecException0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_PropertySegment0, (Object) "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      
      boolean boolean0 = jSONPath0.remove((Object) feature0);
      assertFalse(boolean0);
      assertFalse(feature0.equals((Object)feature1));
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertNotSame(feature0, feature1);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) feature1, (Object) feature0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-5808522788293435079L));
      assertNotNull(bigDecimal0);
      assertEquals((short)8505, bigDecimal0.shortValue());
      assertEquals((byte)57, bigDecimal0.byteValue());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) bigDecimal0, "@?S;q<] 0Btg0E1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. @?S;q<] 0Btg0E1
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = "cLwS;Y:Q^";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cLwS;Y:Q^");
      assertFalse(boolean0);
      
      String string1 = "gAl%Rh.\"n@ 5";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("gAl%Rh.\"n@ 5");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string2 = jSONPath_JSONPathParser0.readName();
      assertEquals("gAl", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "IC_ >g~&Z8p4tl";
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("gAl", "IC_ >g~&Z8p4tl", false);
      assertNotNull(jSONPath_RlikeSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile(" M(:k");
      assertNotNull(jSONPath0);
      assertEquals(" M(:k", jSONPath0.getPath());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<AfterFilter> list0 = javaBeanSerializer0.getAfterFilters();
      assertNotNull(list0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string4 = "83$hN6MKI";
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) javaBeanSerializer0, "83$hN6MKI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 83$hN6MKI
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = "|+%.-UJ<Tx^V&TYs5:~";
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = null;
      try {
        jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("|+%.-UJ<Tx^V&TYs5:~", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("`%hL('.qs", (-1580386065683472715L), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = new JSONPath("iWdb?");
      assertNotNull(jSONPath0);
      assertEquals("iWdb?", jSONPath0.getPath());
      
      int int0 = 81;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Class<Float> class0 = Float.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "iWdb?";
      stringArray0[1] = "`%hL('.qs";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(2, stringArray0.length);
      
      List<Object> list0 = javaBeanSerializer0.getFieldValues("iWdb?");
      assertNotNull(list0);
      assertFalse(list0.contains(5614464919154503228L));
      assertEquals(2, stringArray0.length);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = "Jgd";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`%hL('.qs", "iWdb?", 81);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(81, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("iWdb?", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: `%hL('.qs", sQLFeatureNotSupportedException0.toString());
      assertEquals("`%hL('.qs", sQLFeatureNotSupportedException0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Jgd", sQLFeatureNotSupportedException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(81, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("iWdb?", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: `%hL('.qs", sQLFeatureNotSupportedException0.toString());
      assertEquals("`%hL('.qs", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Jgd", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Jgd", sQLInvalidAuthorizationSpecException0.toString());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLInvalidAuthorizationSpecException0, "CTICbiM>i!lwJ-XP$h", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path iWdb?, segement CTICbiM>i!lwJ-XP$h
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("evalKeySet error : ");
      assertNotNull(jSONPath0);
      assertEquals("evalKeySet error : ", jSONPath0.getPath());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("evalKeySet error : "));
      assertEquals(0, linkedList0.size());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      jSONPath0.deepScan(bigDecimal0, "evalKeySet error : ", linkedList0);
      assertFalse(linkedList0.contains("evalKeySet error : "));
      assertEquals("evalKeySet error : ", jSONPath0.getPath());
      assertEquals(0, linkedList0.size());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-2163));
      assertNotNull(jSONScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, charArray0.length);
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals((-2163), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("com.alibaba.fastjson.JSONPath$StringOpSegement", 159);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals('c', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(159, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("Unknown", jSONScanner1.tokenName());
      assertNull(jSONScanner1.stringDefaultValue());
      
      Date date0 = jSONScanner1.scanFieldDate(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(date0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(0, charArray0.length);
      assertEquals('c', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(159, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("Unknown", jSONScanner1.tokenName());
      assertNull(jSONScanner1.stringDefaultValue());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      SQLDataException sQLDataException0 = new SQLDataException("xH\"bc`yNtaU8l8%Dt>", "com.alibaba.fastjson.JSONPath$StringOpSegement", 0);
      assertNotNull(sQLDataException0);
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("Qt", sQLDataException0, false);
      assertNotNull(jSONPath_ValueSegment0);
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(27, true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Q';
      intArray0[1] = 27;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2163);
      intArray0[5] = (-2163);
      intArray0[6] = 1177;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {81, 27, 0, 0, (-2163), (-2163), 1177}, intArray0);
      assertEquals(7, intArray0.length);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Qt", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      assertNotNull(jSONPath_FilterSegment0);
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, jSONPath_FilterSegment0, jSONPath_FilterSegment0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotNull(arrayList0);
      assertEquals("Qt", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      assertNotSame(jSONPath0, jSONPath1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      boolean boolean1 = jSONPath_ValueSegment0.apply(jSONPath1, jSONPath_PropertySegment0, jSONPath_PropertySegment0, jSONPath_WildCardSegment0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("xH\"bc`yNtaU8l8%Dt>", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: xH\"bc`yNtaU8l8%Dt>", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", sQLDataException0.getSQLState());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean2 = JSONPath.eq(jSONScanner0, jSONScanner0);
      assertTrue(boolean2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, charArray0.length);
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals((-2163), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertNotSame(jSONScanner0, jSONScanner1);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.deny.internal");
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: fastjson.parser.deny.internal", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      
      SerializeWriter serializeWriter0 = new SerializeWriter();
      assertNotNull(serializeWriter0);
      assertEquals(0, serializeWriter0.size());
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertEquals(3073, serializeWriter0.getBufferLength());
      assertTrue(serializeWriter0.isSortField());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      
      SerializeWriter serializeWriter1 = serializeWriter0.append('f');
      assertNotNull(serializeWriter1);
      assertEquals(1, serializeWriter0.size());
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertEquals(3073, serializeWriter0.getBufferLength());
      assertTrue(serializeWriter0.isSortField());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      assertFalse(serializeWriter1.isNotWriteDefaultValue());
      assertEquals(1, serializeWriter1.size());
      assertTrue(serializeWriter1.isSortField());
      assertEquals((-1), serializeWriter1.getMaxBufSize());
      assertEquals(3073, serializeWriter1.getBufferLength());
      assertSame(serializeWriter0, serializeWriter1);
      assertSame(serializeWriter1, serializeWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(serializeWriter1);
      assertNotNull(mockPrintWriter0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeAccept", "fastjson.parser.safeMode", 6, sQLDataException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: fastjson.parser.autoTypeAccept", sQLSyntaxErrorException0.toString());
      assertEquals(6, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLSyntaxErrorException0.getSQLState());
      assertEquals("fastjson.parser.autoTypeAccept", sQLSyntaxErrorException0.getMessage());
      
      Short short0 = new Short((short)94);
      assertEquals((short)94, (short)short0);
      assertNotNull(short0);
      
      Long long0 = new Long((short)94);
      assertEquals(94L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = JSONPath.eq(short0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Feature[] featureArray0 = new Feature[10];
      parserConfig0.setJacksonCompatible(true);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$RangeSegment");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("1.2.68", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      Double double0 = new Double((-1411.5593335967587));
      assertEquals((-1411.5593335967587), (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, double0, double0);
      assertNotNull(arrayList0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Map<String, Object> map0 = JSONPath.paths((Object) arrayList0);
      assertNotNull(map0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1056);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/stackTrace/1", "/stackTrace/1", intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-1056)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("/stackTrace/1", batchUpdateException0.getSQLState());
      assertEquals("/stackTrace/1", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: /stackTrace/1", batchUpdateException0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("HcS`9>GgB05@m", (String) null, (-1056), batchUpdateException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertArrayEquals(new int[] {(-1056)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("/stackTrace/1", batchUpdateException0.getSQLState());
      assertEquals("/stackTrace/1", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: /stackTrace/1", batchUpdateException0.toString());
      assertEquals((-1056), sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: HcS`9>GgB05@m", sQLSyntaxErrorException0.toString());
      assertEquals("HcS`9>GgB05@m", sQLSyntaxErrorException0.getMessage());
      
      boolean boolean0 = JSONPath.eq("HcS`9>GgB05@m", "HcS`9>GgB05@m");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("position", "*");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: position", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("position", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("*", sQLIntegrityConstraintViolationException0.getSQLState());
      
      int int0 = jSONPath0.size((Object) sQLIntegrityConstraintViolationException0);
      assertEquals(7, int0);
      assertEquals("*", jSONPath0.getPath());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: position", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("position", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("*", sQLIntegrityConstraintViolationException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = new JSONPath("$iWdy0&?");
      assertNotNull(jSONPath0);
      assertEquals("$iWdy0&?", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath1 = new JSONPath("99");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("99", jSONPath1.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(30, 30, 1236);
      assertNotNull(jSONPath_RangeSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath1, jSONPath0, jSONPath_RangeSegment0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(arrayList0);
      assertEquals("$iWdy0&?", jSONPath0.getPath());
      assertEquals("99", jSONPath1.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      int int0 = JSONPath.size((Object) arrayList0, "=");
      assertEquals(0, int0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertEquals("$iWdy0&?", jSONPath0.getPath());
      assertEquals("99", jSONPath1.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = new JSONPath("true");
      assertNotNull(jSONPath0);
      assertEquals("true", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("not support jsonpath : ");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: not support jsonpath : ", sQLFeatureNotSupportedException0.toString());
      assertEquals("not support jsonpath : ", sQLFeatureNotSupportedException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("not support jsonpath : ", "not support jsonpath : ", 256);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: not support jsonpath : ", sQLTransientConnectionException0.toString());
      assertEquals(256, sQLTransientConnectionException0.getErrorCode());
      assertEquals("not support jsonpath : ", sQLTransientConnectionException0.getMessage());
      assertEquals("not support jsonpath : ", sQLTransientConnectionException0.getSQLState());
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLRecoverableException0);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLFeatureNotSupportedException1.getMessage());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLFeatureNotSupportedException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertNotNull(mockThrowable0);
      
      Throwable[] throwableArray0 = mockThrowable0.getSuppressed();
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: not support jsonpath : ", sQLFeatureNotSupportedException0.toString());
      assertEquals("not support jsonpath : ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLFeatureNotSupportedException: not support jsonpath : ", mockThrowable0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: not support jsonpath : ", mockThrowable0.getMessage());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      
      boolean boolean0 = JSONPath.eq("true", sQLTransientConnectionException0);
      assertFalse(boolean0);
      assertEquals("java.sql.SQLTransientConnectionException: not support jsonpath : ", sQLTransientConnectionException0.toString());
      assertEquals(256, sQLTransientConnectionException0.getErrorCode());
      assertEquals("not support jsonpath : ", sQLTransientConnectionException0.getMessage());
      assertEquals("not support jsonpath : ", sQLTransientConnectionException0.getSQLState());
      
      String string0 = jSONPath0.getPath();
      assertEquals("true", string0);
      assertNotNull(string0);
      assertEquals("true", jSONPath0.getPath());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      stringArray0[1] = "true";
      stringArray0[2] = "";
      stringArray0[3] = "true";
      Throwable[] throwableArray1 = sQLFeatureNotSupportedException1.getSuppressed();
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(throwableArray1);
      assertEquals(0, throwableArray1.length);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLFeatureNotSupportedException1.getMessage());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertSame(throwableArray1, throwableArray0);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      
      stringArray0[4] = "true";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertNotNull(jSONPath_MultiPropertySegment0);
      assertEquals(5, stringArray0.length);
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(256, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set((-5190), 2412, 36, 1089, 24, 102);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-5190,MONTH=2412,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=36,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=1089,MINUTE=24,SECOND=102,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(5, stringArray0.length);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("T6>^%\"", "true", 2412);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(2412, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("true", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("T6>^%\"", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: T6>^%\"", sQLIntegrityConstraintViolationException0.toString());
      
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) javaBeanSerializer0, (Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":-99}", 5751393439502795295L, 358L, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONPath jSONPath0 = new JSONPath("#=r9:");
      assertNotNull(jSONPath0);
      assertEquals("#=r9:", jSONPath0.getPath());
      
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
      assertEquals("#=r9:", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("LC[(Q");
      assertNotNull(jSONPath0);
      assertEquals("LC[(Q", jSONPath0.getPath());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(56, (-932), 56);
      assertNotNull(mockGregorianCalendar0);
      
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
      assertEquals("LC[(Q", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("nin");
      assertNotNull(jSONPath0);
      assertEquals("nin", jSONPath0.getPath());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ParserConfig.global = parserConfig0;
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertFalse(ParserConfig.global.isJacksonCompatible());
      assertFalse(ParserConfig.global.isSafeMode());
      assertTrue(ParserConfig.global.isAsmEnable());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = 'Z';
      charArray0[2] = 'f';
      charArray0[3] = 'v';
      charArray0[4] = 'Y';
      charArray0[5] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'5', 'Z', 'f', 'v', 'Y', '='}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(6, charArray0.length);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('a');
      assertNull(uUID0);
      assertArrayEquals(new char[] {'5', 'Z', 'f', 'v', 'Y', '='}, charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(6, charArray0.length);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      Set<?> set0 = JSONPath.keySet((Object) hashMap0, "true");
      assertNull(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      jSONPath0.arrayAdd((Object) javaBeanSerializer0, (Object[]) null);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("nin", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) serializeConfig0);
      assertNotNull(map0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      
      Object object0 = jSONPath0.getArrayItem(map0, 37);
      assertNull(object0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      
      boolean boolean1 = jSONPath0.set((Object) map0, (Object) map0, false);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertEquals(4, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.println(true);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}");
      assertNotNull(jSONPath0);
      assertEquals("{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}", jSONPath0.getPath());
      
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, mockPrintWriter0, (Object) null);
      assertNull(object0);
      assertEquals("{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}", jSONPath0.getPath());
      
      String string0 = jSONPath0.getPath();
      assertEquals("{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}", string0);
      assertNotNull(string0);
      assertEquals("{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}", jSONPath0.getPath());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "AllowUnQuotedFieldNames";
      stringArray0[2] = "{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("true");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("{\"fruit\":\"Apple\",\"size\":99,\"color\":-99,\"[-99,null]\":true,\"value2\":false,\"number\":\"1\"}", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("com.alibaba.fastjson.JSONPath$IntBetweenSegement", "com.alibaba.fastjson.JSONPath$IntBetweenSegement", true);
      assertNotNull(jSONPath_RlikeSegement0);
      
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      assertNotNull(jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", jSONPath0.getPath());
      
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("deny", "[G4w,s6", 808, intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: deny", batchUpdateException0.toString());
      assertEquals(808, batchUpdateException0.getErrorCode());
      assertEquals("[G4w,s6", batchUpdateException0.getSQLState());
      assertEquals("deny", batchUpdateException0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning("l", batchUpdateException0);
      assertNotNull(sQLWarning0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: deny", batchUpdateException0.toString());
      assertEquals(808, batchUpdateException0.getErrorCode());
      assertEquals("[G4w,s6", batchUpdateException0.getSQLState());
      assertEquals("deny", batchUpdateException0.getMessage());
      assertEquals("l", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: l", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      
      SQLWarning sQLWarning1 = new SQLWarning("l", "deny", sQLWarning0);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNotNull(sQLWarning1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: deny", batchUpdateException0.toString());
      assertEquals(808, batchUpdateException0.getErrorCode());
      assertEquals("[G4w,s6", batchUpdateException0.getSQLState());
      assertEquals("deny", batchUpdateException0.getMessage());
      assertEquals("l", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: l", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("deny", sQLWarning1.getSQLState());
      assertEquals("l", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning: l", sQLWarning1.toString());
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("[G4w,s6", "com.alibaba.fastjson.JSONPath$IntBetweenSegement", 2543, intArray0, sQLWarning1);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNotNull(batchUpdateException1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: deny", batchUpdateException0.toString());
      assertEquals(808, batchUpdateException0.getErrorCode());
      assertEquals("[G4w,s6", batchUpdateException0.getSQLState());
      assertEquals("deny", batchUpdateException0.getMessage());
      assertEquals("l", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: l", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("deny", sQLWarning1.getSQLState());
      assertEquals("l", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning: l", sQLWarning1.toString());
      assertEquals("java.sql.BatchUpdateException: [G4w,s6", batchUpdateException1.toString());
      assertEquals(2543, batchUpdateException1.getErrorCode());
      assertEquals("[G4w,s6", batchUpdateException1.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", batchUpdateException1.getSQLState());
      
      Double double0 = new Double(2543);
      assertEquals(2543.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Byte byte0 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, batchUpdateException1, double0, byte0);
      assertFalse(boolean0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", jSONPath0.getPath());
      assertEquals("java.sql.BatchUpdateException: deny", batchUpdateException0.toString());
      assertEquals(808, batchUpdateException0.getErrorCode());
      assertEquals("[G4w,s6", batchUpdateException0.getSQLState());
      assertEquals("deny", batchUpdateException0.getMessage());
      assertEquals("l", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: l", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("deny", sQLWarning1.getSQLState());
      assertEquals("l", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning: l", sQLWarning1.toString());
      assertEquals("java.sql.BatchUpdateException: [G4w,s6", batchUpdateException1.toString());
      assertEquals(2543, batchUpdateException1.getErrorCode());
      assertEquals("[G4w,s6", batchUpdateException1.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$IntBetweenSegement", batchUpdateException1.getSQLState());
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(sQLWarning0, sQLWarning1);
      assertNotSame(sQLWarning1, sQLWarning0);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      
      JSONPath jSONPath1 = JSONPath.compile("l");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("l", jSONPath1.getPath());
      assertNotSame(jSONPath1, jSONPath0);
      
      Object[] objectArray0 = new Object[0];
      JSONPath.arrayAdd((Object) jSONPath_RlikeSegement0, "com.alibaba.fastjson.JSONPath$IntBetweenSegement", objectArray0);
      assertEquals(0, objectArray0.length);
      
      SQLException sQLException0 = new SQLException(")7[ZM JBm");
      assertNotNull(sQLException0);
      assertEquals(")7[ZM JBm", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: )7[ZM JBm", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLException0);
      assertNotNull(map0);
      assertEquals(")7[ZM JBm", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: )7[ZM JBm", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals(89, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath0 = new JSONPath("Yqk1<<a|", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("Yqk1<<a|", jSONPath0.getPath());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2097), (-265), (-841));
      assertNotNull(jSONPath_RangeSegment0);
      
      boolean boolean0 = JSONPath.remove((Object) jSONPath_RangeSegment0, "fastjson.parser.autoTypeAccept");
      assertFalse(boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "com.alibaba.fastjson.JSONPath$KeySetSegment");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$KeySetSegment", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<Byte> class0 = Byte.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues((Object) null);
      assertNotNull(list0);
      assertFalse(list0.contains(true));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      jSONPath0.deepGetPropertyValues(jSONPath_RangeSegment0, list0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(list0.contains(true));
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("Yqk1<<a|", jSONPath0.getPath());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Integer integer0 = new Integer(3085);
      assertEquals(3085, (int)integer0);
      assertNotNull(integer0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/i67C*>`sb\"LZA", 37);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(37, jSONReaderScanner0.getFeatures());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('a');
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(37, jSONReaderScanner0.getFeatures());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      
      Set<?> set0 = JSONPath.keySet((Object) "Yqk1<<a|", "fastjson.parser.safeMode");
      assertNull(set0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      jSONPath0.arrayAdd((Object) sQLIntegrityConstraintViolationException0, (Object[]) null);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("Yqk1<<a|", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-7672666954103892951L));
      assertNotNull(bigDecimal0);
      assertEquals((byte)41, bigDecimal0.byteValue());
      assertEquals((short)21545, bigDecimal0.shortValue());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((-7672666954103892951L)));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/8", jSONPath0.getPath());
      
      JSONPath.arrayAdd((Object) stack0, "/stackTrace/8", (Object[]) null);
      assertFalse(stack0.contains("/stackTrace/8"));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      JSONPath jSONPath1 = new JSONPath("v_I-m3[VB");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertEquals("v_I-m3[VB", jSONPath1.getPath());
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      DataTruncation dataTruncation0 = new DataTruncation((-1616), false, false, (-1616), 4);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(parserConfig0, (String[]) null);
      assertNotNull(jSONArray0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(false));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      jSONPath0.deepGetPropertyValues(jSONArray0, stack0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(stack0.contains(false));
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("*");
      assertNotNull(jSONPath0);
      assertEquals("*", jSONPath0.getPath());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(false));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      jSONPath0.deepGetPropertyValues(jSONPath_MinSegment0, arrayList0);
      assertFalse(arrayList0.contains(false));
      assertEquals("*", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      boolean boolean1 = JSONPath.contains((Object) sQLClientInfoException0, "*");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath1 = new JSONPath("AllowUnQuotedFieldNames", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("AllowUnQuotedFieldNames", jSONPath1.getPath());
      
      DataTruncation dataTruncation0 = new DataTruncation(224, false, false, 89, (-590));
      assertNotNull(dataTruncation0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("", jSONPath_MinSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, bigInteger0, jSONPath1, "507b]$h");
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("AllowUnQuotedFieldNames", jSONPath1.getPath());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean1 = jSONPath0.contains((Object) "AllowUnQuotedFieldNames");
      assertFalse(boolean1);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertTrue(boolean1 == boolean0);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Qt");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertNotNull(jSONPath_SegmentArray0);
      assertEquals(1, jSONPath_SegmentArray0.length);
      
      long long0 = 5944107969236155580L;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-3851359326990528739L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = "==fb)vY8\"|xFo;4 t";
      JSONPath jSONPath0 = new JSONPath("==fb)vY8\"|xFo;4 t");
      assertNotNull(jSONPath0);
      assertEquals("==fb)vY8\"|xFo;4 t", jSONPath0.getPath());
      
      String string1 = "S0~~fB3e-";
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("S0~~fB3e-", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, jSONPath0, "==fb)vY8\"|xFo;4 t");
      assertNull(object0);
      assertEquals("==fb)vY8\"|xFo;4 t", jSONPath0.getPath());
      
      int int0 = (-1933711500);
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(jSONPath_PropertySegment0, (-1933711500));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      assertNotNull(jSONPath_Filter0);
      assertSame(jSONPath_NullSegement0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_NullSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_Filter0, jSONPath_Filter0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      assertEquals(PropertyNamingStrategy.KebabCase, propertyNamingStrategy0);
      
      // Undeclared exception!
      try { 
        JSONPath.compare(propertyNamingStrategy0, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Enum
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      String string0 = "LC['Q";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONPath jSONPath0 = new JSONPath("LC['Q");
      assertNotNull(jSONPath0);
      assertEquals("LC['Q", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath0, jSONPath_MaxSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      System.setCurrentTimeMillis(3626L);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSONPath.extract("[false,99]", "[false,99]", parserConfig0, 1583, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. [false,99]
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      assertNotNull(jSONPath_Filter0);
      assertSame(jSONPath_NullSegement0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_NullSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_Filter0, jSONPath_Filter0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      Pattern pattern0 = Pattern.compile("#j^<2:,", 422);
      assertNotNull(pattern0);
      assertEquals("#j^<2:,", pattern0.pattern());
      assertEquals(486, pattern0.flags());
      assertEquals("#j^<2:,", pattern0.toString());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", pattern0, jSONPath_Operator0);
      assertNotNull(jSONPath_RegMatchSegement0);
      assertEquals("#j^<2:,", pattern0.pattern());
      assertEquals(486, pattern0.flags());
      assertEquals("#j^<2:,", pattern0.toString());
      
      JSONPath jSONPath0 = JSONPath.compile("Dp5,TN6^lo/X]HTu' ");
      assertNotNull(jSONPath0);
      assertEquals("Dp5,TN6^lo/X]HTu' ", jSONPath0.getPath());
      
      boolean boolean1 = jSONPath_RegMatchSegement0.apply(jSONPath0, (Object) null, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", jSONPath_Operator0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("#j^<2:,", pattern0.pattern());
      assertEquals(486, pattern0.flags());
      assertEquals("#j^<2:,", pattern0.toString());
      assertEquals("Dp5,TN6^lo/X]HTu' ", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!`,9Y3W", "QJI@0d_)a7L");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("!`,9Y3W", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: !`,9Y3W", sQLInvalidAuthorizationSpecException0.toString());
      
      JSONPath jSONPath0 = new JSONPath("QJI@0d_)a7L");
      assertNotNull(jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!`,9Y3W");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Pattern pattern0 = Pattern.compile("not", 38);
      assertNotNull(pattern0);
      assertEquals("not", pattern0.toString());
      assertEquals(38, pattern0.flags());
      assertEquals("not", pattern0.pattern());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("QJI@0d_)a7L", pattern0, jSONPath_Operator0);
      assertNotNull(jSONPath_RegMatchSegement0);
      assertEquals("not", pattern0.toString());
      assertEquals(38, pattern0.flags());
      assertEquals("not", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Fafh( F!'N!$+");
      assertNotNull(jSONPath0);
      assertEquals("Fafh( F!'N!$+", jSONPath0.getPath());
      
      Pattern pattern0 = Pattern.compile("i");
      assertNotNull(pattern0);
      assertEquals("i", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("i", pattern0.toString());
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("java.util.Collections$EmptyMap", pattern0, jSONPath_Operator0);
      assertNotNull(jSONPath_RegMatchSegement0);
      assertEquals("i", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("i", pattern0.toString());
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment1 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment1);
      assertSame(jSONPath_SizeSegment1, jSONPath_SizeSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("i");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: i", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("i", sQLInvalidAuthorizationSpecException0.getMessage());
      
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath_SizeSegment1, sQLInvalidAuthorizationSpecException0, "i");
      assertFalse(boolean0);
      assertEquals("Fafh( F!'N!$+", jSONPath0.getPath());
      assertEquals("i", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("i", pattern0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: i", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("i", sQLInvalidAuthorizationSpecException0.getMessage());
      assertSame(jSONPath_SizeSegment1, jSONPath_SizeSegment0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Feature feature0 = Feature.IgnoreNotMatch;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[0] = feature0;
      boolean boolean0 = JSONPath.remove((Object) feature0, "com.alibaba.fastjson.util.ASMClassLoader");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      
      int int0 = jSONPath0.evalSize(feature0);
      assertEquals((-1), int0);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      JSONPath jSONPath0 = new JSONPath("Yqk1<<a|", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("Yqk1<<a|", jSONPath0.getPath());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "fastjson.parser.safeMode");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.toString());
      assertEquals("fastjson.parser.safeMode", sQLFeatureNotSupportedException0.getSQLState());
      
      Class<MockCalendar> class0 = MockCalendar.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = "Yq\\k1<<a|";
      boolean boolean0 = true;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      Object object0 = JSONPath.extract("[{}]", "[{}]", parserConfig0, 1583, featureArray0);
      assertNull(object0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertEquals(10, featureArray0.length);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      Map<String, Object> map0 = JSONPath.paths((Object) feature0);
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      ParserConfig.global = parserConfig0;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(ParserConfig.global.isAsmEnable());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertFalse(ParserConfig.global.isJacksonCompatible());
      assertFalse(ParserConfig.global.isSafeMode());
      
      long[] longArray0 = new long[6];
      longArray0[0] = 5614464919154503228L;
      longArray0[1] = 8055461369741094911L;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not match enum value, ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("[3=}4", "[3=}4", parserConfig0, 1583, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 3, line 1, column 4[3=}4
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      Object object0 = JSONPath.extract("[\"a string\"]", "[\"a string\"]", parserConfig0, 1583, featureArray0);
      assertNull(object0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(10, featureArray0.length);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) feature0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      String string0 = "[[]]";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      Feature[] featureArray0 = new Feature[10];
      // Undeclared exception!
      try { 
        JSONPath.extract("[[]]", "port", parserConfig0, 1583, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 2, line 1, column 3[[]]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = new JSONPath("WO", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("WO", jSONPath0.getPath());
      
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.parser.deny", longArray0, false);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
      
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      assertNotNull(jSONPath0);
      assertEquals("\"a string\"", jSONPath0.getPath());
      
      String string0 = null;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = null;
      try {
        jSONPath_PropertySegment0 = new JSONPath.PropertySegment((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      long long1 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      Object object0 = JSONPath.extract("[\"a string\"]", "[\"a string\"]", parserConfig0, 1583, featureArray0);
      assertNull(object0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(10, featureArray0.length);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Map<String, Object> map0 = JSONPath.paths((Object) feature1);
      assertFalse(feature1.equals((Object)feature0));
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotSame(feature1, feature0);
      
      ParserConfig.global = parserConfig0;
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertFalse(ParserConfig.global.isJacksonCompatible());
      assertFalse(ParserConfig.global.isSafeMode());
      assertTrue(ParserConfig.global.isAsmEnable());
      
      long[] longArray0 = new long[6];
      longArray0[0] = 5614464919154503228L;
      longArray0[1] = 8055461369741094911L;
      longArray0[2] = (long) 1583;
      longArray0[3] = 8055461369741094911L;
      longArray0[4] = (-1580386065683472715L);
      longArray0[5] = 310L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.parser.deny.internal", longArray0, false);
      assertNotNull(jSONPath_IntInSegement0);
      assertArrayEquals(new long[] {5614464919154503228L, 8055461369741094911L, 1583L, 8055461369741094911L, (-1580386065683472715L), 310L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONPath jSONPath0 = JSONPath.compile("Ej./RD8Ll)wE=j");
      assertNotNull(jSONPath0);
      assertEquals("Ej./RD8Ll)wE=j", jSONPath0.getPath());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Ej./RD8Ll)wE=j"));
      assertEquals(0, linkedList0.size());
      
      jSONPath0.deepScan("Ej./RD8Ll)wE=j", "Ej./RD8Ll)wE=j", linkedList0);
      assertFalse(linkedList0.contains("Ej./RD8Ll)wE=j"));
      assertEquals("Ej./RD8Ll)wE=j", jSONPath0.getPath());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/cause/cause/stackTrace/3");
      assertNotNull(jSONPath0);
      assertEquals("/cause/cause/stackTrace/3", jSONPath0.getPath());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("/cause/cause/stackTrace/3"));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) jSONPath0);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains("/cause/cause/stackTrace/3"));
      assertEquals("/cause/cause/stackTrace/3", jSONPath0.getPath());
      assertEquals(1, linkedList0.size());
      
      jSONPath0.deepScan(linkedList0, "A`'~pYv{_D%wB/y%p", linkedList0);
      assertFalse(linkedList0.contains("/cause/cause/stackTrace/3"));
      assertEquals("/cause/cause/stackTrace/3", jSONPath0.getPath());
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("oB~CHD<:Cus=SeBu/");
      assertNotNull(jSONPath0);
      assertEquals("oB~CHD<:Cus=SeBu/", jSONPath0.getPath());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("oB~CHD<:Cus=SeBu/"));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("oB~CHD<:Cus=SeBu/", "oB~CHD<:Cus=SeBu/", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path oB~CHD<:Cus=SeBu/, segement oB~CHD<:Cus=SeBu/
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath0 = new JSONPath("$iWdy0&?");
      assertNotNull(jSONPath0);
      assertEquals("$iWdy0&?", jSONPath0.getPath());
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Class<Float> class0 = Float.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}p7E{q@";
      stringArray0[1] = " Syk|OV%RO:";
      stringArray0[2] = "=";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(3, stringArray0.length);
      
      List<Object> list0 = javaBeanSerializer0.getFieldValues(jSONPath_DoubleOpSegement0);
      assertNotNull(list0);
      assertFalse(list0.contains("="));
      assertEquals(3, stringArray0.length);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      jSONPath0.deepScan(jSONPath_Operator0, "=", list0);
      assertFalse(list0.contains("="));
      assertEquals(3, stringArray0.length);
      assertEquals("$iWdy0&?", jSONPath0.getPath());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("!", "com.alibaba.fastjson.JSONPath$FilterGroup");
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("!", sQLTransactionRollbackException1.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$FilterGroup", sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: !", sQLTransactionRollbackException1.toString());
      
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply(jSONPath0, sQLTransactionRollbackException0, sQLTransactionRollbackException1, "!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$FilterGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("Yqk1<<a|");
      assertNotNull(jSONPath_NullSegement0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      assertNotNull(jSONPath0);
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean0 = jSONPath0.remove((Object) serializeConfig0);
      assertFalse(boolean0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      assertNotNull(jSONPath0);
      assertEquals("Qt", jSONPath0.getPath());
      
      String string0 = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      char char0 = 'Q';
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath1 = new JSONPath("cZ8RyfE>`#wq&", serializeConfig0, parserConfig0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("cZ8RyfE>`#wq&", jSONPath1.getPath());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(219, 219, 219);
      assertNotNull(jSONPath_RangeSegment0);
      
      boolean boolean1 = JSONPath.remove((Object) jSONPath_RangeSegment0, "fastjson.parser.autoTypeSupport");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = "/i67C\\*>`sb\"LZA";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/i67C*>`sb\"LZA", "cZ8RyfE>`#wq&");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("cZ8RyfE>`#wq&", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("/i67C*>`sb\"LZA", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: /i67C*>`sb\"LZA", sQLFeatureNotSupportedException0.toString());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertNotNull(javaBeanSerializer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues((Object) null);
      assertNotNull(list0);
      assertFalse(list0.contains(219));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5t");
      assertNotNull(jSONPath0);
      assertEquals("5t", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) " M(:k", "5t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 5t
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/11");
      assertNotNull(jSONPath0);
      assertEquals("/stackTrace/11", jSONPath0.getPath());
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("/stackTrace/11", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("Qj5x &x=j+^n", (-179.281), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("6Z~6j|VtH", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("gzip", "Qj5x &x=j+^n");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Qj5x &x=j+^n", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: gzip", sQLFeatureNotSupportedException0.toString());
      assertEquals("gzip", sQLFeatureNotSupportedException0.getMessage());
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.EQ;
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.ErrorOnEnumNotMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InitStringFieldAsEmpty;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.CustomMapDeserializer;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableSpecialKeyDetect;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.ErrorOnEnumNotMatch;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.UseObjectArray;
      featureArray0[7] = feature7;
      JSONPath jSONPath0 = JSONPath.compile("<init>");
      assertNotNull(jSONPath0);
      assertEquals("<init>", jSONPath0.getPath());
      
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      assertEquals("<init>", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) feature0, " M(:k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath :  M(:k
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-340);
      intArray0[1] = 9;
      intArray0[2] = 26;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {(-340), 9, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-43), (byte)105, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-43), (byte)105, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"\":99,\"y\":7,\":\":null,\"a\":[null]}", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      assertArrayEquals(new int[] {(-340), 9, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(26, true);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = new JSONPath("\"a string\"", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("\"a string\"", jSONPath0.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      DataTruncation dataTruncation0 = new DataTruncation((-2584), true, false, 26, 26);
      assertNotNull(dataTruncation0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 1181, 9);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set((int) (byte) (-43), 26, 26, 36, (-1629), 26);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-43,MONTH=26,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=26,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=36,MINUTE=-1629,SECOND=26,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) dataTruncation0, (Object) mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"a string\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      assertEquals(5614464919154503228L, long0);
      
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, 5614464919154503228L);
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      JSONPath.NullSegement jSONPath_NullSegement0 = null;
      try {
        jSONPath_NullSegement0 = new JSONPath.NullSegement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "99");
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("99");
      assertNotNull(jSONPath0);
      assertEquals("99", jSONPath0.getPath());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 99
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-340);
      intArray0[1] = 9;
      intArray0[2] = 26;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      assertArrayEquals(new int[] {(-340), 9, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-43), (byte)105, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-43), (byte)105, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"\":99,\"y\":99,\"z\":true,\"6[P3i1_5+Y1F}8#\":[]}", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      assertArrayEquals(new int[] {(-340), 9, 26}, intArray0);
      assertEquals(3, intArray0.length);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(26, true);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      
      JSONPath jSONPath0 = new JSONPath("{}", serializeConfig0, parserConfig0);
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("{}", jSONPath0.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fastjson.parser.autoTypeAccept";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_MultiIndexSegment0, stringArray0);
      assertNotNull(jSONArray0);
      assertArrayEquals(new int[] {(-340), 9, 26}, intArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3, intArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      JSONPath.remove((Object) "/stackTrace/11", "/stackTrace/11");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String string0 = "EQ";
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/11", "EQ", mockThrowable0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "EQ";
      stringArray0[1] = "/stackTrace/11";
      JSONPath.reserveToArray(sQLTimeoutException0, stringArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("EQ");
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("AllowUnQuotedFieldNames", "fastjson.parser.safeMode", (-598), sQLRecoverableException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLRecoverableException0);
      mockThrowable0.getSuppressed();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"a string\"}", "$BDzYobR%t5t", sQLRecoverableException0);
      jSONPath_WildCardSegment0.eval(jSONPath0, sQLTimeoutException0, "fastjson.parser.safeMode");
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance_deep;
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JSONPath.eq(jSONPath_WildCardSegment1, mockGregorianCalendar0);
      jSONPath0.getPath();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath jSONPath0 = new JSONPath(".");
      jSONPath0.getPath();
      jSONPath0.getPropertyValues(".");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("", 6142L, 6142L, true);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      String string0 = "{\"fruit\":\"{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}";
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AutoCloseSource;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableASM;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSONPath.extract("{\"fruit\":\"{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", "fastjson.parser.autoTypeSupport", parserConfig0, (-1360), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSONPath.extract("=", "language", parserConfig0, (-417), (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      JSONPath jSONPath0 = new JSONPath("$iWdy0&?");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("!", "com.alibaba.fastjson.JSONPath$FilterGroup");
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply(jSONPath0, sQLTransactionRollbackException0, sQLTransactionRollbackException1, "!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$FilterGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"com.alibaba.fastjson.serializer.BeanContext\":{\"x\":{}}}");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"com.alibaba.fastjson.serializer.BeanContext\":{\"x\":{}}}");
      JSONPath.NullSegement jSONPath_NullSegement1 = new JSONPath.NullSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"com.alibaba.fastjson.serializer.BeanContext\":{\"x\":{}}}");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"com.alibaba.fastjson.serializer.BeanContext\":{\"x\":{}}}", false);
      Integer integer0 = new Integer((-2324));
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement1, false);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"com.alibaba.fastjson.serializer.BeanContext\":{\"x\":{}}}");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"com.alibaba.fastjson.serializer.BeanContext\":{\"x\":{}}}", hashMap0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, jSONPath_JSONPathParser0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = 'G';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      Map<String, Object> map0 = JSONPath.paths((Object) parserConfig0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      jSONPath0.getArrayItem(map0, 67);
      assertEquals(9, map0.size());
      
      Long long0 = new Long(9140416208800006522L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      JSONPath jSONPath1 = new JSONPath("LIKE", serializeConfig0, parserConfig1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-141), (-2054366899), 1464);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny");
      Object object0 = JSONPath.eval((Object) jSONPath1, "fastjson.parser.safeMode");
      assertNull(object0);
      
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, (Object) null, jSONPath1, "LIKE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/10");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Set<?> set0 = jSONPath0.keySet((Object) "/cause/stackTrace/10");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nin");
      JSONPath jSONPath0 = new JSONPath("nin");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Double> class0 = Double.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, hashMap0);
      ParserConfig.global = parserConfig0;
      Set<?> set0 = jSONPath0.keySet((Object) "nin");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Vgs$*fms`");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("T4gT$K6P.2'2+", "com.alibaba.fastjson.JSONPath$FilterSegment");
      jSONPath0.size((Object) "Vgs$*fms`");
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      String string0 = "JSONPath$StringOpSegement";
      JSONPath jSONPath0 = new JSONPath("=");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONPath0.size((Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = null;
      try {
        jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      Number number0 = null;
      JSONPath jSONPath0 = new JSONPath(" Syk|OV%RO:");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath :  Syk|OV%RO:
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      String string0 = "fastjson.parser.deny";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      JSONPath jSONPath1 = new JSONPath("t?v");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("SxQ(L08^", ".");
      JSONPath jSONPath2 = new JSONPath("Xy[';1ALpN.^9^1");
      SerializeConfig.getGlobalInstance();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("parameters", "QJI", sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      Short short0 = new Short((short)1163);
      Set<?> set0 = jSONPath2.keySet((Object) short0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("LC['Q");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LC['Q");
      jSONPath_JSONPathParser0.skipWhitespace();
      JSONPath.remove((Object) null, "/cause/stackTrace/4");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("<M\u0002(Z@bCo");
      jSONPath_JSONPathParser1.parseArrayAccessFilter(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      long long1 = JSONPath.LENGTH;
      JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      String string0 = "fastjson.parser.deny";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      long long1 = JSONPath.LENGTH;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[10];
      JSONPath.extract("[{\"and\":99}]", "[{\"and\":99}]", parserConfig0, 1583, featureArray0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      long long1 = JSONPath.LENGTH;
      JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      int int0 = 1583;
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      JSONPath.extract("[-99,null]", "[-99,null]", parserConfig0, 1583, featureArray0);
      String string0 = "RJ\\v&Jss_^<;hr=";
      Pattern pattern0 = Pattern.compile(parserConfig0.DENY_PROPERTY_INTERNAL, int0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement(string0, pattern0, jSONPath_Operator0);
      String string1 = "";
      JSONPath jSONPath0 = JSONPath.compile(string1);
      String string2 = "VV&";
      String string3 = "yyyy-MM-dd'T'HH:mm:ss.SSS";
      SQLWarning sQLWarning0 = new SQLWarning(parserConfig0.DENY_PROPERTY_INTERNAL, string3, int0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(string2, string2, int0, sQLWarning0);
      jSONPath_RegMatchSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, string1, feature1);
      JSONPath.paths((Object) feature1);
      ParserConfig.global = parserConfig0;
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(parserConfig0.AUTOTYPE_ACCEPT);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath1 = new JSONPath(parserConfig0.DENY_PROPERTY, serializeConfig0, parserConfig0);
      int int1 = 878;
      int int2 = (-251);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int1, int2);
      jSONPath_NullSegement0.apply(jSONPath1, mockGregorianCalendar0, featureArray0[1], featureArray0[1]);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeAccept", "fastjson.parser.safeMode", parserConfig0, (-2487), (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      int int0 = jSONPath0.size((Object) ".");
      assertEquals(2, int0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.abs();
      JSONPath.keySet((Object) bigInteger0, "true");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "in", parserConfig0, 8, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("z");
      UUID uUID0 = MockUUID.fromString("z");
      JSONPath.keySet((Object) uUID0, "autoTypeSupport");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("autoTypeSupport");
      long[] longArray0 = new long[5];
      longArray0[1] = 8055461369741094911L;
      longArray0[4] = 8055461369741094911L;
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      int[] intArray0 = new int[0];
      JSONPath jSONPath0 = new JSONPath("\u0006v@z <b");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/stackTrace/7", "/stackTrace/7");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \u0006v@z <b
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<(-4");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackkTrace/8", true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("<(-4", jSONPath_PropertySegment0, jSONPath_Operator0);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONPath jSONPath0 = JSONPath.compile("<(-4");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-340);
      intArray0[1] = 9;
      intArray0[2] = 26;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[]}", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(26, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"a string\"}", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation((-2584), true, false, 26, 26);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      jSONPath_RefOpSegement0.apply(jSONPath0, dataTruncation0, classLoader0, jSONPath_MultiIndexSegment0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"a string\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"a string\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("false", "false");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("false");
      jSONPath0.set((Object) sQLInvalidAuthorizationSpecException0, (Object) sQLTimeoutException0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("false");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("M1cg\"RV_A>/u96");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/stackTrace/4");
      boolean boolean0 = jSONPath0.setPropertyValue("M1cg\"RV_A>/u96", "/stackTrace/4", 9215131087512669423L, sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      JSONPath.compare("", "");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AutoCloseSource;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.InternFieldNames;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowUnQuotedFieldNames;
      featureArray0[5] = feature5;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", (SerializeConfig) null, parserConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("ta~f)", "or~~W^", 0, sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.autoTypeSupport", "true", sQLSyntaxErrorException1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLRecoverableException0, sQLClientInfoException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("oB~CHD<:Cus=SeBu/");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("end must greater than or equals start. start ", "end must greater than or equals start. start ");
      jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, sQLFeatureNotSupportedException0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fastjson.parser.safeMode";
      stringArray0[1] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.contains((Object) jSONPath0, "fastjson.parser.safeMode");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      jSONPath_MultiPropertySegment0.eval(jSONPath1, jSONPath_Operator0, jSONPath1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = 'G';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      Map<String, Object> map0 = JSONPath.paths((Object) parserConfig0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      jSONPath0.getArrayItem(map0, 67);
      Long long0 = new Long(9140416208800006522L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      JSONPath jSONPath1 = new JSONPath("LIKE", serializeConfig0, parserConfig1);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, (Object) null, (-2054366899), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Map<String, Object> map0 = JSONPath.paths((Object) parserConfig0);
      assertEquals(9, map0.size());
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      Map<String, Object> map0 = JSONPath.paths((Object) serializeConfig0);
      jSONPath0.getArrayItem(map0, 37);
      ClassLoader.getSystemClassLoader();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/cause/stackTrace/11", "/cause/stackTrace/11", true);
      SerializeConfig serializeConfig0 = new SerializeConfig(490, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, serializeConfig0, parserConfig0, "com.alibaba.fastjson.JSONPath$ValueSegment");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Float float0 = new Float((float) 55296);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("s#q^6iu&sCLppk", float0, false);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/7");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("5nzMYELg:Rw&", "fastjson.parser.safeMode", 55296);
      SQLWarning sQLWarning0 = new SQLWarning("s#q^6iu&sCLppk");
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "s#q^6iu&sCLppk", sQLWarning0, parserConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-2163));
      JSONScanner jSONScanner1 = new JSONScanner("com.alibaba.fastjson.JSONPath$StringOpSegement", 159);
      jSONScanner1.scanFieldDate(charArray0);
      SQLDataException sQLDataException0 = new SQLDataException("xH\"bc`yNtaU8l8%Dt>", "com.alibaba.fastjson.JSONPath$StringOpSegement", 0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("Qt", sQLDataException0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(27, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Q';
      intArray0[1] = 27;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2163);
      intArray0[5] = (-2163);
      intArray0[6] = 1177;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Qt", true);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath1, jSONPath_PropertySegment0, jSONPath_PropertySegment0, jSONPath_WildCardSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ClassLoader.getSystemClassLoader();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("]F#<5^ht.'%", "/cause/stackTrace/5", parserConfig0, (-3567), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/3");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("/stackTrace/8", true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("BiEEguk&mnM <Xz[l", parserConfig0, (-1791476485));
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("Yqk1<<a|");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("Yqk1<<a|", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, parserConfig0, jSONPath0, parserConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("", 6142L, 6142L, true);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AutoCloseSource;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableASM;
      featureArray0[2] = feature2;
      JSONPath.extract("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", "fastjson.parser.autoTypeSupport", parserConfig0, (-1360), featureArray0);
      JSONPath.paths((Object) null);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.autoTypeAccept");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-251), (-251), 710);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.getSuppressed();
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.deny.internal", mockThrowable0);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, javaBeanSerializer0, jSONPath_MinSegment0, sQLTransientException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      JSONPath.compile("t6eJ`;c");
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(3, roundingMode0);
      BigDecimal bigDecimal0 = new BigDecimal((-653.0), mathContext0);
      boolean boolean0 = JSONPath.remove((Object) bigDecimal0, "/stackTrace/11");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"a string", (Throwable) null);
      JSONPath jSONPath0 = new JSONPath("&/zk^Akpkm+a{V4)I");
      jSONPath0.containsValue((Object) null, (Object) "&/zk^Akpkm+a{V4)I");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      boolean boolean0 = jSONPath0.containsValue((Object) sQLTimeoutException0, (Object) null);
      assertFalse(boolean0);
      
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$StringOpSegement", serializeConfig0, parserConfig0);
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(100, 100, 57);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      JSONPath jSONPath3 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig1, parserConfig0);
      SQLException sQLException0 = new SQLException("in", "not", 49);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("6[P3i1_5+Y1F}8#", "com.alibaba.fastjson.JSONPath$StringOpSegement", 77, sQLException0);
      boolean boolean0 = jSONPath3.containsValue((Object) sQLSyntaxErrorException0, (Object) "in");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = "\"a string";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"a string", "\"a string");
      JSONPath jSONPath0 = new JSONPath("\"a string");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("\"a string", (-103));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("PB", clientInfoStatus0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("PB", "PB", (-1000));
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("PB", "By`;1D!-hS'p&a/;Z", hashMap0, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Map<String, Object> map0 = JSONPath.paths((Object) sQLNonTransientConnectionException0);
      assertEquals(87, map0.size());
      
      JSONPath jSONPath0 = new JSONPath("By`;1D!-hS'p&a/;Z");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(181, (-1000), (-2844));
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, sQLClientInfoException0, jSONPath0);
      Map<String, Object> map1 = JSONPath.paths(object0);
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      String string0 = "Yq\\k1<<a|";
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.paths((Object) serializeConfig0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(serializeConfig0, 67);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_Filter0, jSONPath_Filter0, false);
      JSONPath jSONPath0 = new JSONPath(" 0lsT]4");
      JSONPath.keySet((Object) jSONPath0, "0000-00-00");
      JSONPath.Operator.values();
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      int int0 = (-2021310227);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("-@%{|Xd", "-@%{|Xd", (-2021310227));
      sQLIntegrityConstraintViolationException0.spliterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("-@%{|Xd", sQLIntegrityConstraintViolationException0);
      JSONPath.keySet((Object) sQLSyntaxErrorException0, "-@%{|Xd");
      String string0 = "";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      JSONPath.compare("", "");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AutoCloseSource;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.InternFieldNames;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowUnQuotedFieldNames;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.IgnoreNotMatch;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.InitStringFieldAsEmpty;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.IgnoreAutoType;
      featureArray0[8] = feature8;
      // Undeclared exception!
      try { 
        JSONPath.extract("", "", parserConfig0, 0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.contains((Object) jSONPath0, "fastjson.parser.safeMode");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$ValueSegment");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath0, jSONPath1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      JSONPath jSONPath0 = new JSONPath("LIKE");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("ZZ6y<oK");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("s>kUTTDL%HNK`\nx", "s>kUTTDL%HNK`\nx");
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransactionRollbackException0);
      assertEquals(90, map0.size());
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      JSONPath.paths((Object) jSONPath0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      Long long0 = new Long((-96L));
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.deny.internal");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, (Object) null, 1273, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      JSONPath.paths((Object) jSONPath0);
      Long long0 = new Long((-96L));
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.deny.internal");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, (Object) null, 1246, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".000000000");
      Map<String, Object> map0 = JSONPath.paths((Object) ".000000000");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qt");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$StringOpSegement", serializeConfig0, parserConfig0);
      JSONPath.paths((Object) jSONPath1);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      jSONPath1.getArrayItem((Object) null, 67);
      Long long0 = new Long(2478L);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, parserConfig0, 0, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.parser.ParserConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable0);
      Throwable throwable0 = mockThrowable1.fillInStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(mockThrowable1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}");
      mockThrowable0.getLocalizedMessage();
      mockPrintWriter0.println(true);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      JSONPath.set((Object) null, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", (Object) sQLIntegrityConstraintViolationException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("AllowUnQuotedFieldNames", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", 0, throwable0);
      jSONPath_WildCardSegment0.eval(jSONPath0, sQLTransientConnectionException0, (Object) null);
      mockThrowable1.getSuppressed();
      jSONPath_WildCardSegment0.eval(jSONPath0, mockPrintWriter0, (Object) null);
      JSONPath.eq(jSONPath_WildCardSegment0, throwable0);
      jSONPath0.getPath();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "AllowUnQuotedFieldNames";
      stringArray0[1] = null;
      stringArray0[2] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("true");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.serializer.SerializeConfig");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      long long1 = JSONPath.LENGTH;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      JSONPath.extract("[]", "[]", parserConfig0, 1583, featureArray0);
      JSONPath.paths((Object) feature0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      long long1 = JSONPath.LENGTH;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature0;
      JSONPath.extract("[null]", "[null]", parserConfig0, 1583, featureArray0);
      JSONPath.paths((Object) feature0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      long long1 = JSONPath.LENGTH;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.setJacksonCompatible(true);
      JSONPath.size((Object) "[true,{}]", "[true,{}]");
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      JSONPath.compile("Rw~tQJjN^6LQ)>PW");
      JSONPath.reserveToObject("Rw~tQJjN^6LQ)>PW", (String[]) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Rw~tQJjN^6LQ)>PW");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. Rw~tQJjN^6LQ)>PW
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      long long1 = JSONPath.LENGTH;
      JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSONPath.extract("[true]", "[true]", parserConfig0, 1583, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("annotatedSuperclass", "R-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String string0 = "?Q[OJ5f)I8Ai,_6DU";
      // Undeclared exception!
      try { 
        JSONPath.extract("?Q[OJ5f)I8Ai,_6DU", "?Q[OJ5f)I8Ai,_6DU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2?Q[OJ5f)I8Ai,_6DU
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("rlike");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      jSONPath0.isRef();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("rlike");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLTimeoutException0, stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$iWdy0&?");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      JSONPath jSONPath1 = new JSONPath("99");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(30, 30, 1236);
      jSONPath_WildCardSegment0.eval(jSONPath1, jSONPath0, jSONPath_RangeSegment0);
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = "";
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("", 6142L, 6142L, true);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      String string1 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      String string2 = "not support jsonpath : ";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("not support jsonpath : ");
      SQLException sQLException0 = new SQLException(sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "not support jsonpath : ", 256, sQLException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      UUID uUID0 = MockUUID.randomUUID();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLException0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, uUID0, sQLFeatureNotSupportedException1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&&R");
      // Undeclared exception!
      try { 
        JSONPath.read("&&R", "&&R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2&&R
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}";
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", serializeConfig0, parserConfig0);
      Throwable throwable0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny", (Throwable) null);
      // Undeclared exception!
      try { 
        JSONPath.read("fastjson.parser.safeMode", "fastjson.parser.safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "{\"color\":\"Red\",\"fruit\":\"curContext\",\"size\":\"Large\",\"value\":true}";
      JSONPath jSONPath0 = new JSONPath("{\"color\":\"Red\",\"fruit\":\"curContext\",\"size\":\"Large\",\"value\":true}");
      int[] intArray0 = new int[5];
      intArray0[0] = 26;
      intArray0[1] = (-307);
      intArray0[2] = 1241;
      // Undeclared exception!
      try { 
        JSONPath.size((Object) jSONPath0, "{\"color\":\"Red\",\"fruit\":\"curContext\",\"size\":\"Large\",\"value\":true}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"EMPTY\":true,\"a\":-99,\"b\":{}}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"EMPTY\":true,\"a\":-99,\"b\":{}}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"EMPTY\":true,\"a\":-99,\"b\":{}}");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"x\":\"hello\",\"y\":7,\"EMPTY\":true,\"a\":-99,\"b\":{}}", false);
      JSONPath.size((Object) jSONPath_PropertySegment0, "{\"x\":\"hello\",\"y\":7,\"EMPTY\":true,\"a\":-99,\"b\":{}}");
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but ':'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"not support jsonpath : \":99,\"y\":7,\"z\":true,\"a\":null,\"b\":null}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '{, but '}'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$IntObjInSegement", "J\"XX<=4n2[<c2i", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("J\"XX<=4n2[<c2i", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but 'g'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!`,9Y3W", "QJI@0d_)a7L");
      JSONPath jSONPath0 = JSONPath.compile("!`,9Y3W");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "QJI@0d_)a7L", (Object) sQLInvalidAuthorizationSpecException0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = "Yq\\k1<<a|";
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("oHwEXi`Dz");
      jSONPath1.toJSONString();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "\"oHwEXi`Dz\"", (Object) jSONPath1, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("", 6142L, 6142L, true);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", 6142L, jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("jsonpath error, path ");
      jSONPath_JSONPathParser0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(6607618197526598121L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("+", "+");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "+");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/stackTrace/0", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath(":m5:N;_)`eCW");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/stackTrace/0", "/stackTrace/0", 596);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      jSONPath_StringInSegement0.apply(jSONPath0, ":m5:N;_)`eCW", sQLSyntaxErrorException0, jSONPath_WildCardSegment0);
      // Undeclared exception!
      try { 
        JSONPath.extract("max", "HQ4");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[2] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[3] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[4] = "k7/@swtDul][,be$V'";
      stringArray0[5] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("6<T-");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "k7/@swtDul][,be$V'", sQLRecoverableException0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("", stringArray0, true);
      int int0 = 2174;
      SerializeConfig serializeConfig0 = new SerializeConfig(2174);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$StringInSegement", serializeConfig0, parserConfig0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("fastjson.parser.autoTypeAccept", "XJ@^Z^?bn", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      ParserConfig.global = parserConfig0;
      jSONPath_StringInSegement0.apply(jSONPath0, "", sQLClientInfoException1, jSONPath0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(76);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, "", "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (Throwable) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      String string0 = "Qg!:";
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("Qg!:", 4313L, jSONPath_Operator0);
      String string1 = "javax.xml.datatype.XMLGregorianCalendar";
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("javax.xml.datatype.XMLGregorianCalendar", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = 'G';
      char char0 = 'h';
      charArray0[2] = 'h';
      charArray0[3] = '$';
      charArray0[4] = ')';
      charArray0[5] = 'Q';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'Q';
      charArray1[1] = '!';
      charArray1[2] = 'G';
      charArray1[3] = 'h';
      charArray1[4] = '!';
      jSONScanner0.scanFieldDate(charArray1);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(34);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("PB");
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, "PB", jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.serializer.ASMSerializerFactory$Context");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ASMSerializerFactory$Context");
      jSONPath_JSONPathParser0.readString();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("QJI@0d_)a7L", "QJI@0d_)a7L");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "QJI@0d_)a7L", (Object) jSONPath_JSONPathParser0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("a string\"", object0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":null,\"b\":{}}");
      jSONPath_JSONPathParser0.readString();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":null,\"b\":");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"x\":\"hello\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = "+";
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      String string0 = "!wz3s#m+v1";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      String string1 = "";
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1535;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)126;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.multiply(bigInteger1);
      boolean boolean0 = JSONPath.set((Object) batchUpdateException0, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}", (Object) bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AutoCloseSource;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.InternFieldNames;
      featureArray0[4] = feature4;
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, (JSONPath.Filter) null, false);
      JSONPath jSONPath0 = new JSONPath("JSONPath$StringOpSegement");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONPath0.size((Object) feature4);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k2mVJn`9'3cw3WF*#KD");
      jSONPath_JSONPathParser0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(6607618197526598121L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.safeMode");
      Short short0 = new Short((short)2287);
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.Factory", "@;[Q");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.autoTypeSupport", "fastjson.parser.safeMode", jSONPath_Operator0);
      jSONPath_StringOpSegement0.apply(jSONPath0, "fastjson.parser.safeMode", parserConfig0, parserConfig0);
      Object object0 = JSONPath.reserveToObject(jSONPath1, (String[]) null);
      assertFalse(object0.equals((Object)jSONPath0));
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Fafh( F!'N!$+");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Fafh( F!'N!$+");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(8055461369741094911L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String string0 = "true";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("true");
      long long0 = 1366L;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("{\"x\":\"hello\",\"y\":[],\"z\":true,\"a\":[],\"b\":{}}", "{\"x\":\"hello\",\"y\":[],\"z\":true,\"a\":[],\"b\":{}}", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":[],\"z\":true,\"a\":[],\"b\":{}}", serializeConfig0, parserConfig0);
      jSONPath_StringOpSegement0.apply(jSONPath0, parserConfig0, jSONPath0, jSONPath_JSONPathParser0);
      jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1366L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-340);
      intArray0[1] = 9;
      intArray0[2] = 26;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[]}", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(26, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"a string\"}", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation((-2584), true, false, 26, 26);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, dataTruncation0, classLoader0, jSONPath_MultiIndexSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("LC['Q");
      Object object0 = new Object();
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      int int0 = jSONPath0.size((Object) "LC['Q");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(32, 99999999, 32);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("9?A5)A", jSONPath_RangeSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$KeySetSegment");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      Double double0 = new Double(0.0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_FilterSegment0, double0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      String string0 = "not support jsonpath : ";
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.addAccept("");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", hashMap0);
      JSONPath.extract("", "not support jsonpath : ", parserConfig0, 0, (Feature[]) null);
      String string1 = ";^C !dkwiS";
      // Undeclared exception!
      try { 
        JSONPath.read(string0, string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      long long0 = JSONPath.LENGTH;
      long long1 = JSONPath.LENGTH;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[10];
      Feature feature0 = Feature.SortFeidFastMatch;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, hashMap0);
      featureArray0[1] = feature0;
      JSONPath.extract("[99,-99]", "[99,-99]", parserConfig0, 1583, featureArray0);
      JSONPath.paths((Object) feature0);
      ParserConfig.global = parserConfig0;
      long[] longArray0 = new long[6];
      longArray0[0] = (-1580386065683472715L);
      longArray0[1] = 8055461369741094911L;
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = "-I[* QAL\\^er";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-I[* QAL^er");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("{\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"fruit\":-99\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(116, (-752), (-752));
      JSONPath jSONPath0 = new JSONPath("9*UKO9i7Hf $`w;B");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("scanDecimal", "Bj=`m");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning("[null,false]", sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("9*UKO9i7Hf $`w;B", "|8)4c|N'C*M", sQLWarning0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, sQLDataException0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_list_item_deser__");
      jSONPath_JSONPathParser0.isEOF();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(7, 1269, 65535);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval((JSONPath) null, jSONPath_JSONPathParser0, jSONPath_JSONPathParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$SizeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(32, 99999999, 32);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$KeySetSegment");
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")i^O7F}y8HRI");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("rawType", jSONPath_WildCardSegment0, jSONPath_Operator0);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONPath jSONPath0 = new JSONPath("rawType");
      assertEquals("rawType", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(16, 16, (-2844));
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2844));
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, jSONPath_ArrayAccessSegment0);
      assertNotNull(object0);
      
      Double double0 = new Double(5614464919154503228L);
      Map<String, Object> map0 = JSONPath.paths((Object) double0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(84, (-1522), (-1522));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("null", serializeConfig0, parserConfig0);
      Class<JSONValidator.Type>[] classArray0 = (Class<JSONValidator.Type>[]) Array.newInstance(Class.class, 0);
      serializeConfig0.configEnumAsJavaBean(classArray0);
      String string0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "fastjson.parser.deny");
      jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, sQLTimeoutException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("fastjson.parser.autoTypeSupport", jSONPath_RangeSegment0, jSONPath_Operator0);
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '*';
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Fafh( F!'N!$+");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("ML?Dyv6z<v4");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath0, "Fafh( F!'N!$+", "Fafh( F!'N!$+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|@_F.");
      jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("o]z{5=DKVVpVXt");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("o]z{5=DKVVpVXt");
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!`,9Y3W", "QJI@0d_)a7L");
      JSONPath jSONPath0 = new JSONPath("/annotatedSuperclass/type/annotatedSuperclass/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/2/type/declaredMethods/1/annotatedReturnType/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/methods/12/annotatedReturnType/type/rawType/declaredClasses/0/declaredConstructors/0/annotatedParameterTypes/0/type/rawType/classes/0/declaredMethods/5/annotatedParameterTypes/0/type/declaredConstructors/0/parameters/9/annotatedType");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(26, (-4333), 4382);
      Set<?> set0 = jSONPath0.keySet((Object) mockGregorianCalendar0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(804);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("H,<Ss7`/9GmGR");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals(',', char0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("H,<Ss7`/9GmGR");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("H,<Ss7`/9GmGR", serializeConfig0, parserConfig0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("fastjson.parser.autoTypeSupport", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":true,\"b\":{}}", "fastjson.parser.autoTypeSupport", (-2276), sQLNonTransientException0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-2276), (-811), (-498), 37, (-498));
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException0, mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, jSONPath_DoubleOpSegement0, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("7!I);myW;", "P", parserConfig0, 55296, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // int
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("r");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.eq(jSONPath0, jSONPath_WildCardSegment0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = "z";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("z");
      jSONPath_JSONPathParser0.explain();
      long long0 = 5944107969236155580L;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(5944107969236155580L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      String string0 = ".";
      JSONPath jSONPath0 = new JSONPath(".");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(".", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('C');
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}");
      Vector<Object> vector0 = new Vector<Object>(18);
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":99,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":99,\"value2\":false,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      String string0 = "Yq\\k1<<a|";
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!`,9Y3W", "QJI@0d_)a7L");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("QJI@0d_)a7L");
      JSONPath jSONPath0 = new JSONPath("/annotatedSuperclass/type/annotatedSuperclass/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/2/type/declaredMethods/1/annotatedReturnType/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/methods/12/annotatedReturnType/type/rawType/declaredClasses/0/declaredConstructors/0/annotatedParameterTypes/0/type/rawType/classes/0/declaredMethods/5/annotatedParameterTypes/0/type/declaredConstructors/0/parameters/9/annotatedType");
      Long long0 = new Long((-8209044522538118952L));
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) long0, (Object) serializeConfig0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("Yqk1<<a|", serializeConfig0, parserConfig0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "fastjson.parser.safeMode");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("VW:4");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      long long1 = JSONPath.LENGTH;
      ClassLoader.getSystemClassLoader();
      Feature[] featureArray0 = new Feature[10];
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_SizeSegment0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[]");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("[]");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_Filter0, jSONPath_Filter0, false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONArray");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath.remove((Object) jSONPath_NullSegement0, "$VALUES");
      JSONPath jSONPath1 = JSONPath.compile("[]");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(119);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, "[]", 33, jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("Yqk1<<a|", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2273), 110, (-2273));
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) serializeConfig0, (Object) jSONPath_RangeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Yqk1<<a|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String string0 = "ik~k[e1D+~=3f.?M4";
      // Undeclared exception!
      try { 
        JSONPath.extract("ik~k[e1D+~=3f.?M4", "ik~k[e1D+~=3f.?M4");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2ik~k[e1D+~=3f.?M4
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", (-653.0), jSONPath_Operator0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      String string0 = "Qj5x &x=j+^n";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("Qj5x &x=j+^n", (-179.281), jSONPath_Operator0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("6Z~6j|VtH", true);
      String string1 = "<init>";
      int int0 = 0;
      SerializeConfig serializeConfig0 = null;
      try {
        serializeConfig0 = new SerializeConfig(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("!wz3s#m+v1", 1459860845934817624L, jSONPath_Operator0);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath_FilterSegment0, jSONPath_JSONPathParser0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"number\":\"1\"}", 0L, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"number\":\"1\"}");
      int[] intArray0 = new int[5];
      intArray0[0] = 26;
      intArray0[1] = (-307);
      intArray0[2] = 1241;
      intArray0[3] = 0;
      intArray0[4] = (-76);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"number\":\"1\"}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"number\":\"1\"}", intArray0, (Throwable) null);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath0, batchUpdateException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      String string0 = ",C['Q";
      JSONPath jSONPath0 = new JSONPath(",C['Q");
      // Undeclared exception!
      try { 
        JSONPath.extract(",C['Q", ",C['Q");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2,C['Q
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        JSONPath.extract("", "");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("OGtn", 3556L, 3556L, true);
      JSONPath jSONPath0 = new JSONPath("OGtn");
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "OGtn", jSONPath0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("25D$*O':.EkDj o/bJ", 2832L, 2832L, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("25D$*O':.EkDj o/bJ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 25D$*O':.EkDj o/bJ
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":-99}", 5751393439502795295L, 358L, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, true);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":-99}");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(81);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":-99}", jSONPath_ArrayAccessSegment0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" {OIz2k*UrA|o");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(" {OIz2k*UrA|o", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}";
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", serializeConfig0, parserConfig0);
      Throwable throwable0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny", (Throwable) null);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("scanEnum");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NE");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSONPath.extract("L7HfQs,E9}v#C$Ei:_", "L7HfQs,E9}v#C$Ei:_", parserConfig0, 5, (Feature[]) null);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2L7HfQs,E9}v#C$Ei:_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      JSONPath.compile("LIKE");
      long long0 = JSONPath.SIZE;
      Short short0 = new Short((short)10564);
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, 5614464919154503228L);
      //  // Unstable assertion: assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Map<String, Object> map0 = JSONPath.paths((Object) classLoader0);
      //  // Unstable assertion: assertEquals(19, map0.size());
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":[]}");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":[]}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[*\"");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[*\"", "L+&Ev2E01_'dpJ'Y");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      int int0 = jSONPath0.size((Object) sQLRecoverableException0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      Class<Short> class0 = Short.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      stringArray0[1] = "}@QZmH;]Y1XTO";
      stringArray0[2] = "{\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      stringArray0[3] = ";";
      stringArray0[4] = "org.hibernate.proxy.HibernateProxy";
      stringArray0[5] = "UI";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(javaBeanSerializer0, stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("LC[(Q");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LC[(Q");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("(T%y4,lJjw1VSdga9I");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("(T%y4,lJjw1VSdga9I", false);
      String[] stringArray0 = new String[0];
      JSONPath.reserveToArray(jSONPath_MinSegment0, stringArray0);
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_MinSegment0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      Class<Short> class0 = Short.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      stringArray0[1] = "}@QZmH;]Y1XTO";
      stringArray0[2] = "$";
      stringArray0[3] = ";";
      stringArray0[4] = "org.hibernate.proxy.HibernateProxy";
      stringArray0[5] = "UI";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(javaBeanSerializer0, stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("LC[(Q");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LC[(Q");
      int int0 = jSONPath0.size((Object) "LC[(Q");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=");
      jSONPath_JSONPathParser0.buildArraySegement("=");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.next();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("v.2ce$[#D=JD-8`L,S4");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2ce$[#D=JD-8`L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("kotlin.reflect.KFunction");
      boolean boolean0 = jSONPath0.contains((Object) "kotlin.reflect.KFunction");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&&R");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Fafh( F!'N!$+");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Fafh( F!'N!$+
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$ValueSegment";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$ValueSegment");
      jSONPath_JSONPathParser0.buildArraySegement("com.alibaba.fastjson.JSONPath$ValueSegment");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      String string0 = null;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMqde");
      String[] stringArray0 = new String[2];
      jSONPath0.evalSize("fastjson.parser.safeMqde");
      stringArray0[0] = "fastjson.parser.safeMqde";
      stringArray0[1] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.safeMqde");
      JSONPath.contains((Object) jSONPath0, "fastjson.parser.safeMqde");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      jSONPath_MultiPropertySegment0.eval(jSONPath1, jSONPath_Operator0, jSONPath1);
      JSONPath.paths((Object) null);
      Random.setNextRandom((-8323580));
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "E1";
      stringArray0[1] = "Jhx7_e:";
      stringArray0[2] = "Jhx7_e:";
      stringArray0[3] = "Jhx7_e:";
      stringArray0[4] = "Jhx7_e:";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("Jhx7_e:", stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("not support jsonpath : ");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("not support jsonpath : ", "not support jsonpath : ", 256);
      MockUUID.randomUUID();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLRecoverableException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLFeatureNotSupportedException0);
      mockThrowable0.getSuppressed();
      boolean boolean0 = JSONPath.eq("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}", sQLTransientConnectionException0);
      assertFalse(boolean0);
      
      jSONPath0.getPath();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}";
      stringArray0[1] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}";
      stringArray0[2] = "";
      stringArray0[3] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}";
      sQLFeatureNotSupportedException1.getSuppressed();
      stringArray0[4] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Integer integer0 = new Integer(15);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("keySet", "not support jsonpath : ", 0, (Map<String, ClientInfoStatus>) null);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, sQLClientInfoException0, sQLFeatureNotSupportedException1);
      assertEquals(5, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) null, "+");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$JSONPathParser", "{\"fastjson.parser.deny.internal\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null,\"xx\":99}", intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{\"fastjson.parser.deny.internal\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null,\"xx\":99}", "{\"fastjson.parser.deny.internal\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null,\"xx\":99}", (-1056), batchUpdateException0);
      boolean boolean0 = JSONPath.eq(sQLSyntaxErrorException0, "{\"fastjson.parser.deny.internal\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null,\"xx\":99}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">hK//");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$IntObjInSegement";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1004);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("E'", serializeConfig0, parserConfig0);
      String string0 = jSONPath0.getPath();
      assertEquals("E'", string0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      long long0 = JSONPath.SIZE;
      long long1 = JSONPath.LENGTH;
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      jSONPath0.set((Object) null, (Object) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 3688, 3688, 3688, (-1874), 3688);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(mockGregorianCalendar0, "LIKE", 5614464919154503228L, mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path LIKE, segement LIKE
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!wz3s#m+v1");
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      jSONPath0.getPath();
      jSONPath0.getPropertyValues((Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("position");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONPath jSONPath0 = JSONPath.compile("*");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"N string");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$IntObjInSegement", "J\"XX<=4n2[<c2i", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("J\"XX<=4n2[<c2i", serializeConfig0, parserConfig0);
      boolean boolean0 = JSONPath.eq("\"N string", "J\"XX<=4n2[<c2i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("com.alibaba.fastjson.serializer.CalendarCodec", "com.alibaba.fastjson.serializer.CalendarCodec");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/annotatedSuperclass/type/annotatedSuperclass/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/2/type/declaredMethods/1/annotatedReturnType/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/methods/12/annotatedReturnType/type/rawType/declaredClasses/0/declaredConstructors/0/annotatedParameterTypes/0/type/rawType/classes/0/declaredMethods/5/annotatedParameterTypes/0/type/declaredConstructors/0/parameters/9/annotatedType");
      assertEquals("/annotatedSuperclass/type/annotatedSuperclass/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/2/type/declaredMethods/1/annotatedReturnType/type/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/methods/12/annotatedReturnType/type/rawType/declaredClasses/0/declaredConstructors/0/annotatedParameterTypes/0/type/rawType/classes/0/declaredMethods/5/annotatedParameterTypes/0/type/declaredConstructors/0/parameters/9/annotatedType", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Short short0 = new Short((short) (-1141));
      boolean boolean0 = JSONPath.eq((Object) null, short0);
      JSONPath.paths((Object) null);
      boolean boolean1 = JSONPath.JSONPathParser.isDigitFirst('0');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", mockThrowable0);
      Throwable throwable0 = mockThrowable1.fillInStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(mockThrowable1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}");
      mockThrowable0.getLocalizedMessage();
      mockPrintWriter0.println(true);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      JSONPath.set((Object) null, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", (Object) sQLIntegrityConstraintViolationException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("AllowUnQuotedFieldNames", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", 0, throwable0);
      jSONPath_WildCardSegment0.eval(jSONPath0, sQLTransientConnectionException0, (Object) null);
      mockThrowable1.getSuppressed();
      jSONPath_WildCardSegment0.eval(jSONPath0, mockPrintWriter0, (Object) null);
      JSONPath.eq(jSONPath_WildCardSegment0, throwable0);
      jSONPath0.getPath();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "AllowUnQuotedFieldNames";
      stringArray0[1] = null;
      stringArray0[2] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}";
      stringArray0[3] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}";
      stringArray0[4] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}";
      stringArray0[5] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      String string0 = "+";
      JSONPath jSONPath0 = new JSONPath("+");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.eq(jSONPath0, jSONPath_WildCardSegment0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("!wz3s#m+v1");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("!wz3s#m+v1", 1459860845934817624L, jSONPath_Operator0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        JSONPath.read("!wz3s#m+v1", "1Da'6H{{TNwvob");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2!wz3s#m+v1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[true],\"b\":{}}";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[true],\"b\":{}}", 6607618197526598121L, jSONPath_Operator0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(131072);
      JSONPath jSONPath0 = null;
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove((JSONPath) null, jSONPath_IntOpSegement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Integer integer0 = new Integer(960);
      Set<?> set0 = JSONPath.keySet((Object) integer0, "/cause/stackTrace/0");
      assertNull(set0);
  }
}
