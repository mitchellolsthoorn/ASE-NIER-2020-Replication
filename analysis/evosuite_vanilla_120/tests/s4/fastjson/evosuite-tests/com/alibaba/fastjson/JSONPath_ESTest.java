/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 16:48:21 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(".9^]fW:~iiXl#8", serializeConfig0, parserConfig0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.safeMode");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("^F*WOx?s]I", "com.alibaba.fastjson.JSONPath$PropertySegment", sQLTimeoutException0);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(0, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("[%48n%OT#Or-})kyxH", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny", (Throwable) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(9, 941, 70);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLTimeoutException0, parserConfig0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(", but '");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-307), (-910), 34);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, ", but '", "com.alibaba.fastjson.JSONPath$ArrayAccessSegment");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -16
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("z0hy5Q[;");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#DD}Q]z_0||*T+:e7F$");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("s0d.4*@u");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(121);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("illegal json : ");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".9^]fW:~iiXl#8");
      jSONPath_JSONPathParser0.next();
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("}", 1.0, jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_DoubleOpSegement0);
      assertSame(jSONPath_DoubleOpSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      boolean boolean0 = jSONPath0.remove((Object) "com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("20jc~1");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(20L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9b/8;`\"SuPql");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("h?bX3:");
      jSONPath_JSONPathParser0.accept('h');
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\\-");
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepGetPropertyValues(jSONPath_JSONPathParser0, linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^F*WO?s]I");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/stackTrace/8", "^F*WO?s]I", 124, (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLIntegrityConstraintViolationException0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("_Hc\">6H#.aM");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("^F*WO?s]I", "/stackTrace/0", sQLIntegrityConstraintViolationException0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, sQLClientInfoException0, sQLTimeoutException0, "/stackTrace/8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9b/8;`\"SuPql");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 9b/8;`\"SuPql
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("SkipTransientField");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LT");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '+, but 'L'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("*", "*");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 91);
      DataTruncation dataTruncation0 = new DataTruncation((-21), true, true, (-21), 0, sQLTransientConnectionException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, dataTruncation0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("mLs+\"[CX_", serializeConfig0, parserConfig0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("IgnoreNotMatch");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) jSONPath_FilterSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : mLs+\"[CX_
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("h)92ayMLC@");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("h)92ayMLC@", ",3", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path h)92ayMLC@, segement ,3
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("json-path can not be null or empty");
      JSONPath.arrayAdd((Object) locale0, "com.alibaba.fastjson.JSONPath$1", (Object[]) null);
      assertEquals("json", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath(";\"ie/");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      int int0 = JSONPath.size((Object) serializeConfig0, "/");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NOT_LIKE");
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, "NOT_LIKE");
      int int0 = jSONPath0.size(object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("k{.");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("k{.", "nin", sQLNonTransientException0);
      Double double0 = new Double(2807.15);
      boolean boolean0 = jSONPath0.setPropertyValue(sQLTimeoutException0, "nin", (-1705L), double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) "REG_MATCH", "REG_MATCH", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) null, "com.alibaba.fastjson.JSONPath$ValueSegment", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = JSONPath.read("", "fastjson.parser.safeMode");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) "/", "/");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/11");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTimeoutException0);
      Set<?> set0 = jSONPath0.keySet((Object) sQLTransactionRollbackException0);
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Oc$Ec");
      Object object0 = jSONPath0.getPropertyValue("Oc$Ec", "c<g^M?!FWTQ}{", (-3851359326990528739L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      Class<Long> class0 = Long.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("SkipTransientField", serializeConfig0, parserConfig0);
      Class<Double> class0 = Double.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.libaba.fastjson.JSONPath$MatchSegement");
      Class<Integer> class0 = Integer.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("\\-", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.getArrayItem((Object) null, (-1));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[1];
      Object object0 = JSONPath.extract("]*xlB_at8", "rL=", parserConfig0, 527, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nOQz");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = jSONPath0.evalSize(arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("in");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("in", "in");
      int int0 = jSONPath0.evalSize(sQLTransientConnectionException0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("\\-", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize("\\-");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(40, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("iwn", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.evalKeySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("8", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("*");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_IntInSegement0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Object object0 = JSONPath.eval((Object) sQLTimeoutException0, "/stackTrace/3");
      assertEquals("org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:235)", object0.toString());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("rlike", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "rlike");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not supprttype :");
      Integer integer0 = new Integer(1024);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : not supprttype :
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("14jeX(");
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      jSONPath0.setPropertyValue(jSONPath0, "14jeX(", (-4270347329889690746L), mockDate0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("4B6@Ez[&}", stringArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(46);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("3gv7kRr`B8=`", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue("3gv7kRr`B8=`", "3gv7kRr`B8=`", 46, jSONPath_StringInSegement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "U``PT4\"~g`qKT4QYgy", 0L, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("R<82N]%fW{SErYqk");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 373, "%o%&hgXY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".9^]fW:~iiXl#8");
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "/cause/stackTrace/2", (Object) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("/asmFactory/classLoader/parent/classLoader/parent/parallelLockMap");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "fastjson.parser.deny", "fastjson.parser.deny.internal", (Object) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JSONPath jSONPath0 = JSONPath.compile("json-path can not be null or empty");
      jSONPath0.set((Object) sQLTimeoutException0, (Object) serializeConfig0, false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Byte byte0 = new Byte((byte)26);
      JSONPath jSONPath0 = new JSONPath(".q");
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) byte0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[im!Sn<");
      Object object0 = new Object();
      boolean boolean0 = jSONPath0.set(object0, (Object) jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SkipTransientField";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "xDb5j";
      stringArray0[1] = ";";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_Operator0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$1";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((short) (-25203), false, false, (short) (-25203), 2291);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(dataTruncation0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.libaba.fastjson.JSONPath$MatchSegement");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(class0, "a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      jSONPath0.removePropertyValue(jSONPath0, "fastjson.parser.deny.internal", false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "{r5", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.compatibleWithJavaBean");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-258));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) class0, "/8stackTrace/1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("64%c#hL1)4v,;", true);
      JSONPath.remove((Object) jSONPath_PropertySegment0, "H_e)sJf*3");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("j`OT_IKE");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) class0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath.keySet((Object) "*(T", "unsupported set operation.");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("autoTypeSupport", serializeConfig0, parserConfig0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("-", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeSupport", sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) sQLTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath(",0OR>+ e#XGj", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) ",0OR>+ e#XGj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ,0OR>+ e#XGj
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("`i iQ");
      jSONPath0.isRef();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[Z");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath jSONPath0 = new JSONPath("nOQz");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/cause/cause/stackTrace/13");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      JSONPath jSONPath0 = JSONPath.compile("%o%&hgXY");
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("<w-cJQ~", serializeConfig0, (ParserConfig) null);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("7[Al");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("7[Al", 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.compatibleWithJavaBean", "?n6", parserConfig0, 30, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("5X/", "true", parserConfig0, 148, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // int
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null, parserConfig0, 11, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("fM<k1#3I`goED:", "fM<k1#3I`goED:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "xycY>A{#O5n>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("^f^{@QUp", "^f^{@QUp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2^f^{@QUp
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/beanInfo/fields/6/method/root");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("F7");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("!fBc;B", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!fBc;B", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. !fBc;B
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader", serializeConfig0, parserConfig0);
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(bigInteger0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.asm.Type");
      BigInteger bigInteger0 = BigInteger.TEN;
      Byte byte0 = new Byte((byte)60);
      // Undeclared exception!
      jSONPath0.deepSet(bigInteger0, "com.alibaba.fastjson.JSONPath$FilterSegment", (-1670L), byte0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath(".+Qc;8<mF^");
      jSONPath0.deepSet("stackTrace", "20!cX4", (byte) (-102), (Object) null);
      assertEquals(".+Qc;8<mF^", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("com.alibaba.fastjson.JSONPath$DoubleOpSegement", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^F*WOx?s]I");
      Double double0 = new Double((-1842.19394));
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(double0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "not supprttype :";
      stringArray0[1] = "not supprttype :";
      stringArray0[2] = "not supprttype :";
      stringArray0[3] = "not supprttype :";
      stringArray0[4] = "not supprttype :";
      stringArray0[5] = "not supprttype :";
      stringArray0[6] = "not supprttype :";
      stringArray0[7] = "8jjZEB !;!dq";
      stringArray0[8] = "not supprttype :";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) jSONPath_MultiPropertySegment0, "not supprttype :", (Object) "not supprttype :");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : not supprttype :
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("SkipTransientField");
      JSONPath jSONPath0 = JSONPath.compile("vc)J2:l6>8pYh^$6!t");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "vc)J2:l6>8pYh^$6!t", (Object) jSONPath_JSONPathParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : vc)J2:l6>8pYh^$6!t
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("class,'Name");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : class,'Name
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare("%o%&hgXY", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("dalvik");
      Object object0 = JSONPath.reserveToArray("", (String[]) null);
      boolean boolean0 = jSONPath0.setPropertyValue(object0, "fastjson.parser.deny", 0, "/beanInfo/fields/6/name_chars");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("\\-", serializeConfig0, parserConfig0);
      jSONPath0.deepSet((Object) null, "", (-3851359326990528739L), (Object) null);
      assertEquals("\\-", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      JSONPath jSONPath0 = JSONPath.compile("YM\"+LrD)-YlD=qr#");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan(map0, "java.time.LocalDate", linkedList0);
      assertEquals("YM\"+LrD)-YlD=qr#", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_LIKE");
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, "NOT_LIKE");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, object0, 114, sQLFeatureNotSupportedException0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nOQz");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("nOQz", false);
      Float float0 = new Float(0.0F);
      jSONPath_PropertySegment0.setValue(jSONPath0, float0, jSONPath0);
      assertEquals("nOQz", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/12");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(3, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = new Integer(17);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/beanInfo/fields/4/name_chars";
      stringArray0[1] = "scanFloat";
      stringArray0[2] = "/beanInfo/fields/4/name_chars";
      stringArray0[3] = "/Date(";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(integer0, stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7[Al");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Oc$Ec");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "7[\\Al";
      JSONPath.compile("7[Al");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7[Al";
      stringArray0[1] = "7[Al";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("7[Al", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      boolean boolean0 = jSONPath0.set((Object) serializeConfig0, (Object) jSONPath_WildCardSegment0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SerializeConfig serializeConfig0 = new SerializeConfig(58);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) serializeConfig0, (Object) jSONPath_WildCardSegment0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) "_asm_list_item_deser__", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("YS");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nCr!x<S=kp'j");
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) "nCr!x<S=kp'j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_LIKE");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("h");
      Long long0 = new Long(2412L);
      Object object0 = jSONPath0.eval((Object) long0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      JSONPath jSONPath0 = JSONPath.compile(",");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLDataException0);
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)jSONPath0.eval((Object) sQLRecoverableException0);
      assertNull(sQLRecoverableException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Byte byte0 = new Byte((byte)46);
      JSONPath jSONPath0 = JSONPath.compile("!8WH#q{dXX6{,m");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. !8WH#q{dXX6{,m
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1261, false);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeSupport", false);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("]*xlB_at8");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[0];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[double", "[double", intArray0, sQLSyntaxErrorException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("*", "[double", (-1439), batchUpdateException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[double", "*", hashMap0, sQLIntegrityConstraintViolationException0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3298));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, (Object) null, sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("9hF{?j2ksgg#-DLz1", "?4*w-Z(\"B=", parserConfig0, (-1129), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // int
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/cause/stackTrace/11";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("/cause/stackTrace/11", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n8";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject((Object) null, stringArray0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      String[] stringArray0 = new String[0];
      Class class1 = (Class)JSONPath.reserveToObject(class0, stringArray0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/12", serializeConfig0, parserConfig0);
      Object object0 = JSONPath.reserveToObject(jSONPath0, (String[]) null);
      assertSame(object0, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("#_z5AY{P&", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.evalKeySet(serializeConfig0);
      assertFalse(set0.contains("#_z5AY{P&"));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("7[Al");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      boolean boolean0 = jSONPath0.removePropertyValue(sQLTimeoutException0, "rlike", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("#_z5AY{P&", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.removePropertyValue(parserConfig0, ">*>4x", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/12", serializeConfig0, parserConfig0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      boolean boolean0 = jSONPath0.removePropertyValue(hashMap0, "fastjson.parser.autoTypeAccept", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("nOQz", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("_asm_list_item_ser_", serializeConfig0, parserConfig0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("_asm_list_item_ser_", "_asm_list_item_ser_", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, classLoader0, sQLDataException0);
      assertNotNull(jSONArray0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/beanInfo/fields/1/member/annotatedParameterTypes", (String) null);
      jSONPath0.deepSet(jSONArray0, "/beanInfo/fields/1/member/annotatedReceiverType", 3799L, sQLTransientConnectionException0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("z5gOq?");
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      jSONPath0.deepSet("z5gOq?", "'e%2d1t+>lQkHNhkE9M", (-1746L), javaBeanSerializer0);
      assertEquals("z5gOq?", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(65, 307, 65);
      JSONPath jSONPath0 = JSONPath.compile("yyyy\u5E74M\u6708d\u65E5");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, serializeConfig0, serializeConfig0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan(arrayList0, "S11HBb", linkedList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-ig");
      Map<String, Object> map0 = JSONPath.paths((Object) sQLRecoverableException0, serializeConfig0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$PropertySegment");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(linkedList0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(map0, "~P", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path com.alibaba.fastjson.JSONPath$PropertySegment, segement ~P
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("SkipTransientField");
      Vector<Object> vector0 = new Vector<Object>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2741), 33, 33, 33, 52);
      vector0.add((Object) mockGregorianCalendar0);
      boolean boolean0 = jSONPath0.set((Object) vector0, (Object) "GT", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (-1580386065683472715L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Short short0 = new Short((short) (-25203));
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(short0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Float float0 = new Float(4482.9907F);
      boolean boolean0 = JSONPath.eqNotNull(integer0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer integer0 = new Integer(1861);
      Double double0 = new Double(1861);
      boolean boolean0 = JSONPath.eqNotNull(integer0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Double double0 = new Double(1346.71965453);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Double double0 = new Double(1346.71965453);
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Byte byte0 = new Byte((byte)46);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)46);
      boolean boolean0 = JSONPath.eqNotNull(byte0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(3089, 989);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer((-785));
      boolean boolean0 = JSONPath.eqNotNull(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer(859);
      BigDecimal bigDecimal0 = new BigDecimal(0.75);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(55232L);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Double double0 = new Double(1346.71965453);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eqNotNull(double0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("|", "?B]i", 2994);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("6d+M-wn[Mf", "", sQLRecoverableException0);
      boolean boolean0 = JSONPath.eq(sQLRecoverableException0, sQLRecoverableException1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Long long0 = new Long(3089);
      boolean boolean0 = JSONPath.eq(long0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("SkipTransientField");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("SkipTransientField");
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, "SkipTransientField", jSONPath_JSONPathParser0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath");
      Collection<Object> collection0 = jSONPath0.getPropertyValues(vector0);
      assertFalse(collection0.contains("com.alibaba.fastjson.JSONPath"));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Set<?> set0 = jSONPath0.keySet((Object) hashMap0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath(";\"ie/");
      boolean boolean0 = jSONPath0.removePropertyValue(serializeConfig0, "com.alibaba.fastjson.asm.ByteVector", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(51068);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("vRXgB D'{1,dF.ul", serializeConfig0, parserConfig0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("h>\"\"8u>7Ir");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "h>\"\"8u>7Ir", 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/11");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTimeoutException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransactionRollbackException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("m*V8t", "/cause/stackTrace/11", 121, mockThrowable0);
      boolean boolean0 = jSONPath0.set((Object) sQLTransientException0, (Object) "/cause/stackTrace/11");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-653), (-653), (-653));
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, classLoader0, (-653), jSONPath_RangeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-ig");
      Object object0 = jSONPath0.getArrayItem("rlike", 0);
      assertEquals("rlike", object0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/13", "/stackTrace/13");
      int int0 = jSONPath0.size((Object) sQLTimeoutException0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("unsupported set operation.");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("unsupported set operation.", "unsupported set operation.", false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_RlikeSegement0, false);
      JSONPath jSONPath0 = JSONPath.compile("unsupported set operation.");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(933);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("llegal json : ", "Tq-t?+E`(2'");
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(197, false, false, 933, 'k', mockThrowable0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, "llegal json : ", dataTruncation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Y");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Y", ">diW}6h|SNWMm]]", (short)121, (int[]) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("*(6c5i[i~", "Gni", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/beanInfo/defaultConstructor", batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLFeatureNotSupportedException0, ">diW}6h|SNWMm]]", sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.libaba.fastjson.JSONPath$MatchSegement");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.libaba.fastjson.JSONPath$MatchSegement", "com.libaba.fastjson.JSONPath$MatchSegement");
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      Long long0 = new Long(989);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("Jvd1Z!Oo-ZQA!8o", hashSet0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "com.libaba.fastjson.JSONPath$MatchSegement", sQLTimeoutException0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("8", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("*");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntInSegement0, jSONPath_IntInSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "O{S,gE;u5GWNP", "*");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-ig");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("java.util.concurrent.atomic.LongAdder");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = JSONPath.compile("-ig");
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, "list is null.", sQLRecoverableException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("h>\"\"8u>7Ir");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("asmFactory", "2`d[C3", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("writeAsArrayNonContext", "writeAsArrayNonContext", 10);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, sQLTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&<b=\"IJ\"(;3'7Y";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("json-path can not be null or empty", "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.coverage.mutation", "&<b=\"IJ\"(;3'7Y", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("json-path can not be null or empty");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.coverage.mutation");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLTransientConnectionException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("nin", "71@&sqh*#UW}", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_SizeSegment0, "71@&sqh*#UW}");
      assertEquals("71@&sqh*#UW}", object0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("`l8m#");
      JSONPath jSONPath0 = JSONPath.compile("`l8m#");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("|y1JTY");
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLNonTransientConnectionException0, sQLNonTransientConnectionException0);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("2MGX(a(D)V&E~D9");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/cause/stackTrace/4");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("B!9O[Vn&IgqxM![", "wy$Vx", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Operator0, "wy$Vx", "wy$Vx");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("F\"DCAAR`g;Y", "W", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile(", minimumCapacity=");
      MockDate mockDate0 = new MockDate((-3562), (-3562), 706);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, mockDate0, "F\"DCAAR`g;Y");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("_asm_list_item_ser_", serializeConfig0, parserConfig0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("_asm_list_item_ser_", "_asm_list_item_ser_", false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept", 13, sQLDataException0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, bigDecimal0, sQLTransientConnectionException0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "json-path can not be null or empty";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("json-path can not be null or empty", "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.coverage.mutation", "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.coverage.mutation", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("json-path can not be null or empty");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath0, "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.coverage.mutation", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("Ols1^PP*", "com.alibaba.fastjson.JSONPath$RlikeSegement", "Ols1^PP*", (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("`i iQ", "fields", (String) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("/beanInfo/fields/4/field/root", (String) null, "}u!7vN<*YPJM4]+", stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("e");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("e", jSONPath_SizeSegment0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath0, jSONPath_Operator0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2032, 2032, 2032, 2032, 2032);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("kotlin.ranges.LongRange", 2032, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("kotlin.ranges.LongRange");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.JSONPath$RangeSegment", "kotlin.ranges.LongRange");
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_Operator0, mockDate0, sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Oc$Ec");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("$VALUES", (-305L), jSONPath_Operator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("c<g^M?!FWTQ}{", (String) null, (-1281));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("c<g^M?!FWTQ}{", "$VALUES", sQLNonTransientConnectionException0);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, sQLTransactionRollbackException0, sQLTransactionRollbackException0, "$VALUES");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4B6@Ez[&}";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("4B6@Ez[&}", stringArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(46);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("3gv7kRr`B8=`", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "3gv7kRr`B8=`", jSONPath0, "3gv7kRr`B8=`");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("14jeX(", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("14jeX(");
      DataTruncation dataTruncation0 = new DataTruncation(183, true, true, (-70), 557);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "14jeX(", dataTruncation0, "14jeX(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".9^]fW:~iiXl#8");
      Long[] longArray0 = new Long[7];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("rlike", longArray0, true);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, (Object) null, longArray0[1], longArray0[2]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-2378990704010641148L));
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("W]Vf%>U\"dd5[R>\"XHyq", longArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      JSONPath jSONPath0 = JSONPath.compile("W]Vf%>U\"dd5[R>\"XHyq");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "W]Vf%>U\"dd5[R>\"XHyq";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_FilterSegment0, jSONPath_MultiPropertySegment0, "W]Vf%>U\"dd5[R>\"XHyq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("W]Vf%>U\"dd5[R>\"XHyq", longArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      JSONPath jSONPath0 = JSONPath.compile("W]Vf%>U\"dd5[R>\"XHyq");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "W]Vf%>U\"dd5[R>\"XHyq";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_FilterSegment0, jSONPath_MultiPropertySegment0, "W]Vf%>U\"dd5[R>\"XHyq");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long[] longArray0 = new long[5];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/cause/stackTrace/9", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("n/l4P~>");
      SQLWarning sQLWarning0 = new SQLWarning("/cause/stackTrace/9", "`bnz3n@Rw{f&|I0]\"", (-2147483647));
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, sQLWarning0, longArray0[1], longArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Double double0 = new Double(1346.71965453);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stack_trace/3", sQLClientInfoException0, false);
      JSONPath jSONPath0 = new JSONPath("OW2cT\"<d4X");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "OW2cT\"<d4X", (-2016));
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, double0, sQLTimeoutException0, sQLClientInfoException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/getters/0");
      Short short0 = new Short((short) (-874));
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("WYpHS Ox/zUvRu*[K#/", short0, true);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("R<82N]%fW{SErYqk", false);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "R<82N]%fW{SErYqk", jSONPath_PropertySegment0, "R<82N]%fW{SErYqk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("k{.");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("nin");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(78);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, jSONPath0, jSONPath_Operator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/cause/stackTrace/12", "1", sQLNonTransientException0);
      JSONPath jSONPath0 = new JSONPath("1");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("stackTrace");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("stackTrace", "%", (Map<String, ClientInfoStatus>) null, sQLTimeoutException0);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, sQLNonTransientException0, sQLClientInfoException0, sQLClientInfoException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$Context");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("json-path can not be null or empty", false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(125, (-2115), 780);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "json-path can not be null or empty", jSONPath_PropertySegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int[] intArray0 = new int[3];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/2");
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "_h!HNK", (Object) null);
      assertEquals(3, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JSONPath jSONPath0 = JSONPath.compile("json-path can not be null or empty");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, sQLTimeoutException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^XX";
      stringArray0[1] = ",  end ";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("B:");
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, ",  end ");
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("/");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("64%c#hL1)4v,;", true);
      Long long0 = new Long((-1237L));
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, jSONPath0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /, segement 64%c#hL1)4v,;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nin");
      JSONScanner jSONScanner0 = new JSONScanner("[|T)n(%");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[|T)n(%
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Float float0 = new Float((-1063.8958F));
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, "IoKIy");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Integer integer0 = new Integer(1861);
      Double double0 = new Double(2885.0224354341);
      int int0 = JSONPath.compare(double0, integer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Double double0 = new Double(1861);
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, "Xmnz#\"");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2032, 2032, 2032, 2032, 2032);
      Integer integer0 = new Integer(2032);
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, mockDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockDate cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Long long0 = new Long(4647432019745535567L);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2Xmn'n", "/stackTrace/6", 61, batchUpdateException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, sQLTransactionRollbackException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransactionRollbackException cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      int int0 = JSONPath.compare(thaiBuddhistDate0, thaiBuddhistDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_SizeSegment0, propertyNamingStrategy0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$SizeSegment cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("BmU", serializeConfig0, (ParserConfig) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, (Object) null, mockGregorianCalendar0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile(";eZ\"lDDnCqsi- I");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Byte byte0 = new Byte((byte)21);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":%+#*5$q(@1OsZI");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%+#*5$q(@1OsZI\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.asm.Type");
      jSONPath0.init();
      assertEquals("com.alibaba.fastjson.asm.Type", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",0OR>+ e#XGj");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ',, but ''
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$RangeSegment");
      jSONPath_JSONPathParser0.next();
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("m.alibaba.fastjs", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("L >^YGJia-*kdwgLF-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('+');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nOQz");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nOQz
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".9^]fW:~iiXl#8");
      jSONPath_JSONPathParser0.readDoubleValue(6742705432718011780L);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8Y-\"i?3m[#B+wP");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(8L, object0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*G>6Gwo");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\\-");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLDataException sQLDataException0 = new SQLDataException("NY[\">Tuv/}Wz{)t(K'L", "NY[\">Tuv/}Wz{)t(K'L", sQLWarning0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SkipTransientField";
      stringArray0[1] = "SkipTransientField";
      stringArray0[2] = "SkipTransientField";
      stringArray0[3] = "/asmFactory/classLoader/parent/classLoader/parent/classes";
      stringArray0[4] = "/asmFactory/classLoader/parent/classLoader/parent/classes";
      stringArray0[5] = "NY[\">Tuv/}Wz{)t(K'L";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLDataException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0mWrU.3jNq.J9*)eL");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("c<g^M?!FWTQ}{");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@type");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 't'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\\-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \\-
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) ".9^]fW:~iiXl#8", ".9^]fW:~iiXl#8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : .9^]fW:~iiXl#8
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("[~m", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "[~m", (Object) "QY}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" .s(bVWF`");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath :  .s(bVWF`
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(0, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("B");
      jSONPath0.init();
      assertEquals("B", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.shaded.org.objectweb.asm.util";
      stringArray0[1] = "deserialze";
      stringArray0[2] = "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.shaded.org.objectweb.asm.util";
      stringArray0[3] = "com.alibaba.fastjson.asm.Type";
      stringArray0[4] = "SkipTransientField";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.shaded.org.objectweb.asm.util", stringArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONArray0, serializeConfig0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) serializeConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "/cause/stackTrace/4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("-ig");
      DataTruncation dataTruncation0 = new DataTruncation(109, true, true, 109, 107, sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        JSONPath.set((Object) dataTruncation0, "*", (Object) sQLTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/11");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransactionRollbackException0, (Object) "/cause/stackTrace/11");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "/", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      Calendar calendar0 = MockCalendar.getInstance();
      boolean boolean0 = jSONPath0.set((Object) sQLIntegrityConstraintViolationException0, (Object) calendar0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(";\"ie/");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) "/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(58, 90, 58);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "_asm_list_item_deser__", "/stackTrace/1");
      boolean boolean0 = jSONPath0.remove(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("/");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("64%c#hL1)4v,;", true);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, jSONPath0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /, segement 64%c#hL1)4v,;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.libaba.fastjson.JSONPath$MatchSegement");
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray(hashSet0, stringArray0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd(object0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      MockDate mockDate0 = new MockDate(2032, 2032, 2032, 2032, 2032);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) mockDate0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("kotlin.ranges.LongRange");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd(object0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path kotlin.ranges.LongRange
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      Object[] objectArray0 = new Object[9];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = JSONPath.compile("h>\"\"8u>7Ir");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) serializeConfig0, objectArray0);
      assertEquals("@type", serializeConfig0.getTypeKey());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("not support jsonpath : ", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) parserConfig0, (Object[]) null);
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("7[Al");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("qKyPF");
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("H2", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath_JSONPathParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath(".9^]fW:~iiXl#8", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      boolean boolean0 = jSONPath0.containsValue((Object) "evalKeySet error : ", (Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("n8", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("*");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLClientInfoException0, (Object) jSONPath_IntInSegement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.compatibleWithJavaBean");
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath0, "fastjson.compatibleWithJavaBean", (Object) jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Long long0 = new Long(1026L);
      boolean boolean0 = JSONPath.contains((Object) long0, "BmU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.compatibleWithJavaBean");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$FilterGroup");
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_LIKE");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/4");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      int int0 = jSONPath0.size((Object) sQLNonTransientConnectionException0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("M*M7lB_t8");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      TimeZone timeZone0 = TimeZone.getTimeZone("M*M7lB_t8");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, "M*M7lB_t8", mockGregorianCalendar0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("pUkp=0&j:", 111);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("pUkp=0&j:", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("pUkp=0&j:");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, sQLTransactionRollbackException0, sQLTransactionRollbackException0, sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("n");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = new JSONPath(";1phK-Q~tK5jAy'L9[");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, ";1phK-Q~tK5jAy'L9[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yyyy/MM/dd");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('y', char0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove((JSONPath) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", (-2825378362173150292L), 1623L, true);
      JSONPath jSONPath0 = new JSONPath("IDq'U;YS");
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, "IDq'U;YS", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/4");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/cause/stackTrace/4", "/cause/stackTrace/4");
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, hashMap0, sQLTransientConnectionException0);
      assertEquals(5, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("/stackTrace/b", "/stackTrace/b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "com.alibaba.fastjson.JSONPath$ValueSegment", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Ljava/lang/Object;Ljava/lang/String;");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("N]/R2!o3cE*(H8(.c");
      int int0 = JSONPath.size((Object) jSONPath_Segment0, "/stackTrace/8");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.libaba.fastjson.JSONPath$MatchSegement");
      String string0 = jSONPath0.getPath();
      assertEquals("com.libaba.fastjson.JSONPath$MatchSegement", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("SupportNonPublicField", "SupportNonPublicField", 110);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLNonTransientConnectionException0);
      //  // Unstable assertion: assertEquals(90, map0.size());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(";\"ie/");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("^Vy,:7yhe=hlxW'^.n", "/stackTrace/3");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) null, "com.alibaba.fastjson.JSONPath$ValueSegment");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) "com.libaba.fastjson.JSONPath$MatchSegement", "/stackTrace/3");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NOT_LIKE");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NOT_LIKE");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath0, "NOT_LIKE", (Object[]) jSONPath_SegmentArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path NOT_LIKE
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<?> set0 = JSONPath.keySet((Object) hashMap0, "/cause/stackTrace/4");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NOT_IKE");
      // Undeclared exception!
      jSONPath0.remove((Object) jSONPath0);
  }
}
