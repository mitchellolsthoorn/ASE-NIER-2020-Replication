/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 18:49:30 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.MultipleGradientPaint;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Proxy;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.tools.StandardLocation;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0.0F);
      linkedList0.add((String) null);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.toJSONObject(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0.0F);
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray1.similar(jSONArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((int) (byte)117, (Map<?, ?>) null);
      int int0 = jSONArray0.optInt((int) (byte)117, 1000000);
      assertEquals(118, jSONArray0.length());
      assertEquals(1000000, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CardTerminals.State, KeyRep.Type> hashMap0 = new HashMap<CardTerminals.State, KeyRep.Type>();
      JSONArray jSONArray1 = jSONArray0.put(91, (Map<?, ?>) hashMap0);
      jSONArray1.optNumber(91);
      assertEquals(92, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((int) (byte)15, (int) (byte)15);
      try { 
        jSONArray1.getBigInteger((byte)15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[15] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(2353, 1821.0);
      try { 
        jSONArray1.getBigDecimal(2353);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2353] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.optDouble((-2430));
      JSONArray jSONArray2 = jSONArray1.put(true);
      jSONArray0.opt((-2290));
      jSONArray2.optLong((-2290), 1L);
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray("] could not convert to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Formatter.BigDecimalLayoutForm> linkedList0 = new LinkedList<Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(2651, 47);
      String string0 = jSONArray0.toString();
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      jSONArray0.put(371, (Object) byteArrayInputStream0);
      jSONArray0.remove((byte)112);
      assertEquals(371, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(5091, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString((-1794), "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(152, 152);
      String string0 = jSONArray0.optString(152);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.optQuery("#/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber((-2234), (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = jSONArray0.optNumber(362, (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Number number0 = jSONArray0.optNumber(93, (Number) bigDecimal0);
      assertEquals((short)10, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONArray0.put(26, (Object) bigDecimal0);
      Number number0 = jSONArray0.optNumber(26);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(27, (long) (-1490));
      assertEquals((-1490L), long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(152, 152);
      long long0 = jSONArray1.optLong(152);
      assertEquals(152L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(3112, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat((-2475), (float) 10);
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2320, (float) 2320);
      float float0 = jSONArray0.optFloat(2320);
      assertEquals(2320.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      double double0 = jSONArray0.optDouble(2765, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(412, (-1520.620387585806));
      assertEquals((-1520.620387585806), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(2128, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = jSONArray0.optBigInteger(253, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = jSONArray0.optBigDecimal(41, (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-12));
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(1406.8394159644743);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(44, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      int int0 = jSONArray1.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0.824486912);
      jSONArray0.put(true);
      boolean boolean0 = jSONArray1.isNull(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      long long0 = jSONArray1.getLong(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      assertEquals(1, jSONArray0.length());
      
      double double0 = jSONArray1.getDouble(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CardTerminals.State, KeyRep.Type> hashMap0 = new HashMap<CardTerminals.State, KeyRep.Type>();
      JSONArray jSONArray1 = jSONArray0.put(91, (Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(91);
      // Undeclared exception!
      jSONArray1.write((Writer) stringWriter0, 91, 57);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 536, (-3037));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<SocketFlow.Status> linkedList0 = new LinkedList<SocketFlow.Status>();
      JSONArray jSONArray1 = jSONArray0.put(446, (Collection<?>) linkedList0);
      // Undeclared exception!
      jSONArray1.toString(446);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("}QC#X]1U:!QO8l");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.query(jSONPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // }QC#X]1U:!QO8l is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("false");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-978), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-978] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      jSONArray0.put(1000000, false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CardTerminals.State, KeyRep.Type> hashMap0 = new HashMap<CardTerminals.State, KeyRep.Type>();
      try { 
        jSONArray0.put((-1), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<LayoutStyle.ComponentPlacement, Window.Type> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, Window.Type>(1000000, 2879.1F);
      // Undeclared exception!
      jSONArray0.put(1000000, (Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2213), 524);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2213] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONArray0.put(1000000, 633.9229F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("mgfT6QYK6qSC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(44, false);
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(45, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONArray jSONArray1 = jSONArray0.put(371, (Object) byteArrayInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j>'h7%J2");
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0, (-1230), (-3362));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONArray jSONArray1 = jSONArray0.put((int) (byte)10, (Object) byteArrayInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j>'h7%J2");
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0, (int) (byte)112, (-3362));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      jSONArray1.write((Writer) mockPrintWriter0, 0, (-3080));
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j>'h7%J2");
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0, (int) (byte)112, (-3362));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) jSONArray0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((int) (byte)86, (float) (byte)10);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      jSONArray1.put((int) (byte)10, (Object) roundingMode0);
      assertEquals(87, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-8), (Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-8] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(4, "Misplaced object.");
      assertEquals("Misplaced object.", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (float) 0);
      Byte byte0 = new Byte((byte)22);
      jSONArray0.optNumber(0, (Number) byte0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(1511);
      Number number0 = jSONArray0.optNumber(64, (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      Proxy.Type proxy_Type1 = jSONArray0.optEnum(class0, 80, proxy_Type0);
      assertSame(proxy_Type1, proxy_Type0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Formatter.BigDecimalLayoutForm> linkedList0 = new LinkedList<Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0.824486912);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      Proxy.Type proxy_Type1 = jSONArray0.optEnum(class0, 0, proxy_Type0);
      assertSame(proxy_Type0, proxy_Type1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-15.178571996680896));
      int int0 = jSONArray0.optInt(0, 14);
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat((-1075), (float) (-2475));
      assertEquals((-2475.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(446, (double) 446);
      assertEquals(446.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      jSONArray0.put(372, (Collection<?>) linkedList0);
      jSONArray0.opt(87);
      assertEquals(373, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.opt(1055);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(152, 152);
      try { 
        jSONArray0.getString(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get(58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[58] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((int) (byte)86, (Map<?, ?>) null);
      jSONArray1.get(44);
      assertEquals(87, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONPointer jSONPointer0 = new JSONPointer("");
      Object object0 = jSONArray0.query(jSONPointer0);
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean((-1311), true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Double double0 = new Double(1.0);
      JSONArray jSONArray1 = jSONArray0.put((Object) double0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<StandardLocation> class0 = StandardLocation.class;
      jSONArray0.optEnum(class0, 0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CardTerminals.State, KeyRep.Type> hashMap0 = new HashMap<CardTerminals.State, KeyRep.Type>();
      JSONArray jSONArray1 = jSONArray0.put(1, (Map<?, ?>) hashMap0);
      jSONArray1.toList();
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(109, 109);
      List<Object> list0 = jSONArray0.toList();
      assertTrue(list0.contains(109));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((int) (byte)86, (Map<?, ?>) null);
      jSONArray1.toString((int) (byte)53);
      assertEquals(87, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      JSONArray jSONArray1 = jSONArray0.put(296, (Object) locale_FilteringMode0);
      String string0 = jSONArray1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0F);
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      
      jSONArray1.toJSONObject(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(152, 152);
      boolean boolean0 = jSONArray1.similar(jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(132, 132);
      JSONArray jSONArray1 = new JSONArray();
      boolean boolean0 = jSONArray1.similar(jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(935);
      boolean boolean0 = jSONArray0.similar(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(1000000);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove((-589));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      jSONArray1.optString(0, "");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(92, (Object) "V;)YH'-5G>_G wK>");
      Number number0 = jSONArray1.optNumber(92);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(82);
      long long0 = jSONArray1.optLong(0, (long) 0);
      assertEquals(82L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      long long0 = jSONArray0.optLong(0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CardTerminals.State, KeyRep.Type> hashMap0 = new HashMap<CardTerminals.State, KeyRep.Type>();
      jSONArray0.put(91, (Map<?, ?>) hashMap0);
      jSONArray0.optJSONObject(91);
      assertEquals(92, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject((-3964));
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(4297);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (float) 0);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      jSONArray0.optBigDecimal(0, bigDecimal0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(44, false);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      jSONArray0.optBigDecimal(44, bigDecimal0);
      assertEquals(45, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0.0F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONArray1.optBigInteger(0, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(82);
      jSONArray0.put(82, (Object) bigDecimal0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(82, bigInteger0);
      assertEquals((short)82, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CardTerminals.State, KeyRep.Type> hashMap0 = new HashMap<CardTerminals.State, KeyRep.Type>();
      JSONArray jSONArray1 = jSONArray0.put(91, (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray1.optBigInteger(91, bigInteger0);
      assertEquals(92, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(111, 111);
      Class<MultipleGradientPaint.ColorSpaceType> class0 = MultipleGradientPaint.ColorSpaceType.class;
      try { 
        jSONArray0.getEnum(class0, 111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[111] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(111, 111);
      // Undeclared exception!
      try { 
        jSONArray1.getEnum((Class<MultipleGradientPaint.ColorSpaceType>) null, 111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0);
      int int0 = jSONArray1.optInt(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      float float0 = jSONArray1.optFloat(0);
      assertEquals(1, jSONArray0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CardTerminals.State, KeyRep.Type> hashMap0 = new HashMap<CardTerminals.State, KeyRep.Type>();
      JSONArray jSONArray1 = jSONArray0.put(91, (Map<?, ?>) hashMap0);
      float float0 = jSONArray1.optFloat(91);
      assertEquals(92, jSONArray0.length());
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(111, 111);
      double double0 = jSONArray1.optDouble(111, (double) 48);
      assertEquals(111.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<SocketFlow.Status> linkedList0 = new LinkedList<SocketFlow.Status>();
      jSONArray0.put(446, (Collection<?>) linkedList0);
      double double0 = jSONArray0.optDouble(446, (double) 446);
      assertEquals(447, jSONArray0.length());
      assertEquals(446.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CardTerminals.State, KeyRep.Type> hashMap0 = new HashMap<CardTerminals.State, KeyRep.Type>();
      JSONArray jSONArray1 = jSONArray0.put(91, (Map<?, ?>) hashMap0);
      jSONArray1.join("");
      assertEquals(92, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("trFue");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(80, (long) 80);
      assertEquals(81, jSONArray0.length());
      
      long long0 = jSONArray1.getLong(80);
      assertEquals(80L, long0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<SocketFlow.Status> linkedList0 = new LinkedList<SocketFlow.Status>();
      JSONArray jSONArray1 = jSONArray0.put(82, (Collection<?>) linkedList0);
      try { 
        jSONArray1.getLong(82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[82] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(42, (-2204));
      int int0 = jSONArray0.getInt(42);
      assertEquals((-2204), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((int) (byte)117, (int) (byte)117);
      Number number0 = jSONArray0.getNumber((byte)117);
      assertEquals(117, number0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((int) (byte)86, (Map<?, ?>) null);
      try { 
        jSONArray1.getNumber((byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[86] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0.0F);
      float float0 = jSONArray0.getFloat(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CardTerminals.State, KeyRep.Type> hashMap0 = new HashMap<CardTerminals.State, KeyRep.Type>();
      jSONArray0.put(46, (Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getFloat(46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[46] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((int) (byte)15, (int) (byte)15);
      assertEquals(16, jSONArray0.length());
      
      double double0 = jSONArray0.getDouble((byte)15);
      assertEquals(15.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(82, 1607);
      try { 
        jSONArray0.getDouble(77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[77] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1847, true);
      boolean boolean0 = jSONArray1.optBoolean(1847);
      assertEquals(1848, jSONArray0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0);
      try { 
        jSONArray1.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1811, false);
      boolean boolean0 = jSONArray1.optBoolean(1811);
      assertEquals(1812, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[IG,`y{VvCc^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 7 [character 8 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JSONTokener jSONTokener0 = new JSONTokener(bufferedInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(1321);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery("");
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CardTerminals.State, KeyRep.Type> hashMap0 = new HashMap<CardTerminals.State, KeyRep.Type>();
      jSONArray0.put(91, (Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isNull(935);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Component.BaselineResizeBehavior, GroupLayout.Alignment> hashMap0 = new HashMap<Component.BaselineResizeBehavior, GroupLayout.Alignment>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-202), (-3068L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-202] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-37.09432997224195));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONArray1.optBigInteger(0, bigInteger0);
      assertEquals((byte) (-37), bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query("");
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      try { 
        jSONArray0.put((-1258), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1258] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(902, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-442L));
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-505), (float) 415);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-505] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter(47);
      jSONArray0.write((Writer) stringWriter0);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(82);
      assertEquals("", string0);
  }
}
