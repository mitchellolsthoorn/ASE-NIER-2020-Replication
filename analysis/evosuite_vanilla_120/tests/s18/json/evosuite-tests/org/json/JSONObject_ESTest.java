/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 22:14:57 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.security.CryptoPrimitive;
import java.sql.PseudoColumnUsage;
import java.text.Normalizer;
import java.time.Month;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.function.Function;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import javax.swing.SortOrder;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(45);
      Boolean boolean0 = Boolean.valueOf("HDG(]uTL><");
      JSONObject.wrap(boolean0);
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!DlT>;I\"Ln.");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("!DlT>;I\"Ln.", 5);
      Integer integer0 = new Integer(5);
      JSONObject.testValidity(integer0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.pow(1);
      jSONObject1.optBigInteger("!DlT>;I\"Ln.", bigInteger0);
      jSONObject1.put("getdoubleValue", 877.7F);
      JSONObject.valueToString(bigInteger1);
      jSONObject1.optString("\"");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 378;
      JSONObject jSONObject0 = new JSONObject(378);
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      StringWriter stringWriter0 = new StringWriter(55);
      StringWriter stringWriter1 = stringWriter0.append('R');
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter1);
      hashMap0.put((Byte) null, bufferedWriter0);
      // Undeclared exception!
      try { 
        jSONObject0.put("gettoBigIntegerExact", (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("r", "r");
      jSONObject1.put("r", (-1.0F));
      JSONObject jSONObject2 = jSONObject1.put("pKqdId-Uo]~7", 485L);
      JSONObject jSONObject3 = jSONObject2.increment("r");
      Double double0 = new Double(215.781303);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getBytes";
      stringArray0[1] = "r";
      stringArray0[2] = "=Z/F";
      stringArray0[3] = "r";
      stringArray0[4] = "pKqdId-Uo]~7";
      stringArray0[5] = "pKqdId-Uo]~7";
      JSONObject jSONObject4 = new JSONObject(double0, stringArray0);
      jSONObject4.toMap();
      jSONObject3.optJSONObject("r");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("r", "r");
      jSONObject1.put("r", (-1.0F));
      JSONObject jSONObject2 = jSONObject1.put("pKqdId-Uo]~7", 485L);
      jSONObject2.increment("r");
      Double double0 = new Double(215.781303);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getBytes";
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)20);
      JSONObject jSONObject1 = jSONObject0.accumulate("isreadUnsignedByte", byte0);
      jSONObject0.optLong("isreadUnsignedByte");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject1.optBigDecimal("isreadUnsignedByte", bigDecimal0);
      StringReader stringReader0 = new StringReader("");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, (byte)20);
      Object object1 = JSONObject.NULL;
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0, (-25), (-25));
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      jSONObject0.optEnum(class0, "GWN4k", trayIcon_MessageType0);
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
      try { 
        jSONObject1.getBoolean("GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      jSONObject1.accumulate("GN4k", jSONObject0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.optNumber("GN4k", (Number) bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jSONObject1.optBigDecimal("] not a string.", bigDecimal1);
      JSONObject.stringToValue("I<");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(64);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "G";
      stringArray0[1] = "/!7&4Tm!/W7B&?Ea";
      stringArray0[2] = "gettoUpperCase";
      stringArray0[3] = "w";
      stringArray0[4] = "Substring bounds error";
      stringArray0[5] = "toString";
      stringArray0[6] = "N";
      stringArray0[7] = "toC";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.optQuery("/!7&4Tm!/W7B&?Ea");
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4", (Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject1.optBigInteger("//~[`6U", bigInteger0);
      JSONObject.stringToNumber("0.04881183970259957");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      jSONObject1.getString("GWN4k");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0, (-25), (-25));
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      jSONObject0.optEnum(class0, "GWN4k", trayIcon_MessageType0);
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
      try { 
        jSONObject0.getBoolean("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      assertEquals(0, jSONObject0.length());
      
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(378);
      JSONObject.indent(stringWriter0, 57);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.put("UR&Iez3Q*[02&e`FX*", 380.8);
      Double double0 = new Double(378);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "UR&Iez3Q*[02&e`FX*";
      stringArray0[1] = "UR&Iez3Q*[02&e`FX*";
      stringArray0[2] = "UR&Iez3Q*[02&e`FX*";
      stringArray0[3] = "getVariant";
      stringArray0[4] = "UR&Iez3Q*[02&e`FX*";
      JSONObject jSONObject2 = new JSONObject(stringWriter0, stringArray0);
      try { 
        jSONObject1.getString("UR&Iez3Q*[02&e`FX*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigDecimal bigDecimal0 = new BigDecimal(73);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal((String) null, bigDecimal0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1455);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1);
      jSONObject0.append("is", pushbackInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(bigDecimal0);
      jSONObject0.has((String) null);
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
      jSONObject0.optBigDecimal("is", bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("GN4k", "GN4k");
      JSONObject.stringToValue("0XW+D@>XH1ga&J.8w'W");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)49);
      JSONObject jSONObject1 = jSONObject0.accumulate("isreadUnsignedByte", byte0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject1.optBigDecimal("isreadUnsignedByte", bigDecimal0);
      jSONObject0.optFloat(" [character ");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(Double.NaN);
      Object object0 = JSONObject.stringToValue("null");
      JSONObject.wrap(object0);
      jSONObject0.has("null");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" at ");
      Integer integer0 = new Integer((-317));
      jSONObject0.optDouble("`q-7.@1+<3");
      jSONObject0.toString();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject.doubleToString(1270.0);
      String string0 = "QPiZF/";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("QPiZF/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.putOnce("", "\"");
      jSONObject0.optString("", "G2}t-Dh");
      jSONObject0.optLong("", 1L);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.increment("r+8+1&aycs4~'Qv8Y_");
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject4.optBigDecimal("r+8+1&aycs4~'Qv8Y_", bigDecimal0);
      jSONObject0.length();
      jSONObject2.optNumber("r+8+1&aycs4~'Qv8Y_", (Number) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("YMKE4wX['[@g", 0.0F);
      HashMap<Dialog.ModalExclusionType, Character> hashMap0 = new HashMap<Dialog.ModalExclusionType, Character>();
      jSONObject1.put("YMKE4wX['[@g", (Map<?, ?>) hashMap0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HashMap<CryptoPrimitive, Character> hashMap1 = new HashMap<CryptoPrimitive, Character>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) "GWN4k";
      objectArray0[3] = (Object) jSONObject0;
      objectArray0[4] = (Object) mockFileWriter0;
      objectArray0[5] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "GWN4k", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      JSONObject.stringToValue("null");
      Float float0 = new Float((-1.0));
      jSONObject1.put("YMKE4wX['[@g", (Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject.stringToValue("null");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Double double0 = new Double(0.04881183970259957);
      Float float0 = new Float(0.04881183970259957);
      JSONObject.testValidity(double0);
      JSONObject.doubleToString((-2843.5192184146294));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "r+8+1&aycs4~'Qv8Y_";
      JSONObject jSONObject2 = jSONObject1.increment("r+8+1&aycs4~'Qv8Y_");
      JSONObject jSONObject3 = new JSONObject();
      jSONObject1.similar(jSONObject2);
      Locale locale1 = Locale.GERMANY;
      Character character0 = new Character('2');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("r+8+1&aycs4~'Qv8Y_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      JSONObject.stringToValue("isNaN");
      Integer integer0 = new Integer((-2383));
      jSONObject0.optNumber("A JSONObject text must begin with '{'");
      try { 
        jSONObject0.getDouble("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = JSONObject.wrap(bigInteger0);
      JSONObject.testValidity(object0);
      HashMap<PushbackReader, Desktop.Action> hashMap0 = new HashMap<PushbackReader, Desktop.Action>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getInt("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<Component.BaselineResizeBehavior, PseudoColumnUsage> hashMap0 = new HashMap<Component.BaselineResizeBehavior, PseudoColumnUsage>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CENTER_OFFSET;
      Function<Object, PseudoColumnUsage> function0 = (Function<Object, PseudoColumnUsage>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("0Haxld~8$!;g&VuYk)o", (Writer) charArrayWriter0);
      hashMap0.computeIfAbsent(component_BaselineResizeBehavior0, function0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m|w?yj;4:q`1";
      stringArray0[1] = "0Haxld~8$!;g&VuYk)o";
      stringArray0[2] = "0Haxld~8$!;g&VuYk)o";
      stringArray0[3] = "0Haxld~8$!;g&VuYk)o";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.putOpt("m|w?yj;4:q`1", jSONObject1);
      jSONObject0.optInt("m|w?yj;4:q`1", (-2096));
      JSONObject.getNames(jSONObject0);
      hashMap0.entrySet();
      JSONObject.stringToValue("java.");
      jSONObject0.length();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("^w8p40gM`:*$?rixw");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      HashMap<TrayIcon.MessageType, Normalizer.Form> hashMap0 = new HashMap<TrayIcon.MessageType, Normalizer.Form>();
      JSONObject jSONObject1 = jSONObject0.put("GWN4", (Map<?, ?>) hashMap0);
      jSONObject1.optInt("GWN4");
      MockFileWriter mockFileWriter0 = new MockFileWriter("GWN4");
      JSONObject.stringToValue("GWN4");
      JSONObject.isDecimalNotation("#/");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4247);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JSONObject jSONObject1 = jSONObject0.accumulate("{", dataInputStream0);
      jSONObject1.optLong("{");
      JSONObject.doubleToString(0.04881183970259957);
      try { 
        JSONObject.stringToNumber("{");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [{] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getnextProbablePrime", (Map<?, ?>) null);
      jSONObject0.optLong("getnextProbablePrime", (-236L));
      try { 
        jSONObject0.getBigDecimal((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.similar(jSONObject0);
      Locale locale1 = Locale.GERMANY;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("-0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      String string0 = "isNaN";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Character character0 = new Character('2');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_WRAP;
      Character.valueOf('2');
      Character character1 = new Character('?');
      hashMap0.put(cryptoPrimitive0, character1);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("!H3zNnmHc_oN\"V", hashMap0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      Double double0 = new Double(1533.7902792695993);
      jSONObject1.accumulate("'~hk", double0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        bigDecimal0.setScale((-2));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Proxy.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Proxy.Type, ProcessBuilder.Redirect.Type>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1455);
      JSONObject jSONObject0 = new JSONObject(1);
      JSONObject jSONObject1 = jSONObject0.append(":zMm$Som+/{z", hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      JSONObject.wrap(pipedInputStream1);
      jSONObject0.has("is");
      MockPrintStream mockPrintStream0 = new MockPrintStream(")/h`K;~R ^1kzI$)/");
      Integer integer0 = new Integer(1455);
      jSONObject0.optDouble("`q-7.@1+<3");
      jSONObject0.toString();
      jSONObject1.optJSONObject("-51nZi&I]jb7D$BL<");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("-0");
      JSONObject jSONObject2 = new JSONObject();
      Character character0 = new Character('2');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-0");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte) (-64);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("\n", bigInteger0);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("E");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      JSONObject.stringToValue("1.L_`SYq'H+)4");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1.L_`SYq'H+)4");
      jSONObject2.optFloat("E");
      jSONObject1.toString();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("-0");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.similar(jSONObject0);
      Locale locale1 = Locale.GERMANY;
      Character character0 = new Character('2');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("-0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      JSONObject.stringToValue("isNaN");
      Integer integer0 = new Integer((-2562));
      jSONObject1.optNumber("-0");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.similar(jSONObject1);
      try { 
        JSONObject.stringToNumber("getlongValueExact");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [getlongValueExact] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("wp/I(FU");
      jSONObject0.similar(jSONObject1);
      try { 
        JSONObject.stringToNumber("wp/I(FU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [wp/I(FU] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) "#");
      MockFileWriter mockFileWriter0 = new MockFileWriter("GWN4k");
      String string0 = null;
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{E2ZD'm{!7Ki");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 8 [character 9 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 57);
      JSONObject jSONObject1 = jSONObject0.put("UR&Iez3Q*[02&e`FX*", 380.8);
      jSONObject1.get("UR&Iez3Q*[02&e`FX*");
      jSONObject0.optDouble("UR&Iez3Q*[02&e`FX*", 2151.0);
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
      jSONObject0.keys();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "r";
      JSONObject jSONObject1 = jSONObject0.putOnce("r", "r");
      JSONObject jSONObject2 = jSONObject1.put("pKqdId-Uo]~7", 485L);
      try { 
        jSONObject2.increment("r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000014].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject.numberToString(bigInteger0);
      JSONObject jSONObject0 = new JSONObject((Object) "java.math.BigInteger@0000000001");
      JSONObject.doubleToString((-242.125227));
      JSONObject.stringToValue("-242.125227");
      Integer integer0 = new Integer(65);
      jSONObject0.optDouble("java.math.BigInteger@0000000001");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.stringToValue("false");
      Integer integer0 = new Integer(57);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFileWriter mockFileWriter0 = new MockFileWriter("false");
      JSONObject.stringToValue("false");
      JSONObject.isDecimalNotation("islength");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Proxy.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Proxy.Type, ProcessBuilder.Redirect.Type>();
      int int0 = 87;
      JSONObject jSONObject0 = new JSONObject(87);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject.stringToValue("rMp(E");
      JSONObject.quote("rMp(E");
      JSONObject jSONObject0 = new JSONObject((Object) "rMp(E");
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject1 = jSONObject0.put("rMp(E", 4991L);
      jSONObject1.toMap();
      jSONObject1.optJSONArray("");
      jSONObject1.optInt("rMp(E", 366);
      try { 
        jSONObject0.getBigInteger("]Wg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000021] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.TEN;
      HashMap<TrayIcon.MessageType, Normalizer.Form> hashMap0 = new HashMap<TrayIcon.MessageType, Normalizer.Form>();
      JSONObject jSONObject1 = jSONObject0.put("E", (Map<?, ?>) hashMap0);
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
      jSONObject1.optNumber("u%^0N<:O]bIwK[TA0%");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      jSONObject1.optLong("GWN4k");
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      jSONObject1.has("](jS9w");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "GWN4k";
      stringArray0[1] = "GWN4k";
      stringArray0[2] = "";
      stringArray0[3] = "](jS9w";
      stringArray0[4] = "get";
      stringArray0[5] = "](jS9w";
      stringArray0[6] = "GWN4k";
      stringArray0[7] = "GWN4k";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject2.getDouble("GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000023] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "GWN4k";
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      jSONObject0.optEnum(class0, "GWN4k", trayIcon_MessageType0);
      try { 
        jSONObject1.getDouble("GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) "#");
      Character character0 = new Character('K');
      HashMap<CryptoPrimitive, Character> hashMap1 = new HashMap<CryptoPrimitive, Character>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('R');
      int int0 = 35;
      // Undeclared exception!
      jSONObject0.write((Writer) charArrayWriter0, 2909, 2909);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) "#");
      Character character0 = new Character('K');
      HashMap<CryptoPrimitive, Character> hashMap1 = new HashMap<CryptoPrimitive, Character>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('R');
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      jSONObject0.write((Writer) bufferedWriter0, (-2787), 2014);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("OL6{vgwjA<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) "#");
      Character character0 = new Character('K');
      HashMap<CryptoPrimitive, Character> hashMap1 = new HashMap<CryptoPrimitive, Character>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('R');
      jSONObject0.write((Writer) charArrayWriter0, 35, 2909);
      // Undeclared exception!
      jSONObject0.toString(2909);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.optNumber("GWN4k", (Number) bigDecimal0);
      Boolean boolean0 = new Boolean("GWN4k");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.doubleToString(1315.399774);
      try { 
        JSONObject.stringToNumber("4+@2\"!5If.fH1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.doubleToString((-2826.7494509798785));
      JSONObject.stringToNumber("-2826.7494509798785");
      JSONObject.testValidity(pipedOutputStream0);
      jSONObject0.optNumber("(!?'P'iJT'");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_AGREEMENT;
      Character character0 = new Character('(');
      hashMap0.put(cryptoPrimitive0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.optNumber("j>9wM6&?9Ndu%M}d");
      jSONObject0.optNumber("j>9wM6&?9Ndu%M}d", (Number) null);
      jSONObject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(111);
      String string0 = "org.json.JSONException";
      try { 
        jSONObject2.getJSONObject("org.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      JSONObject.quote("2086.19170");
      StringWriter stringWriter0 = new StringWriter(378);
      JSONObject.quote((String) null, (Writer) stringWriter0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("2086.19170");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject0.accumulate("GWN4k", "GWN4k");
      HashMap<TrayIcon.MessageType, Normalizer.Form> hashMap0 = new HashMap<TrayIcon.MessageType, Normalizer.Form>();
      JSONObject jSONObject1 = jSONObject0.put("E", (Map<?, ?>) hashMap0);
      jSONObject1.get("GWN4k");
      try { 
        jSONObject1.getNumber("GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.add(bigInteger1);
      jSONObject0.putOnce("", "\"");
      jSONObject0.names();
      jSONObject0.optBigInteger("", bigInteger0);
      jSONObject0.opt("");
      jSONObject0.put("Expected a ',' or ']'", true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("javax.", stringArray0);
      JSONObject.doubleToString((-238.098207351306));
      JSONObject.stringToNumber("-238.098207351306");
      JSONObject.testValidity(jSONObject0);
      jSONObject0.putOnce("6/O_Y>]74]T@", (Object) null);
      jSONObject0.accumulate("javax.", "-238.098207351306");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigDecimal bigDecimal0 = new BigDecimal(91);
      jSONObject0.optBigDecimal((String) null, bigDecimal0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1455);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1);
      JSONObject jSONObject1 = jSONObject0.append("is", pushbackInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(bigDecimal0);
      jSONObject0.has((String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("`q-7.@1+<3");
      jSONObject0.optNumber("\"j;xLkaZ1egGt");
      jSONObject1.optDouble("is");
      jSONObject0.optFloat("get");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject.numberToString(bigInteger0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1455);
      JSONObject jSONObject0 = new JSONObject(1455);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1455);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 1455);
      JSONObject jSONObject1 = jSONObject0.append("len", bufferedWriter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap("java.math.BigInteger@0000000001");
      jSONObject0.has("len");
      MockPrintStream mockPrintStream0 = new MockPrintStream("~{dO>p77;0RVycFu");
      Integer integer0 = new Integer(1455);
      jSONObject1.optDouble("len");
      jSONObject0.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, (-226), mathContext0);
      BigDecimal bigDecimal1 = new BigDecimal((-1100));
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.MAC;
      hashMap0.put(cryptoPrimitive0, (Character) null);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optNumber("ava");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject.numberToString(bigInteger0);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.MAC;
      hashMap0.put(cryptoPrimitive0, (Character) null);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optNumber("Hh");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("E", (Map<?, ?>) hashMap0);
      jSONObject0.optBoolean("E");
      jSONObject1.optNumber("tg(O&~6dqp");
      jSONObject1.has("E");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.quote("val [");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.getNames(jSONObject1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.doubleToString((-451.753325955));
      JSONObject.stringToNumber("-451.753325955");
      File file0 = MockFile.createTempFile("Expected a ',' or ']'", "]", (File) null);
      MockFile mockFile0 = new MockFile(file0, "]");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      JSONObject jSONObject1 = jSONObject0.put("rpIcve W,L*7-N", (double) 378);
      jSONObject1.getLong("rpIcve W,L*7-N");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject.stringToValue("5C");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "].");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "javax.");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('b');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter2, false);
      JSONObject.quote("javax.", (Writer) mockPrintWriter0);
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0.0);
      jSONObject0.optDouble("0", (-5834.5737516));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "].");
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("javax.", stringArray0);
      String string0 = "\\su?Y}gpx;m?";
      JSONObject jSONObject1 = jSONObject0.putOnce("su?Y}gpx;m?", "].");
      try { 
        jSONObject1.append("su?Y}gpx;m?", "javax.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[su?Y}gpx;m?] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("6/O_Y>]74]T@", "6/O_Y>]74]T@");
      assertEquals(1, jSONObject0.length());
      
      try { 
        jSONObject0.append("6/O_Y>]74]T@", "6/O_Y>]74]T@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[6/O_Y>]74]T@] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MathContext mathContext0 = MathContext.DECIMAL32;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = "Missing value";
      BigDecimal bigDecimal0 = new BigDecimal((-1100));
      jSONObject0.optBigDecimal("Missing value", bigDecimal0);
      JSONObject jSONObject1 = jSONObject0.append("Missing value", (Object) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      jSONObject1.optNumber("yv2^x%vZ=z", (Number) bigDecimal0);
      JSONObject.wrap((Object) null);
      jSONObject1.has("-787TDbE+\"EDLJt|iK");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(1830);
      JSONObject.quote("YY13N-", (Writer) stringWriter0);
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.doubleToString(1.0);
      jSONObject0.optDouble(" [character ", (double) 1830);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = new Double(0.04881183970259957);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optNumber("getvalues", (Number) double0);
      Boolean boolean0 = new Boolean("5");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.doubleToString(4639.937728510002);
      JSONObject.stringToNumber("4639.937728510002");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject0.accumulate("GWN4k", "GWN4k");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(60);
      JSONObject.quote("\u0003VTi", (Writer) stringWriter0);
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.doubleToString((-54.9412995));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      HashMap<TrayIcon.MessageType, Normalizer.Form> hashMap0 = new HashMap<TrayIcon.MessageType, Normalizer.Form>();
      jSONObject0.put("E", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optNumber("E");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (double) 378);
      StringWriter stringWriter0 = new StringWriter(91);
      JSONObject.quote("l_ d6EtH6wOzW8OxZp", (Writer) stringWriter0);
      HashMap<Normalizer.Form, Byte> hashMap0 = new HashMap<Normalizer.Form, Byte>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('b');
      jSONObject1.write((Writer) charArrayWriter1, (-932), (-932));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" [character ", 2424.6965F);
      jSONObject0.optFloat("&G'm#", (-4939.56F));
      jSONObject1.getInt(" [character ");
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject1.getJSONObject("intern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 98, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject0 = new JSONObject();
      Character character0 = new Character('K');
      HashMap<CryptoPrimitive, Character> hashMap1 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject1 = jSONObject0.put("#", (-1007));
      jSONObject0.optNumber("JSONObject[");
      jSONObject0.optDouble(".SU1hwr?");
      jSONObject1.optFloat("JSONObject[");
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 1847);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (double) 378);
      jSONObject0.put("shortValueExact", 2973.23032744);
      jSONObject1.names();
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optFloat((String) null, 443.65F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject3.optNumber("shortValueExact", (Number) bigInteger0);
      try { 
        jSONObject2.getBigInteger("7o'wDpHWNq!LctC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) "#");
      Character character0 = new Character('K');
      HashMap<CryptoPrimitive, Character> hashMap1 = new HashMap<CryptoPrimitive, Character>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('V');
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject1.optBigInteger("#", bigInteger0);
      jSONObject1.optNumber("] is not a number.");
      try { 
        JSONObject.stringToNumber("#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [#] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("GWN4k", "GWN4k");
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.NONE;
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      jSONObject0.optEnum(class0, "GWN4k", trayIcon_MessageType0);
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.NONE;
      jSONObject1.optEnum(class0, "GWN4k", trayIcon_MessageType0);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-2680));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -2680
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getNumber("_|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      HashMap<TrayIcon.MessageType, Normalizer.Form> hashMap0 = new HashMap<TrayIcon.MessageType, Normalizer.Form>();
      JSONObject jSONObject1 = jSONObject0.put("E", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getNumber("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<TrayIcon.MessageType, Normalizer.Form> hashMap0 = new HashMap<TrayIcon.MessageType, Normalizer.Form>();
      JSONObject jSONObject1 = jSONObject0.put("GWN4", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getNumber("GWN4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathContext mathContext0 = MathContext.DECIMAL32;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, (-226), mathContext0);
      String string0 = "Missing value";
      BigDecimal bigDecimal1 = new BigDecimal((-1100));
      jSONObject0.optBigDecimal("Missing value", bigDecimal1);
      JSONObject jSONObject1 = jSONObject0.append("getintern", (Object) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap((Object) null);
      jSONObject1.has("-787TDbE+\"EDLJt|iK");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.putOnce("islength", "\"");
      jSONObject0.names();
      jSONObject0.toString((-3845));
      JSONObject.numberToString(bigInteger0);
      jSONObject0.remove("islength");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(56);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      JSONObject jSONObject2 = jSONObject1.put("] is not an enum of type ", 56);
      jSONObject1.optFloat("", 504.0F);
      float float0 = new Integer(56);
      jSONObject2.length();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) "#");
      Character character0 = new Character('K');
      HashMap<CryptoPrimitive, Character> hashMap1 = new HashMap<CryptoPrimitive, Character>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('V');
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.NONE;
      jSONObject0.optEnum(class0, "QE-/r_tJkQa", trayIcon_MessageType0);
      charArrayWriter1.append('N');
      jSONObject0.write((Writer) charArrayWriter1, 87, 2909);
      try { 
        jSONObject0.getDouble("[vX0REygr([HH=pW-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject.quote("ready");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.quote("java.io.StringWriter@0000000001");
      StringWriter stringWriter0 = new StringWriter(1189);
      JSONObject.quote("/dcX", (Writer) stringWriter0);
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.io.StringWriter@0000000004";
      stringArray0[1] = "java.io.StringWriter@0000000004";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      try { 
        jSONObject0.getJSONObject("/dcX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QgMdfn");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.doubleToString(2056.671058843495);
      try { 
        JSONObject.stringToNumber("9^lLh.%i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("GWN4k", "GWN4k");
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 1847);
      jSONObject0.put("shortValueExact", (double) 378);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", 2973.23032744);
      jSONObject0.optLong("shortValueExact", (-1447L));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('V');
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject1.getJSONObject("shortValueExact");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, (-226), mathContext0);
      BigDecimal bigDecimal1 = new BigDecimal((-1100));
      jSONObject0.optBigDecimal("Missing value", bigDecimal1);
      String string0 = null;
      JSONObject jSONObject1 = jSONObject0.append("-787TDbE+\"EDLJt|iK", (Object) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap((Object) null);
      jSONObject1.has("-787TDbE+\"EDLJt|iK");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("isreadFloat");
      jSONObject0.has("isreadFloat");
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = (-226);
      MathContext mathContext0 = MathContext.DECIMAL32;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, (-226), mathContext0);
      jSONObject0.optBigDecimal("-787TDbE+\"EDLJt|iK", bigDecimal0);
      jSONObject0.append("getintern", fileSystemHandling0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(byteArrayOutputStream0);
      jSONObject0.has("java.io.ByteArrayOutputStream@0000000008");
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.io.ByteArrayOutputStream@0000000008");
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "getintern", (-226), (-226));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject.numberToString(bigInteger0);
      JSONObject.doubleToString((-1457.2596351526088));
      JSONObject.stringToNumber("-1457.2596351526088");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Character character0 = new Character(']');
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.BLOCK_CIPHER;
      Character character1 = Character.valueOf('/');
      hashMap0.put(cryptoPrimitive0, character1);
      jSONObject0.opt((String) null);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, ".");
      jSONObject1.optString("false", "d%lQlQ&h");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "d%lQlQ&h";
      stringArray0[1] = "d%lQlQ&h";
      stringArray0[2] = "f";
      stringArray0[3] = "d%lQlQ&h";
      stringArray0[4] = "f";
      stringArray0[5] = "d%lQlQ&h";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = ",:]}/\"[{;=#";
      JSONObject jSONObject2 = new JSONObject(cryptoPrimitive0, stringArray0);
      try { 
        jSONObject2.getJSONObject("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "shortValueExact";
      JSONObject jSONObject0 = new JSONObject((Object) "shortValueExact");
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject.getNames(jSONObject0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.toString(77);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "java.io.StringWriter@0000000023");
      try { 
        jSONObject0.write((Writer) charArrayWriter0, 253, 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(127);
      long long0 = 509L;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 509L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.doubleToString(2086.1917);
      JSONObject.stringToNumber("0");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject.quote("9@^lLh%i");
      JSONObject.quote("6nHj]C4w@n84`{");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(102);
      JSONObject jSONObject1 = new JSONObject(byteArrayOutputStream0);
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject3 = jSONObject0.put("org.json.JSONTokener", (-5356));
      jSONObject2.optFloat("Null pointer", 0.0F);
      try { 
        jSONObject3.getFloat("istoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "GWN4k";
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject0.optFloat("GWN4k", (-4939.56F));
      try { 
        jSONObject1.getFloat("GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "GWN4k";
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.NONE;
      try { 
        jSONObject1.getFloat("GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "shortValueExact");
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject1 = new JSONObject((Object) "shortValueExact");
      Character.valueOf('a');
      HashMap<CryptoPrimitive, Character> hashMap1 = new HashMap<CryptoPrimitive, Character>();
      Character character0 = new Character('}');
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.MESSAGE_DIGEST;
      hashMap1.put(cryptoPrimitive0, character0);
      jSONObject0.opt(".");
      jSONObject0.putOpt("shortValueExact", hashMap1);
      jSONObject1.optString("|6z!oP6]9", (String) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("f", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f";
      JSONObject jSONObject2 = new JSONObject(mockFileWriter0, stringArray0);
      jSONObject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("intern", 2863L);
      jSONObject1.optInt("#oM|O_(m\"^#cN(.tU0", (-30733247));
      jSONObject0.toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      RoundingMode roundingMode0 = RoundingMode.UP;
      JSONObject.wrap(roundingMode0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      JSONObject jSONObject1 = new JSONObject(378);
      jSONObject1.optBigInteger("getvalues", (BigInteger) null);
      jSONObject1.put("shortValueExact", 1868.684355720853);
      Double double0 = new Double(0.04881183970259957);
      JSONObject jSONObject2 = new JSONObject(double0);
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = (-5356);
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("shortValueExact", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      MockFileWriter mockFileWriter0 = new MockFileWriter("d", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "d";
      JSONObject.stringToValue("GWN4k");
      objectArray0[1] = (Object) "GWN4k";
      Object object0 = JSONObject.NULL;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) jSONObject0;
      objectArray0[5] = (Object) jSONObject1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("d", objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Writer writer0 = JSONObject.writeValue(printWriter0, pipedInputStream0, 261, 261);
      jSONObject0.write(writer0, 285, 261);
      jSONObject0.put("GWN4k", 2888L);
      jSONObject1.optJSONArray("GWN4k");
      jSONObject1.optInt("GWN4k", 768);
      jSONObject0.optBoolean("toL", true);
      try { 
        jSONObject0.getBigDecimal("GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      HashMap<TrayIcon.MessageType, Normalizer.Form> hashMap0 = new HashMap<TrayIcon.MessageType, Normalizer.Form>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.length();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 0, (-1801));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      jSONObject0.put("GWN4k", 2888L);
      jSONObject1.optJSONArray("GWN4k");
      jSONObject1.optInt("GWN4k", 768);
      jSONObject0.optBoolean("toL", true);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(366);
      jSONObject0.put("shortValueExact", (double) 366);
      JSONObject jSONObject1 = new JSONObject((Object) "shortValueExact");
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject2 = jSONObject0.put("shortValueExact", (long) 366);
      jSONObject0.optJSONArray("shortValueExact");
      jSONObject2.optInt("shortValueExact", 1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("intern", 2863L);
      jSONObject1.get("intern");
      JSONObject jSONObject2 = jSONObject0.putOpt("#oM|O_(m\"^#cN(.tU0", (Object) null);
      jSONObject0.optBoolean("+A@8I0-7GCE:y_=y|", false);
      try { 
        jSONObject2.getJSONArray("intern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short short0 = (short)8448;
      Short short1 = new Short((short)8448);
      JSONObject.wrap(short1);
      String string0 = "5'XSOSaPG`K/kP3t_";
      JSONTokener jSONTokener0 = new JSONTokener("5'XSOSaPG`K/kP3t_");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1801);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      JSONObject.quote("", (Writer) stringWriter0);
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      HashMap<Normalizer.Form, Byte> hashMap1 = new HashMap<Normalizer.Form, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Float float0 = new Float(1809.4347875906446);
      JSONObject.wrap((Object) null);
      jSONObject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(47);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("crKe>NMNc|=,f9[", (Map<?, ?>) hashMap0);
      jSONObject1.optBoolean("");
      Boolean boolean0 = new Boolean(";8'!8;=");
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger("crKe>NMNc|=,f9[", bigInteger0);
      jSONObject1.optJSONObject("E");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.putOnce("", "\"");
      jSONObject0.names();
      jSONObject0.optBigInteger("", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("GWEq", (Map<?, ?>) null);
      jSONObject1.toMap();
      try { 
        jSONObject1.getBigDecimal("GWEq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Proxy.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Proxy.Type, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.toMap();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("GWEq");
      Boolean boolean0 = new Boolean("GWEq");
      jSONObject0.optJSONObject("isNaN");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Locale.getISOLanguages();
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("@d]1>W8UgXAj~XN", (Map<?, ?>) hashMap0);
      jSONObject1.optBoolean("5eady");
      Boolean boolean0 = new Boolean("has");
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject1.optBigInteger("].", bigInteger0);
      jSONObject0.optJSONObject("has");
      jSONObject1.toMap();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject.doubleToString(2086.1917);
      JSONObject.stringToNumber("2086.1917");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "&]Po";
      try { 
        jSONObject0.put("&]Po", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(119);
      try { 
        jSONObject0.put("p2m5X", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(366);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (double) 366);
      JSONObject jSONObject2 = new JSONObject((Object) "shortValueExact");
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject2.put("shortValueExact", (-5356));
      jSONObject1.optFloat("shortValueExact", (-4939.56F));
      jSONObject0.getFloat("shortValueExact");
      jSONObject3.length();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 1847);
      jSONObject0.put("shortValueExact", (double) 378);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", 2973.23032744);
      String[] stringArray0 = new String[14];
      stringArray0[0] = "shortValueExact";
      JSONObject jSONObject2 = jSONObject0.put("len", 2764);
      jSONObject2.optNumber(".");
      jSONObject0.optDouble("shortValueExact");
      jSONObject1.optFloat("len");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("GWN4", "GWN4");
      assertFalse(jSONObject0.isEmpty());
      
      jSONObject0.optFloat("GWN4");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)49);
      jSONObject0.accumulate("isreaUnsignedByte", byte0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optFloat("isreaUnsignedByte");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("UR&Iez3Q*[02&e`FX*", 380.8);
      jSONObject1.get("UR&Iez3Q*[02&e`FX*");
      jSONObject0.optDouble("UR&Iez3Q*[02&e`FX*", (double) 401);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.quote("] could not be converted to BigDecimal.", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getlength");
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      JSONObject.isDecimalNotation("~");
      jSONObject0.optDouble((String) null, 0.0);
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      try { 
        jSONObject0.getEnum(class0, " line ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject.quote("ready");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.quote("java.io.StringWriter@0000000001");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.doubleToString((-2200.739625));
      JSONObject.stringToNumber("-2200.739625");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optNumber(";5(?b99$", (Number) bigDecimal0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.doubleToString(378);
      JSONObject.stringToNumber("378");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject.doubleToString(1270.0);
      JSONObject.stringToNumber("1270");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "";
      JSONObject.stringToValue("");
      JSONObject.quote("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string1 = "w4:EjN&v";
      JSONObject.quote("w4:EjN&v");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      int int0 = 0;
      jSONObject0.optInt("%s is not an array index", 0);
      jSONObject0.toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      String string0 = "shortValueExact";
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (double) 378);
      jSONObject0.getDouble("shortValueExact");
      String string1 = "] is not a valid number.";
      try { 
        jSONObject1.getInt("] is not a valid number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("to", (-1403.089651897));
      jSONObject1.getDouble("to");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject1.optBoolean("shortValueExact");
      Boolean boolean0 = new Boolean("shortValueExact");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("E", (Map<?, ?>) hashMap0);
      jSONObject0.optBoolean("E");
      Boolean boolean0 = new Boolean((String) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject1.optBigInteger("'0^C@C (", bigInteger0);
      jSONObject1.optJSONObject("E");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject.stringToValue("#/");
      JSONObject.quote("6nHj]C4w@n84`{");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("}", (-3501L));
      try { 
        jSONObject0.getJSONObject("}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "signum");
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.pow(135);
      JSONObject jSONObject0 = new JSONObject(bigInteger1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      LinkedList<SortOrder> linkedList0 = new LinkedList<SortOrder>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.wrap(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("] is not an enum of type ", 865);
      jSONObject1.putOnce("int", "int");
      Character.valueOf('K');
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.PUBLIC_KEY_ENCRYPTION;
      Character character0 = new Character('}');
      hashMap0.put(cryptoPrimitive0, character0);
      jSONObject1.opt(".");
      JSONObject jSONObject2 = jSONObject1.putOpt("l3&7g)4_ 7hPS", cryptoPrimitive0);
      jSONObject0.optString("x&9\"8z6Xsk", "#/");
      jSONObject2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.toMap();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "(!?'P'iJT'";
      JSONObject jSONObject1 = jSONObject0.put("(!?'P'iJT'", false);
      try { 
        jSONObject1.getLong("(!?'P'iJT'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "]}";
      JSONObject jSONObject1 = jSONObject0.put("]}", false);
      try { 
        jSONObject1.getLong("]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Unable to increment [";
      jSONObject0.put("Unable to increment [", (Object) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("org.json.JSONObject", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name org.json.JSONObject, locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "]}";
      JSONObject jSONObject1 = jSONObject0.put("]}", true);
      try { 
        jSONObject1.getInt("]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("GWN4k", true);
      jSONObject1.toMap();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.similar(stringWriter0);
      JSONObject.indent(stringWriter0, 1847);
      jSONObject0.put("shortValueExact", (double) 378);
      jSONObject0.put("shortValueExact", 2973.230327);
      jSONObject0.optLong("shortValueExact", (-1447L));
      JSONObject jSONObject1 = jSONObject0.putOpt("hi%", "hi%");
      try { 
        jSONObject1.getJSONArray("hi%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.putOnce((String) null, (Object) null);
      jSONObject0.names();
      JSONObject.doubleToString(200.9794);
      jSONObject0.optBigInteger("200.9794", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(10);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "/'e";
      try { 
        jSONObject0.getBigDecimal("/'e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject.quote("ready");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
      JSONObject.getNames(jSONObject0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.toString(19);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "ready");
      jSONObject0.write((Writer) charArrayWriter1, 214, 19);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Null pointer");
      StringWriter stringWriter0 = new StringWriter(913);
      JSONObject.quote("9iu;4r;tmPBlioN", (Writer) stringWriter0);
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      HashMap<Normalizer.Form, Byte> hashMap1 = new HashMap<Normalizer.Form, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Character character0 = Character.valueOf('(');
      JSONObject jSONObject1 = new JSONObject(character0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(character0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject.stringToValue(".");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject.doubleToString((-2093.2669253300637));
      JSONObject.stringToValue("-2093.2669253300637");
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject.doubleToString(2086.1917);
      JSONObject.stringToValue("2086.1917");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-806.6111243088151));
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject(45);
      jSONObject0.optQuery("");
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      try { 
        jSONObject0.getEnum(class0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1851.3));
      jSONObject0.optNumber("org.json.JSONPointer$Builder", (Number) double0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<Float, CardTerminals.State> hashMap0 = new HashMap<Float, CardTerminals.State>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.wrap(double0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      jSONObject0.optJSONArray("org.json.JSONPointer$Builder");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("$`*K&%5&1UoUGz");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      String string0 = ":&W&,@n";
      JSONObject.isDecimalNotation("~");
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", 2559.786F);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject1.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("E", (Map<?, ?>) hashMap0);
      jSONObject0.optBoolean("E");
      jSONObject1.optNumber("tg(O&~6dqp");
      jSONObject1.toMap();
      jSONObject1.optString("E", "E");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("[A~!aG+4M}([E");
      jSONObject1.similar("[A~!aG+4M}([E");
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONObject.wrap(jSONArray0);
      JSONObject jSONObject3 = jSONObject0.put("[A~!aG+4M}([E", (int) (byte)16);
      jSONObject3.putOnce("int", (Object) null);
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.STREAM_CIPHER;
      Character character0 = Character.valueOf('K');
      hashMap0.put(cryptoPrimitive0, character0);
      jSONObject3.opt(".");
      jSONObject2.putOpt("[A~!aG+4M}([E", ".");
      jSONObject3.optString("[A~!aG+4M}([E");
      JSONObject.doubleToString((-2392.4301));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, "getintern");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject.quote("ready");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000001", 3112.404F);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject((JSONArray) null);
      JSONObject.getNames(jSONObject0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.toString(19);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "ready");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('V');
      jSONObject1.write((Writer) charArrayWriter2, 214, 19);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]}", false);
      try { 
        jSONObject1.getInt("]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("GWN4k", "GWN4k");
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.INFO;
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      jSONObject0.optEnum(class0, "GWN4k", trayIcon_MessageType0);
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
      JSONObject.stringToValue("GWN4k");
      try { 
        jSONObject0.getInt("GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.doubleToString(2086.1917);
      jSONObject0.optInt("0");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "shortValueExact");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.optInt("istoString");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = (BigDecimal)jSONObject0.optNumber(";5(?b99$", (Number) bigDecimal0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      JSONObject jSONObject1 = new JSONObject(bigDecimal1, stringArray0);
      BigDecimal bigDecimal2 = new BigDecimal((long) 378);
      jSONObject0.optBigDecimal("", bigDecimal1);
      jSONObject0.optInt((String) null, 872);
      jSONObject0.toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(enumeration0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UR&Iez3Q*[02&e`FX*", true);
      JSONObject jSONObject1 = new JSONObject(mockFileOutputStream0);
      jSONObject0.optJSONArray("UR&Iez3Q*[02&e`FX*");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 378;
      JSONObject jSONObject0 = new JSONObject(378);
      String string0 = "shortValueExact";
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (double) 378);
      jSONObject1.accumulate("shortValueExact", jSONObject0);
      Character character0 = Character.valueOf('U');
      try { 
        jSONObject1.putOnce("shortValueExact", character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"shortValueExact\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)51;
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.increment("[A~!aG+4M}([E");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONObject.wrap(jSONArray0);
      JSONObject jSONObject2 = jSONObject0.put("[A~!aG+4M}([E", (int) (byte)16);
      jSONObject2.putOnce("int", (Object) null);
      assertFalse(jSONObject0.isEmpty());
      
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.MESSAGE_DIGEST;
      Character character0 = new Character('u');
      hashMap0.put(cryptoPrimitive0, character0);
      CryptoPrimitive cryptoPrimitive1 = CryptoPrimitive.STREAM_CIPHER;
      Character character1 = Character.valueOf('K');
      hashMap0.put(cryptoPrimitive1, character1);
      Double double0 = new Double(0.0);
      JSONObject.getNames((Object) null);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "intern");
      HashMap<SortOrder, MockFileInputStream> hashMap0 = new HashMap<SortOrder, MockFileInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("intern", (Map<?, ?>) hashMap0);
      jSONObject1.put("Null pointer", (-1L));
      jSONObject1.accumulate("Null pointer", jSONObject0);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      jSONObject0.put("E", (Map<?, ?>) hashMap0);
      jSONObject0.optBoolean("E");
      jSONObject0.toString(1260);
      try { 
        Short.valueOf("JBaG_Rz Q", 1260);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1260 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<SortOrder, MockFileInputStream> hashMap0 = new HashMap<SortOrder, MockFileInputStream>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.writeValue(stringWriter0, jSONObject0, 87, 87);
      jSONObject0.put("@", (Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "iskeySet";
      stringArray0[1] = "g";
      stringArray0[2] = ".";
      stringArray0[3] = "zV;.(r0V:Q?H7*";
      stringArray0[4] = "RR2g";
      stringArray0[5] = "getDeclaringClass";
      pipedWriter0.flush();
      stringArray0[6] = "Cj:}wFTm0*WrjP41\"";
      stringArray0[7] = "$5c@E[)g,#k";
      stringArray0[8] = "isisEmpty";
      JSONObject jSONObject0 = new JSONObject(pipedWriter0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONPointer0.toURIFragment();
      jSONPointer0.toString();
      jSONObject0.query(jSONPointer0);
      jSONObject0.put(".", (-2145.163226197962));
      try { 
        jSONObject0.put("zV;.(r0V:Q?H7*", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)51;
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.increment("[A~!aG+4M}([E");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONObject.wrap(jSONArray0);
      JSONObject jSONObject2 = jSONObject0.put("[A~!aG+4M}([E", (int) (byte)16);
      jSONObject2.putOnce("int", (Object) null);
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.STREAM_CIPHER;
      Character character0 = Character.valueOf('K');
      hashMap0.put(cryptoPrimitive0, character0);
      jSONObject2.opt(".");
      jSONObject1.putOpt("[A~!aG+4M}([E", ".");
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (double) 378);
      JSONObject jSONObject2 = new JSONObject((Object) "shortValueExact");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("shortValueExact", (Writer) charArrayWriter0);
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject4 = new JSONObject(jSONObject1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Double double0 = new Double(0.0);
      Float float0 = new Float(0.0);
      Object object0 = JSONObject.wrap(double0);
      JSONObject.testValidity(object0);
      String string0 = JSONObject.doubleToString((-2843.5192184146294));
      assertEquals("-2843.5192184146294", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_WRAP;
      Character.valueOf('t');
      Character character0 = Character.valueOf('t');
      hashMap0.put(cryptoPrimitive0, character0);
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "shortValueExact";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = jSONObject2.putOpt("shortValueExact", (Object) null);
      JSONObject jSONObject4 = new JSONObject(jSONObject3, stringArray0);
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONObject4.accumulate("shortValueExact", jSONArray0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 378);
      BigDecimal bigDecimal1 = jSONObject3.optBigDecimal("getDeclaringClass", bigDecimal0);
      assertEquals((short)378, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "shortValueExact";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = jSONObject2.putOpt("shortValueExact", (Object) null);
      JSONObject jSONObject4 = new JSONObject(jSONObject3, stringArray0);
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONObject4.accumulate("shortValueExact", jSONArray0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 378);
      BigDecimal bigDecimal1 = jSONObject3.optBigDecimal("shortValueExact", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject(fileSystemHandling0, stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-3023L));
      jSONObject0.optBigDecimal("&[aZ/riw)h#v@0kj", bigDecimal0);
      jSONObject1.optInt((String) null, 872);
      jSONObject0.toString();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Double double0 = new Double(0.04881183970259957);
      Float float0 = new Float(0.04881183970259957);
      JSONObject.testValidity(double0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "2086..";
      stringArray0[1] = "PGPYF($/O#i@%m$";
      stringArray0[2] = "?DmYM[T";
      stringArray0[3] = ".";
      stringArray0[4] = "Missing value";
      stringArray0[5] = "Expected a ',' or ']'";
      stringArray0[6] = "isreadLine";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONObject0.accumulate("isreadLine", float0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optBigDecimal("isreadLine", bigDecimal0);
      StringReader stringReader0 = new StringReader(".");
      Object object1 = JSONObject.wrap("isreadLine");
      assertEquals("isreadLine", object1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (double) 378);
      JSONObject jSONObject2 = new JSONObject((Object) "shortValueExact");
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.SIGNATURE;
      Character character0 = Character.valueOf('^');
      hashMap0.put(cryptoPrimitive0, character0);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.putOpt("14{GnS6rjOAw6[..", "shortValueExact");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "EeXr.mxKuJdBD/|&=";
      stringArray0[1] = "!H3zNnmHc_oN\"V";
      stringArray0[2] = "tri";
      stringArray0[3] = "!H3zNnmHc_oN\"V";
      stringArray0[4] = "shortValueExact";
      stringArray0[5] = "F,!ZApq$";
      JSONObject jSONObject4 = new JSONObject(jSONObject1, stringArray0);
      jSONObject1.toString();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONObject0.accumulate("BZj$>cDonjWU>Z [7", jSONObject4);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BigDecimal bigDecimal1 = new BigDecimal((-161.35094996517));
      jSONObject1.optBigDecimal("shortValueExact", bigDecimal1);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GN4k", "GN4k");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.optNumber("GN4k", (Number) bigDecimal0);
      jSONObject1.optInt("GN4k", (-4050));
      JSONObject.getNames(jSONObject0);
      HashMap<Component.BaselineResizeBehavior, PseudoColumnUsage> hashMap0 = new HashMap<Component.BaselineResizeBehavior, PseudoColumnUsage>();
      hashMap0.entrySet();
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("-0");
      JSONObject jSONObject1 = new JSONObject();
      Locale locale1 = Locale.GERMANY;
      Character character0 = new Character('2');
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_WRAP;
      Character character1 = Character.valueOf('t');
      hashMap0.put(cryptoPrimitive0, character1);
      JSONObject jSONObject2 = new JSONObject();
      String string0 = "!H3zNnmHc_oN\"V";
      jSONObject2.putOpt("-0", "!H3zNnmHc_oN\"V");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "!H3zNnmHc_oN\"V";
      stringArray0[1] = "!H3zNnmHc_oN\"V";
      stringArray0[2] = "-0";
      jSONObject1.optBigDecimal("!H3zNnmHc_oN\"V", (BigDecimal) null);
      jSONObject0.optInt("getlength", (-3362));
      jSONObject1.toString();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      linkedList0.listIterator();
      int int0 = (-3345);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject((-3345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3345
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote((String) null, (Writer) stringWriter0);
      JSONObject.writeValue(stringWriter0, (Object) null, 50, 40);
      assertEquals("\"\"null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (double) 378);
      JSONObject jSONObject2 = new JSONObject((Object) "shortValueExact");
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject2.put("shortValueExact", (-5361));
      jSONObject1.optNumber("shortValueExact");
      jSONObject2.toString();
      assertEquals(3, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject.stringToValue("-&E:$2h=[tA2)mSsu");
      JSONObject.quote("-&E:$2h=[tA2)mSsu");
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = "!4";
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("B.");
      assertEquals("B.", object0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject.stringToValue("E@5x4");
      JSONObject.quote("E@5x4");
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 58);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject.doubleToString(1270.0979581420947);
      Number number0 = JSONObject.stringToNumber("1270.0979581420947");
      assertEquals((byte) (-10), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject.isDecimalNotation("].");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ys `EuX";
      stringArray0[1] = "].";
      stringArray0[2] = "";
      stringArray0[4] = "].";
      stringArray0[5] = "].";
      stringArray0[6] = "].";
      stringArray0[7] = "";
      HashMap<LineNumberReader, GroupLayout.Alignment> hashMap0 = new HashMap<LineNumberReader, GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optNumber("");
      jSONObject0.toString();
      jSONObject0.toString(92);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HashMap<CryptoPrimitive, Character> hashMap1 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_WRAP;
      Character character0 = Character.valueOf('t');
      hashMap1.put(cryptoPrimitive0, character0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("pointer cannot be null", cryptoPrimitive0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pointer cannot be null";
      stringArray0[1] = "pointer cannot be null";
      stringArray0[2] = "!H3zNnmHc_oN\"V";
      stringArray0[3] = "!H3zNnmHc_oN\"V";
      stringArray0[4] = "!H3zNnmHc_oN\"V";
      stringArray0[5] = "pointer cannot be null";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONObject2.accumulate("pointer cannot be null", (Object) null);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("gMg`7*y1h.QtGb.  ", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "GWN4k";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("GWN4k", (Map<?, ?>) null);
      int int0 = 305;
      try { 
        jSONObject0.putOnce("GWN4k", "GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"GWN4k\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("value [%s] is not an array or object therefore its key %s cannot be resolved", fileSystemHandling0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject0.optNumber("GWN4k");
      jSONObject0.toString();
      jSONObject1.toString((-490));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "shortValueExact");
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      jSONObject0.toString(1);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("GWN4k", false);
      Map<String, Object> map0 = jSONObject1.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("6/O_Y>]74]T@", "6/O_Y>]74]T@");
      jSONObject0.similar("6/O_Y>]74]T@");
      try { 
        jSONObject0.append("6/O_Y>]74]T@", "6/O_Y>]74]T@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[6/O_Y>]74]T@] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = jSONObject0.similar(stringWriter0);
      assertFalse(boolean0);
      
      JSONObject.indent(stringWriter0, 1847);
      jSONObject0.put("shortValueExact", (double) 378);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", 2973.230327);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "shortValueExact";
      long long0 = jSONObject0.optLong("shortValueExact", (-1447L));
      assertEquals(2973L, long0);
      
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.toString();
      JSONArray jSONArray0 = jSONObject2.names();
      jSONObject0.accumulate("shortValueExact", "java.io.StringWriter@0000000018");
      JSONObject.testValidity(jSONArray0);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("-0");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.isDecimalNotation("-0");
      BigDecimal bigDecimal0 = new BigDecimal((-489L));
      bigDecimal0.setScale(9);
      jSONObject0.optBigDecimal("-0", bigDecimal0);
      locale0.stripExtensions();
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("-0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      JSONObject.stringToValue("isNaN");
      JSONObject jSONObject3 = jSONObject1.put("-0", 113);
      assertSame(jSONObject1, jSONObject3);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("-0");
      JSONObject jSONObject2 = new JSONObject();
      Locale locale1 = Locale.GERMANY;
      Character character0 = new Character('2');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_WRAP;
      Character character1 = Character.valueOf('t');
      hashMap0.put(cryptoPrimitive0, character1);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.putOpt("-0", "!H3zNnmHc_oN\"V");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "!H3zNnmHc_oN\"V";
      stringArray0[1] = "!H3zNnmHc_oN\"V";
      stringArray0[2] = "-0";
      JSONObject jSONObject4 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.toString();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONObject1.accumulate("org.json.JSONObject", jSONObject0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      jSONObject1.optBigDecimal("-0", bigDecimal0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GN4k", "GN4k");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = (BigDecimal)jSONObject1.optNumber("GN4k", (Number) bigDecimal0);
      jSONObject0.optBigDecimal("GN4k", bigDecimal1);
      assertFalse(jSONObject0.isEmpty());
      
      String string0 = (String)JSONObject.stringToValue("GN4k");
      assertEquals("GN4k", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "intern");
      HashMap<SortOrder, MockFileInputStream> hashMap0 = new HashMap<SortOrder, MockFileInputStream>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "intern");
      JSONObject jSONObject1 = jSONObject0.put("intern", (Map<?, ?>) hashMap0);
      jSONObject1.optFloat("intern", (-1.0F));
      try { 
        jSONObject0.getBigDecimal("intern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000023] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optNumber(";5(?b99$", (Number) bigDecimal0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ys `EuX";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "ys `EuX";
      stringArray0[4] = "ys `EuX";
      BigDecimal bigDecimal1 = new BigDecimal(0L);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.toString();
      jSONObject0.optFloat("", (float) 378);
      jSONObject0.accumulate("t3cOk", "t3cOk");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      float float0 = jSONObject0.optFloat("Ua=8ev2?CD@u`mX^t");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "].");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ys `EuX";
      stringArray0[1] = "].";
      stringArray0[2] = "";
      stringArray0[4] = "].";
      stringArray0[5] = "].";
      stringArray0[6] = "].";
      stringArray0[7] = "";
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0, stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 872);
      jSONObject0.optBigDecimal("].", bigDecimal0);
      jSONObject0.optInt("p9EA\"JC;", 872);
      jSONObject0.toString();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(56);
      jSONObject0.optQuery("");
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject.stringToValue("");
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000001", (Object) pipedOutputStream0);
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      jSONObject1.put("java.io.StringWriter@0000000001", (Collection<?>) linkedList0);
      JSONObject.quote("w4:EjN&v");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.getNames(jSONObject2);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject2.putOnce("int", jSONObject1);
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        JSONObject.stringToNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E@5x4", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.close();
      JSONObject jSONObject0 = new JSONObject(mockPrintStream0);
      mockPrintStream0.println((-1L));
      jSONObject0.optString("/");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      JSONObject.testValidity(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
      locale0.getDisplayScript();
      jSONObject0.isEmpty();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("intern", 2867L);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("intern");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 1847);
      jSONObject0.put("shortValueExact", (double) 378);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", 2973.23032744);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "shortValueExact";
      jSONObject0.optLong("shortValueExact", (-1447L));
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.names();
      jSONObject0.accumulate("shortValueExact", "shortValueExact");
      JSONObject jSONObject3 = jSONObject0.put(">af#5+mKZ0.", 0L);
      assertFalse(jSONObject3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("[A~!aG+4M}([E");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONObject.wrap(jSONArray0);
      String string0 = jSONObject1.toString(911);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject.stringToValue("");
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "java.io.StringWriter@0000000001";
      stringArray0[4] = "java.io.StringWriter@0000000001";
      stringArray0[5] = "java.io.StringWriter@0000000001";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      JSONObject jSONObject1 = new JSONObject(dataOutputStream0, stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      jSONObject0.optBigDecimal("java.io.StringWriter@0000000001", bigDecimal0);
      jSONObject1.optInt((String) null, (int) (short)123);
      try { 
        jSONObject1.get("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject1 = jSONObject0.append("getintern", fileSystemHandling0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object0 = JSONObject.wrap(byteArrayOutputStream0);
      assertNotNull(object0);
      
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      jSONObject1.optEnum(class0, "java.io.ByteArrayOutputStream@0000000008", authenticator_RequestorType0);
      String string0 = "s8m)|U}q0cDS6A";
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, "getintern");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject.doubleToString(1270.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2576.476083211851);
      assertEquals("2576.476083211851", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Double double0 = new Double(203.715024699772);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        JSONObject.stringToNumber("_/\":acF$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [_/\":acF$] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = JSONObject.doubleToString((-2564.66158));
      assertEquals("-2564.66158", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, Dialog.ModalityType> hashMap0 = new HashMap<Short, Dialog.ModalityType>();
      jSONArray0.join("GO='&8W00!O-");
      short short0 = (short)1826;
      Short short1 = new Short((short)1826);
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      hashMap0.put(short1, dialog_ModalityType0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jSONArray0.put((Map<?, ?>) hashMap0);
      JSONObject.getNames((Object) jSONArray0);
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 1847);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (double) 378);
      jSONObject0.put("shortValueExact", 2973.23032744);
      JSONObject jSONObject2 = new JSONObject(1847);
      jSONObject2.append("shortValueExact", stringWriter0);
      JSONObject.wrap((Object) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap("getintern");
      JSONObject jSONObject3 = jSONObject1.put("getintern", (-2640.18055497153));
      assertFalse(jSONObject3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
      
      jSONObject0.toString();
      Object object1 = JSONObject.stringToValue("Unable to read thenext character from the strem");
      assertEquals("Unable to read thenext character from the strem", object1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("GWN4k", "GWN4k");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertNotNull(string0);
      
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.quote("w4:EjN&v");
      JSONObject.getNames(jSONObject0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      JSONObject jSONObject1 = new JSONObject((Object) "");
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject2 = new JSONObject(1);
      jSONObject2.write((Writer) mockPrintWriter1);
      bigInteger0.intValue();
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)51;
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_AGREEMENT;
      Character character0 = new Character('(');
      hashMap0.put(cryptoPrimitive0, character0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("!H3zNnmHc_oN\"V", (Object) null);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.wrap(hashMap0);
      try { 
        jSONObject0.getJSONObject("[2t)JF(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("-0");
      JSONObject jSONObject1 = new JSONObject();
      Locale locale1 = Locale.GERMANY;
      locale1.getDisplayVariant(locale1);
      jSONObject0.get("-0");
      JSONObject jSONObject2 = new JSONObject(110);
      jSONObject1.optLong("", (-2181L));
      try { 
        jSONObject0.getBoolean(" line ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONObject0.optBigDecimal("wv4oshXrQ+GlNFoc", bigDecimal0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mXlq1['f)+");
      JSONObject jSONObject1 = jSONObject0.accumulate("mXlq1['f)+", pipedOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject1.optNumber("ENt<~2Cw0 )j86T");
      JSONObject jSONObject2 = new JSONObject(117);
      jSONObject2.toString();
      Integer integer0 = new Integer(117);
      jSONObject1.append("java.", "[{-e?h+\"");
      jSONObject0.entrySet();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.isNull("3%E1H*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      JSONObject.valueToString(boolean0);
      jSONObject0.toString();
      boolean boolean1 = jSONObject0.isNull("le");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) fileSystemHandling0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L>kTcIEg094tj";
      stringArray0[1] = "L>kTcIEg094tj";
      stringArray0[2] = "L>kTcIEg094tj";
      stringArray0[3] = "RUDn}vbiPO>`}=A}BJ";
      stringArray0[4] = "L>kTcIEg094tj";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Iterator<String> iterator0 = jSONObject1.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optLong("nex", (long) 17);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nex";
      stringArray0[1] = "nex";
      stringArray0[2] = "nex";
      stringArray0[3] = "nex";
      stringArray0[4] = "nex";
      stringArray0[5] = "nex";
      stringArray0[6] = "nex";
      stringArray0[7] = ")Q53";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString();
      jSONObject0.names();
      jSONObject0.accumulate("lon", "lon");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 1847);
      jSONObject0.put("shortValueExact", (double) 378);
      jSONObject0.put("shortValueExact", 2973.23032744);
      JSONObject jSONObject1 = new JSONObject(1847);
      jSONObject1.append("shortValueExact", stringWriter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object0 = JSONObject.wrap("getintern");
      assertEquals("getintern", object0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject.stringToValue("");
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      short short0 = (short)123;
      Short short1 = new Short((short)123);
      JSONObject.numberToString(short1);
      String string0 = "F][q#>1|I3Ep";
      // Undeclared exception!
      try { 
        Charset.forName("F][q#>1|I3Ep");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // F][q#>1|I3Ep
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Long long0 = new Long((-36872586));
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(45);
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      try { 
        jSONObject0.getEnum(class0, "getnextProbablePrime");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      Character.valueOf('T');
      HashMap<CryptoPrimitive, Character> hashMap1 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.MAC;
      Character character0 = new Character('R');
      hashMap1.put(cryptoPrimitive0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap1);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.optNumber("j>9wB[M#&?9Ndu%M}d");
      jSONObject1.toString();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(10);
      HashMap<MultipleGradientPaint.CycleMethod, DataInputStream> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, DataInputStream>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(913);
      JSONObject.quote("tr", (Writer) stringWriter0);
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      HashMap<Normalizer.Form, Byte> hashMap1 = new HashMap<Normalizer.Form, Byte>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Float float0 = new Float((double) 913);
      Object object0 = JSONObject.wrap(float0);
      assertEquals(913.0F, object0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(383);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, (-1484));
      jSONObject0.put("shortValueExact", (double) 383);
      jSONObject0.put("shortValueExact", 2973.23032744);
      String[] stringArray0 = new String[1];
      jSONObject0.optLong("shortValueExact", (-1447L));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Float float0 = new Float((-1.0F));
      JSONObject.wrap(float0);
      try { 
        JSONObject.stringToNumber("null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [null] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(378);
      JSONObject jSONObject1 = new JSONObject(stringWriter0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byteArrayInputStream0, stringArray0);
      String string0 = "T#e_>M]|/+Wlk]k";
      jSONObject0.length();
      String string1 = "B'pJ";
      // Undeclared exception!
      try { 
        jSONObject0.query("YA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONObject.quote("-\"Cmy[Uf");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "] is not an enum of type ";
      stringArray0[1] = "";
      stringArray0[2] = "] is not an enum of type ";
      stringArray0[3] = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[3] = "] is not an enum of type ";
      JSONObject jSONObject0 = new JSONObject(16);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("6/O_Y>]74]T@", (Object) null);
      jSONObject0.append("6/O_Y>]74]T@", "6/O_Y>]74]T@");
      JSONObject.isDecimalNotation("6/O_Y>]74]T@");
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      Character.valueOf('W');
      HashMap<CryptoPrimitive, Character> hashMap1 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.MAC;
      Character character0 = new Character('R');
      hashMap1.put(cryptoPrimitive0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap1);
      jSONObject0.put("j>9wB[M#&?9Ndu%M}d", (int) (byte)51);
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.getBoolean("j>9wB[M#&?9Ndu%M}d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(fileSystemHandling0);
      jSONObject0.isEmpty();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "Stepping back two steps is not supported";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string1 = ".";
      try { 
        jSONObject0.getLong(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("GWN4", "GWN4");
      long long0 = jSONObject1.optLong("GWN4", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 57);
      assertEquals("                                                         ", stringWriter0.toString());
      
      jSONObject0.put("UR&Iez3Q*[02&e`FX*", 380.8);
      jSONObject0.put("UR&Iez3Q*[02&e`FX*", 380.8);
      jSONObject0.optLong("UR&Iez3Q*[02&e`FX*", (long) 57);
      String string0 = JSONObject.doubleToString(380L);
      assertEquals("380", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt(">tg+", ">tg+");
      jSONObject1.accumulate(">tg+", ">tg+");
      JSONArray jSONArray0 = jSONObject0.getJSONArray(">tg+");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      Character.valueOf('W');
      HashMap<CryptoPrimitive, Character> hashMap1 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.MAC;
      Character character0 = new Character('R');
      hashMap1.put(cryptoPrimitive0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("j>9wB[M#&?9Ndu%M}d", (int) (byte)51);
      jSONObject1.optNumber("j>9wB[M#&?9Ndu%M}d");
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      jSONObject1.optLong("GWN4k");
      JSONObject.doubleToString(0L);
      try { 
        JSONObject.stringToNumber("GWN4k");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [GWN4k] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-37);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject(110);
      String string0 = "^OTDV:zN{!M";
      jSONObject0.optLong("^OTDV:zN{!M", (long) (byte) (-37));
      jSONObject0.optLong("^OTDV:zN{!M");
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONObject("^OTDV:zN{!M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.append("getintern", fileSystemHandling0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      jSONObject0.remove("");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("GWN4k", (Object) null);
      jSONObject0.putOpt("GWN4k", "GWN4k");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 1847);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (double) 378);
      JSONObject jSONObject2 = jSONObject0.put("shortValueExact", 2973.23032744);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "shortValueExact";
      jSONObject0.optLong("shortValueExact", (-1447L));
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      jSONObject3.toString();
      jSONObject3.names();
      JSONObject jSONObject4 = jSONObject0.accumulate("shortValueExact", "java.io.StringWriter@0000000018");
      assertSame(jSONObject4, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      HashMap<SortOrder, MockFileInputStream> hashMap0 = new HashMap<SortOrder, MockFileInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("\f", "\f");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 1847);
      jSONObject0.put("shortValueExact", (double) 378);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", 2973.23032744);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "shortValueExact";
      jSONObject0.optLong("v)3>}HdSCBC", (-1447L));
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.toString();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject2.length());
      
      jSONObject2.names();
      JSONObject jSONObject3 = jSONObject0.accumulate("v)3>}HdSCBC", "java.io.StringWriter@0000000018");
      assertNotSame(jSONObject3, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "].");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 0L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.toString(17);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("Nesting too deep.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-37);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject(110);
      String string0 = "^OTDV:zN{!M";
      jSONObject0.optLong("^OTDV:zN{!M", (long) (byte) (-37));
      try { 
        jSONObject0.getJSONObject("^OTDV:zN{!M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(127);
      Object object0 = JSONObject.wrap(stringWriter0);
      assertNotNull(object0);
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      Class<RoundingMode> class0 = RoundingMode.class;
      try { 
        jSONObject0.getEnum(class0, ")%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] is not an enum of type java.io.StringWriter@0000000004.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      String string0 = "F71}S}\\tT)[Nn.1E{C";
      stringArray0[0] = "F71}S}\tT)[Nn.1E{C";
      stringArray0[1] = "Q!o*2$.";
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0, stringArray0);
      jSONObject0.put("Q!o*2$.", 0.0);
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      Locale locale0 = Locale.TAIWAN;
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONObject1.optEnum(class0, "F71}S}\tT)[Nn.1E{C");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("F71}S}\tT)[Nn.1E{C", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name F71}S}\tT)[Nn.1E{C, locale zh_TW
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject.numberToString(bigInteger0);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) null);
      jSONArray0.toJSONObject(jSONArray1);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keySet();
      Locale locale1 = Locale.GERMANY;
      locale1.getDisplayVariant(locale1);
      JSONObject jSONObject1 = new JSONObject(110);
      jSONObject0.optLong("", (-2181L));
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer(")mBOf$d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONObject.stringToValue("");
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000001", (Object) pipedOutputStream0);
      JSONObject.quote("w4:EjN&v");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.getNames(jSONObject2);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.toString(38);
      try { 
        jSONObject1.getJSONArray("u?D)]J<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal((String) null, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "].");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ys `EuX";
      stringArray0[1] = "].";
      stringArray0[2] = "";
      stringArray0[3] = "].";
      stringArray0[4] = "].";
      stringArray0[5] = "].";
      stringArray0[6] = "].";
      stringArray0[7] = "";
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0, stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 872);
      jSONObject0.optBigDecimal("true", bigDecimal0);
      jSONObject0.optInt("p9EA\"JC;", 872);
      try { 
        jSONObject0.get("].");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)49);
      JSONObject jSONObject1 = jSONObject0.accumulate("isreadUnsignedByte", byte0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject1.optBigDecimal("isreadUnsignedByte", bigDecimal0);
      assertEquals(1, jSONObject0.length());
      
      StringReader stringReader0 = new StringReader("");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, (byte)49);
      Object object1 = JSONObject.NULL;
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E@5x4", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.close();
      JSONObject jSONObject0 = new JSONObject(mockPrintStream0);
      jSONObject0.optString("/");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1354);
      bufferedOutputStream0.flush();
      try { 
        jSONObject0.get("dqjrN#E;d!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Short> hashMap0 = new HashMap<TrayIcon.MessageType, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.get("\"A<g@_d%@?<Sy)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = JSONObject.doubleToString(2576.476083211851);
      assertEquals("2576.476083211851", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("]}", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject1.optNumber("GWN4k");
      jSONObject0.toString();
      jSONObject1.toString(946);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-37);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_AGREEMENT;
      Character character0 = Character.valueOf('(');
      hashMap0.put(cryptoPrimitive0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("j>9wB[M#&?9Ndu%M}d", 10);
      jSONObject0.optNumber("j>9wB[M#&?9Ndu%M}d");
      jSONObject1.toString();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      String string0 = "#!A>~+u'<Kz%!J]#T";
      MockFile mockFile0 = new MockFile("#!A>~+u'<Kz%!J]#T");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.close();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.optString("/");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 92);
      bufferedOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      mockPrintStream0.print('X');
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      JSONObject.writeValue(mockPrintWriter0, locale_FilteringMode0, 34, 0);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("gettoString");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, Dialog.ModalityType> hashMap0 = new HashMap<Short, Dialog.ModalityType>();
      jSONArray0.join("GO='&8W00!O-");
      Short short0 = new Short((short)1826);
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      hashMap0.put(short0, dialog_ModalityType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames(jSONObject0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.toString((int) (short)1826);
      Character character0 = new Character('\"');
      jSONObject0.putOnce("GO='&8W00!O-", character0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "E@5x4";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E@5x4", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string1 = "Bad value from toJSONString: ";
      try { 
        jSONObject0.getDouble("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("GWN4k", (Map<?, ?>) null);
      try { 
        jSONObject1.getBigDecimal("GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.append("getintern", fileSystemHandling0);
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONObject.doubleToString(2576.476083211851);
      JSONObject jSONObject0 = new JSONObject(11);
      jSONObject0.append("2576.476083211851", "2576.476083211851");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.putOpt("Stepping back two steps is not supported", (Object) null);
      try { 
        jSONObject0.getJSONArray("Stepping back two steps is not supported");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf("adu9 hi|J#q+UqTe");
      try { 
        jSONObject0.getBigInteger("adu9 hi|J#q+UqTe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-37);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_AGREEMENT;
      Character character0 = Character.valueOf('(');
      hashMap0.put(cryptoPrimitive0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("!H3zNnmHc_oN\"V", (Object) null);
      try { 
        jSONObject1.getBigInteger("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (double) 378);
      JSONObject jSONObject2 = new JSONObject((Object) "shortValueExact");
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.putOpt((String) null, "shortValueExact");
      jSONObject2.put("shortValueExact", (-5361));
      jSONObject1.optNumber("shortValueExact");
      jSONObject2.toString();
      assertEquals(3, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) " [character ");
      jSONObject1.optNumber((String) null);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Float float0 = new Float(36.30434400751221);
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("GWEq");
      try { 
        JSONObject.stringToNumber("get");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [get] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E@5x4", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.close();
      JSONObject jSONObject0 = new JSONObject(mockPrintStream0);
      jSONObject0.optString("/");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1354);
      bufferedOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockPrintStream0.print('l');
      JSONObject.writeValue(mockPrintWriter0, "/", 0, 1354);
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("xEQme|f7jeOI=@(7", 1376.2434F);
      double double0 = jSONObject1.optDouble((String) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Normalizer.Form, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Normalizer.Form, ProcessBuilder.Redirect.Type>();
      try { 
        jSONObject0.getFloat("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      String[] stringArray0 = new String[0];
      byteArrayInputStream0.read(byteArray0);
      JSONObject jSONObject0 = new JSONObject(byteArrayInputStream0, stringArray0);
      String string0 = "T#e_>M]|/+Wlk]k";
      try { 
        jSONObject0.getFloat("T#e_>M]|/+Wlk]k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 57);
      assertEquals("                                                         ", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GN4k", "GN4k");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.optNumber("GN4k", (Number) bigDecimal0);
      jSONObject1.toMap();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("intern", 2863L);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger("s@khkZ", bigInteger0);
      jSONObject1.toString();
      jSONObject0.optNumber("intern");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-37);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_AGREEMENT;
      Character character0 = Character.valueOf('(');
      hashMap0.put(cryptoPrimitive0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("j>9wB[M#&?9Ndu%M}d", 10);
      jSONObject0.optNumber("j>9wB[M#&?9Ndu%M}d");
      jSONObject0.put("j>9wB[M#&?9Ndu%M}d", (Map<?, ?>) hashMap0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONObject.stringToValue("");
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.increment("");
      String string0 = "\"";
      jSONObject2.toString();
      String string1 = " }dB:3wO{Gf{a=xOh$";
      try { 
        jSONObject0.getInt(" }dB:3wO{Gf{a=xOh$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "GWN4k";
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      // Undeclared exception!
      try { 
        jSONObject1.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.MESSAGE_DIGEST;
      Character character0 = new Character('(');
      hashMap0.put(cryptoPrimitive0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames(jSONObject0);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONObject.stringToValue("1ES+xfX_EcOLgjq");
      Boolean boolean0 = new Boolean("1ES+xfX_EcOLgjq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "ineern");
      HashMap<SortOrder, MockFileInputStream> hashMap0 = new HashMap<SortOrder, MockFileInputStream>();
      try { 
        jSONObject0.getBigDecimal("ineern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject.stringToValue("");
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E@5x4", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.close();
      JSONObject jSONObject0 = new JSONObject(mockPrintStream0);
      jSONObject0.optString("/");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1354);
      bufferedOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockPrintStream0.print('l');
      JSONObject.writeValue(mockPrintWriter0, "/", 0, 1354);
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONObject.quote("");
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 13, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = " zE?;Rb";
      JSONTokener jSONTokener0 = new JSONTokener(" zE?;Rb");
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      jSONObject0.put(" zE?;Rb", (Collection<?>) linkedList0);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      jSONTokener0.toString();
      // Undeclared exception!
      try { 
        jSONObject0.query(" zE?;Rb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      int int0 = 401;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("GWEq");
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      Double double0 = new Double(2141.197);
      JSONObject.valueToString(double0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      jSONObject0.put("shortValueExact", (double) 378);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString((-16.87760228669163));
      assertEquals("-16.87760228669163", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      
      jSONObject0.toMap();
      jSONObject0.toMap();
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "intern");
      assertEquals(2, jSONObject0.length());
      
      HashMap<SortOrder, MockFileInputStream> hashMap0 = new HashMap<SortOrder, MockFileInputStream>();
      JSONObject jSONObject1 = new JSONObject();
      boolean boolean0 = JSONObject.isDecimalNotation("intern");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = JSONObject.isDecimalNotation("isready");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "isready";
      stringArray0[1] = "isready";
      stringArray0[2] = "isready";
      stringArray0[3] = "isready";
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0, stringArray0);
      int int0 = jSONObject0.optInt("mar", 6);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      HashMap<PipedInputStream, Object> hashMap0 = new HashMap<PipedInputStream, Object>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("] could not be converted to BigDecimal.", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Integer.valueOf(1613);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\\";
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileReader0);
      jSONObject0.isEmpty();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject.stringToValue("");
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.pow(135);
      JSONObject.numberToString(bigInteger0);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      bigInteger0.intValue();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("length");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      int int0 = 378;
      JSONObject jSONObject0 = new JSONObject(378);
      String string0 = "org.json.JSONException";
      try { 
        jSONObject0.getDouble("org.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("GWN4k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      long long0 = jSONObject0.optLong("^OTDV:zN{!M", (long) 378);
      assertEquals(378L, long0);
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("^OTDV:zN{!M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.JAPANESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      JSONObject.isDecimalNotation(":&W&,@n");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (float) 378);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0, (-25), 32);
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      jSONObject0.optEnum(class0, "GWN4k", trayIcon_MessageType0);
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
      try { 
        jSONObject1.getBoolean("GWN4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-0", (-2069L));
      JSONObject jSONObject1 = jSONObject0.increment("-0");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      
      boolean boolean0 = JSONObject.isDecimalNotation("-0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "intern");
      HashMap<SortOrder, MockFileInputStream> hashMap0 = new HashMap<SortOrder, MockFileInputStream>();
      jSONObject0.put("intern", (Map<?, ?>) hashMap0);
      try { 
        JSONObject.stringToNumber("intern");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [intern] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("GWN4", "GWN4");
      try { 
        jSONObject1.getJSONArray("GWN4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("E", (Map<?, ?>) hashMap0);
      jSONObject0.optBoolean("E");
      JSONObject.getNames(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      boolean boolean0 = jSONObject0.optBoolean("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("s/|&CPAbHhMYxZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "intern");
      HashMap<SortOrder, MockFileInputStream> hashMap0 = new HashMap<SortOrder, MockFileInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("intern", (Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.put("intern", (-1893.6205F));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("E", (Map<?, ?>) hashMap0);
      jSONObject0.optBoolean("E");
      JSONObject.isDecimalNotation(":&W&,@n");
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (float) 378);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      HashMap<Proxy.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Proxy.Type, ProcessBuilder.Redirect.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.WRITE;
      hashMap0.putIfAbsent(proxy_Type0, processBuilder_Redirect_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("get", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name get, locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = "-0";
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("-0", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name -0, locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("eC#Nj?GMFI!T{F-/[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.stringToValue("8");
      assertEquals(8, object0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("60\"A2oMv;/>COpR<z*", "6/O_Y>]74]T@");
      String string0 = "isreadInt";
      jSONObject0.put("isreadInt", (-1753L));
      try { 
        jSONObject0.increment("60\"A2oMv;/>COpR<z*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000014].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject.stringToValue("9@^lLh%i");
      JSONObject.quote("6nHj]C4w@n84`{");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("getlength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-0", (-2069L));
      JSONObject jSONObject1 = jSONObject0.increment("-0");
      JSONObject jSONObject2 = new JSONObject();
      Character character0 = new Character('2');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("E");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      JSONObject.doubleToString((-127.1121));
      boolean boolean0 = jSONObject1.has("E");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      JSONObject.stringToValue("");
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject0.put("java.io.StringWriter@0000000001", (Object) pipedOutputStream0);
      jSONObject0.increment("");
      String string0 = "\"";
      String string1 = " }dB:3wO{Gf{a=xOh$";
      try { 
        jSONObject0.getInt(" }dB:3wO{Gf{a=xOh$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getLong("java.io.StringWriter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("(!?'P'iJT'", false);
      jSONObject0.optNumber("Misplaced array.");
      jSONObject0.toMap();
      jSONObject0.optString("[F6P", "tg(O&~6dqp");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, BigInteger> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.toMap();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(375);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 57);
      jSONObject0.put("UR&Iez3Q*[02&e`FX*", 380.8);
      jSONObject0.put("UR&Iez3Q*[02&e`FX*", 380.8);
      HashMap<DataInputStream, StandardProtocolFamily> hashMap0 = new HashMap<DataInputStream, StandardProtocolFamily>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("UR&Iez3Q*[02&e`FX*", bigInteger0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger("6/O_Y>]74]T@", bigInteger0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1613);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\\";
      stringArray0[1] = "org.json.JSONObject$1";
      stringArray0[2] = "\t";
      stringArray0[3] = "";
      stringArray0[4] = "&ae";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("j)bQGIJg91s6..}P'M", bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a JSONArray.";
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal0.negate();
      MathContext mathContext0 = MathContext.UNLIMITED;
      mathContext0.getRoundingMode();
      bigDecimal0.divideToIntegralValue(bigDecimal1, mathContext0);
      bigDecimal1.divideToIntegralValue(bigDecimal0);
      bigDecimal0.max(bigDecimal1);
      jSONObject0.optNumber("] is not a JSONArray.", (Number) bigDecimal0);
      String string1 = "]aUJXU#I'@zZYGf'o";
      try { 
        jSONObject0.getBoolean("]aUJXU#I'@zZYGf'o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(bigInteger0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("6/O_Y>]74]T@", "6/O_Y>]74]T@");
      jSONObject0.put("6/O_Y>]74]T@", false);
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
      JSONObject.quote((String) null);
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, 146);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      HashMap<Proxy.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Proxy.Type, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(114);
      jSONObject0.increment("@");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      HashMap<BigInteger, Month> hashMap0 = new HashMap<BigInteger, Month>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-4167));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -4167
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int int0 = (-167);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-167));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -167
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "GWN4k");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", (Object) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject1.optNumber("w*o]x=A_O");
      jSONObject0.toString();
      jSONObject1.optLong("w*o]x=A_O");
      jSONObject1.toString(92);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "!Jk";
      stringArray0[1] = "isshortValueExact";
      stringArray0[2] = "Z5FylLo@\"Nx]~no";
      stringArray0[3] = "org.json.JSONTokener";
      stringArray0[4] = "-";
      stringArray0[5] = "6";
      stringArray0[6] = "ul:jqj>@KXCj";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.append("getintern", fileSystemHandling0);
      String string0 = jSONObject0.toString(64);
      String string1 = JSONObject.numberToString(bigInteger0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("GWN4k", "GWN4k");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject0.optNumber("GWN4k");
      jSONObject0.toString();
      jSONObject1.toString(92);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject0.accumulate("GWN4k", "GWN4k");
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream1);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject();
      MockFileWriter mockFileWriter0 = new MockFileWriter("GWN4k");
      JSONObject.stringToValue("GWN4k");
      jSONObject0.toString(46);
      try { 
        jSONObject0.getString("{#Gb$x; {63</x~TPM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("GWN4k", "GWN4k");
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject.numberToString(bigInteger0);
      try { 
        JSONObject.stringToNumber("java.math.BigInteger@0000000001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [java.math.BigInteger@0000000001] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Long long0 = new Long((-36872586));
      HashMap<ObjectOutputStream, Locale.Category> hashMap0 = new HashMap<ObjectOutputStream, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String[] stringArray0 = new String[3];
      jSONObject0.put("P;Q=N0:'RY*b81", (Object) null);
      stringArray0[0] = ">o]8";
      stringArray0[1] = "gethashCode";
      stringArray0[2] = "3_[12g/~";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject1.toString((-36872586));
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      String string0 = JSONObject.valueToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.pow(135);
      JSONObject.numberToString(bigInteger0);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      bigInteger0.intValue();
      jSONObject0.toString(135);
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = (-1841);
      try { 
        pipedWriter0.append('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("gfO{ZZ,", (Map<?, ?>) hashMap0);
      jSONObject1.optBoolean("getshortValueExact");
      JSONObject.isDecimalNotation("E");
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      JSONObject jSONObject1 = jSONObject0.put("y;>K]+m~ Ow", (-2577.80332484925));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("x[CW@ q`Cg.CxUx", false);
      JSONObject jSONObject2 = new JSONObject(mockFileOutputStream0);
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      jSONObject0.put("getBytes", (long) 10);
      jSONObject2.optLong("x[CW@ q`Cg.CxUx", 0L);
      jSONObject1.optJSONArray("getgetBytes");
      jSONObject2.optInt("y;>K]+m~ Ow", 378);
      jSONObject0.optBoolean("y;>K]+m~ Ow", false);
      Object object0 = JSONObject.stringToValue("getisEmpty");
      assertEquals("getisEmpty", object0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, (-226), mathContext0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOnce("Missing value", object0);
      jSONObject1.names();
      jSONObject1.optBigInteger("Missing value", bigInteger1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("8");
      assertEquals(8, object0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "8");
      String string0 = jSONObject0.optString("8");
      assertEquals("", string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = "E@5x4";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E@5x4", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.close();
      JSONObject jSONObject0 = new JSONObject(mockPrintStream0);
      String string1 = "/";
      jSONObject0.optString("/");
      int int0 = 1354;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1354);
      bufferedOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      int int1 = 0;
      mockPrintStream0.print('l');
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1714));
      try { 
        jSONObject0.getString("java.io.StringWriter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String[] stringArray0 = new String[13];
      JSONObject jSONObject0 = new JSONObject("javax.", stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("gettoMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("i reqFloat");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "javax.";
      stringArray0[1] = "";
      stringArray0[2] = "null";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "5\"NrS0Nr";
      stringArray0[6] = "false";
      stringArray0[7] = "] is not an enum of type ";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_AGREEMENT;
      Character character0 = Character.valueOf('(');
      hashMap0.put(cryptoPrimitive0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optNumber("j>9wM6&?9Ndu%M}d");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(828L);
      JSONObject.wrap(bigDecimal0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "shortValueExact");
      JSONObject jSONObject1 = new JSONObject();
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (double) 378);
      JSONObject jSONObject2 = new JSONObject((Object) "shortValueExact");
      HashMap<CharArrayReader, Double> hashMap0 = new HashMap<CharArrayReader, Double>();
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject3.increment("G|!8");
      JSONObject jSONObject4 = new JSONObject(jSONObject1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, BigInteger> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.append("getintern", "getintern");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(hashMap0);
      jSONObject0.entrySet();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(861L);
      Object object0 = JSONObject.wrap(bigDecimal0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 48, (-1595));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      JSONObject.stringToValue("");
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject0.put("java.io.StringWriter@0000000001", (Object) pipedOutputStream0);
      JSONObject.quote("w4:EjN&v");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames(jSONObject1);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      JSONObject.doubleToString((-1188.9979066));
      try { 
        JSONObject.stringToNumber("/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [/] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(118);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optNumber("t\"d/J1 $4Lx", (Number) bigDecimal0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.doubleToString(2086.1917);
      Number number0 = JSONObject.stringToNumber("2086.1917");
      assertEquals(2086.1917, number0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = "org.json.JSONArray";
      try { 
        JSONObject.stringToNumber("org.json.JSONArray");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [org.json.JSONArray] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("gettoLanguageTag");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [gettoLanguageTag] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("omE6C[+3r;<");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("_I %>KLqe[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = "zE?;Rb";
      JSONTokener jSONTokener0 = new JSONTokener("zE?;Rb");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }
}
