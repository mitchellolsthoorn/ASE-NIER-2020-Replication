/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 20:03:56 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.net.URI;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.security.KeyRep;
import java.sql.JDBCType;
import java.sql.PseudoColumnUsage;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.function.BiFunction;
import javax.jws.WebParam;
import javax.swing.DropMode;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.tools.DocumentationTool;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.query("/U6q:r8PR ");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BigInteger, String> hashMap0 = new HashMap<BigInteger, String>();
      JSONObject.stringToValue("kqER");
      jSONObject0.toString();
      jSONObject0.optString("kqER", (String) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Float float0 = new Float((-1429.0F));
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("Zn`P*iR/n", (double) (-1429.0F));
      Long long0 = new Long((-1L));
      JSONObject.wrap(long0);
      jSONObject0.optLong("by", 322L);
      Double double0 = new Double(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Zn`P*iR/n");
      Integer integer0 = new Integer(0);
      JSONObject.testValidity(integer0);
      jSONObject0.length();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<PipedInputStream, DocumentationTool.Location> hashMap0 = new HashMap<PipedInputStream, DocumentationTool.Location>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.keySet();
      jSONObject0.toMap();
      // Undeclared exception!
      try { 
        jSONObject0.getEnum((Class<PseudoColumnUsage>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("H-VzK~W.Yj", (double) 2686);
      JSONObject.getNames(jSONObject1);
      jSONObject1.optString("H-VzK~W.Yj", "] is not a JSONArray.");
      JSONObject jSONObject2 = new JSONObject((Object) "H-VzK~W.Yj");
      try { 
        jSONObject2.getJSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject.stringToValue("false");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "tL";
      try { 
        JSONObject.stringToNumber("tL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [tL] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(" line ", (Object) null);
      jSONObject0.similar(jSONObject1);
      jSONObject1.optInt(" line ");
      jSONObject0.getJSONArray(" line ");
      StringReader stringReader0 = new StringReader(" line ");
      jSONObject1.putOpt(" line ", stringReader0);
      jSONObject0.putOpt("Z)s+R:LY8vs.C=j,4i", " line ");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      jSONObject0.put("Zn`P*iR/n", false);
      try { 
        jSONObject0.getJSONObject("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      jSONObject0.put("Zn`P*iR/n", false);
      String string1 = "Ae\"n]\\tI}LK!K*IZ;/D";
      try { 
        jSONObject0.getJSONObject("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      Integer integer0 = new Integer(2686);
      jSONObject0.put("/w", (-1474.9341F));
      JSONObject jSONObject1 = jSONObject0.put("H-VzK~W.Yj", (double) 2686);
      JSONObject.getNames(jSONObject1);
      JSONObject.stringToValue("H-VzK~W.Yj");
      try { 
        jSONObject0.getJSONArray("H-VzK~W.Yj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.getNames((Object) "getgetBytes");
      JSONObject jSONObject1 = jSONObject0.increment("] could not convert to BigInteger.");
      JSONObject.isDecimalNotation("] could not convert to BigInteger.");
      jSONObject1.append("getreadInt", "?yWf");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigDecimal bigDecimal0 = new BigDecimal((-3185));
      jSONObject0.optNumber("] could not convert to BigInteger.", (Number) bigDecimal0);
      try { 
        jSONObject1.getString("?yWf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1429.0F));
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", (double) (-1429.0F));
      jSONObject1.accumulate("' and instead saw '", float0);
      JSONObject.wrap(float0);
      jSONObject0.optLong("Zn`P*iR/n", 322L);
      Double double0 = new Double(3059.0);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1264);
      String string0 = "\"";
      boolean boolean0 = false;
      Object object0 = JSONObject.NULL;
      JSONObject.wrap(object0);
      jSONObject0.put("\"", false);
      jSONObject0.put("]@gL", (float) 1264);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.parse("islength", (Map<String, List<String>>) hashMap0);
      // Undeclared exception!
      try { 
        Charset.forName("]@gL");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]@gL
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      Float float0 = new Float((-1429.0F));
      JSONObject.wrap(float0);
      jSONObject0.optLong("Zn`P*iR/n", 322L);
      jSONObject1.optFloat("Zn`P*iR/n", (float) 322L);
      jSONObject1.toString();
      Double double0 = new Double(3059.0);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      String[] stringArray0 = JSONObject.getNames((Object) "getgetBytes");
      JSONObject jSONObject1 = jSONObject0.increment("] could not convert to BigInteger.");
      JSONObject.isDecimalNotation("] could not convert to BigInteger.");
      JSONObject jSONObject2 = jSONObject1.append("getreadInt", "?yWf");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject3 = jSONObject2.put("i>J*", (float) 0);
      jSONObject3.write((Writer) charArrayWriter0, 0, 1);
      JSONObject jSONObject4 = new JSONObject(jSONObject1, stringArray0);
      JSONObject.getNames((Object) "getreadInt");
      jSONObject0.getDouble("] could not convert to BigInteger.");
      jSONObject0.optDouble("getreadInt");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        Charset.forName("to");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // to
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.getISOCountries();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optQuery("");
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      jSONObject0.put("", (Collection<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("intValue", "7F");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, 91);
      jSONObject1.putOnce((String) null, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      HashMap<LineNumberReader, Month> hashMap0 = new HashMap<LineNumberReader, Month>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("siz", hashMap0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)31;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)109, (byte) (-87));
      jSONObject1.similar(byteArrayInputStream0);
      jSONObject1.optInt("SOr4_[i#b>^C");
      jSONObject1.toString((int) (byte) (-64));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 57, (-1874));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("%", (-943));
      JSONObject jSONObject2 = new JSONObject();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject1.optBigInteger("%", bigInteger0);
      try { 
        JSONObject.stringToNumber("%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [%] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float((double) 0);
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject1.put("41#2[b60hG", 0.0F);
      jSONObject2.write((Writer) charArrayWriter2, 3, 3);
      JSONObject.stringToValue("Expected a ':' after a key");
      Locale.getISOCountries();
      try { 
        jSONObject1.getInt("] could not convert to BigInteger.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      JSONObject jSONObject1 = jSONObject0.append("w9H@", (Object) null);
      jSONObject0.similar(jSONObject1);
      JSONObject jSONObject2 = jSONObject1.putOpt("w9H@", (Object) null);
      jSONObject1.optInt("w9H@");
      JSONObject.doubleToString(0);
      jSONObject2.accumulate("w9H@", "");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("9", true);
      jSONObject1.putOnce("{7RdZa{wvha#_P8Zs", jSONObject0);
      BigDecimal bigDecimal0 = new BigDecimal(3720.8511655975867);
      jSONObject0.optNumber("is", (Number) bigDecimal0);
      try { 
        jSONObject0.getString("Zn`P|*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000002862] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", (-3345.2953822624613));
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject1.put("@XA-RQqA=-=qWIf:t", false);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toString(75);
      jSONObject1.put("java.io.StringWriter@0000000017", 1329.94F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.entrySet();
      JSONObject jSONObject1 = jSONObject0.put("c", (-3316.024234));
      BigDecimal bigDecimal0 = new BigDecimal((-2803.317));
      jSONObject1.optNumber("7n3A]?c*5bdSZ5kTs=E", (Number) bigDecimal0);
      try { 
        jSONObject0.getString("length");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      JSONObject jSONObject1 = jSONObject0.put("hashCode", true);
      jSONObject1.optInt("hashCode", 107);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      jSONObject0.optEnum(class0, "Zn`P|*iR/n");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P|*iR/n", false);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      jSONObject1.optNumber("Zn`P|*iR/n", (Number) bigDecimal0);
      try { 
        jSONObject0.getString("Zn`P|*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float float0 = new Float(2428.819365868);
      JSONObject.getNames((Object) float0);
      JSONObject.testValidity(float0);
      String string0 = "null";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      jSONObject0.put("c", (-3316.024234));
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      jSONObject0.increment("c");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "length");
      JSONObject jSONObject1 = jSONObject0.put("c", (-3316.024234));
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      jSONObject0.optDouble("Duplicate key \"", 1850.7268652600194);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject.wrap(bigDecimal0);
      jSONObject1.names();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("Zn`P|*iR/n", "Zn`P|*iR/n");
      jSONObject0.put("JSONArray initial value should be a string or collection or array.", false);
      jSONObject0.optLong("Zn`P|*iR/n", 0L);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P*iR/n", false);
      jSONObject0.optString("Zn`P*iR/n");
      JSONObject.valueToString("java.lang.Boolean@0000000003");
      HashMap<MultipleGradientPaint.ColorSpaceType, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, TrayIcon.MessageType>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ONE;
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.SRGB;
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.WARNING;
      hashMap0.replace(multipleGradientPaint_ColorSpaceType0, trayIcon_MessageType0);
      jSONObject0.optBigInteger("java.io.StringWriter@0000000008", bigInteger0);
      JSONObject jSONObject2 = jSONObject1.accumulate("java.lang.Boolean@0000000003", "java.lang.Boolean@0000000003");
      jSONObject2.optNumber("java.lang.Boolean@0000000003", (Number) bigInteger0);
      jSONObject2.optInt("T?}`", 40);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      Integer integer0 = new Integer(2686);
      JSONObject jSONObject1 = jSONObject0.put("H-VzK~W.Yj", (double) 2686);
      JSONObject.getNames(jSONObject1);
      JSONObject.stringToValue("H-VzK~W.Yj");
      jSONObject1.optJSONArray("H-VzK~W.Yj");
      jSONObject1.optDouble("H-VzK~W.Yj");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("null", false);
      JSONObject.stringToValue("po");
      try { 
        jSONObject0.getFloat("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`+P|*iRn";
      jSONObject0.put("Zn`+P|*iRn", true);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      jSONObject0.optEnum(class0, "Zn`+P|*iRn");
      try { 
        jSONObject0.getFloat("Zn`+P|*iRn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("", "");
      jSONObject0.optLong("zcyEjRfWcN BYRx`o", (-661L));
      JSONObject jSONObject1 = jSONObject0.put("", (Map<?, ?>) hashMap0);
      jSONObject1.entrySet();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<PipedWriter> linkedList0 = new LinkedList<PipedWriter>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      JSONObject jSONObject2 = jSONObject0.append("x#Id:Cv68\"b`y!Bh{9", mockPrintStream0);
      jSONObject2.similar(jSONObject0);
      jSONObject2.optInt("x#Id:Cv68\"b`y!Bh{9");
      jSONObject1.toString(0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "length");
      jSONObject0.put("length", (-3316.024234));
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      JSONObject.doubleToString(1850.7268652600194);
      MockFile mockFile0 = new MockFile("1850.7268652600194");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      jSONObject0.write((Writer) mockFileWriter0, (-22654515), (-22654515));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LineNumberReader, Month> hashMap0 = new HashMap<LineNumberReader, Month>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{l");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("", 0.0);
      jSONObject1.optDouble("", 695.7475569624);
      jSONObject0.optFloat("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      WebParam.Mode webParam_Mode0 = WebParam.Mode.IN;
      hashMap0.put(webParam_Mode0, (Long) null);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "{g,Tu?1kH";
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger("{g,Tu?1kH", bigInteger0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{g,Tu?1kH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      String string0 = "";
      int int0 = 32;
      StringWriter stringWriter0 = new StringWriter(32);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = '|';
      charArray0[2] = ')';
      charArray0[3] = '&';
      // Undeclared exception!
      try { 
        stringWriter1.write(charArray0, 32, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "length");
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject.doubleToString(1850.7268652600194);
      jSONObject1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.getNames((Object) "getgetBytes");
      JSONObject jSONObject1 = jSONObject0.increment("] could not convert to BigInteger.");
      jSONObject1.put("] is not a JSONObject.", (-1703.305399088798));
      jSONObject0.optDouble("etyeadIn", 215.756);
      JSONObject.isDecimalNotation("Null key.");
      jSONObject1.optNumber("] could not convert to BigInteger.");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optNumber("$+Bz>*M@uxV-CP`zFn", (Number) bigInteger0);
      jSONObject0.increment("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "length");
      JSONObject jSONObject1 = jSONObject0.put("c", (-3316.024234));
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject.doubleToString(1850.7268652600194);
      jSONObject1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject0 = new JSONObject(locale_Category0);
      jSONObject0.query("");
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.quote("kqER");
      JSONObject.stringToValue("java.io.StringWriter@0000000007");
      JSONObject.stringToValue("java.io.StringWriter@0000000007");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject0 = new JSONObject(locale_Category0);
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.stringToValue("kqER");
      JSONObject.stringToValue("kqER");
      Float float0 = new Float(0.0F);
      JSONObject.numberToString(float0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("z@AGw]cy!;0-jSD", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONObject0.optBigDecimal("z@AGw]cy!;0-jSD", bigDecimal0);
      JSONObject.wrap(bigDecimal0);
      try { 
        jSONObject0.getBigInteger("z@AGw]cy!;0-jSD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      jSONObject0.append("key", "key");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.similar(jSONObject1);
      jSONObject1.optInt("key");
      jSONObject0.toString(0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject0 = new JSONObject(locale_Category0);
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONTokener jSONTokener0 = new JSONTokener("false");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.stringToValue("Substring bounds error");
      try { 
        JSONObject.stringToNumber("1850.7268652600194.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        JSONObject.stringToNumber("2!pT$'|mRjFHENN:]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      JSONObject jSONObject1 = jSONObject0.put("H-VzK~W.Yj", (double) 2686);
      JSONObject.getNames(jSONObject1);
      jSONObject0.toMap();
      jSONObject1.getDouble("H-VzK~W.Yj");
      jSONObject0.optBoolean("H-VzK~W.Yj", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject0 = new JSONObject(locale_Category0);
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.doubleToString(975.097142947186);
      jSONObject0.putOnce("975.097142947186", (Object) null);
      jSONObject1.optJSONArray("kqER");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("JSONArray[");
      JSONObject.getNames(jSONObject0);
      jSONObject0.optNumber("istoUpperCase", (Number) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.increment("mcFtXuU'5~GS@%.HyK(");
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*~!Ih>V`XI&URap[n");
      jSONObject0.optEnum(class0, "5");
      Float float0 = new Float((-1708.38797253261));
      jSONObject1.getFloat("mcFtXuU'5~GS@%.HyK(");
      JSONObject jSONObject2 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      jSONObject1.accumulate("mcFtXuU'5~GS@%.HyK(", "*~!Ih>V`XI&URap[n");
      jSONObject1.optInt("?5[)d'*Cscu", (-1749));
      JSONObject.wrap(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P|*iR/n", true);
      JSONObject jSONObject1 = jSONObject0.accumulate("Zn`P|*iR/n", "7F");
      jSONObject1.optInt("7F", 58);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ts_Ps", (-14530064));
      jSONObject1.getFloat("ts_Ps");
      JSONObject jSONObject2 = jSONObject0.put("Zn`P|*iR/n", true);
      JSONObject.stringToValue("Zn`P|*iR/n");
      jSONObject2.toString();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("true");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      jSONObject0.entrySet();
      Float float0 = new Float(1.0);
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", (Object) null);
      jSONObject1.entrySet();
      jSONObject1.optBoolean("] could not convert to BigInteger.");
      Class<RoundingMode> class0 = RoundingMode.class;
      jSONObject0.optEnum(class0, "] could not convert to BigInteger.");
      jSONObject0.optNumber("] could not convert to BigInteger.");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P|*iR/n", false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.optNumber("Zn`P|*iR/n", (Number) bigDecimal0);
      try { 
        jSONObject0.getString("Zn`P|*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.increment("Zn`P|*iR/n");
      jSONObject1.optNumber("Zn`P|*iR/n");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("Zn`P|*iR/n", "Zn`P|*iR/n");
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.stringToValue("Zn`P|*iR/n");
      jSONObject1.optNumber("Zn`P|*iR/n");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("0", linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject.stringToValue("&'zZ0\"r~@S1v7?v(&");
      jSONObject1.toString();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P|*iR/n", true);
      long long0 = jSONObject1.optLong("Zn`P|*iR/n", (-130L));
      assertEquals(1, jSONObject0.length());
      assertEquals((-130L), long0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("Zn`P|*iR/n", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Float float0 = new Float(2102.886583552298);
      JSONObject.testValidity(float0);
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "mO`|;;b5%4`A7aj-uh#";
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 23);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      jSONObject0.entrySet();
      Float float0 = new Float(1.0);
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", (Object) null);
      jSONObject1.entrySet();
      Short short0 = new Short((short) (-6036));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "] could not convert to BigInteger.";
      stringArray0[1] = "] could not convert to BigInteger.";
      stringArray0[2] = "] could not convert to BigInteger.";
      stringArray0[3] = "] could not convert to BigInteger.";
      stringArray0[4] = "] could not convert to BigInteger.";
      stringArray0[5] = "] could not convert to BigInteger.";
      stringArray0[6] = "] could not convert to BigInteger.";
      stringArray0[7] = "] could not convert to BigInteger.";
      JSONObject jSONObject2 = new JSONObject(short0, stringArray0);
      jSONObject0.toMap();
      try { 
        JSONObject.stringToNumber("] could not convert to BigInteger.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [] could not convert to BigInteger.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      jSONObject0.entrySet();
      Float float0 = new Float(1.0);
      jSONObject0.optLong((String) null, 2852L);
      JSONObject.stringToValue("Null key.");
      jSONObject0.toMap();
      try { 
        JSONObject.stringToNumber("] could not convert to BigInteger.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [] could not convert to BigInteger.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      jSONObject1.put("HDaEQKbMd`4CZ+t$@n", (double) 0);
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      linkedList0.add(dialog_ModalExclusionType0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.doubleToString(2382.5);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float((double) 0);
      String string1 = "] could not convert to BigInteger.";
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      // Undeclared exception!
      try { 
        jSONObject1.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject.getNames((Object) null);
      jSONObject0.toMap();
      jSONObject0.optBigInteger((String) null, (BigInteger) null);
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        Charset.forName("getDeclaringClass");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // getDeclaringClass
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-4838));
      JSONObject jSONObject1 = jSONObject0.put("H-VzK~W.Yj", 0.0);
      JSONObject.getNames(jSONObject1);
      jSONObject0.getDouble("H-VzK~W.Yj");
      jSONObject0.optLong("a JSON pointer should start with '/' or '#/'");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      LinkedList<ByteArrayInputStream> linkedList0 = new LinkedList<ByteArrayInputStream>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float((double) 0);
      String string0 = "] could not convert to BigInteger.";
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject1.put("values", 176L);
      try { 
        jSONObject2.getNumber("] could not convert to BigInteger.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<PipedWriter> linkedList0 = new LinkedList<PipedWriter>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      LinkedList<FilterOutputStream> linkedList1 = new LinkedList<FilterOutputStream>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList1);
      JSONArray jSONArray2 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject(linkedList1);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0, 0, 0);
      boolean boolean0 = new Boolean(true);
      JSONObject.stringToNumber("0");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject(47);
      Integer integer0 = new Integer((-322));
      JSONObject jSONObject1 = jSONObject0.put("\b", (double) 47);
      JSONObject.getNames(jSONObject1);
      jSONObject1.getDouble("\b");
      jSONObject1.optLong("\b");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      JSONObject jSONObject1 = jSONObject0.put("H-VzK~W.Yj", (double) 2686);
      JSONObject.getNames(jSONObject1);
      jSONObject0.toMap();
      jSONObject1.getDouble("H-VzK~W.Yj");
      jSONObject1.optLong("H-VzK~W.Yj");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      jSONObject0.entrySet();
      Float float0 = new Float(1.0);
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", (Object) null);
      jSONObject1.entrySet();
      mockFileInputStream0.getChannel();
      jSONObject1.optBoolean("] could not convert to BigInteger.");
      Class<RoundingMode> class0 = RoundingMode.class;
      jSONObject0.optEnum(class0, "] could not convert to BigInteger.");
      jSONObject0.optNumber("] could not convert to BigInteger.");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject1.append("] could not convert to BigInteger.", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.getNames((Object) "getgetBytes");
      JSONObject jSONObject1 = jSONObject0.increment("] could not convert to BigInteger.");
      jSONObject0.has("?yWf");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject1.optEnum(class0, "val [");
      jSONObject0.append("val [", (Object) null);
      JSONObject jSONObject2 = jSONObject1.put("getgetBytes", (-485.649F));
      JSONObject.stringToValue("J8");
      jSONObject2.getInt("getgetBytes");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float((double) 0);
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject1.put("41#2[b60hG", 0.0F);
      JSONObject.stringToValue("=c$r#M3HHj~Jk~L(Ik");
      Locale.getISOCountries();
      try { 
        jSONObject1.getInt("] could not convert to BigInteger.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("&YnS3YC8", false);
      try { 
        jSONObject1.getInt("&YnS3YC8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      assertEquals(2, jSONObject0.length());
      
      jSONObject0.append("getreadInt", "getreadInt");
      JSONObject.stringToValue("clone");
      jSONObject0.optString("Vx|57u-~?9sB8!g", "isreadUnsignedByte");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.names();
      Float float0 = new Float(2.2667716F);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.increment("mcFtXuU'5~GS@%.HyK(");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.increment("mcFtXuU'5~GS@%.HyK(");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)67;
      JSONObject jSONObject2 = jSONObject1.put("Misplaced key.", (long) (byte)53);
      jSONObject2.optBoolean("mcFtXuU'5~GS@%.HyK(");
      jSONObject1.getNumber("mcFtXuU'5~GS@%.HyK(");
      jSONObject2.has("Misplaced key.");
      String string0 = "C";
      JSONObject.stringToValue("C");
      HashMap<BufferedInputStream, JSONArray> hashMap0 = null;
      try {
        hashMap0 = new HashMap<BufferedInputStream, JSONArray>((-40784180));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -40784180
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = JSONObject.getNames((Object) "getgetBytes");
      JSONObject jSONObject1 = jSONObject0.increment("] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      jSONObject0.increment("] could not convert to BigInteger.");
      try { 
        JSONObject.stringToNumber("XU1w!$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [XU1w!$] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject.stringToValue("0");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.append("0", "getreadInt");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject.stringToValue("0");
      jSONObject1.optJSONArray("cBlV5d=n");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.put("1-n3H+7=6Uiq0", 944L);
      jSONObject1.getNumber("1-n3H+7=6Uiq0");
      jSONObject1.has("1-n3H+7=6Uiq0");
      JSONObject.stringToValue("C");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      jSONObject0.has("1-n3H+7=6Uiq0");
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "y^i";
      JSONObject jSONObject0 = new JSONObject((Object) "y^i");
      String string1 = " }}ypAfH7vqDE+";
      JSONTokener jSONTokener0 = new JSONTokener(" }}ypAfH7vqDE+");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Long long0 = new Long(1246L);
      Long long1 = new Long(0L);
      jSONObject0.names();
      Float float0 = new Float((float) 0L);
      HashMap<Short, MockFileWriter> hashMap0 = new HashMap<Short, MockFileWriter>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject1.put("i>J*", (float) 1246L);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "i>J*";
      stringArray0[2] = "i>J*";
      stringArray0[3] = "i>J*";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      JSONObject jSONObject4 = jSONObject3.putOnce("V83_HMTn#Ab", locale_FilteringMode0);
      Object object0 = JSONObject.wrap(jSONObject4);
      JSONObject jSONObject5 = new JSONObject(object0);
      try { 
        jSONObject5.getString("i>J*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000029] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray3 = new JSONArray();
      File file0 = MockFile.createTempFile("getClass", (String) null);
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) mockFileReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.getNames((Object) "getgetBytes");
      jSONObject0.increment("] could not convert to BigInteger.");
      jSONObject0.has("?yWf");
      String string0 = null;
      jSONObject0.has((String) null);
      String string1 = "z5x0~wN'# 6oINy7^";
      int int0 = 1801;
      PipedReader pipedReader0 = new PipedReader(1801);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) pipedWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0);
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      String string0 = "org.json.JSONException";
      Class<Dialog.ModalityType> class1 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class1, "] is not a JSONObject.");
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject0 = new JSONObject(locale_Category0);
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 736, 736);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "y^i";
      JSONObject jSONObject0 = new JSONObject((Object) "y^i");
      Float float0 = new Float((-1211.2709F));
      jSONObject0.optBoolean("", false);
      jSONObject0.optJSONArray(",iSeB9@3{FaI_");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject.isDecimalNotation("((x@Www4M~i\"w.Mrg");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "((x@Www4M~i\"w.Mrg");
      Long long0 = new Long((-991L));
      Character character0 = new Character('-');
      jSONObject0.put("((x@Www4M~i\"w.Mrg", (Object) null);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.putOpt("c6=J.6l'cx\"!Gn.", (Object) null);
      JSONObject.stringToValue("'Vx8PS5zel Q(S");
      jSONObject2.optInt("'@aq", 70);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      jSONArray0.optBigDecimal(70, bigDecimal0);
      jSONObject0.optBigDecimal("'@aq", bigDecimal0);
      JSONObject.quote("index %d is out of bounds - the array has %d elements");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.put((Collection<?>) null);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1876);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.increment("Null key.");
      jSONObject0.has("isb'teValue");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "1");
      Float float0 = new Float((double) 1876);
      JSONObject jSONObject2 = jSONObject0.append("Ll,G)fJuLq.*v", (Object) null);
      Class<TrayIcon.MessageType> class1 = TrayIcon.MessageType.class;
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.WARNING;
      jSONObject2.optEnum(class1, "Null key.", trayIcon_MessageType0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject1.put("%wj,:AL@@", 0.0F);
      jSONObject1.opt("0");
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.toByteArray();
      linkedList0.push(bigInteger0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "getreadInt";
      JSONObject jSONObject1 = jSONObject0.append("getreadInt", "getreadInt");
      jSONObject0.append("getreadInt", float0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject1.put("", (-656.522F));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getreadInt";
      stringArray0[1] = "getreadInt";
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      try { 
        jSONObject2.putOnce("getreadInt", "i>J*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"getreadInt\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.similar(hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("0q]Q0pAk");
      jSONObject1.has("E");
      String string0 = "getreadInt";
      try { 
        jSONObject1.append("0q]Q0pAk", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[0q]Q0pAk] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = JSONObject.getNames((Object) "getgetBytes");
      JSONObject jSONObject1 = jSONObject0.increment("] could not convert to BigInteger.");
      jSONObject0.has("?yWf");
      JSONObject jSONObject2 = jSONObject1.append("getreadInt", "?yWf");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject2.put("i>J*", (float) 0);
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      JSONObject.getNames((Object) "getreadInt");
      jSONObject0.getDouble("] could not convert to BigInteger.");
      jSONObject0.optDouble("getreadInt");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      String string0 = "zL@";
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("zL@", (Object) null);
      jSONObject0.similar(jSONObject1);
      try { 
        jSONObject0.putOnce("zL@", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"zL@\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      short short0 = (short)9;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.getNames((Object) "getgetBytes");
      jSONObject0.optJSONArray("getgetBytes");
      jSONObject0.optFloat("UGA");
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.RUNIC;
      jSONObject0.optEnum(class0, "(bY>3C", character_UnicodeScript0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte) (-76);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("isreadByte", bigInteger0);
      jSONObject0.entrySet();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "|";
      Boolean boolean0 = Boolean.valueOf("|");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "|";
      stringArray0[1] = "|";
      stringArray0[2] = "|";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[3] = "|";
      stringArray0[4] = "|";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.optNumber("|");
      jSONObject0.increment("<L");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
      
      jSONObject0.optFloat((String) null);
      Long long0 = new Long(1L);
      JSONObject.valueToString(long0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "I";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("java.io.StringWriter@0000000003");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      short short0 = (short)57;
      Short short1 = new Short((short)57);
      JSONObject.numberToString(short1);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optJSONArray((String) null);
      jSONObject0.optFloat((String) null);
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.GREEK;
      jSONObject0.optEnum(class0, "I", character_UnicodeScript0);
      try { 
        jSONObject0.put("I", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LineNumberReader, Month> hashMap0 = new HashMap<LineNumberReader, Month>();
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "";
      try { 
        jSONObject0.put("", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.increment("mcFtXuU'5~GS@%.HyK(");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      jSONObject0.write((Writer) charArrayWriter0, 0, 0);
      JSONObject.quote("5", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*~!Ih>V`XI&URap[n");
      jSONObject0.optEnum(class0, "5");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject1.put("41#2[b60hG", 0.0F);
      jSONObject1.increment("41#2[b60hG");
      try { 
        JSONObject.stringToNumber("JSONObject[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [JSONObject[] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.increment("mcFtXuU'5~GS@%.HyK(");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      jSONObject0.write((Writer) charArrayWriter0, 0, 0);
      JSONObject.quote("5", (Writer) charArrayWriter1);
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*~!Ih>V`XI&URap[n");
      jSONObject0.optEnum(class0, "5");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject1.put("41#2[b60hG", 0.0F);
      jSONObject1.increment("41#2[b60hG");
      try { 
        JSONObject.stringToNumber("JSONObject[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [JSONObject[] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.getNames(jSONObject0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "] is not a boolean.");
      JSONObject.getNames((Object) "getgetBytes");
      JSONObject jSONObject1 = jSONObject0.increment("] could not convert to BigInteger.");
      BigDecimal bigDecimal0 = BigDecimal.valueOf(63L, 101);
      jSONObject1.optNumber("*?AH,>S", (Number) bigDecimal0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject.stringToValue("pTK[/");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = JSONObject.getNames((Object) "getgetBytes");
      JSONObject jSONObject1 = jSONObject0.increment("] could not convert to BigInteger.");
      jSONObject0.has("?yWf");
      JSONObject jSONObject2 = jSONObject1.append("getreadInt", "?yWf");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject2.put("i>J*", (float) 0);
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      JSONObject jSONObject4 = jSONObject3.putOnce("getgetBytes", roundingMode0);
      try { 
        jSONObject4.getString("getgetBytes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000034] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "??KUV8X5*";
      jSONObject0.optNumber("org.json.JSONPointer");
      JSONObject jSONObject1 = jSONObject0.put("??KUV8X5*", false);
      jSONObject1.optLong("??KUV8X5*", 0L);
      try { 
        jSONObject1.append("??KUV8X5*", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[??KUV8X5*] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      Locale locale0 = new Locale("%-G@sQ");
      Float float0 = new Float(1.0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject.stringToValue("=c$r#M3HHj~Jk~L(Ik");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)57;
      byteArray0[6] = (byte)43;
      byteArray0[4] = (byte)67;
      Float float1 = new Float((float) (byte)67);
      JSONObject jSONObject0 = new JSONObject(float1);
      jSONObject0.optBoolean("", true);
      jSONObject0.optJSONArray("%<n!W2~Nmf]5&\"");
      MockFile mockFile0 = new MockFile("0000");
      File file0 = MockFile.createTempFile("%-G@sQ", " *WAs", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P|*iR/n", true);
      jSONObject0.optFloat("#", 0.0F);
      jSONObject0.optBoolean("Zn`P|*iR/n", true);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      String string0 = "7pBF";
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "Zn`P|*iR/n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.TRAILING;
      linkedList0.add(groupLayout_Alignment0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("gettoString", (-297.2383F));
      JSONObject jSONObject1 = new JSONObject((Object) "gettoString");
      jSONObject0.getLong("gettoString");
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject1.getEnum(class0, "org.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000021] is not an enum of type java.io.StringWriter@0000000022.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.similar(hashMap0);
      Class<RoundingMode> class0 = RoundingMode.class;
      jSONObject0.optEnum(class0, "0q]Q0pAk");
      BigDecimal bigDecimal0 = new BigDecimal(12);
      jSONObject0.optBigDecimal("\"", bigDecimal0);
      JSONObject.quote("zQ-jb\"e*O");
      Class<JDBCType> class1 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.VARBINARY;
      jSONObject0.optEnum(class1, "int", jDBCType0);
      jSONObject0.length();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "Zn`P*iR/n";
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DayOfWeek, DropMode> hashMap0 = new HashMap<DayOfWeek, DropMode>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "length");
      JSONObject jSONObject1 = jSONObject0.increment("length");
      jSONObject1.has("dAfKW3eu@;");
      jSONObject0.append("!9ltC[h:!/qv", "!9ltC[h:!/qv");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject2.put("length", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 0;
      JSONObject jSONObject0 = new JSONObject(0);
      Integer integer0 = new Integer(0);
      String string0 = "get";
      try { 
        jSONObject0.put("get", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1846);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject.getNames((Object) jSONObject0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject0.append("Xd(,RC#", (Object) null);
      jSONObject0.put("] is not an enum of type ", 2469);
      LinkedList<InputStreamReader> linkedList0 = new LinkedList<InputStreamReader>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Float float0 = new Float((float) 2469);
      JSONObject.wrap(linkedList0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      jSONObject0.optString("#$$o$9%^RW");
      JSONObject.wrap(set0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      jSONObject0.optFloat("&H.V\"-iP|u7}8\"", 1.0F);
      jSONObject0.increment("Duplicate key \"");
      try { 
        JSONObject.stringToNumber("k?Co");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [k?Co] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      JSONObject.quote("F(8,IBz$@OR%H*", (Writer) charArrayWriter0);
      jSONObject0.isNull("7K&\u0002[3gkAkX");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float(466.34099087);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      jSONObject0.append("Vg#-IvUeP", locale_FilteringMode0);
      jSONObject0.optNumber("F(8,IBz$@OR%H*");
      jSONObject0.toString();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      short short0 = (short)9;
      Short short1 = new Short((short)9);
      String string0 = "getClass";
      jSONObject0.optLong("getClass", (long) (short)9);
      jSONObject0.optString("by");
      Short short2 = new Short((short)9);
      JSONObject.wrap(short2);
      jSONObject0.optFloat("by", 1551.2F);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optString("#=%R?fIMEJ,HU'");
      Short short0 = new Short((short)190);
      JSONObject.wrap(short0);
      Locale locale0 = Locale.ITALIAN;
      JSONObject.doubleToString((-171.0695011));
      jSONObject0.optInt("", (int) (short)190);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      Float float0 = new Float(0.0F);
      JSONObject.wrap(float0);
      Locale locale0 = Locale.ITALIAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("uq/pVB0wbR", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name uq/pVB0wbR, locale it
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat("mO`|;;b5%4`A7aj-uh#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MathContext mathContext0 = MathContext.DECIMAL128;
      bigDecimal0.plus(mathContext0);
      jSONObject0.optBigDecimal((String) null, bigDecimal0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.query(jSONPointer0);
      try { 
        jSONObject0.getFloat((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("");
      jSONObject0.query(jSONPointer0);
      jSONObject0.optJSONArray("getgetChannel");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject.wrap("Zn`P*iR/n");
      boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Object) "Zn`P*iR/n");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("Zn`P*iR/n", jSONArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("w9H@", (Object) null);
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.similar(jSONObject1);
      jSONObject1.optInt("w9H@");
      JSONObject.doubleToString(0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.getISOCountries();
      try { 
        jSONObject0.getBigDecimal("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToNumber("7");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.increment("mcFtXuU'5~GS@%.HyK(");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      jSONObject0.write((Writer) charArrayWriter0, 0, 0);
      JSONObject.quote("5", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*~!Ih>V`XI&URap[n");
      jSONObject0.optEnum(class0, "5");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject2 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject2.put("41#2[b60hG", 0.0F);
      jSONObject2.opt("5");
      JSONObject.stringToNumber("5");
      try { 
        jSONObject1.getBigDecimal("41#2[b60hG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000027] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("3<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.isDecimalNotation("] is not an int.");
      JSONObject jSONObject1 = jSONObject0.put("12[6hG", 0.0F);
      jSONObject0.opt("12[6hG");
      Integer.getInteger("] is not an int.", 69);
      try { 
        jSONObject1.getBigDecimal("12[6hG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<PipedWriter> linkedList0 = new LinkedList<PipedWriter>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject1.optLong("", 1L);
      JSONObject.stringToValue("-0");
      jSONObject0.toMap();
      JSONObject.stringToNumber("-0");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Zn`P|*iR/n", "7F");
      jSONObject0.putOnce("7F", "Zn`P|*iR/n");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("ierI=\"(", bigInteger0);
      jSONObject0.accumulate("\"", (Object) null);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject1.put("41#2[b60hG", 0.0F);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optJSONArray("re");
      jSONObject2.keySet();
      jSONObject0.toJSONArray((JSONArray) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("w9HF");
      jSONObject0.toJSONArray((JSONArray) null);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      WebParam.Mode webParam_Mode0 = WebParam.Mode.INOUT;
      Long long0 = new Long(2964L);
      hashMap0.put(webParam_Mode0, long0);
      jSONObject0.names();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.put("%s is not an array index", true);
      jSONObject0.toMap();
      try { 
        JSONObject.stringToNumber("_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [_] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      WebParam.Mode webParam_Mode0 = WebParam.Mode.IN;
      hashMap0.put(webParam_Mode0, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        JSONObject.stringToNumber("/X0$8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [/X0$8] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      WebParam.Mode webParam_Mode0 = WebParam.Mode.IN;
      Long long0 = new Long(1362L);
      hashMap0.put(webParam_Mode0, long0);
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BigInteger, String> hashMap0 = new HashMap<BigInteger, String>();
      jSONObject0.toString();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject.stringToNumber("-0");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject.stringToValue("-0");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("getgetChannel");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "9uh,=v{";
      stringArray0[1] = "OwYpol^'Hs/B-y$";
      stringArray0[2] = "OwYpol^'Hs/B-y$";
      stringArray0[3] = "OwYpol^'Hs/B-y$";
      stringArray0[4] = "OwYpol^'Hs/B-y$";
      stringArray0[5] = "OwYpol^'Hs/B-y$";
      stringArray0[7] = "OwYpol^'Hs/B-y$";
      stringArray0[8] = "OwYpol^'Hs/B-y$";
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      jSONObject0.has("OwYpol^'Hs/B-y$");
      JSONObject.stringToValue("9uh,=v{");
      BigDecimal bigDecimal0 = new BigDecimal((-2407L));
      try { 
        JSONObject.stringToNumber("lo");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [lo] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = "\\f";
      jSONObject0.names();
      String string1 = "Nul k.";
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("Nul k.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.Nul k.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OwYpol^'Hs/B-y$";
      stringArray0[1] = "OwYpol^'Hs/B-y$";
      stringArray0[2] = "OwYpol^'Hs/B-y$";
      stringArray0[3] = "OwYpol^'Hs/B-y$";
      stringArray0[4] = "OwYpol^'Hs/B-y$";
      stringArray0[5] = "OwYpol^'Hs/B-y$";
      stringArray0[6] = "OwYpol^'Hs/B-y$";
      stringArray0[7] = "OwYpol^'Hs/B-y$";
      JSONObject jSONObject1 = new JSONObject("OwYpol^'Hs/B-y$", stringArray0);
      jSONObject0.has((String) null);
      JSONObject.stringToValue(" line ");
      BigDecimal bigDecimal0 = new BigDecimal((-947L));
      try { 
        JSONObject.stringToNumber("OwYpol^'Hs/B-y$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [OwYpol^'Hs/B-y$] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P|*iR/n", false);
      jSONObject0.optString("Zn`P|*iR/n");
      JSONObject.doubleToString((-106L));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject0.optString("Zn`P*iR/n");
      JSONObject.wrap("Zn`P*iR/n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jSONObject1.optFloat("Zn`P*iR/n", (float) (-106L));
      try { 
        jSONObject0.increment("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "?yWf";
      Float float0 = new Float(0.0F);
      HashMap<Proxy.Type, BigInteger> hashMap0 = new HashMap<Proxy.Type, BigInteger>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Object) "?yWf");
      jSONObject2.toMap();
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "y^i");
      Float float0 = new Float((-1211.2709F));
      jSONObject0.optBoolean("", false);
      jSONObject0.toMap();
      try { 
        JSONObject.stringToNumber("U|)=.uzjut&wGC*'Q|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [U|)=.uzjut&wGC*'Q|] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("\"", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "\"");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      JSONObject jSONObject2 = jSONObject1.put("Unable to increment [", 0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject3 = jSONObject0.put("] not a string.", 0.0F);
      jSONObject0.similar((Object) null);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject0.optEnum(class1, "4&T-HRoE ^N%");
      BigDecimal bigDecimal0 = new BigDecimal((-2583));
      jSONObject3.optBigDecimal("] could not convert to BigInteger.", bigDecimal0);
      JSONObject.quote("I\"?eMjMNMwv;UYYzW6");
      Class<JDBCType> class2 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.LONGNVARCHAR;
      jSONObject1.optEnum(class2, "java.io.StringWriter@0000000025", jDBCType0);
      jSONObject2.length();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte) (-122);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("\"", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "\"");
      Float float0 = new Float((-1708.38797253261));
      jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.put("] could not convert to BigInteger.", 0.0F);
      jSONObject1.similar(charArrayWriter0);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject1.optEnum(class1, "\"");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONObject1.optBigDecimal("] could not convert to BigInteger.", bigDecimal0);
      JSONObject.quote("] is not a JSONArray.");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte) (-122);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("\"", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "\"");
      Float float0 = new Float((-1708.38797253261));
      jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.put("] could not convert to BigInteger.", 0.0F);
      jSONObject1.similar(charArrayWriter0);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject1.optEnum(class1, "\"");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONObject1.optBigDecimal("] could not convert to BigInteger.", bigDecimal0);
      JSONObject.quote("] is not a JSONArray.");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("org.json.JSONObject$1");
      try { 
        jSONObject0.getBigInteger("`}3DWa9#V){");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("\"", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Float float0 = new Float((-1708.38797253261));
      jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.append("\"", float0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject1.put("Misplaced array.", 1.0F);
      try { 
        jSONObject2.getBigInteger("Misplaced array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000025] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.increment("mcFtXuU'5~GS@%.HyK(");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      jSONObject0.write((Writer) charArrayWriter0, 0, 0);
      JSONObject.quote("5", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "5");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject1.put("41#2[b60hG", 0.0F);
      jSONObject1.opt("5");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      jSONObject1.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("val [", true);
      jSONObject0.toString(592);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("w9H@", (Object) null);
      jSONObject0.similar(jSONObject1);
      jSONObject1.optInt("w9H@");
      jSONObject0.toString(0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "?yWf";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      JSONObject.isDecimalNotation("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Long long0 = new Long(0);
      JSONObject jSONObject1 = jSONObject0.put("?yWf", (Object) long0);
      JSONObject.stringToValue("?yWf");
      jSONObject1.entrySet();
      String string1 = "lon";
      jSONObject0.optBoolean("lon");
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject1.optEnum(class1, "P:SurjD( 0/~c;u_w");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      // Undeclared exception!
      try { 
        bigDecimal0.multiply((BigDecimal) null, mathContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = JSONObject.getNames((Object) "getgetBytes");
      JSONObject jSONObject0 = new JSONObject("getgetBytes", stringArray0);
      jSONObject0.toMap();
      try { 
        JSONObject.stringToNumber("getgetBytes");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [getgetBytes] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      float float0 = jSONObject1.optFloat("Zn`P*iR/n", 1551.2F);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1551.2F, float0, 0.01F);
      
      jSONObject1.toMap();
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("-L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(27);
      HashMap<String, GroupLayout.Alignment> hashMap0 = new HashMap<String, GroupLayout.Alignment>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.optInt(" WZ~#5dQg$a$");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject.getNames((Object) bigDecimal0);
      JSONObject jSONObject2 = jSONObject0.increment("Ll,G)fJuLq.*v");
      jSONObject2.has("f~{I;8~Jt8");
      jSONObject0.append("sho", "isb'teValue");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject3 = jSONObject0.put("getintValue", (-1411.0F));
      String string0 = "null";
      JSONObject.stringToValue("null");
      JSONObject.getNames((Object) "Umx");
      try { 
        jSONObject3.getDouble("OE_4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000027] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject.stringToValue("null");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) null);
      Float float0 = new Float((-1731.1475F));
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      String string0 = "aJI.nd$!LE";
      try { 
        jSONObject2.getDouble("aJI.nd$!LE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.entrySet();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('F');
      String string0 = "\\\"";
      JSONObject.quote("\"", (Writer) charArrayWriter1);
      jSONObject0.isNull("\"");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "ivV\"*VVX\")s5W#hJzrC");
      Float float0 = new Float((-1708.38797253261));
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.indent(charArrayWriter0, (-99));
      MockFile mockFile0 = new MockFile("rw+U");
      String string0 = null;
      int int0 = 45;
      URI uRI0 = MockURI.URI((String) null, "rw+U", (String) null, 45, (String) null, "1J8eVye", (String) null);
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      JSONObject jSONObject1 = jSONObject0.put("H-VzK~W.Yj", (double) 2686);
      JSONObject.getNames(jSONObject1);
      jSONObject0.toMap();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONObject1.optFloat("V+4;Z\"", 288.314F);
      JSONObject jSONObject2 = jSONObject1.increment("H-VzK~W.Yj");
      jSONObject2.optBoolean("Null pointer");
      try { 
        JSONObject.stringToNumber("x0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [x0] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jSONObject1.optFloat("Zn`P*iR/n", 1551.2F);
      try { 
        jSONObject0.increment("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P|*iR/n", true);
      try { 
        jSONObject1.increment("Zn`P|*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(45);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('A');
      JSONObject.quote("Ox1si/aZ`~", (Writer) charArrayWriter1);
      BigDecimal bigDecimal0 = new BigDecimal((-1538));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      JSONObject jSONObject1 = jSONObject0.append("Ox1si/aZ`~", sequenceInputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject1.put("null", 0.0F);
      jSONObject0.similar("41#2[b60hG");
      Class<RoundingMode> class0 = RoundingMode.class;
      jSONObject1.optEnum(class0, "] not found.");
      BigDecimal bigDecimal1 = new BigDecimal((-1538));
      jSONObject1.optBigDecimal("Stepping back two steps is not supported", bigDecimal1);
      JSONObject.quote("Stepping back two steps is not supported");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.has("[vxwoz>%g!");
      JSONObject.stringToValue("C");
      BigDecimal bigDecimal0 = new BigDecimal((-1275));
      jSONObject0.optBigDecimal("] not a string.", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray2 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject.numberToString(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("?yWf", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "java.lang.Long@00000000030");
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.append("getreadUnsignedByte", "getreadUnsignedByte");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Long@00000000030", (float) 0);
      jSONObject1.similar("?yWf");
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject1.optEnum(class1, "] not found.");
      BigDecimal bigDecimal0 = new BigDecimal(2372);
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("", bigDecimal0);
      RoundingMode roundingMode0 = RoundingMode.UP;
      bigDecimal1.divide(bigDecimal0, roundingMode0);
      JSONObject.quote("] not found.");
      JSONObject.numberToString(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      JSONObject.isDecimalNotation("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Long long0 = new Long(0);
      jSONObject0.put("?yWf", (Object) long0);
      JSONObject jSONObject1 = jSONObject0.putOpt("cP6=J.6l'cx\"!Gn.", set0);
      JSONObject.stringToValue("?yWf");
      String string1 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?yWf");
      try { 
        jSONObject1.getJSONObject("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0.0);
      JSONObject.getNames(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter1.append('x');
      JSONObject.quote("sho", (Writer) charArrayWriter0);
      jSONObject0.isNull("\"ZJU^*SFbm)z|\"p[G");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "%wj,:AL@@");
      Float float1 = new Float((double) (-656.522F));
      JSONObject jSONObject1 = jSONObject0.append("\"ZJU^*SFbm)z|\"p[G", "\"ZJU^*SFbm)z|\"p[G");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject1.put("] could not convert to BigInteger.", (-4636.972F));
      jSONObject2.opt("\"ZJU^*SFbm)z|\"p[G");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      jSONObject1.toJSONArray(jSONArray0);
      JSONObject.doubleToString((-4636.972F));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      Integer integer0 = new Integer(2686);
      JSONObject jSONObject1 = jSONObject0.put("/w", (-1474.9341F));
      jSONObject1.optFloat("/w", (float) 2686);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-119L));
      jSONObject1.optFloat("Zn`P*iR/n", (float) (-119L));
      JSONObject.testValidity(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Pu+Fq-8NX#rcX}oy9@M", 5L);
      jSONObject0.optJSONArray("w9HF");
      try { 
        jSONObject0.getBoolean("Pu+Fq-8NX#rcX}oy9@M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0.0);
      jSONObject0.putOpt("0", "0");
      try { 
        jSONObject0.getBoolean("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("0", "0");
      jSONObject1.optBoolean("0", false);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.optBoolean("]");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("\"", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "\"");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      jSONObject0.optDouble("U.Fk:s;", (-2633.401135775729));
      jSONObject1.get("] could not convert to BigInteger.");
      jSONObject1.entrySet();
      jSONObject0.optBoolean("] could not convert to BigInteger.");
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optDouble("istoLowerCase", 0.0);
      jSONObject1.optLong("");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject1.optEnum(class0, "");
      Float float0 = new Float(0.0);
      jSONObject0.put("", (float) 'h');
      JSONObject.stringToValue("8CBK*'IlHZp3s^gUtq");
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.put("getbyteValue", 102);
      jSONObject1.keySet();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "Zn`P*iR/n";
      boolean boolean0 = false;
      Short short0 = new Short((short)227);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Zn`P*iR/n";
      stringArray0[1] = "Zn`P*iR/n";
      stringArray0[2] = "Zn`P*iR/n";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("T#EosaMpQ>kZl1I", false);
      long long0 = (-106L);
      Byte byte0 = new Byte((byte) (-24));
      JSONObject.wrap(byte0);
      jSONObject1.optLong("tri", (long) (short)227);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float((double) 0);
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject1.put("41#2[b60hG", 0.0F);
      JSONObject.stringToValue("=c$r#M3HHj~Jk~L(Ik");
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject0.optEnum(class1, "Y)Sg~v8v$6GC ");
      jSONObject2.optFloat("41#2[b60hG", 0.0F);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        JSONObject.stringToNumber("1850.7268652600194.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      String string0 = "0.00";
      int int0 = (-338);
      String string1 = "\\f";
      jSONObject0.names();
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("\f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.\f
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject.stringToValue("1-");
      HashMap<PushbackInputStream, JSONArray> hashMap0 = new HashMap<PushbackInputStream, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.names();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject.doubleToString(0.0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-996.1));
      assertEquals("-996.1", string0);
      
      HashMap<Character, BigInteger> hashMap0 = new HashMap<Character, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string1 = jSONObject0.optString("] could not convert to BigDecimal.");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.has("1-n3H+7=6Uiq0");
      JSONObject.stringToValue("C");
      JSONObject.wrap("C");
      JSONObject.doubleToString(Double.NaN);
      jSONObject1.optLong("C", (-1L));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.optBigDecimal("L_Y/AQbX", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.increment("mcFtXuU'5~GS@%.HyK(");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject1.put("41#2[b60hG", 0.0F);
      jSONObject1.opt("");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      jSONObject1.toJSONArray(jSONArray0);
      JSONObject.doubleToString(0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      JSONObject.isDecimalNotation("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Long long0 = new Long(0L);
      jSONObject0.put("?yWf", (Object) long0);
      JSONObject jSONObject1 = jSONObject0.putOpt("cP6=J.6l'cx\"!Gn.", set0);
      JSONObject.stringToValue("?yWf");
      jSONObject0.optInt((String) null, 1515);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject1.optBigDecimal("Misplaced endObject.", bigDecimal0);
      JSONObject.quote("");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue(" line ");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("%", (-943));
      JSONObject jSONObject2 = new JSONObject();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject1.optBigInteger("%", bigInteger0);
      jSONObject2.optFloat("", (-1.0F));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      jSONObject0.optEnum(class0, "] is not a number.");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("] is not a number.", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1846);
      jSONObject0.optInt(" WZ~#5dQg$a$");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.increment("Null key.");
      jSONObject0.has("isbyteValue");
      jSONObject1.put("z5x0~wN'# 6oINy7^", (Object) null);
      jSONObject0.putOpt(" WZ~#5dQg$a$", "Null key.");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject1.optBigInteger("java.lang.Float@0000000009.", bigInteger0);
      JSONObject.stringToValue("utf-8");
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.optFloat("Ll,G)fJuLq.*v", 1.0F);
      jSONObject1.optInt((String) null, (-1334));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Character.valueOf('p');
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.optDouble("gettoString", (-2831.2));
      String string0 = null;
      jSONObject2.optLong((String) null);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject2.optEnum(class0, "");
      Float float0 = new Float((double) 0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (float) 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      String[] stringArray0 = JSONObject.getNames((Object) "?yWf");
      jSONObject0.increment("Ll,G)fJuLq.*v");
      JSONObject jSONObject1 = new JSONObject(3527);
      jSONObject1.has("Ll,G)fJuLq.*v");
      JSONObject jSONObject2 = new JSONObject("?yWf", stringArray0);
      jSONObject1.has("Ll,G)fJuLq.*v");
      JSONObject.stringToValue("Misplaced key.");
      BigDecimal bigDecimal1 = new BigDecimal((long) 0);
      JSONObject.stringToValue("[vxwoz>%g!");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.toMap();
      String string0 = "(gf'ydP?duM2=";
      try { 
        JSONObject.stringToNumber("(gf'ydP?duM2=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [(gf'ydP?duM2=] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      charArrayWriter0.write(charArray0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("S", (Writer) charArrayWriter1);
      JSONObject.quote("istBString");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ENGLISH;
      locale0.getUnicodeLocaleAttributes();
      try { 
        JSONObject.stringToNumber("getClass");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [getClass] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("] is not{an enum of typD ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [] is not{an enum of typD ] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      char[] charArray0 = new char[2];
      charArray0[1] = 'x';
      charArrayWriter0.write(charArray0);
      charArrayWriter0.append('\u0000');
      JSONObject.quote((String) null, (Writer) charArrayWriter0);
      JSONObject.quote("istBString");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ENGLISH;
      locale0.getUnicodeLocaleAttributes();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Character character0 = new Character('-');
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((int) '-');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.optNumber((String) null);
      jSONObject0.keys();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject.wrap("ms\"-.");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('~');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ms\"-.");
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = charArrayWriter0.append('~');
      JSONObject.quote("iQDU%o+7@? /;", (Writer) charArrayWriter2);
      HashMap<CharArrayWriter, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<CharArrayWriter, LayoutStyle.ComponentPlacement>();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.testValidity(bigDecimal0);
      JSONObject jSONObject0 = new JSONObject((Object) "iQDU%o+7@? /;");
      jSONObject0.keys();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      Writer writer0 = JSONObject.quote("\"", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "\"");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject1.put("41#2[b60hG", 0.0F);
      jSONObject2.similar(writer0);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject0.optEnum(class1, "] not found.");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONObject1.optBigDecimal("] could not convert to BigInteger.", bigDecimal0);
      JSONObject.quote("\"");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jSONObject0.has("0000");
      JSONObject.doubleToString(0.0);
      jSONObject0.length();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject0.optString("Zn`P*iR/n");
      JSONObject.wrap("Zn`P*iR/n");
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (float) (-106L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('l');
      CharBuffer.wrap((CharSequence) "F(8,IBz$@OR%H*");
      charArrayWriter0.append((CharSequence) "F(8,IBz$@OR%H*");
      jSONObject0.write((Writer) charArrayWriter1, 32, (-401));
      EvoSuiteFile evoSuiteFile0 = null;
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.e");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONObject0.putOnce("org.e", locale_Category0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (float) (byte)99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("@uJ+uJ<zx0En-hSe");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      Writer writer0 = JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      jSONObject0.put("", (float) 0);
      JSONObject jSONObject2 = jSONObject1.put("41#2[b60hG", 0.0F);
      jSONObject2.similar(writer0);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject0.optEnum(class1, "] not found.");
      JSONObject.stringToValue("=c$r#M3HHj~Jk~L(Ik");
      JSONObject.stringToValue("??3zP1w0cLR");
      jSONObject2.optJSONObject("i;fZx%YEHZOSvPC&Z");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      Float float0 = new Float(2.2667716F);
      jSONObject0.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('l');
      CharBuffer.wrap((CharSequence) "F(8,IBz$@OR%H*");
      charArrayWriter0.append((CharSequence) "F(8,IBz$@OR%H*");
      jSONObject0.write((Writer) charArrayWriter1, 32, (-401));
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.e");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject2 = jSONObject0.putOnce("org.e", locale_Category0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONObject1.remove("");
      jSONObject1.isNull("org.e");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.optFloat("sfy``lqx^u<`h?");
      String string0 = "0000";
      // Undeclared exception!
      try { 
        jSONObject2.query("0000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      String string0 = "fuxQ7D3~O";
      JSONObject jSONObject1 = jSONObject0.put("fuxQ7D3~O", true);
      jSONObject1.optLong("fuxQ7D3~O", 0L);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1846);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.increment("Null key.");
      jSONObject0.has("isb'teValue");
      String string0 = "getreadInt";
      jSONObject0.append(string0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('l');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "F(8,IBz$@OR%H*");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) charBuffer0);
      jSONObject1.write((Writer) charArrayWriter2, 32, 32);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)113;
      MockFileWriter mockFileWriter0 = new MockFileWriter("Y_x");
      jSONObject1.putOnce("sfy``lqx^u<`h?", mockFileWriter0);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONObject1.remove("sfy``lqx^u<`h?");
      String string0 = "h:";
      jSONObject0.isNull("h:");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.optFloat("] is not a Boolean.");
      // Undeclared exception!
      try { 
        jSONObject0.query("VG[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = 1846;
      JSONObject jSONObject0 = new JSONObject(1846);
      jSONObject0.optInt(" WZ~#5dQg$a$");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject.getNames((Object) jSONObject0);
      String string0 = "Null key.";
      String string1 = "isbyteValue";
      jSONObject0.has("isbyteValue");
      jSONObject0.put("z5x0~wN'# 6oINy7^", (Object) null);
      JSONObject jSONObject1 = jSONObject0.putOpt(" WZ~#5dQg$a$", "Null key.");
      jSONObject0.put("Ll,G)fJuLq.*v", (double) 0);
      LinkedList<WebParam.Mode> linkedList0 = new LinkedList<WebParam.Mode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject1.getDouble("mX):;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000254] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      String[] stringArray0 = new String[5];
      Integer integer0 = new Integer(2686);
      Integer integer1 = new Integer(2686);
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      JSONObject.stringToValue("spl");
      jSONObject0.optInt("16pxLwN9", 2686);
      JSONObject jSONObject1 = new JSONObject("x)Y,", stringArray0);
      jSONObject1.optBigDecimal("\b", (BigDecimal) null);
      JSONObject.quote("\b");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.optQuery(jSONPointer0);
      jSONObject0.increment("org.json.JSONException");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Null pointer";
      stringArray0[1] = "org.json.JSONException";
      stringArray0[2] = "OwYpol^'Hs/B-y$";
      stringArray0[5] = "org.json.JSONException";
      stringArray0[6] = "org.json.JSONException";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.has("[vxwoz>%g!");
      JSONObject.stringToValue("C");
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1328));
      jSONObject0.optBigDecimal("org.json.JSONException", bigDecimal0);
      JSONObject.quote("H$y8mrd");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      JSONObject.valueToString(object0);
      jSONObject0.toString();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BigInteger, String> hashMap0 = new HashMap<BigInteger, String>();
      JSONObject.stringToValue("kqER");
      try { 
        jSONObject0.getNumber("kqER");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      jSONObject0.optInt(" WZ~#5dQg$a$");
      Float float0 = new Float((double) 1863);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "] could not convert to BigInteger.";
      jSONObject0.append(" WZ~#5dQg$a$", "] could not convert to BigInteger.");
      JSONObject.valueToString((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(900);
      stringWriter0.append((CharSequence) "] could not convert to BigInteger.");
      try { 
        jSONObject0.getNumber("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1846);
      jSONObject0.optInt(" WZ~#5dQg$a$");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.increment("Null key.");
      jSONObject0.has("Null key.");
      jSONObject1.put("0", (Object) "0");
      jSONObject1.put("z5x0~wN'# 6oINy7^", (Object) null);
      String string0 = "utf-8";
      try { 
        jSONObject1.getJSONArray("utf-8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.doubleToString((-656.522F));
      jSONObject0.put("-656.52197265625", 1L);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      JSONObject jSONObject2 = new JSONObject(3527);
      jSONObject2.has("Ll,G)fJuLq.*v");
      jSONObject0.putOpt("hashCode", (Object) null);
      jSONObject1.put("?yWf", (-221L));
      JSONObject.stringToValue("pos");
      jSONObject2.optInt("pos", 0);
      jSONObject1.optBigDecimal("'", bigDecimal0);
      JSONObject.quote("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "false");
      String string0 = "getread";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, "getread");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"getread\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      Integer integer0 = new Integer(2686);
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = "\\b";
      try { 
        jSONObject0.getDouble("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.similar(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("??KUV8X5*", false);
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      Integer integer0 = new Integer(2686);
      Integer integer1 = new Integer(2686);
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      JSONObject jSONObject1 = jSONObject0.put("H-VzK~W.Yj", (double) 2686);
      JSONObject.getNames(jSONObject1);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = "\\b";
      try { 
        jSONObject1.getDouble("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONObject.wrap("ms\"-.");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('~');
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter1.append('g');
      JSONObject.quote("Ox1si/aZ`~", (Writer) charArrayWriter0);
      BigDecimal bigDecimal0 = new BigDecimal((-246));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ms\"-.";
      stringArray0[1] = "pos";
      stringArray0[2] = "lmT;8";
      stringArray0[3] = "ms\"-.";
      stringArray0[4] = "ms\"-.";
      JSONObject jSONObject0 = new JSONObject(pushbackReader0, stringArray0);
      try { 
        jSONObject0.getInt("lmT;8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject.stringToValue("5qd<EKkSudq");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONObject.stringToValue("- es not a long");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Locale.getISOLanguages();
      JSONObject.isDecimalNotation("B$euWrQ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1846);
      jSONObject0.optInt(" WZ~#5dQg$a$");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.increment("Null key.");
      jSONObject0.has("isb'teValue");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject0.put("Umx", (-1411.0F));
      JSONObject.stringToValue("/-YRsaj}0nk(mq\"");
      JSONObject.getNames((Object) "Null key.");
      jSONObject2.getDouble("Umx");
      jSONObject1.optFloat("getreadInt", 0.0F);
      jSONObject0.put("int", 6);
      JSONObject.isDecimalNotation(".");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      jSONObject0.optInt(" WZ~#5dQg$a$");
      jSONObject0.optFloat("]}@K-", (-2107.9443F));
      jSONObject0.toString(1863);
      jSONObject0.isNull("]}@K-");
      try { 
        jSONObject0.getBoolean("%/0D[d%I:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P|*iR/n", true);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      jSONObject0.optEnum(class0, "Zn`P|*iR/n");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      jSONObject0.optInt(" WZ~#5dQg$a$");
      Float float0 = new Float((double) 1863);
      JSONObject jSONObject1 = jSONObject0.append(" WZ~#5dQg$a$", "] could not convert to BigInteger.");
      JSONObject.valueToString((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject0.put("", (-4916.296F));
      Class<RoundingMode> class0 = RoundingMode.class;
      jSONObject1.optEnum(class0, "");
      JSONObject.stringToValue("V#~");
      Float float1 = new Float((-1.8467602F));
      JSONObject.getNames((Object) float1);
      try { 
        jSONObject2.getDouble("~1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1846);
      jSONObject0.optInt(" WZ~#5dQg$a$");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.increment("Null key.");
      jSONObject0.has("isbyteValue");
      jSONObject1.put("z5x0~wN'# 6oINy7^", (Object) null);
      jSONObject0.putOpt(" WZ~#5dQg$a$", "Null key.");
      JSONObject.stringToValue("utf-8");
      jSONObject1.optInt("] is not a lo;g.", 1846);
      jSONObject0.optBigDecimal("Ll,G)fJuLq.*v", bigDecimal0);
      JSONObject.quote("\"&=|T%l");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigDecimal bigDecimal0 = new BigDecimal((-1658.84));
      jSONObject0.optBigDecimal("$oSK!&gOk{u5ZcL1)H", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.writeValue(charArrayWriter0, charArrayWriter0, 13, 0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("EI{DI?4", (Object) null);
      try { 
        jSONObject1.getBoolean("cl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      HashMap<PipedOutputStream, BigDecimal> hashMap0 = new HashMap<PipedOutputStream, BigDecimal>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("has", hashMap0);
      jSONObject0.similar(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      HashMap<PipedOutputStream, BigDecimal> hashMap0 = new HashMap<PipedOutputStream, BigDecimal>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigDecimal bigDecimal0 = new BigDecimal(63);
      hashMap0.put(pipedOutputStream0, bigDecimal0);
      Object object0 = JSONObject.wrap(hashMap0);
      jSONObject0.similar(object0);
      jSONObject0.optNumber("]|0eA");
      JSONObject.numberToString(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.similar(hashMap0);
      jSONObject0.optNumber("ishashCode");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      Writer writer0 = JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject1.put("41#2[b60hG", 0.0F);
      jSONObject2.similar(writer0);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject0.optEnum(class1, "] not found.");
      JSONObject.stringToValue("=c$r#M3HHj~Jk~L(Ik");
      JSONObject.stringToValue("??3zP1w0cLR");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1722528447));
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = 1863;
      JSONObject jSONObject0 = new JSONObject(1863);
      jSONObject0.optInt(" WZ~#5dQg$a$");
      Float float0 = new Float((double) 1863);
      JSONObject jSONObject1 = jSONObject0.append(" WZ~#5dQg$a$", "] could not convert to BigInteger.");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('e');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "] could not convert to BigInteger.");
      charArrayWriter1.append((CharSequence) charBuffer0);
      jSONObject1.write((Writer) charArrayWriter1, 44, 0);
      String string0 = "sfy``lxCu<3h?";
      String string1 = "org.e";
      MockFileWriter mockFileWriter0 = new MockFileWriter(" WZ~#5dQg$a$");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("org.e");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "F(8,IBz$@OR%H*";
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('l');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "F(8,IBz$@OR%H*");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) charBuffer0);
      jSONObject1.write((Writer) charArrayWriter2, 32, 32);
      jSONObject1.remove("sfy``lqx^u<`h?");
      jSONObject0.isNull("h:");
      String string1 = "] is not a Boolean.";
      jSONObject0.optFloat("] is not a Boolean.");
      String string2 = "VG[";
      // Undeclared exception!
      try { 
        jSONObject0.query("VG[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      jSONObject0.put("ishashCode", (double) 2663);
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "'LV2 YGt2O%!2";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject2 = jSONObject1.append("] could not convert to BigInteger.", "].");
      JSONObject jSONObject3 = jSONObject2.put("P.'QgN+wZ@W,5_L`", 0.0F);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject3.optEnum(class1, "8CBK*'IlHZp3s^gUtq");
      JSONObject.stringToValue("sFY``LQX^u<`H?");
      JSONObject.getNames((Object) null);
      try { 
        jSONObject2.getInt("=c$r#M3HHj~Jk~L(Ik");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000027] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      jSONObject0.put("H-VzK~W.Yj", (double) 2686);
      JSONObject.doubleToString(2686);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("\"", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "\"");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      jSONObject1.put("Unable to increment [", 0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      JSONObject jSONObject2 = new JSONObject(jSONArray0);
      JSONObject.stringToValue("-0");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      try { 
        JSONObject.stringToNumber("] could not convert to BigInteger.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [] could not convert to BigInteger.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONObject.isDecimalNotation("va");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'LV2 YGt2O%!2";
      stringArray0[1] = "'LV2 YGt2O%!2";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optDouble("istoLowerCase", 0.0);
      jSONObject1.optLong("'LV2 YGt2O%!2");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject1.optEnum(class0, "");
      Float float0 = new Float(0.0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 60);
      jSONObject0.append("-0", bufferedInputStream0);
      jSONObject0.put("'LV2 YGt2O%!2", (float) (-1843));
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject1.optEnum(class1, "] could not convert to BigInteger.");
      JSONObject.stringToValue("8CBK*'IlHZp3s^gUtq");
      JSONObject.getNames((Object) jSONObject0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      WebParam.Mode webParam_Mode0 = WebParam.Mode.INOUT;
      hashMap0.put(webParam_Mode0, (Long) null);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("{g,Tu?1kH", bigInteger0);
      jSONObject0.accumulate("{g,Tu?1kH", float0);
      jSONObject0.optInt("{g,Tu?1kH", 58);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`+P|*iRn", true);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONObject1.optBigDecimal("Zn`+P|*iRn", bigDecimal0);
      JSONObject.stringToValue("org.json.JSONObject");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.put("1-n3H+7=6Uciq0", 944L);
      jSONObject1.getNumber("1-n3H+7=6Uciq0");
      jSONObject1.has("1-n3H+7=6Uciq0");
      try { 
        JSONObject.stringToNumber("l%4GzXQorAo,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [l%4GzXQorAo,] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject.getNames((Object) bigDecimal0);
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      jSONObject1.has("Ll,G)fJuLq.*v");
      jSONObject0.putOpt("{*{(WIMK=/!", "P.'QgN+wZ@W,5_L`");
      JSONObject.stringToValue("p&=30kd");
      jSONObject0.optInt("", 2663);
      jSONObject0.optBigDecimal("Ll,G)fJuLq.*v", bigDecimal0);
      JSONObject.quote("P.'QgN+wZ@W,5_L`");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject1.put("41#2[b60hG", 0.0F);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject0.optEnum(class1, "] not found.");
      JSONObject.stringToValue("=c$r#M3HHj~Jk~L(Ik");
      JSONObject.getNames((Object) jSONObject1);
      try { 
        jSONObject1.getDouble("\"m6sK=su4!X9/%Z+\"vt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      try { 
        jSONObject0.getJSONObject("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("S", (Writer) charArrayWriter1);
      BigDecimal bigDecimal0 = new BigDecimal((-246));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S";
      stringArray0[1] = "S";
      stringArray0[2] = "?yWf";
      stringArray0[3] = "lmT;8";
      stringArray0[4] = "?yWf";
      JSONObject jSONObject0 = new JSONObject(bigDecimal0, stringArray0);
      try { 
        jSONObject0.getInt("S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONObject.wrap("ms\"-.");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('~');
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = charArrayWriter0.append('~');
      JSONObject.quote("iQDU%o+7@? /;", (Writer) charArrayWriter2);
      HashMap<CharArrayWriter, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<CharArrayWriter, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.isNull("index %d is out of bounds - the array has %d elements");
      jSONObject0.entrySet();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.testValidity(bigDecimal0);
      jSONObject0.remove("Ao)Wp%nsg");
      jSONObject0.optDouble("Pj", 2506.41);
      try { 
        jSONObject0.getJSONArray("b;i$CvN2P'b.$1f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONObject0.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject(jSONArray1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.optFloat("TVdx", 785.6F);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.optQuery(jSONPointer0);
      JSONObject.valueToString(jSONPointer0);
      JSONObject jSONObject1 = new JSONObject((Object) "java.io.StringWriter@0000000005");
      jSONObject1.toString();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      String string0 = " WZ~#5dQg$a$";
      jSONObject0.optInt(" WZ~#5dQg$a$");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.indent(charArrayWriter0, 1863);
      MockFile mockFile0 = new MockFile(" WZ~#5dQg$a$");
      URI uRI0 = MockURI.URI((String) null, " WZ~#5dQg$a$", (String) null, 0, " WZ~#5dQg$a$", " WZ~#5dQg$a$", (String) null);
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<PseudoColumnUsage> class0 = PseudoColumnUsage.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] is not an enum of type java.io.StringWriter@0000000004.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONObject.stringToValue("size");
      JSONObject.quote((String) null);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.getNames((Object) jSONObject0);
      String string0 = "Ll,G)fJuLq.*v";
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      jSONObject0.has("");
      jSONObject1.opt("6{");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("6{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      jSONObject0.optInt(" WZ~#5dQg$a$");
      jSONObject0.optFloat("]}@K-", (-2107.9443F));
      jSONObject0.isNull("]}@K-");
      try { 
        jSONObject0.getBoolean("%/0D[d%I:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("^@S\r${K#Wei7d@{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("Zn`P|*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "((x@Www4M~i\"w.Mrg";
      Float float0 = new Float(0.0F);
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4884);
      jSONObject0.toString();
      JSONObject.wrap(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "@";
      JSONObject.wrap(jSONObject0);
      jSONObject0.isNull("h:");
      String string1 = "] is not a Boolean.";
      jSONObject0.optFloat("] is not a Boolean.");
      String string2 = "VG[";
      // Undeclared exception!
      try { 
        jSONObject0.query("VG[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("floaValue", "floaValue");
      // Undeclared exception!
      try { 
        jSONObject0.query("d!5{8Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "'LV2 YGt2O%!2";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      jSONObject1.put("\b", (Collection<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toMap();
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      jSONObject0.put("] is not an enum of type ", (Collection<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONPointer0.toString();
      linkedList0.toArray();
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("S", (Writer) charArrayWriter1);
      JSONObject.quote("istBString");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = "ms\"-.";
      JSONObject.wrap("ms\"-.");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('~');
      JSONObject.quote("?yWf", (Writer) charArrayWriter1);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1-n3H+7=6Uiq0";
      stringArray0[1] = "1-n3H+7=6Uiq0";
      stringArray0[2] = "8X@vz:+=AF{jj&_";
      stringArray0[3] = "1-n3H+7=6Uiq0";
      stringArray0[4] = "1-n3H+7=6Uiq0";
      stringArray0[5] = "1-n3H+7=6Uiq0";
      stringArray0[6] = "] is not a JSONArray.";
      stringArray0[7] = "1-n3H+7=6Uiq0";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.has("] is not a JSONArray.");
      JSONObject.stringToValue("0000");
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("A JSONObject text must end with '}'");
      assertEquals("A JSONObject text must end with '}'", object0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      Float float1 = new Float((-656.522F));
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "'LV2 YGt2O%!2";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject2 = jSONObject1.append("] could not convert to BigInteger.", "].");
      JSONObject jSONObject3 = jSONObject2.put("P.'QgN+wZ@W,5_L`", 0.0F);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject3.optEnum(class1, "8CBK*'IlHZp3s^gUtq");
      JSONObject.stringToValue("sFY``LQX^u<`H?");
      String[] stringArray1 = JSONObject.getNames((Object) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.similar(hashMap0);
      assertFalse(boolean0);
      
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.accumulate("is", bigDecimal0);
      jSONObject0.optBigDecimal("Zn`P*iR/n", bigDecimal0);
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-119L));
      jSONObject1.optFloat("Zn`P*iR/n", (float) (-119L));
      JSONObject.testValidity(jSONObject0);
      jSONObject0.increment("is");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      boolean boolean0 = jSONObject0.has("1-n3H+7=6Uiq0");
      assertFalse(boolean0);
      
      Object object0 = JSONObject.stringToValue("1-n3H+7=6Uiq0");
      assertEquals("1-n3H+7=6Uiq0", object0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.increment("g");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      jSONObject0.has("");
      jSONObject0.putOpt("Ll,G)fJuLq.*v", jSONObject1);
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.names();
      Float float0 = new Float(2.2667716F);
      double double0 = 0.0;
      String string0 = null;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      jSONObject0.opt((String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("7f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      JSONObject jSONObject1 = new JSONObject(class0);
      assertEquals(35, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optJSONArray((String) null);
      jSONObject0.optFloat((String) null);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      String string0 = null;
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.GERMAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "GlY[VAEU+GCw<Hi";
      stringArray0[1] = "K";
      stringArray0[2] = "";
      stringArray0[3] = "Unable to increment [";
      stringArray0[4] = "] could not convert to BigInteger.";
      JSONObject jSONObject0 = new JSONObject(mockFileReader0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      long long0 = jSONObject1.optLong((String) null, (-86L));
      assertEquals((-86L), long0);
      
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = jSONObject0.optString("] could not convert to BigInteger.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Character character0 = Character.valueOf('g');
      JSONObject jSONObject0 = new JSONObject(character0);
      jSONObject0.putOpt("", "");
      String string0 = "";
      int int0 = (-1843);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1843
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = JSONObject.getNames((Object) "getgetBytes");
      JSONObject jSONObject0 = new JSONObject("getgetBytes", stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("getgetBytes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject.getNames((Object) "?yWf");
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      JSONObject jSONObject2 = new JSONObject(3527);
      jSONObject2.has("Ll,G)fJuLq.*v");
      jSONObject0.putOpt("hashCode", (Object) null);
      Object object0 = JSONObject.stringToValue("pos");
      jSONObject2.optInt("pos", 0);
      jSONObject1.optBigDecimal("'", bigDecimal0);
      String string0 = JSONObject.quote("");
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      try { 
        jSONObject0.getJSONArray("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(45);
      jSONObject0.isNull("?yWf");
      try { 
        jSONObject0.getString(" @wIO)*$;yxh#9]6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject1 = jSONObject0.accumulate("\"", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(set0);
      jSONObject0.remove("?yWf");
      jSONObject0.optDouble("JSON does not allow non-finite numbers.", (double) 0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      jSONObject1.optNumber("");
      jSONObject1.toString();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject((Object) "y^i");
      Float float0 = new Float((-1211.2709F));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.optQuery(jSONPointer0);
      Object object0 = JSONObject.stringToValue("C");
      assertEquals("C", object0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.writeValue(charArrayWriter0, charArrayWriter0, 13, 0);
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      Integer integer0 = new Integer(2686);
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      String string0 = "H-VzK~W.Yj";
      JSONObject jSONObject1 = jSONObject0.put("H-VzK~W.Yj", (double) 2686);
      JSONObject.getNames(jSONObject1);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 4586;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4586);
      Writer writer0 = JSONObject.quote("H-VzK~W.Yj", (Writer) charArrayWriter0);
      JSONObject.writeValue(writer0, (Object) null, (-191), (-191));
      try { 
        jSONObject1.getDouble("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, jSONObject0, (-1791719283), (-1923));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-996.1));
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.writeValue(stringWriter0, jSONObject0, 57, 122);
      JSONObject.stringToValue("] is not a valid number.");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.writeValue(charArrayWriter0, charArrayWriter0, 0, 0);
      String string0 = "\\f";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\f", "\f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      Integer integer0 = new Integer(2686);
      Integer integer1 = new Integer(2686);
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      jSONObject0.put("H-VzK~W.Yj", (double) 2686);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("czy7DcHwAc6>}&7EFJj");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      String string0 = " WZ~#5dQg$a$";
      jSONObject0.optInt(" WZ~#5dQg$a$");
      String string1 = "]}@K-";
      jSONObject0.optFloat("]}@K-", (-2107.9443F));
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("va");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = true;
      String string0 = "mL5^{BWYK,vLFde";
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("mL5^{BWYK,vLFde");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      HashMap<PipedInputStream, DocumentationTool.Location> hashMap0 = new HashMap<PipedInputStream, DocumentationTool.Location>();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONObject[";
      stringArray0[1] = "Unable to write JSONArray value at index: ";
      stringArray0[2] = "}o?Y]hUK'Iw6heT*Yk&";
      stringArray0[3] = "zX\"Pj1]lY>><I2}";
      stringArray0[4] = "org.json.JSONTokener";
      stringArray0[5] = "";
      stringArray0[6] = "^\"}GwIt#bw";
      stringArray0[7] = "";
      stringArray0[8] = "%s is not an array index";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      LinkedList<StandardProtocolFamily> linkedList0 = new LinkedList<StandardProtocolFamily>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.put("Zn`P*iR/n", (float) (-106L));
      Class<RoundingMode> class0 = RoundingMode.class;
      jSONObject1.optEnum(class0, "si");
      JSONObject.stringToValue("");
      Float float0 = new Float(Float.NaN);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JSONObject.getNames((Object) dataInputStream0);
      try { 
        jSONObject0.getDouble("Xdvt*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String[] stringArray0 = JSONObject.getNames((Object) fileDescriptor0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.optString("5", "5");
      long long0 = jSONObject0.optLong("5", (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.wrap((Object) null);
      JSONObject.stringToValue("MF [$;mH^_)Nr<X,r_j");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      boolean boolean0 = false;
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      jSONObject1.put("", (-1906.478F));
      String string1 = "=$)K25sgGv8p;u=d";
      MockFile mockFile0 = new MockFile("~", "Zn`P*iR/n");
      MockFile mockFile1 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      JSONObject.getNames((Object) jSONObject0);
      mockFile0.mkdirs();
      mockFile0.renameTo(mockFile1);
      mockFile0.createNewFile();
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter(mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      float float0 = jSONObject0.optFloat("0");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("Zn`P|*iR/n", "Zn`P|*iR/n");
      jSONObject1.optLong("Zn`P|*iR/n", 1733L);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Locale locale0 = Locale.US;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] is not a number.", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name ] is not a number., locale en_US
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "Unable to write JSONObject value for key: ";
      Locale locale0 = Locale.PRC;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Unable to write JSONObject value for key: ", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name Unable to write JSONObject value for key: , locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "length");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject0.append("] is not an enum of type ", pipedOutputStream0);
      jSONObject0.put("length", 2469);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      Float float0 = new Float((-1326.6179F));
      Object object0 = JSONObject.wrap(float0);
      JSONObject jSONObject1 = new JSONObject(object0);
      JSONObject.stringToValue("] could not convert to BigInteger.");
      BigDecimal bigDecimal0 = new BigDecimal((long) 2469);
      try { 
        JSONObject.stringToNumber("){5RL2VV");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [){5RL2VV] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONObject jSONObject1 = jSONArray0.toJSONObject(jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "K2e");
      assertEquals(2, jSONObject0.length());
      
      Object object0 = JSONObject.stringToValue("K2e");
      assertEquals("K2e", object0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      HashMap<PipedOutputStream, BigDecimal> hashMap0 = new HashMap<PipedOutputStream, BigDecimal>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = JSONObject.wrap(hashMap0);
      jSONObject0.similar(object0);
      Number number0 = jSONObject0.optNumber("]|0eA");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = "ms\"-.";
      JSONObject.wrap("ms\"-.");
      String string1 = "[9u&=Ek";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("[9u&=Ek");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = "{O(p|=Qsv* +";
      JSONTokener jSONTokener0 = new JSONTokener("{O(p|=Qsv* +");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 6 [character 7 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<StandardLocation, KeyRep.Type> hashMap0 = new HashMap<StandardLocation, KeyRep.Type>();
      jSONObject0.put("1850.72686526001940", (Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      StringReader stringReader0 = new StringReader("] is not a number.");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a number.";
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter>();
      jSONObject0.put("] is not a number.", (Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("U.78Hj|D(O5W@", (-2587.257));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-2587.257), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject1.put("41#2[b60hG", 0.0F);
      jSONObject1.opt("");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertFalse(set0.isEmpty());
      assertEquals(2, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BigInteger, String> hashMap0 = new HashMap<BigInteger, String>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optJSONObject("length");
      JSONObject jSONObject3 = jSONObject1.putOnce("length", (Object) null);
      assertNotSame(jSONObject3, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      HashMap<LineNumberReader, Month> hashMap0 = new HashMap<LineNumberReader, Month>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      double double0 = jSONObject1.optDouble("", 0.0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("7eZDBve./4p");
      assertEquals(0L, long0);
      
      float float0 = jSONObject0.optFloat("] could not be converted to BigDecimal.");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject0.has("1-n3H+7=6Uiq0");
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.entrySet();
      Object object0 = JSONObject.stringToValue("isvalues");
      assertEquals("isvalues", object0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("?8YH-RkglcL3xbm?", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      HashMap<LineNumberReader, Month> hashMap0 = new HashMap<LineNumberReader, Month>();
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(",");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("(c o/I<3hL-c\"Pe$%=", 0.0F);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      jSONObject0.optEnum(class0, "Zn`P|*iR/n");
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "'LV2 YGt2O%!2";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      Float float0 = new Float((-1708.38797253261));
      jSONObject1.optNumber("'LV2 YGt2O%!2", (Number) float0);
      jSONObject1.put("].", 3908.5278F);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      try { 
        jSONObject0.getBoolean("bOqF!6!.$.E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      try { 
        jSONObject0.getBoolean("(s06d3PW?T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{g,Tu?1kr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("jP0%*ei/Gwbz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = "13gk>Vf\\G-|T@7";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("13gk>VfG-|T@7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4884);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "jNxV'u!g`P";
      try { 
        jSONObject0.getDouble("jNxV'u!g`P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      HashMap<Window.Type, DayOfWeek> hashMap1 = new HashMap<Window.Type, DayOfWeek>();
      Window.Type window_Type0 = Window.Type.POPUP;
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      hashMap1.put(window_Type0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap1);
      jSONObject0.optJSONArray("y^i");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "length");
      JSONObject jSONObject1 = new JSONObject(set0);
      JSONObject jSONObject2 = new JSONObject(class0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("D?2aYf~N0g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) "y^i");
      try { 
        jSONObject0.getLong("y^i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2686);
      String string0 = "";
      Integer integer0 = new Integer(2686);
      Integer integer1 = new Integer(2686);
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      jSONObject0.put("", (double) 2686);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.getDouble("");
      try { 
        jSONArray0.getJSONObject((int) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2686] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      String string0 = "?q-BA";
      jSONObject0.put("?q-BA", true);
      try { 
        jSONObject0.getDouble("-%lzVS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      HashMap<PipedInputStream, DocumentationTool.Location> hashMap0 = new HashMap<PipedInputStream, DocumentationTool.Location>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("?q-BA", false);
      try { 
        jSONObject0.getDouble("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P|*iR/n", true);
      try { 
        jSONObject0.getDouble("Zn`P|*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("((x@Www4M~i\"w.Mrg");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("Zn`P|*iR/n");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P|*iR/n", true);
      try { 
        jSONObject0.getString("Zn`P|*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("y^i", "y^i");
      try { 
        jSONObject0.getLong("y^i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("3<", "3<");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("{l57t_v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      String string0 = "org.json.JSONException";
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] is not an enum of type java.io.StringWriter@0000000004.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.quote("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("] isFnot a numnRer.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-21));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -21
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      int int0 = (-1929);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1929));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1929
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
